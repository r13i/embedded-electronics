

Microchip Technology PIC LITE Macro Assembler V1.40 build -251452761 
                                                                                               Thu Feb 02 11:30:09 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	16F88
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	maintext,global,class=CODE,split=1,delta=2
    10                           	psect	text1,local,class=CODE,merge=1,delta=2
    11                           	psect	text2,local,class=CODE,merge=1,delta=2
    12                           	psect	text3,local,class=CODE,merge=1,delta=2
    13                           	psect	text4,local,class=CODE,merge=1,delta=2
    14                           	psect	text5,local,class=CODE,merge=1,delta=2
    15                           	psect	text6,local,class=CODE,merge=1,delta=2
    16                           	psect	intentry,global,class=CODE,delta=2
    17                           	dabs	1,0x7E,2
    18  0000                     
    19                           ; Version 1.40
    20                           ; Generated 01/12/2016 GMT
    21                           ; 
    22                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    23                           ; All rights reserved.
    24                           ; 
    25                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    26                           ; 
    27                           ; Redistribution and use in source and binary forms, with or without modification, are
    28                           ; permitted provided that the following conditions are met:
    29                           ; 
    30                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    31                           ;        conditions and the following disclaimer.
    32                           ; 
    33                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    34                           ;        of conditions and the following disclaimer in the documentation and/or other
    35                           ;        materials provided with the distribution.
    36                           ; 
    37                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    38                           ;        software without specific prior written permission.
    39                           ; 
    40                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    41                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    42                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    43                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    44                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    45                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    46                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    47                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    48                           ; 
    49                           ; 
    50                           ; Code-generator required, PIC16F88 Definitions
    51                           ; 
    52                           ; SFR Addresses
    53  0000                     	;# 
    54  0001                     	;# 
    55  0002                     	;# 
    56  0003                     	;# 
    57  0004                     	;# 
    58  0005                     	;# 
    59  0006                     	;# 
    60  000A                     	;# 
    61  000B                     	;# 
    62  000C                     	;# 
    63  000D                     	;# 
    64  000E                     	;# 
    65  000E                     	;# 
    66  000F                     	;# 
    67  0010                     	;# 
    68  0011                     	;# 
    69  0012                     	;# 
    70  0013                     	;# 
    71  0014                     	;# 
    72  0015                     	;# 
    73  0015                     	;# 
    74  0016                     	;# 
    75  0017                     	;# 
    76  0018                     	;# 
    77  0019                     	;# 
    78  001A                     	;# 
    79  001E                     	;# 
    80  001F                     	;# 
    81  0081                     	;# 
    82  0085                     	;# 
    83  0086                     	;# 
    84  008C                     	;# 
    85  008D                     	;# 
    86  008E                     	;# 
    87  008F                     	;# 
    88  0090                     	;# 
    89  0092                     	;# 
    90  0093                     	;# 
    91  0094                     	;# 
    92  0098                     	;# 
    93  0099                     	;# 
    94  009B                     	;# 
    95  009C                     	;# 
    96  009D                     	;# 
    97  009E                     	;# 
    98  009F                     	;# 
    99  0105                     	;# 
   100  010C                     	;# 
   101  010D                     	;# 
   102  010E                     	;# 
   103  010F                     	;# 
   104  018C                     	;# 
   105  018D                     	;# 
   106  0015                     _CCPR1L	set	21
   107  0006                     _PORTB	set	6
   108  0001                     _TMR0	set	1
   109  0011                     _TMR2	set	17
   110  00BA                     _CCP1M2	set	186
   111  00BB                     _CCP1M3	set	187
   112  00BD                     _CCP1X	set	189
   113  00BC                     _CCP1Y	set	188
   114  005F                     _GIE	set	95
   115  0031                     _RB1	set	49
   116  0090                     _T2CKPS0	set	144
   117  0091                     _T2CKPS1	set	145
   118  005D                     _TMR0IE	set	93
   119  005A                     _TMR0IF	set	90
   120  0092                     _TMR2ON	set	146
   121  0092                     _PR2	set	146
   122  0086                     _TRISB	set	134
   123  0408                     _PS0	set	1032
   124  0409                     _PS1	set	1033
   125  040A                     _PS2	set	1034
   126  040B                     _PSA	set	1035
   127  040D                     _T0CS	set	1037
   128                           
   129                           ; #config settings
   130  0000                     
   131                           	psect	cinit
   132  0013                     start_initialization:	
   133  0013                     __initialization:	
   134                           
   135                           ; Clear objects allocated to COMMON
   136  0013  01F7               	clrf	__pbssCOMMON& (0+127)
   137  0014  01F8               	clrf	(__pbssCOMMON+1)& (0+127)
   138                           
   139                           ; Clear objects allocated to BANK0
   140  0015  01AE               	clrf	__pbssBANK0& (0+127)
   141  0016                     end_of_initialization:	
   142                           ;End of C runtime variable initialization code
   143                           
   144  0016                     __end_of__initialization:	
   145  0016  0183               	clrf	3
   146  0017  118A  2819         	ljmp	_main	;jump to C main() function
   147                           
   148                           	psect	bssCOMMON
   149  0077                     __pbssCOMMON:	
   150  0077                     _PWM_freq:	
   151  0077                     	ds	2
   152                           
   153                           	psect	bssBANK0
   154  002E                     __pbssBANK0:	
   155  002E                     _count:	
   156  002E                     	ds	1
   157                           
   158                           	psect	cstackCOMMON
   159  0070                     __pcstackCOMMON:	
   160  0070                     ?_PWM_start:	
   161  0070                     ?_PWM_stop:	
   162                           ; 1 bytes @ 0x0
   163                           
   164  0070                     ?_my_ISR:	
   165                           ; 1 bytes @ 0x0
   166                           
   167  0070                     ??_my_ISR:	
   168                           ; 1 bytes @ 0x0
   169                           
   170  0070                     ?_main:	
   171                           ; 1 bytes @ 0x0
   172                           
   173                           
   174                           ; 1 bytes @ 0x0
   175  0070                     	ds	5
   176  0075                     ?_PWM_init:	
   177  0075                     ??_PWM_start:	
   178                           ; 1 bytes @ 0x5
   179                           
   180  0075                     ??_PWM_stop:	
   181                           ; 1 bytes @ 0x5
   182                           
   183  0075                     ??___awdiv:	
   184                           ; 1 bytes @ 0x5
   185                           
   186  0075                     PWM_init@tmr2_prescal:	
   187                           ; 1 bytes @ 0x5
   188                           
   189                           
   190                           ; 1 bytes @ 0x5
   191  0075                     	ds	1
   192  0076                     ??_PWM_init:	
   193  0076                     ??_PWM_set_duty:	
   194                           ; 1 bytes @ 0x6
   195                           
   196  0076                     PWM_init@pr2_val:	
   197                           ; 1 bytes @ 0x6
   198                           
   199                           
   200                           ; 1 bytes @ 0x6
   201  0076                     	ds	1
   202                           
   203                           	psect	cstackBANK0
   204  0020                     __pcstackBANK0:	
   205  0020                     ?___awdiv:	
   206  0020                     ___awdiv@divisor:	
   207                           ; 2 bytes @ 0x0
   208                           
   209                           
   210                           ; 2 bytes @ 0x0
   211  0020                     	ds	2
   212  0022                     ___awdiv@dividend:	
   213                           
   214                           ; 2 bytes @ 0x2
   215  0022                     	ds	2
   216  0024                     ___awdiv@counter:	
   217                           
   218                           ; 1 bytes @ 0x4
   219  0024                     	ds	1
   220  0025                     ___awdiv@sign:	
   221                           
   222                           ; 1 bytes @ 0x5
   223  0025                     	ds	1
   224  0026                     ___awdiv@quotient:	
   225                           
   226                           ; 2 bytes @ 0x6
   227  0026                     	ds	2
   228  0028                     ?_PWM_set_duty:	
   229  0028                     PWM_set_duty@duty_c:	
   230                           ; 1 bytes @ 0x8
   231                           
   232                           
   233                           ; 2 bytes @ 0x8
   234  0028                     	ds	2
   235  002A                     ??_main:	
   236                           
   237                           ; 1 bytes @ 0xA
   238  002A                     	ds	2
   239  002C                     main@duty_c:	
   240                           
   241                           ; 2 bytes @ 0xC
   242  002C                     	ds	2
   243                           
   244                           	psect	maintext
   245  0019                     __pmaintext:	
   246 ;;
   247 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   248 ;;
   249 ;; *************** function _main *****************
   250 ;; Defined at:
   251 ;;		line 33 in file "main.c"
   252 ;; Parameters:    Size  Location     Type
   253 ;;		None
   254 ;; Auto vars:     Size  Location     Type
   255 ;;  duty_c          2   12[BANK0 ] short 
   256 ;; Return value:  Size  Location     Type
   257 ;;                  1    wreg      void 
   258 ;; Registers used:
   259 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   260 ;; Tracked objects:
   261 ;;		On entry : B00/0
   262 ;;		On exit  : 0/0
   263 ;;		Unchanged: 0/0
   264 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   265 ;;      Params:         0       0       0       0       0
   266 ;;      Locals:         0       2       0       0       0
   267 ;;      Temps:          0       2       0       0       0
   268 ;;      Totals:         0       4       0       0       0
   269 ;;Total ram usage:        4 bytes
   270 ;; Hardware stack levels required when called:    3
   271 ;; This function calls:
   272 ;;		_PWM_init
   273 ;;		_PWM_set_duty
   274 ;;		_PWM_start
   275 ;;		_PWM_stop
   276 ;; This function is called by:
   277 ;;		Startup code after reset
   278 ;; This function uses a non-reentrant model
   279 ;;
   280                           
   281                           
   282                           ;psect for function _main
   283  0019                     _main:	
   284                           
   285                           ;main.c: 34: PWM_init( 255, 1 );
   286                           
   287                           ;incstack = 0
   288                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   289  0019  01F5               	clrf	PWM_init@tmr2_prescal
   290  001A  0AF5               	incf	PWM_init@tmr2_prescal,f
   291  001B  30FF               	movlw	255
   292  001C  118A  20FF  118A   	fcall	_PWM_init
   293                           
   294                           ;main.c: 35: PWM_set_duty( 0 );
   295  001F  3000               	movlw	0
   296  0020  1283               	bcf	3,5	;RP0=0, select bank0
   297  0021  1303               	bcf	3,6	;RP1=0, select bank0
   298  0022  00A8               	movwf	PWM_set_duty@duty_c
   299  0023  00A9               	movwf	PWM_set_duty@duty_c+1
   300  0024  118A  20CF  118A   	fcall	_PWM_set_duty
   301                           
   302                           ;main.c: 37: TRISB = PORTB = 0;
   303  0027  1283               	bcf	3,5	;RP0=0, select bank0
   304  0028  1303               	bcf	3,6	;RP1=0, select bank0
   305  0029  0186               	clrf	6	;volatile
   306  002A  1683               	bsf	3,5	;RP0=1, select bank1
   307  002B  1303               	bcf	3,6	;RP1=0, select bank1
   308  002C  0186               	clrf	6	;volatile
   309                           
   310                           ;main.c: 39: TMR0 = 0;
   311  002D  1283               	bcf	3,5	;RP0=0, select bank0
   312  002E  1303               	bcf	3,6	;RP1=0, select bank0
   313  002F  0181               	clrf	1	;volatile
   314                           
   315                           ;main.c: 40: T0CS = PSA = 0;
   316  0030  1683               	bsf	3,5	;RP0=1, select bank1
   317  0031  1303               	bcf	3,6	;RP1=0, select bank1
   318  0032  1181               	bcf	1,3	;volatile
   319  0033  1281               	bcf	1,5	;volatile
   320                           
   321                           ;main.c: 41: PS0 = PS1 = PS2 = 1;
   322  0034  1501               	bsf	1,2	;volatile
   323  0035  1D01               	btfss	1,2	;volatile
   324  0036  283B               	goto	u650
   325  0037  1683               	bsf	3,5	;RP0=1, select bank1
   326  0038  1303               	bcf	3,6	;RP1=0, select bank1
   327  0039  1481               	bsf	1,1	;volatile
   328  003A  283E               	goto	u664
   329  003B                     u650:	
   330  003B  1683               	bsf	3,5	;RP0=1, select bank1
   331  003C  1303               	bcf	3,6	;RP1=0, select bank1
   332  003D  1081               	bcf	1,1	;volatile
   333  003E                     u664:	
   334  003E  1C81               	btfss	1,1	;volatile
   335  003F  2844               	goto	u660
   336  0040  1683               	bsf	3,5	;RP0=1, select bank1
   337  0041  1303               	bcf	3,6	;RP1=0, select bank1
   338  0042  1401               	bsf	1,0	;volatile
   339  0043  2847               	goto	l792
   340  0044                     u660:	
   341  0044  1683               	bsf	3,5	;RP0=1, select bank1
   342  0045  1303               	bcf	3,6	;RP1=0, select bank1
   343  0046  1001               	bcf	1,0	;volatile
   344  0047                     l792:	
   345                           
   346                           ;main.c: 42: TMR0IE = GIE = 1;
   347  0047  178B               	bsf	11,7	;volatile
   348  0048  1F8B               	btfss	11,7	;volatile
   349  0049  284C               	goto	u680
   350  004A  168B               	bsf	11,5	;volatile
   351  004B  284D               	goto	l794
   352  004C                     u680:	
   353  004C  128B               	bcf	11,5	;volatile
   354  004D                     l794:	
   355                           
   356                           ;main.c: 43: TMR0IF = 0;
   357  004D  110B               	bcf	11,2	;volatile
   358                           
   359                           ;main.c: 45: PWM_start();
   360  004E  118A  214B  118A   	fcall	_PWM_start
   361                           
   362                           ;main.c: 47: short duty_c=0;
   363  0051  1283               	bcf	3,5	;RP0=0, select bank0
   364  0052  1303               	bcf	3,6	;RP1=0, select bank0
   365  0053  01AC               	clrf	main@duty_c
   366  0054  01AD               	clrf	main@duty_c+1
   367  0055                     l800:	
   368                           ;main.c: 49: while(1)
   369                           
   370                           
   371                           ;main.c: 50: {
   372                           ;main.c: 51: if( count == 61 )
   373  0055  303D               	movlw	61
   374  0056  1283               	bcf	3,5	;RP0=0, select bank0
   375  0057  1303               	bcf	3,6	;RP1=0, select bank0
   376  0058  062E               	xorwf	_count,w
   377  0059  1D03               	btfss	3,2
   378  005A  2855               	goto	l800
   379                           
   380                           ;main.c: 52: {
   381                           ;main.c: 53: count = 0;
   382  005B  01AE               	clrf	_count
   383                           
   384                           ;main.c: 55: RB1 = ~RB1;
   385  005C  3002               	movlw	2
   386  005D  0686               	xorwf	6,f
   387                           
   388                           ;main.c: 57: duty_c = ( duty_c + 128 ) % 1024;
   389  005E  082C               	movf	main@duty_c,w
   390  005F  3E80               	addlw	128
   391  0060  00AA               	movwf	??_main
   392  0061  082D               	movf	main@duty_c+1,w
   393  0062  1803               	skipnc
   394  0063  3E01               	addlw	1
   395  0064  3E00               	addlw	0
   396  0065  00AB               	movwf	??_main+1
   397  0066  30FF               	movlw	255
   398  0067  052A               	andwf	??_main,w
   399  0068  00AC               	movwf	main@duty_c
   400  0069  3003               	movlw	3
   401  006A  052B               	andwf	??_main+1,w
   402  006B  00AD               	movwf	main@duty_c+1
   403                           
   404                           ;main.c: 58: PWM_set_duty( duty_c );
   405  006C  082D               	movf	main@duty_c+1,w
   406  006D  00A9               	movwf	PWM_set_duty@duty_c+1
   407  006E  082C               	movf	main@duty_c,w
   408  006F  00A8               	movwf	PWM_set_duty@duty_c
   409  0070  118A  20CF  118A   	fcall	_PWM_set_duty
   410  0073  2855               	goto	l800
   411  0074                     __end_of_main:	
   412                           ;main.c: 63: return;
   413                           
   414                           ;main.c: 59: }
   415                           ;main.c: 60: }
   416                           ;main.c: 62: PWM_stop();
   417                           
   418                           
   419                           	psect	text1
   420  0147                     __ptext1:	
   421 ;; *************** function _PWM_stop *****************
   422 ;; Defined at:
   423 ;;		line 47 in file "my_PWM_16F88.h"
   424 ;; Parameters:    Size  Location     Type
   425 ;;		None
   426 ;; Auto vars:     Size  Location     Type
   427 ;;		None
   428 ;; Return value:  Size  Location     Type
   429 ;;                  1    wreg      void 
   430 ;; Registers used:
   431 ;;		status,2
   432 ;; Tracked objects:
   433 ;;		On entry : 0/0
   434 ;;		On exit  : 0/0
   435 ;;		Unchanged: 0/0
   436 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   437 ;;      Params:         0       0       0       0       0
   438 ;;      Locals:         0       0       0       0       0
   439 ;;      Temps:          0       0       0       0       0
   440 ;;      Totals:         0       0       0       0       0
   441 ;;Total ram usage:        0 bytes
   442 ;; Hardware stack levels used:    1
   443 ;; Hardware stack levels required when called:    1
   444 ;; This function calls:
   445 ;;		Nothing
   446 ;; This function is called by:
   447 ;;		_main
   448 ;; This function uses a non-reentrant model
   449 ;;
   450                           
   451                           
   452                           ;psect for function _PWM_stop
   453  0147                     _PWM_stop:	
   454                           
   455                           ;my_PWM_16F88.h: 49: TMR2 = 0;
   456                           
   457                           ;incstack = 0
   458                           ; Regs used in _PWM_stop: [status,2]
   459  0147  1283               	bcf	3,5	;RP0=0, select bank0
   460  0148  1303               	bcf	3,6	;RP1=0, select bank0
   461  0149  0191               	clrf	17	;volatile
   462  014A  0008               	return
   463  014B                     __end_of_PWM_stop:	
   464                           
   465                           	psect	text2
   466  014B                     __ptext2:	
   467 ;; *************** function _PWM_start *****************
   468 ;; Defined at:
   469 ;;		line 42 in file "my_PWM_16F88.h"
   470 ;; Parameters:    Size  Location     Type
   471 ;;		None
   472 ;; Auto vars:     Size  Location     Type
   473 ;;		None
   474 ;; Return value:  Size  Location     Type
   475 ;;                  1    wreg      void 
   476 ;; Registers used:
   477 ;;		None
   478 ;; Tracked objects:
   479 ;;		On entry : 0/0
   480 ;;		On exit  : 0/0
   481 ;;		Unchanged: 0/0
   482 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   483 ;;      Params:         0       0       0       0       0
   484 ;;      Locals:         0       0       0       0       0
   485 ;;      Temps:          0       0       0       0       0
   486 ;;      Totals:         0       0       0       0       0
   487 ;;Total ram usage:        0 bytes
   488 ;; Hardware stack levels used:    1
   489 ;; Hardware stack levels required when called:    1
   490 ;; This function calls:
   491 ;;		Nothing
   492 ;; This function is called by:
   493 ;;		_main
   494 ;; This function uses a non-reentrant model
   495 ;;
   496                           
   497                           
   498                           ;psect for function _PWM_start
   499  014B                     _PWM_start:	
   500                           
   501                           ;my_PWM_16F88.h: 44: TMR2ON = 1;
   502                           
   503                           ;incstack = 0
   504                           ; Regs used in _PWM_start: []
   505  014B  1283               	bcf	3,5	;RP0=0, select bank0
   506  014C  1303               	bcf	3,6	;RP1=0, select bank0
   507  014D  1512               	bsf	18,2	;volatile
   508  014E  0008               	return
   509  014F                     __end_of_PWM_start:	
   510                           
   511                           	psect	text3
   512  00CF                     __ptext3:	
   513 ;; *************** function _PWM_set_duty *****************
   514 ;; Defined at:
   515 ;;		line 34 in file "my_PWM_16F88.h"
   516 ;; Parameters:    Size  Location     Type
   517 ;;  duty_c          2    8[BANK0 ] short 
   518 ;; Auto vars:     Size  Location     Type
   519 ;;		None
   520 ;; Return value:  Size  Location     Type
   521 ;;                  1    wreg      void 
   522 ;; Registers used:
   523 ;;		wreg, status,2, status,0, pclath, cstack
   524 ;; Tracked objects:
   525 ;;		On entry : 0/0
   526 ;;		On exit  : 0/0
   527 ;;		Unchanged: 0/0
   528 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   529 ;;      Params:         0       2       0       0       0
   530 ;;      Locals:         0       0       0       0       0
   531 ;;      Temps:          0       0       0       0       0
   532 ;;      Totals:         0       2       0       0       0
   533 ;;Total ram usage:        2 bytes
   534 ;; Hardware stack levels used:    1
   535 ;; Hardware stack levels required when called:    2
   536 ;; This function calls:
   537 ;;		___awdiv
   538 ;; This function is called by:
   539 ;;		_main
   540 ;; This function uses a non-reentrant model
   541 ;;
   542                           
   543                           
   544                           ;psect for function _PWM_set_duty
   545  00CF                     _PWM_set_duty:	
   546                           
   547                           ;my_PWM_16F88.h: 37: CCP1Y = duty_c % 2;
   548                           
   549                           ;incstack = 0
   550                           ; Regs used in _PWM_set_duty: [wreg+status,2+status,0+pclath+cstack]
   551  00CF  1283               	bcf	3,5	;RP0=0, select bank0
   552  00D0  1303               	bcf	3,6	;RP1=0, select bank0
   553  00D1  1C28               	btfss	PWM_set_duty@duty_c,0
   554  00D2  28D7               	goto	u610
   555  00D3  1283               	bcf	3,5	;RP0=0, select bank0
   556  00D4  1303               	bcf	3,6	;RP1=0, select bank0
   557  00D5  1617               	bsf	23,4	;volatile
   558  00D6  28DA               	goto	l778
   559  00D7                     u610:	
   560  00D7  1283               	bcf	3,5	;RP0=0, select bank0
   561  00D8  1303               	bcf	3,6	;RP1=0, select bank0
   562  00D9  1217               	bcf	23,4	;volatile
   563  00DA                     l778:	
   564                           
   565                           ;my_PWM_16F88.h: 38: CCP1X = ( duty_c/2 ) % 2;
   566  00DA  3002               	movlw	2
   567  00DB  00A0               	movwf	___awdiv@divisor
   568  00DC  3000               	movlw	0
   569  00DD  00A1               	movwf	___awdiv@divisor+1
   570  00DE  0829               	movf	PWM_set_duty@duty_c+1,w
   571  00DF  00A3               	movwf	___awdiv@dividend+1
   572  00E0  0828               	movf	PWM_set_duty@duty_c,w
   573  00E1  00A2               	movwf	___awdiv@dividend
   574  00E2  118A  2074  118A   	fcall	___awdiv
   575  00E5  1283               	bcf	3,5	;RP0=0, select bank0
   576  00E6  1303               	bcf	3,6	;RP1=0, select bank0
   577  00E7  1C20               	btfss	?___awdiv,0
   578  00E8  28ED               	goto	u630
   579  00E9  1283               	bcf	3,5	;RP0=0, select bank0
   580  00EA  1303               	bcf	3,6	;RP1=0, select bank0
   581  00EB  1697               	bsf	23,5	;volatile
   582  00EC  28F0               	goto	u644
   583  00ED                     u630:	
   584  00ED  1283               	bcf	3,5	;RP0=0, select bank0
   585  00EE  1303               	bcf	3,6	;RP1=0, select bank0
   586  00EF  1297               	bcf	23,5	;volatile
   587  00F0                     u644:	
   588                           
   589                           ;my_PWM_16F88.h: 39: CCPR1L = duty_c / 4;
   590  00F0  3004               	movlw	4
   591  00F1  00A0               	movwf	___awdiv@divisor
   592  00F2  3000               	movlw	0
   593  00F3  00A1               	movwf	___awdiv@divisor+1
   594  00F4  0829               	movf	PWM_set_duty@duty_c+1,w
   595  00F5  00A3               	movwf	___awdiv@dividend+1
   596  00F6  0828               	movf	PWM_set_duty@duty_c,w
   597  00F7  00A2               	movwf	___awdiv@dividend
   598  00F8  118A  2074         	fcall	___awdiv
   599  00FA  1283               	bcf	3,5	;RP0=0, select bank0
   600  00FB  1303               	bcf	3,6	;RP1=0, select bank0
   601  00FC  0820               	movf	?___awdiv,w
   602  00FD  0095               	movwf	21	;volatile
   603  00FE  0008               	return
   604  00FF                     __end_of_PWM_set_duty:	
   605                           
   606                           	psect	text4
   607  0074                     __ptext4:	
   608 ;; *************** function ___awdiv *****************
   609 ;; Defined at:
   610 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
   611 ;; Parameters:    Size  Location     Type
   612 ;;  divisor         2    0[BANK0 ] int 
   613 ;;  dividend        2    2[BANK0 ] int 
   614 ;; Auto vars:     Size  Location     Type
   615 ;;  quotient        2    6[BANK0 ] int 
   616 ;;  sign            1    5[BANK0 ] unsigned char 
   617 ;;  counter         1    4[BANK0 ] unsigned char 
   618 ;; Return value:  Size  Location     Type
   619 ;;                  2    0[BANK0 ] int 
   620 ;; Registers used:
   621 ;;		wreg, status,2, status,0
   622 ;; Tracked objects:
   623 ;;		On entry : 0/0
   624 ;;		On exit  : 0/0
   625 ;;		Unchanged: 0/0
   626 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   627 ;;      Params:         0       4       0       0       0
   628 ;;      Locals:         0       4       0       0       0
   629 ;;      Temps:          1       0       0       0       0
   630 ;;      Totals:         1       8       0       0       0
   631 ;;Total ram usage:        9 bytes
   632 ;; Hardware stack levels used:    1
   633 ;; Hardware stack levels required when called:    1
   634 ;; This function calls:
   635 ;;		Nothing
   636 ;; This function is called by:
   637 ;;		_PWM_set_duty
   638 ;; This function uses a non-reentrant model
   639 ;;
   640                           
   641                           
   642                           ;psect for function ___awdiv
   643  0074                     ___awdiv:	
   644                           
   645                           ;incstack = 0
   646                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
   647  0074  1283               	bcf	3,5	;RP0=0, select bank0
   648  0075  1303               	bcf	3,6	;RP1=0, select bank0
   649  0076  01A5               	clrf	___awdiv@sign
   650  0077  1FA1               	btfss	___awdiv@divisor+1,7
   651  0078  2880               	goto	l740
   652  0079  09A0               	comf	___awdiv@divisor,f
   653  007A  09A1               	comf	___awdiv@divisor+1,f
   654  007B  0AA0               	incf	___awdiv@divisor,f
   655  007C  1903               	skipnz
   656  007D  0AA1               	incf	___awdiv@divisor+1,f
   657  007E  01A5               	clrf	___awdiv@sign
   658  007F  0AA5               	incf	___awdiv@sign,f
   659  0080                     l740:	
   660  0080  1FA3               	btfss	___awdiv@dividend+1,7
   661  0081  288B               	goto	l746
   662  0082  09A2               	comf	___awdiv@dividend,f
   663  0083  09A3               	comf	___awdiv@dividend+1,f
   664  0084  0AA2               	incf	___awdiv@dividend,f
   665  0085  1903               	skipnz
   666  0086  0AA3               	incf	___awdiv@dividend+1,f
   667  0087  3001               	movlw	1
   668  0088  00F5               	movwf	??___awdiv
   669  0089  0875               	movf	??___awdiv,w
   670  008A  06A5               	xorwf	___awdiv@sign,f
   671  008B                     l746:	
   672  008B  01A6               	clrf	___awdiv@quotient
   673  008C  01A7               	clrf	___awdiv@quotient+1
   674  008D  0820               	movf	___awdiv@divisor,w
   675  008E  0421               	iorwf	___awdiv@divisor+1,w
   676  008F  1903               	btfsc	3,2
   677  0090  28C2               	goto	l768
   678  0091  01A4               	clrf	___awdiv@counter
   679  0092  0AA4               	incf	___awdiv@counter,f
   680  0093                     l756:	
   681  0093  1BA1               	btfsc	___awdiv@divisor+1,7
   682  0094  28A1               	goto	l758
   683  0095  3001               	movlw	1
   684  0096                     u545:	
   685  0096  1003               	clrc
   686  0097  0DA0               	rlf	___awdiv@divisor,f
   687  0098  0DA1               	rlf	___awdiv@divisor+1,f
   688  0099  3EFF               	addlw	-1
   689  009A  1D03               	skipz
   690  009B  2896               	goto	u545
   691  009C  3001               	movlw	1
   692  009D  00F5               	movwf	??___awdiv
   693  009E  0875               	movf	??___awdiv,w
   694  009F  07A4               	addwf	___awdiv@counter,f
   695  00A0  2893               	goto	l756
   696  00A1                     l758:	
   697  00A1  3001               	movlw	1
   698  00A2                     u565:	
   699  00A2  1003               	clrc
   700  00A3  0DA6               	rlf	___awdiv@quotient,f
   701  00A4  0DA7               	rlf	___awdiv@quotient+1,f
   702  00A5  3EFF               	addlw	-1
   703  00A6  1D03               	skipz
   704  00A7  28A2               	goto	u565
   705  00A8  0821               	movf	___awdiv@divisor+1,w
   706  00A9  0223               	subwf	___awdiv@dividend+1,w
   707  00AA  1D03               	skipz
   708  00AB  28AE               	goto	u575
   709  00AC  0820               	movf	___awdiv@divisor,w
   710  00AD  0222               	subwf	___awdiv@dividend,w
   711  00AE                     u575:	
   712  00AE  1C03               	skipc
   713  00AF  28B7               	goto	l764
   714  00B0  0820               	movf	___awdiv@divisor,w
   715  00B1  02A2               	subwf	___awdiv@dividend,f
   716  00B2  0821               	movf	___awdiv@divisor+1,w
   717  00B3  1C03               	skipc
   718  00B4  03A3               	decf	___awdiv@dividend+1,f
   719  00B5  02A3               	subwf	___awdiv@dividend+1,f
   720  00B6  1426               	bsf	___awdiv@quotient,0
   721  00B7                     l764:	
   722  00B7  3001               	movlw	1
   723  00B8                     u585:	
   724  00B8  1003               	clrc
   725  00B9  0CA1               	rrf	___awdiv@divisor+1,f
   726  00BA  0CA0               	rrf	___awdiv@divisor,f
   727  00BB  3EFF               	addlw	-1
   728  00BC  1D03               	skipz
   729  00BD  28B8               	goto	u585
   730  00BE  3001               	movlw	1
   731  00BF  02A4               	subwf	___awdiv@counter,f
   732  00C0  1D03               	btfss	3,2
   733  00C1  28A1               	goto	l758
   734  00C2                     l768:	
   735  00C2  0825               	movf	___awdiv@sign,w
   736  00C3  1903               	btfsc	3,2
   737  00C4  28CA               	goto	l772
   738  00C5  09A6               	comf	___awdiv@quotient,f
   739  00C6  09A7               	comf	___awdiv@quotient+1,f
   740  00C7  0AA6               	incf	___awdiv@quotient,f
   741  00C8  1903               	skipnz
   742  00C9  0AA7               	incf	___awdiv@quotient+1,f
   743  00CA                     l772:	
   744  00CA  0827               	movf	___awdiv@quotient+1,w
   745  00CB  00A1               	movwf	?___awdiv+1
   746  00CC  0826               	movf	___awdiv@quotient,w
   747  00CD  00A0               	movwf	?___awdiv
   748  00CE  0008               	return
   749  00CF                     __end_of___awdiv:	
   750                           
   751                           	psect	text5
   752  00FF                     __ptext5:	
   753 ;; *************** function _PWM_init *****************
   754 ;; Defined at:
   755 ;;		line 10 in file "my_PWM_16F88.h"
   756 ;; Parameters:    Size  Location     Type
   757 ;;  pr2_val         1    wreg     unsigned char 
   758 ;;  tmr2_prescal    1    5[COMMON] unsigned char 
   759 ;; Auto vars:     Size  Location     Type
   760 ;;  pr2_val         1    6[COMMON] unsigned char 
   761 ;; Return value:  Size  Location     Type
   762 ;;                  1    wreg      void 
   763 ;; Registers used:
   764 ;;		wreg, fsr0l, fsr0h, status,2, status,0
   765 ;; Tracked objects:
   766 ;;		On entry : 0/0
   767 ;;		On exit  : 0/0
   768 ;;		Unchanged: 0/0
   769 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   770 ;;      Params:         1       0       0       0       0
   771 ;;      Locals:         1       0       0       0       0
   772 ;;      Temps:          0       0       0       0       0
   773 ;;      Totals:         2       0       0       0       0
   774 ;;Total ram usage:        2 bytes
   775 ;; Hardware stack levels used:    1
   776 ;; Hardware stack levels required when called:    1
   777 ;; This function calls:
   778 ;;		Nothing
   779 ;; This function is called by:
   780 ;;		_main
   781 ;; This function uses a non-reentrant model
   782 ;;
   783                           
   784                           
   785                           ;psect for function _PWM_init
   786  00FF                     _PWM_init:	
   787                           
   788                           ;incstack = 0
   789                           ; Regs used in _PWM_init: [wreg-fsr0h+status,2+status,0]
   790                           ;PWM_init@pr2_val stored from wreg
   791  00FF  00F6               	movwf	PWM_init@pr2_val
   792                           
   793                           ;my_PWM_16F88.h: 15: PR2 = pr2_val;
   794  0100  0876               	movf	PWM_init@pr2_val,w
   795  0101  1683               	bsf	3,5	;RP0=1, select bank1
   796  0102  1303               	bcf	3,6	;RP1=0, select bank1
   797  0103  0092               	movwf	18	;volatile
   798                           
   799                           ;my_PWM_16F88.h: 16: switch( tmr2_prescal )
   800  0104  2918               	goto	l682
   801  0105                     l50:	
   802                           ;my_PWM_16F88.h: 17: {
   803                           ;my_PWM_16F88.h: 18: case 1:
   804                           
   805                           
   806                           ;my_PWM_16F88.h: 19: T2CKPS1 = T2CKPS0 = 0;
   807  0105  1283               	bcf	3,5	;RP0=0, select bank0
   808  0106  1012               	bcf	18,0	;volatile
   809  0107  2916               	goto	L1
   810  0108                     l52:	
   811                           ;my_PWM_16F88.h: 21: case 4:
   812                           
   813                           ;my_PWM_16F88.h: 20: break;
   814                           
   815                           
   816                           ;my_PWM_16F88.h: 22: T2CKPS1 = 0; T2CKPS0 = 1;
   817  0108  1283               	bcf	3,5	;RP0=0, select bank0
   818  0109  1092               	bcf	18,1	;volatile
   819  010A  1412               	bsf	18,0	;volatile
   820                           
   821                           ;my_PWM_16F88.h: 23: break;
   822  010B  2923               	goto	l51
   823  010C                     l53:	
   824                           ;my_PWM_16F88.h: 24: case 16:
   825                           
   826                           
   827                           ;my_PWM_16F88.h: 25: T2CKPS1 = T2CKPS0 = 1;
   828  010C  1283               	bcf	3,5	;RP0=0, select bank0
   829  010D  1412               	bsf	18,0	;volatile
   830  010E  1C12               	btfss	18,0	;volatile
   831  010F  2914               	goto	u360
   832  0110  1283               	bcf	3,5	;RP0=0, select bank0
   833  0111  1303               	bcf	3,6	;RP1=0, select bank0
   834  0112  1492               	bsf	18,1	;volatile
   835  0113  2923               	goto	l51
   836  0114                     u360:	
   837  0114  1283               	bcf	3,5	;RP0=0, select bank0
   838  0115  1303               	bcf	3,6	;RP1=0, select bank0
   839  0116                     L1:	
   840  0116  1092               	bcf	18,1	;volatile
   841                           
   842                           ;my_PWM_16F88.h: 27: }
   843                           
   844                           ;my_PWM_16F88.h: 26: break;
   845  0117  2923               	goto	l51
   846  0118                     l682:	
   847  0118  0875               	movf	PWM_init@tmr2_prescal,w
   848                           
   849                           ; Switch size 1, requested type "space"
   850                           ; Number of cases is 3, Range of values is 1 to 16
   851                           ; switch strategies available:
   852                           ; Name         Instructions Cycles
   853                           ; simple_byte           10     6 (average)
   854                           ; direct_byte           42    10 (fixed)
   855                           ; jumptable            263     9 (fixed)
   856                           ;	Chosen strategy is simple_byte
   857  0119  3A01               	xorlw	1	; case 1
   858  011A  1903               	skipnz
   859  011B  2905               	goto	l50
   860  011C  3A05               	xorlw	5	; case 4
   861  011D  1903               	skipnz
   862  011E  2908               	goto	l52
   863  011F  3A14               	xorlw	20	; case 16
   864  0120  1903               	skipnz
   865  0121  290C               	goto	l53
   866  0122  2923               	goto	l51
   867  0123                     l51:	
   868                           
   869                           ;my_PWM_16F88.h: 31: CCP1M3 = CCP1M2 = 1;
   870  0123  1283               	bcf	3,5	;RP0=0, select bank0
   871  0124  1517               	bsf	23,2	;volatile
   872  0125  1D17               	btfss	23,2	;volatile
   873  0126  292B               	goto	u380
   874  0127  1283               	bcf	3,5	;RP0=0, select bank0
   875  0128  1303               	bcf	3,6	;RP1=0, select bank0
   876  0129  1597               	bsf	23,3	;volatile
   877  012A  0008               	return
   878  012B                     u380:	
   879  012B  1283               	bcf	3,5	;RP0=0, select bank0
   880  012C  1303               	bcf	3,6	;RP1=0, select bank0
   881  012D  1197               	bcf	23,3	;volatile
   882  012E  0008               	return
   883  012F                     __end_of_PWM_init:	
   884                           
   885                           	psect	text6
   886  012F                     __ptext6:	
   887 ;; *************** function _my_ISR *****************
   888 ;; Defined at:
   889 ;;		line 24 in file "main.c"
   890 ;; Parameters:    Size  Location     Type
   891 ;;		None
   892 ;; Auto vars:     Size  Location     Type
   893 ;;		None
   894 ;; Return value:  Size  Location     Type
   895 ;;                  1    wreg      void 
   896 ;; Registers used:
   897 ;;		wreg, status,2, status,0
   898 ;; Tracked objects:
   899 ;;		On entry : 0/0
   900 ;;		On exit  : 0/0
   901 ;;		Unchanged: 0/0
   902 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   903 ;;      Params:         0       0       0       0       0
   904 ;;      Locals:         0       0       0       0       0
   905 ;;      Temps:          5       0       0       0       0
   906 ;;      Totals:         5       0       0       0       0
   907 ;;Total ram usage:        5 bytes
   908 ;; Hardware stack levels used:    1
   909 ;; This function calls:
   910 ;;		Nothing
   911 ;; This function is called by:
   912 ;;		Interrupt level 1
   913 ;; This function uses a non-reentrant model
   914 ;;
   915                           
   916                           
   917                           ;psect for function _my_ISR
   918  012F                     _my_ISR:	
   919                           
   920                           ;main.c: 26: if( TMR0IE & TMR0IF )
   921  012F  3001               	movlw	1
   922  0130  1E8B               	btfss	11,5	;volatile
   923  0131  3900               	andlw	0
   924  0132  1D0B               	btfss	11,2	;volatile
   925  0133  3900               	andlw	0
   926  0134  3800               	iorlw	0
   927  0135  1903               	skipnz
   928  0136  293C               	goto	i1l69
   929                           
   930                           ;main.c: 27: {
   931                           ;main.c: 28: ++count;
   932  0137  3001               	movlw	1
   933  0138  00F0               	movwf	??_my_ISR
   934  0139  0870               	movf	??_my_ISR,w
   935  013A  07AE               	addwf	_count,f
   936                           
   937                           ;main.c: 29: TMR0IF = 0;
   938  013B  110B               	bcf	11,2	;volatile
   939  013C                     i1l69:	
   940  013C  0874               	movf	??_my_ISR+4,w
   941  013D  00FF               	movwf	127
   942  013E  0873               	movf	??_my_ISR+3,w
   943  013F  008A               	movwf	10
   944  0140  0872               	movf	??_my_ISR+2,w
   945  0141  0084               	movwf	4
   946  0142  0E71               	swapf	(??_my_ISR+1)^(0+-128),w
   947  0143  0083               	movwf	3
   948  0144  0EFE               	swapf	126,f
   949  0145  0E7E               	swapf	126,w
   950  0146  0009               	retfie
   951  0147                     __end_of_my_ISR:	
   952  007E                     btemp	set	126	;btemp
   953  007E                     wtemp0	set	126
   954                           
   955                           	psect	intentry
   956  0004                     __pintentry:	
   957                           ;incstack = 0
   958                           ; Regs used in _my_ISR: [wreg+status,2+status,0]
   959                           
   960  0004                     interrupt_function:	
   961  007E                     saved_w	set	btemp
   962  0004  00FE               	movwf	btemp
   963  0005  0E03               	swapf	3,w
   964  0006  00F1               	movwf	??_my_ISR+1
   965  0007  0804               	movf	4,w
   966  0008  00F2               	movwf	??_my_ISR+2
   967  0009  080A               	movf	10,w
   968  000A  00F3               	movwf	??_my_ISR+3
   969  000B  1283               	bcf	3,5	;RP0=0, select bank0
   970  000C  1303               	bcf	3,6	;RP1=0, select bank0
   971  000D  087F               	movf	btemp+1,w
   972  000E  00F4               	movwf	??_my_ISR+4
   973  000F  118A  292F         	ljmp	_my_ISR


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         3
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7       9
    BANK0            80     14      15
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_PWM_init
    _PWM_set_duty->___awdiv

Critical Paths under _my_ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_PWM_set_duty
    _PWM_set_duty->___awdiv

Critical Paths under _my_ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _my_ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _my_ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _my_ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0    1093
                                             10 BANK0      4     4      0
                           _PWM_init
                       _PWM_set_duty
                          _PWM_start
                           _PWM_stop
 ---------------------------------------------------------------------------------
 (1) _PWM_stop                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PWM_start                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PWM_set_duty                                         2     0      2     928
                                              8 BANK0      2     0      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4     705
                                              5 COMMON     1     1      0
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _PWM_init                                             2     1      1      97
                                              5 COMMON     2     1      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _my_ISR                                               5     5      0       0
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _PWM_init
   _PWM_set_duty
     ___awdiv
   _PWM_start
   _PWM_stop

 _my_ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      7       9       1       64.3%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      18       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      E       F       5       18.8%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      18      12        0.0%


Microchip Technology PIC Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Thu Feb 02 11:30:09 2017

            __CFG_CP$OFF 0000                       l50 0105                       l51 0123  
                     l52 0108                       l53 010C             ___awdiv@sign 0025  
                    l800 0055                      l740 0080                      l682 0118  
                    l746 008B                      l772 00CA                      l764 00B7  
                    l756 0093                      l758 00A1                      l768 00C2  
                    l792 0047                      l778 00DA                      l794 004D  
                    _GIE 005F                      _RB1 0031                      _PS0 0408  
                    _PR2 0092                      _PS1 0409                      u360 0114  
                    _PS2 040A                      u610 00D7             __CFG_CPD$OFF 0000  
                    u380 012B                      u630 00ED                      u545 0096  
                    u650 003B                      u644 00F0                      u660 0044  
                    u565 00A2                      u575 00AE                      _PSA 040B  
                    u680 004C                      u664 003E                      u585 00B8  
                    fsr0 0004             __CFG_IESO$ON 0000             __CFG_FOSC$HS 0000  
           __CFG_LVP$OFF 0000                     _T0CS 040D                     i1l69 013C  
                   _TMR0 0001                     _TMR2 0011             __CFG_WRT$OFF 0000  
          __CFG_FCMEN$ON 0000                     _main 0019                     btemp 007E  
          __CFG_BOREN$ON 0000                     start 0011            __CFG_MCLRE$ON 0000  
  __size_of_PWM_set_duty 0030                    ?_main 0070                    _CCP1X 00BD  
                  _CCP1Y 00BC          __end_of___awdiv 00CF            __CFG_WDTE$OFF 0000  
        ___awdiv@divisor 0020          ___awdiv@counter 0024                    _PORTB 0006  
                  _TRISB 0086           __CFG_CCPMX$RB0 0000                    _count 002E  
                  pclath 000A         __end_of_PWM_init 012F                    status 0003  
       __end_of_PWM_stop 014B                    wtemp0 007E             _PWM_set_duty 00CF  
        __initialization 0013       __size_of_PWM_start 0004             __end_of_main 0074  
                 ??_main 002A                   _CCP1M2 00BA                   _CCP1M3 00BB  
                 _CCPR1L 0015         ___awdiv@dividend 0022                   _TMR0IE 005D  
                 _TMR0IF 005A                   _TMR2ON 0092           __CFG_PWRTE$OFF 0000  
              ??___awdiv 0075                   _my_ISR 012F         ___awdiv@quotient 0026  
                 saved_w 007E        __end_of_PWM_start 014F  __end_of__initialization 0016  
         __pcstackCOMMON 0070                ?_PWM_init 0075                ?_PWM_stop 0070  
             __pbssBANK0 002E               __pmaintext 0019               __pintentry 0004  
                ?_my_ISR 0070                  _T2CKPS0 0090                  _T2CKPS1 0091  
             ??_PWM_init 0076               ??_PWM_stop 0075                  ___awdiv 0074  
        __size_of_my_ISR 0018                  __ptext1 0147                  __ptext2 014B  
                __ptext3 00CF                  __ptext4 0074                  __ptext5 00FF  
                __ptext6 012F     end_of_initialization 0016     PWM_init@tmr2_prescal 0075  
              _PWM_start 014B               main@duty_c 002C           __end_of_my_ISR 0147  
    start_initialization 0013        __size_of_PWM_init 0030       PWM_set_duty@duty_c 0028  
      __size_of_PWM_stop 0004               ?_PWM_start 0070                 ??_my_ISR 0070  
            __pbssCOMMON 0077                ___latbits 0001            __pcstackBANK0 0020  
          ?_PWM_set_duty 0028                 ?___awdiv 0020              ??_PWM_start 0075  
      interrupt_function 0004           ??_PWM_set_duty 0076                 _PWM_freq 0077  
               _PWM_init 00FF                 _PWM_stop 0147         __size_of___awdiv 005B  
          __size_of_main 005B     __end_of_PWM_set_duty 00FF          PWM_init@pr2_val 0076  
               intlevel1 0000  
