

Microchip Technology PIC LITE Macro Assembler V1.40 build -251452761 
                                                                                               Sun Apr 22 20:31:54 2018

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	16F88
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	maintext,global,class=CODE,split=1,delta=2
    10                           	psect	text1,local,class=CODE,merge=1,delta=2
    11                           	psect	text2,local,class=CODE,merge=1,delta=2
    12                           	psect	text3,local,class=CODE,merge=1,delta=2
    13                           	psect	text4,local,class=CODE,merge=1,delta=2
    14                           	psect	text5,local,class=CODE,merge=1,delta=2
    15                           	psect	text6,local,class=CODE,merge=1,delta=2
    16                           	psect	text7,local,class=CODE,merge=1,delta=2
    17                           	psect	text8,local,class=CODE,merge=1,delta=2
    18                           	psect	text9,local,class=CODE,merge=1,delta=2
    19                           	psect	text10,local,class=CODE,merge=1,delta=2
    20                           	psect	text11,local,class=CODE,merge=1,delta=2
    21                           	psect	text12,local,class=CODE,merge=1,delta=2
    22                           	psect	intentry,global,class=CODE,delta=2
    23                           	dabs	1,0x7E,2
    24  0000                     
    25                           ; Version 1.40
    26                           ; Generated 01/12/2016 GMT
    27                           ; 
    28                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    29                           ; All rights reserved.
    30                           ; 
    31                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    32                           ; 
    33                           ; Redistribution and use in source and binary forms, with or without modification, are
    34                           ; permitted provided that the following conditions are met:
    35                           ; 
    36                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    37                           ;        conditions and the following disclaimer.
    38                           ; 
    39                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    40                           ;        of conditions and the following disclaimer in the documentation and/or other
    41                           ;        materials provided with the distribution.
    42                           ; 
    43                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    44                           ;        software without specific prior written permission.
    45                           ; 
    46                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    47                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    48                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    49                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    50                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    51                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    52                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    53                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    54                           ; 
    55                           ; 
    56                           ; Code-generator required, PIC16F88 Definitions
    57                           ; 
    58                           ; SFR Addresses
    59  0000                     	;# 
    60  0001                     	;# 
    61  0002                     	;# 
    62  0003                     	;# 
    63  0004                     	;# 
    64  0005                     	;# 
    65  0006                     	;# 
    66  000A                     	;# 
    67  000B                     	;# 
    68  000C                     	;# 
    69  000D                     	;# 
    70  000E                     	;# 
    71  000E                     	;# 
    72  000F                     	;# 
    73  0010                     	;# 
    74  0011                     	;# 
    75  0012                     	;# 
    76  0013                     	;# 
    77  0014                     	;# 
    78  0015                     	;# 
    79  0015                     	;# 
    80  0016                     	;# 
    81  0017                     	;# 
    82  0018                     	;# 
    83  0019                     	;# 
    84  001A                     	;# 
    85  001E                     	;# 
    86  001F                     	;# 
    87  0081                     	;# 
    88  0085                     	;# 
    89  0086                     	;# 
    90  008C                     	;# 
    91  008D                     	;# 
    92  008E                     	;# 
    93  008F                     	;# 
    94  0090                     	;# 
    95  0092                     	;# 
    96  0093                     	;# 
    97  0094                     	;# 
    98  0098                     	;# 
    99  0099                     	;# 
   100  009B                     	;# 
   101  009C                     	;# 
   102  009D                     	;# 
   103  009E                     	;# 
   104  009F                     	;# 
   105  0105                     	;# 
   106  010C                     	;# 
   107  010D                     	;# 
   108  010E                     	;# 
   109  010F                     	;# 
   110  018C                     	;# 
   111  018D                     	;# 
   112  0005                     _PORTA	set	5
   113  0006                     _PORTB	set	6
   114  005F                     _GIE	set	95
   115  005E                     _PEIE	set	94
   116  0028                     _RA0	set	40
   117  0029                     _RA1	set	41
   118  002A                     _RA2	set	42
   119  002B                     _RA3	set	43
   120  0030                     _RB0	set	48
   121  0031                     _RB1	set	49
   122  005D                     _TMR0IE	set	93
   123  005A                     _TMR0IF	set	90
   124  009B                     _ANSEL	set	155
   125  0081                     _OPTION_REGbits	set	129
   126  0085                     _TRISA	set	133
   127  0086                     _TRISB	set	134
   128  040B                     _PSA	set	1035
   129  040D                     _T0CS	set	1037
   130                           
   131                           	psect	strings
   132  0193                     __pstrings:	
   133  0193                     stringtab:	
   134  0193                     __stringtab:	
   135  0193                     stringcode:	
   136                           ;	String table - string pointers are 1 byte each
   137                           
   138  0193                     stringdir:	
   139  0193  3001               	movlw	high stringdir
   140  0194  008A               	movwf	10
   141  0195  0804               	movf	4,w
   142  0196  0A84               	incf	4,f
   143  0197  0782               	addwf	2,f
   144  0198                     __stringbase:	
   145  0198  3400               	retlw	0
   146  0199                     __end_of__stringtab:	
   147  0199                     STR_5:	
   148  0199  3477               	retlw	119	;'w'
   149  019A  3477               	retlw	119	;'w'
   150  019B  3477               	retlw	119	;'w'
   151  019C  342E               	retlw	46	;'.'
   152  019D  3465               	retlw	101	;'e'
   153  019E  346C               	retlw	108	;'l'
   154  019F  3465               	retlw	101	;'e'
   155  01A0  3463               	retlw	99	;'c'
   156  01A1  3474               	retlw	116	;'t'
   157  01A2  3472               	retlw	114	;'r'
   158  01A3  346F               	retlw	111	;'o'
   159  01A4  3453               	retlw	83	;'S'
   160  01A5  346F               	retlw	111	;'o'
   161  01A6  346D               	retlw	109	;'m'
   162  01A7  3465               	retlw	101	;'e'
   163  01A8  342E               	retlw	46	;'.'
   164  01A9  3463               	retlw	99	;'c'
   165  01AA  346F               	retlw	111	;'o'
   166  01AB  346D               	retlw	109	;'m'
   167  01AC  3400               	retlw	0
   168  01AD                     STR_1:	
   169  01AD  344C               	retlw	76	;'L'
   170  01AE  3443               	retlw	67	;'C'
   171  01AF  3444               	retlw	68	;'D'
   172  01B0  3420               	retlw	32	;' '
   173  01B1  344C               	retlw	76	;'L'
   174  01B2  3469               	retlw	105	;'i'
   175  01B3  3462               	retlw	98	;'b'
   176  01B4  3472               	retlw	114	;'r'
   177  01B5  3461               	retlw	97	;'a'
   178  01B6  3472               	retlw	114	;'r'
   179  01B7  3479               	retlw	121	;'y'
   180  01B8  3420               	retlw	32	;' '
   181  01B9  3466               	retlw	102	;'f'
   182  01BA  346F               	retlw	111	;'o'
   183  01BB  3472               	retlw	114	;'r'
   184  01BC  3400               	retlw	0
   185  01BD                     STR_3:	
   186  01BD  3444               	retlw	68	;'D'
   187  01BE  3465               	retlw	101	;'e'
   188  01BF  3476               	retlw	118	;'v'
   189  01C0  3465               	retlw	101	;'e'
   190  01C1  346C               	retlw	108	;'l'
   191  01C2  346F               	retlw	111	;'o'
   192  01C3  3470               	retlw	112	;'p'
   193  01C4  3465               	retlw	101	;'e'
   194  01C5  3464               	retlw	100	;'d'
   195  01C6  3420               	retlw	32	;' '
   196  01C7  3442               	retlw	66	;'B'
   197  01C8  3479               	retlw	121	;'y'
   198  01C9  3400               	retlw	0
   199  01CA                     STR_4:	
   200  01CA  3465               	retlw	101	;'e'
   201  01CB  346C               	retlw	108	;'l'
   202  01CC  3465               	retlw	101	;'e'
   203  01CD  3463               	retlw	99	;'c'
   204  01CE  3474               	retlw	116	;'t'
   205  01CF  3472               	retlw	114	;'r'
   206  01D0  346F               	retlw	111	;'o'
   207  01D1  3453               	retlw	83	;'S'
   208  01D2  346F               	retlw	111	;'o'
   209  01D3  346D               	retlw	109	;'m'
   210  01D4  3465               	retlw	101	;'e'
   211  01D5  3400               	retlw	0
   212  01D6                     STR_2:	
   213  01D6  344D               	retlw	77	;'M'
   214  01D7  3450               	retlw	80	;'P'
   215  01D8  344C               	retlw	76	;'L'
   216  01D9  3441               	retlw	65	;'A'
   217  01DA  3442               	retlw	66	;'B'
   218  01DB  3420               	retlw	32	;' '
   219  01DC  3458               	retlw	88	;'X'
   220  01DD  3443               	retlw	67	;'C'
   221  01DE  3438               	retlw	56	;'8'
   222  01DF  3400               	retlw	0
   223                           
   224                           ; #config settings
   225  0000                     
   226                           	psect	cinit
   227  0013                     start_initialization:	
   228  0013                     __initialization:	
   229                           
   230                           ; Clear objects allocated to COMMON
   231  0013  01F8               	clrf	__pbssCOMMON& (0+127)
   232  0014                     end_of_initialization:	
   233                           ;End of C runtime variable initialization code
   234                           
   235  0014                     __end_of__initialization:	
   236  0014  0183               	clrf	3
   237  0015  118A  2817         	ljmp	_main	;jump to C main() function
   238                           
   239                           	psect	bssCOMMON
   240  0078                     __pbssCOMMON:	
   241  0078                     _timerCount:	
   242  0078                     	ds	1
   243                           
   244                           	psect	cstackCOMMON
   245  0070                     __pcstackCOMMON:	
   246  0070                     ?_LCD_set_port:	
   247  0070                     ?_LCD_command:	
   248                           ; 1 bytes @ 0x0
   249                           
   250  0070                     ?_LCD_clear:	
   251                           ; 1 bytes @ 0x0
   252                           
   253  0070                     ?_LCD_Init:	
   254                           ; 1 bytes @ 0x0
   255                           
   256  0070                     ?_LCD_write_char:	
   257                           ; 1 bytes @ 0x0
   258                           
   259  0070                     ?_LCD_write_string:	
   260                           ; 1 bytes @ 0x0
   261                           
   262  0070                     ?_LCD_shift_right:	
   263                           ; 1 bytes @ 0x0
   264                           
   265  0070                     ?_LCD_shift_left:	
   266                           ; 1 bytes @ 0x0
   267                           
   268  0070                     ?_Syst_Init:	
   269                           ; 1 bytes @ 0x0
   270                           
   271  0070                     ?_TMR0_Init:	
   272                           ; 1 bytes @ 0x0
   273                           
   274  0070                     ?_ISR:	
   275                           ; 1 bytes @ 0x0
   276                           
   277  0070                     ??_ISR:	
   278                           ; 1 bytes @ 0x0
   279                           
   280  0070                     ?_main:	
   281                           ; 1 bytes @ 0x0
   282                           
   283                           
   284                           ; 1 bytes @ 0x0
   285  0070                     	ds	5
   286  0075                     ??_LCD_set_port:	
   287  0075                     ??_Syst_Init:	
   288                           ; 1 bytes @ 0x5
   289                           
   290  0075                     ??_TMR0_Init:	
   291                           ; 1 bytes @ 0x5
   292                           
   293  0075                     LCD_set_port@value_4_bit:	
   294                           ; 1 bytes @ 0x5
   295                           
   296                           
   297                           ; 1 bytes @ 0x5
   298  0075                     	ds	1
   299  0076                     ??_LCD_command:	
   300  0076                     ??_LCD_write_char:	
   301                           ; 1 bytes @ 0x6
   302                           
   303                           
   304                           ; 1 bytes @ 0x6
   305  0076                     	ds	1
   306  0077                     LCD_write_char@c:	
   307                           
   308                           ; 1 bytes @ 0x7
   309  0077                     	ds	1
   310  0078                     ??_LCD_clear:	
   311  0078                     ??_LCD_shift_right:	
   312                           ; 1 bytes @ 0x8
   313                           
   314  0078                     ??_LCD_shift_left:	
   315                           ; 1 bytes @ 0x8
   316                           
   317                           
   318                           	psect	cstackBANK0
   319  0020                     __pcstackBANK0:	
   320                           ; 1 bytes @ 0x8
   321                           
   322  0020                     ??_LCD_write_string:	
   323  0020                     LCD_command@command:	
   324                           ; 1 bytes @ 0x0
   325                           
   326                           
   327                           ; 1 bytes @ 0x0
   328  0020                     	ds	1
   329  0021                     ?_LCD_set_cursor:	
   330  0021                     ??_LCD_Init:	
   331                           ; 1 bytes @ 0x1
   332                           
   333  0021                     LCD_set_cursor@column:	
   334                           ; 1 bytes @ 0x1
   335                           
   336  0021                     LCD_write_string@j:	
   337                           ; 1 bytes @ 0x1
   338                           
   339                           
   340                           ; 1 bytes @ 0x1
   341  0021                     	ds	1
   342  0022                     ??_LCD_set_cursor:	
   343  0022                     LCD_write_string@str:	
   344                           ; 1 bytes @ 0x2
   345                           
   346                           
   347                           ; 1 bytes @ 0x2
   348  0022                     	ds	1
   349  0023                     LCD_set_cursor@ddram_address:	
   350                           
   351                           ; 1 bytes @ 0x3
   352  0023                     	ds	1
   353  0024                     LCD_set_cursor@row:	
   354                           
   355                           ; 1 bytes @ 0x4
   356  0024                     	ds	1
   357  0025                     ??_main:	
   358                           
   359                           ; 1 bytes @ 0x5
   360  0025                     	ds	3
   361  0028                     main@j:	
   362                           
   363                           ; 1 bytes @ 0x8
   364  0028                     	ds	1
   365                           
   366                           	psect	maintext
   367  0017                     __pmaintext:	
   368 ;;
   369 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   370 ;;
   371 ;; *************** function _main *****************
   372 ;; Defined at:
   373 ;;		line 43 in file "main.c"
   374 ;; Parameters:    Size  Location     Type
   375 ;;		None
   376 ;; Auto vars:     Size  Location     Type
   377 ;;  j               1    8[BANK0 ] unsigned char 
   378 ;; Return value:  Size  Location     Type
   379 ;;                  1    wreg      void 
   380 ;; Registers used:
   381 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   382 ;; Tracked objects:
   383 ;;		On entry : B00/0
   384 ;;		On exit  : 0/0
   385 ;;		Unchanged: 0/0
   386 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   387 ;;      Params:         0       0       0       0       0
   388 ;;      Locals:         0       1       0       0       0
   389 ;;      Temps:          0       3       0       0       0
   390 ;;      Totals:         0       4       0       0       0
   391 ;;Total ram usage:        4 bytes
   392 ;; Hardware stack levels required when called:    4
   393 ;; This function calls:
   394 ;;		_LCD_Init
   395 ;;		_LCD_clear
   396 ;;		_LCD_set_cursor
   397 ;;		_LCD_shift_left
   398 ;;		_LCD_shift_right
   399 ;;		_LCD_write_char
   400 ;;		_LCD_write_string
   401 ;;		_Syst_Init
   402 ;;		_TMR0_Init
   403 ;; This function is called by:
   404 ;;		Startup code after reset
   405 ;; This function uses a non-reentrant model
   406 ;;
   407                           
   408                           
   409                           ;psect for function _main
   410  0017                     _main:	
   411                           
   412                           ;main.c: 44: Syst_Init();
   413                           
   414                           ;incstack = 0
   415                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   416  0017  118A  22B1  118A   	fcall	_Syst_Init
   417                           
   418                           ;main.c: 45: TMR0_Init();
   419  001A  118A  22C1  118A   	fcall	_TMR0_Init
   420                           
   421                           ;main.c: 46: LCD_Init();
   422  001D  118A  20E5  118A   	fcall	_LCD_Init
   423  0020                     l1063:	
   424                           ;main.c: 48: while (1) {
   425                           
   426                           
   427                           ;main.c: 49: LCD_clear();
   428  0020  118A  22DC  118A   	fcall	_LCD_clear
   429                           
   430                           ;main.c: 50: LCD_set_cursor(1, 1);
   431  0023  1283               	bcf	3,5	;RP0=0, select bank0
   432  0024  1303               	bcf	3,6	;RP1=0, select bank0
   433  0025  01A1               	clrf	LCD_set_cursor@column
   434  0026  0AA1               	incf	LCD_set_cursor@column,f
   435  0027  3001               	movlw	1
   436  0028  118A  21E0  118A   	fcall	_LCD_set_cursor
   437                           
   438                           ;main.c: 51: LCD_write_string("LCD Library for");
   439  002B  3015               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   440  002C  118A  224B  118A   	fcall	_LCD_write_string
   441                           
   442                           ;main.c: 53: LCD_set_cursor(2, 1);
   443  002F  1283               	bcf	3,5	;RP0=0, select bank0
   444  0030  1303               	bcf	3,6	;RP1=0, select bank0
   445  0031  01A1               	clrf	LCD_set_cursor@column
   446  0032  0AA1               	incf	LCD_set_cursor@column,f
   447  0033  3002               	movlw	2
   448  0034  118A  21E0  118A   	fcall	_LCD_set_cursor
   449                           
   450                           ;main.c: 54: LCD_write_string("MPLAB XC8");
   451  0037  303E               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   452  0038  118A  224B  118A   	fcall	_LCD_write_string
   453                           
   454                           ;main.c: 55: _delay((unsigned long)((2000)*(12000000/4000.0)));
   455  003B  301F               	movlw	31
   456  003C  1283               	bcf	3,5	;RP0=0, select bank0
   457  003D  1303               	bcf	3,6	;RP1=0, select bank0
   458  003E  00A7               	movwf	??_main+2
   459  003F  3071               	movlw	113
   460  0040  00A6               	movwf	??_main+1
   461  0041  301D               	movlw	29
   462  0042  00A5               	movwf	??_main
   463  0043                     u597:	
   464  0043  0BA5               	decfsz	??_main,f
   465  0044  2843               	goto	u597
   466  0045  0BA6               	decfsz	??_main+1,f
   467  0046  2843               	goto	u597
   468  0047  0BA7               	decfsz	??_main+2,f
   469  0048  2843               	goto	u597
   470  0049  284A               	nop2
   471                           
   472                           ;main.c: 57: LCD_set_cursor(3, 1);
   473  004A  1283               	bcf	3,5	;RP0=0, select bank0
   474  004B  1303               	bcf	3,6	;RP1=0, select bank0
   475  004C  01A1               	clrf	LCD_set_cursor@column
   476  004D  0AA1               	incf	LCD_set_cursor@column,f
   477  004E  3003               	movlw	3
   478  004F  118A  21E0  118A   	fcall	_LCD_set_cursor
   479                           
   480                           ;main.c: 58: LCD_write_string("Developed By");
   481  0052  3025               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
   482  0053  118A  224B  118A   	fcall	_LCD_write_string
   483                           
   484                           ;main.c: 59: LCD_set_cursor(4, 1);
   485  0056  1283               	bcf	3,5	;RP0=0, select bank0
   486  0057  1303               	bcf	3,6	;RP1=0, select bank0
   487  0058  01A1               	clrf	LCD_set_cursor@column
   488  0059  0AA1               	incf	LCD_set_cursor@column,f
   489  005A  3004               	movlw	4
   490  005B  118A  21E0  118A   	fcall	_LCD_set_cursor
   491                           
   492                           ;main.c: 60: LCD_write_string("electroSome");
   493  005E  3032               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
   494  005F  118A  224B  118A   	fcall	_LCD_write_string
   495                           
   496                           ;main.c: 61: _delay((unsigned long)((2000)*(12000000/4000.0)));
   497  0062  301F               	movlw	31
   498  0063  1283               	bcf	3,5	;RP0=0, select bank0
   499  0064  1303               	bcf	3,6	;RP1=0, select bank0
   500  0065  00A7               	movwf	??_main+2
   501  0066  3071               	movlw	113
   502  0067  00A6               	movwf	??_main+1
   503  0068  301D               	movlw	29
   504  0069  00A5               	movwf	??_main
   505  006A                     u607:	
   506  006A  0BA5               	decfsz	??_main,f
   507  006B  286A               	goto	u607
   508  006C  0BA6               	decfsz	??_main+1,f
   509  006D  286A               	goto	u607
   510  006E  0BA7               	decfsz	??_main+2,f
   511  006F  286A               	goto	u607
   512  0070  2871               	nop2
   513                           
   514                           ;main.c: 63: LCD_clear();
   515  0071  118A  22DC  118A   	fcall	_LCD_clear
   516                           
   517                           ;main.c: 64: LCD_set_cursor(1, 1);
   518  0074  1283               	bcf	3,5	;RP0=0, select bank0
   519  0075  1303               	bcf	3,6	;RP1=0, select bank0
   520  0076  01A1               	clrf	LCD_set_cursor@column
   521  0077  0AA1               	incf	LCD_set_cursor@column,f
   522  0078  3001               	movlw	1
   523  0079  118A  21E0  118A   	fcall	_LCD_set_cursor
   524                           
   525                           ;main.c: 65: LCD_write_string("www.electroSome.com");
   526  007C  3001               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
   527  007D  118A  224B  118A   	fcall	_LCD_write_string
   528                           
   529                           ;main.c: 67: unsigned char j;
   530                           ;main.c: 68: for(j = 0; j < 20; j++) {
   531  0080  1283               	bcf	3,5	;RP0=0, select bank0
   532  0081  1303               	bcf	3,6	;RP1=0, select bank0
   533  0082  01A8               	clrf	main@j
   534  0083  3014               	movlw	20
   535  0084  0228               	subwf	main@j,w
   536  0085  1803               	btfsc	3,0
   537  0086  28A2               	goto	l1101
   538  0087                     l1093:	
   539                           
   540                           ;main.c: 69: _delay((unsigned long)((300)*(12000000/4000.0)));
   541  0087  3005               	movlw	5
   542  0088  1283               	bcf	3,5	;RP0=0, select bank0
   543  0089  1303               	bcf	3,6	;RP1=0, select bank0
   544  008A  00A7               	movwf	??_main+2
   545  008B  3091               	movlw	145
   546  008C  00A6               	movwf	??_main+1
   547  008D  30CF               	movlw	207
   548  008E  00A5               	movwf	??_main
   549  008F                     u617:	
   550  008F  0BA5               	decfsz	??_main,f
   551  0090  288F               	goto	u617
   552  0091  0BA6               	decfsz	??_main+1,f
   553  0092  288F               	goto	u617
   554  0093  0BA7               	decfsz	??_main+2,f
   555  0094  288F               	goto	u617
   556                           
   557                           ;main.c: 70: LCD_shift_left();
   558  0095  118A  22D4  118A   	fcall	_LCD_shift_left
   559  0098  3001               	movlw	1
   560  0099  1283               	bcf	3,5	;RP0=0, select bank0
   561  009A  1303               	bcf	3,6	;RP1=0, select bank0
   562  009B  00A5               	movwf	??_main
   563  009C  0825               	movf	??_main,w
   564  009D  07A8               	addwf	main@j,f
   565  009E  3014               	movlw	20
   566  009F  0228               	subwf	main@j,w
   567  00A0  1C03               	skipc
   568  00A1  2887               	goto	l1093
   569  00A2                     l1101:	
   570                           
   571                           ;main.c: 71: }
   572                           ;main.c: 73: for(j = 0; j < 20; j++) {
   573  00A2  01A8               	clrf	main@j
   574  00A3  3014               	movlw	20
   575  00A4  0228               	subwf	main@j,w
   576  00A5  1803               	btfsc	3,0
   577  00A6  28C2               	goto	l1115
   578  00A7                     l1107:	
   579                           
   580                           ;main.c: 74: _delay((unsigned long)((300)*(12000000/4000.0)));
   581  00A7  3005               	movlw	5
   582  00A8  1283               	bcf	3,5	;RP0=0, select bank0
   583  00A9  1303               	bcf	3,6	;RP1=0, select bank0
   584  00AA  00A7               	movwf	??_main+2
   585  00AB  3091               	movlw	145
   586  00AC  00A6               	movwf	??_main+1
   587  00AD  30CF               	movlw	207
   588  00AE  00A5               	movwf	??_main
   589  00AF                     u627:	
   590  00AF  0BA5               	decfsz	??_main,f
   591  00B0  28AF               	goto	u627
   592  00B1  0BA6               	decfsz	??_main+1,f
   593  00B2  28AF               	goto	u627
   594  00B3  0BA7               	decfsz	??_main+2,f
   595  00B4  28AF               	goto	u627
   596                           
   597                           ;main.c: 75: LCD_shift_right();
   598  00B5  118A  22CC  118A   	fcall	_LCD_shift_right
   599  00B8  3001               	movlw	1
   600  00B9  1283               	bcf	3,5	;RP0=0, select bank0
   601  00BA  1303               	bcf	3,6	;RP1=0, select bank0
   602  00BB  00A5               	movwf	??_main
   603  00BC  0825               	movf	??_main,w
   604  00BD  07A8               	addwf	main@j,f
   605  00BE  3014               	movlw	20
   606  00BF  0228               	subwf	main@j,w
   607  00C0  1C03               	skipc
   608  00C1  28A7               	goto	l1107
   609  00C2                     l1115:	
   610                           
   611                           ;main.c: 76: }
   612                           ;main.c: 78: LCD_clear();
   613  00C2  118A  22DC  118A   	fcall	_LCD_clear
   614                           
   615                           ;main.c: 79: LCD_set_cursor(2, 1);
   616  00C5  1283               	bcf	3,5	;RP0=0, select bank0
   617  00C6  1303               	bcf	3,6	;RP1=0, select bank0
   618  00C7  01A1               	clrf	LCD_set_cursor@column
   619  00C8  0AA1               	incf	LCD_set_cursor@column,f
   620  00C9  3002               	movlw	2
   621  00CA  118A  21E0  118A   	fcall	_LCD_set_cursor
   622                           
   623                           ;main.c: 80: LCD_write_char('e');
   624  00CD  3065               	movlw	101
   625  00CE  118A  221F  118A   	fcall	_LCD_write_char
   626                           
   627                           ;main.c: 81: LCD_write_char('S');
   628  00D1  3053               	movlw	83
   629  00D2  118A  221F  118A   	fcall	_LCD_write_char
   630                           
   631                           ;main.c: 82: _delay((unsigned long)((2000)*(12000000/4000.0)));
   632  00D5  301F               	movlw	31
   633  00D6  1283               	bcf	3,5	;RP0=0, select bank0
   634  00D7  1303               	bcf	3,6	;RP1=0, select bank0
   635  00D8  00A7               	movwf	??_main+2
   636  00D9  3071               	movlw	113
   637  00DA  00A6               	movwf	??_main+1
   638  00DB  301D               	movlw	29
   639  00DC  00A5               	movwf	??_main
   640  00DD                     u637:	
   641  00DD  0BA5               	decfsz	??_main,f
   642  00DE  28DD               	goto	u637
   643  00DF  0BA6               	decfsz	??_main+1,f
   644  00E0  28DD               	goto	u637
   645  00E1  0BA7               	decfsz	??_main+2,f
   646  00E2  28DD               	goto	u637
   647  00E3  28E4               	nop2
   648  00E4  2820               	goto	l1063
   649  00E5                     __end_of_main:	
   650                           
   651                           	psect	text1
   652  02C1                     __ptext1:	
   653 ;; *************** function _TMR0_Init *****************
   654 ;; Defined at:
   655 ;;		line 18 in file "main.c"
   656 ;; Parameters:    Size  Location     Type
   657 ;;		None
   658 ;; Auto vars:     Size  Location     Type
   659 ;;		None
   660 ;; Return value:  Size  Location     Type
   661 ;;                  1    wreg      void 
   662 ;; Registers used:
   663 ;;		wreg, status,2, status,0
   664 ;; Tracked objects:
   665 ;;		On entry : 0/0
   666 ;;		On exit  : 0/0
   667 ;;		Unchanged: 0/0
   668 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   669 ;;      Params:         0       0       0       0       0
   670 ;;      Locals:         0       0       0       0       0
   671 ;;      Temps:          0       0       0       0       0
   672 ;;      Totals:         0       0       0       0       0
   673 ;;Total ram usage:        0 bytes
   674 ;; Hardware stack levels used:    1
   675 ;; Hardware stack levels required when called:    1
   676 ;; This function calls:
   677 ;;		Nothing
   678 ;; This function is called by:
   679 ;;		_main
   680 ;; This function uses a non-reentrant model
   681 ;;
   682                           
   683                           
   684                           ;psect for function _TMR0_Init
   685  02C1                     _TMR0_Init:	
   686                           
   687                           ;main.c: 19: TMR0IF = 0;
   688                           
   689                           ;incstack = 0
   690                           ; Regs used in _TMR0_Init: [wreg+status,2+status,0]
   691  02C1  110B               	bcf	11,2	;volatile
   692                           
   693                           ;main.c: 20: TMR0IE = 1;
   694  02C2  168B               	bsf	11,5	;volatile
   695                           
   696                           ;main.c: 21: T0CS = 0;
   697  02C3  1683               	bsf	3,5	;RP0=1, select bank1
   698  02C4  1303               	bcf	3,6	;RP1=0, select bank1
   699  02C5  1281               	bcf	1,5	;volatile
   700                           
   701                           ;main.c: 22: PSA = 0;
   702  02C6  1181               	bcf	1,3	;volatile
   703                           
   704                           ;main.c: 24: OPTION_REGbits.PS = 0b110;
   705  02C7  0801               	movf	1,w	;volatile
   706  02C8  39F8               	andlw	-8
   707  02C9  3806               	iorlw	6
   708  02CA  0081               	movwf	1	;volatile
   709  02CB  0008               	return
   710  02CC                     __end_of_TMR0_Init:	
   711                           
   712                           	psect	text2
   713  02B1                     __ptext2:	
   714 ;; *************** function _Syst_Init *****************
   715 ;; Defined at:
   716 ;;		line 10 in file "main.c"
   717 ;; Parameters:    Size  Location     Type
   718 ;;		None
   719 ;; Auto vars:     Size  Location     Type
   720 ;;		None
   721 ;; Return value:  Size  Location     Type
   722 ;;                  1    wreg      void 
   723 ;; Registers used:
   724 ;;		status,2
   725 ;; Tracked objects:
   726 ;;		On entry : 0/0
   727 ;;		On exit  : 0/0
   728 ;;		Unchanged: 0/0
   729 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   730 ;;      Params:         0       0       0       0       0
   731 ;;      Locals:         0       0       0       0       0
   732 ;;      Temps:          0       0       0       0       0
   733 ;;      Totals:         0       0       0       0       0
   734 ;;Total ram usage:        0 bytes
   735 ;; Hardware stack levels used:    1
   736 ;; Hardware stack levels required when called:    1
   737 ;; This function calls:
   738 ;;		Nothing
   739 ;; This function is called by:
   740 ;;		_main
   741 ;; This function uses a non-reentrant model
   742 ;;
   743                           
   744                           
   745                           ;psect for function _Syst_Init
   746  02B1                     _Syst_Init:	
   747                           
   748                           ;main.c: 11: ANSEL = 0;
   749                           
   750                           ;incstack = 0
   751                           ; Regs used in _Syst_Init: [status,2]
   752  02B1  1683               	bsf	3,5	;RP0=1, select bank1
   753  02B2  1303               	bcf	3,6	;RP1=0, select bank1
   754  02B3  019B               	clrf	27	;volatile
   755                           
   756                           ;main.c: 12: TRISA = TRISB = 0;
   757  02B4  0186               	clrf	6	;volatile
   758  02B5  0185               	clrf	5	;volatile
   759                           
   760                           ;main.c: 13: PORTA = PORTB = 0;
   761  02B6  1283               	bcf	3,5	;RP0=0, select bank0
   762  02B7  1303               	bcf	3,6	;RP1=0, select bank0
   763  02B8  0186               	clrf	6	;volatile
   764  02B9  0185               	clrf	5	;volatile
   765                           
   766                           ;main.c: 15: GIE = PEIE = 1;
   767  02BA  170B               	bsf	11,6	;volatile
   768  02BB  1F0B               	btfss	11,6	;volatile
   769  02BC  2ABF               	goto	u360
   770  02BD  178B               	bsf	11,7	;volatile
   771  02BE  0008               	return
   772  02BF                     u360:	
   773  02BF  138B               	bcf	11,7	;volatile
   774  02C0  0008               	return
   775  02C1                     __end_of_Syst_Init:	
   776                           
   777                           	psect	text3
   778  024B                     __ptext3:	
   779 ;; *************** function _LCD_write_string *****************
   780 ;; Defined at:
   781 ;;		line 115 in file "lcd.h"
   782 ;; Parameters:    Size  Location     Type
   783 ;;  str             1    wreg     PTR unsigned char 
   784 ;;		 -> STR_5(20), STR_4(12), STR_3(13), STR_2(10), 
   785 ;;		 -> STR_1(16), 
   786 ;; Auto vars:     Size  Location     Type
   787 ;;  str             1    2[BANK0 ] PTR unsigned char 
   788 ;;		 -> STR_5(20), STR_4(12), STR_3(13), STR_2(10), 
   789 ;;		 -> STR_1(16), 
   790 ;;  j               1    1[BANK0 ] unsigned char 
   791 ;; Return value:  Size  Location     Type
   792 ;;                  1    wreg      void 
   793 ;; Registers used:
   794 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   795 ;; Tracked objects:
   796 ;;		On entry : 0/0
   797 ;;		On exit  : 0/0
   798 ;;		Unchanged: 0/0
   799 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   800 ;;      Params:         0       0       0       0       0
   801 ;;      Locals:         0       2       0       0       0
   802 ;;      Temps:          0       1       0       0       0
   803 ;;      Totals:         0       3       0       0       0
   804 ;;Total ram usage:        3 bytes
   805 ;; Hardware stack levels used:    1
   806 ;; Hardware stack levels required when called:    3
   807 ;; This function calls:
   808 ;;		_LCD_write_char
   809 ;; This function is called by:
   810 ;;		_main
   811 ;; This function uses a non-reentrant model
   812 ;;
   813                           
   814                           
   815                           ;psect for function _LCD_write_string
   816  024B                     _LCD_write_string:	
   817                           
   818                           ;incstack = 0
   819                           ; Regs used in _LCD_write_string: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   820                           ;LCD_write_string@str stored from wreg
   821  024B  1283               	bcf	3,5	;RP0=0, select bank0
   822  024C  1303               	bcf	3,6	;RP1=0, select bank0
   823  024D  00A2               	movwf	LCD_write_string@str
   824                           
   825                           ;lcd.h: 116: unsigned char j;
   826                           ;lcd.h: 117: for (j = 0; str[j] != '\0'; ++j) {
   827  024E  01A1               	clrf	LCD_write_string@j
   828  024F                     l1051:	
   829  024F  0821               	movf	LCD_write_string@j,w
   830  0250  0722               	addwf	LCD_write_string@str,w
   831  0251  0084               	movwf	4
   832  0252  118A  2193  118A   	fcall	stringdir
   833  0255  3A00               	xorlw	0
   834  0256  1903               	btfsc	3,2
   835  0257  0008               	return
   836                           
   837                           ;lcd.h: 118: LCD_write_char (str[j]);
   838  0258  0821               	movf	LCD_write_string@j,w
   839  0259  0722               	addwf	LCD_write_string@str,w
   840  025A  0084               	movwf	4
   841  025B  118A  2193  118A   	fcall	stringdir
   842  025E  118A  221F  118A   	fcall	_LCD_write_char
   843  0261  3001               	movlw	1
   844  0262  1283               	bcf	3,5	;RP0=0, select bank0
   845  0263  1303               	bcf	3,6	;RP1=0, select bank0
   846  0264  00A0               	movwf	??_LCD_write_string
   847  0265  0820               	movf	??_LCD_write_string,w
   848  0266  07A1               	addwf	LCD_write_string@j,f
   849  0267  2A4F               	goto	l1051
   850  0268                     __end_of_LCD_write_string:	
   851                           
   852                           	psect	text4
   853  021F                     __ptext4:	
   854 ;; *************** function _LCD_write_char *****************
   855 ;; Defined at:
   856 ;;		line 100 in file "lcd.h"
   857 ;; Parameters:    Size  Location     Type
   858 ;;  c               1    wreg     unsigned char 
   859 ;; Auto vars:     Size  Location     Type
   860 ;;  c               1    7[COMMON] unsigned char 
   861 ;; Return value:  Size  Location     Type
   862 ;;                  1    wreg      void 
   863 ;; Registers used:
   864 ;;		wreg, status,2, status,0, pclath, cstack
   865 ;; Tracked objects:
   866 ;;		On entry : 0/0
   867 ;;		On exit  : 0/0
   868 ;;		Unchanged: 0/0
   869 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   870 ;;      Params:         0       0       0       0       0
   871 ;;      Locals:         1       0       0       0       0
   872 ;;      Temps:          1       0       0       0       0
   873 ;;      Totals:         2       0       0       0       0
   874 ;;Total ram usage:        2 bytes
   875 ;; Hardware stack levels used:    1
   876 ;; Hardware stack levels required when called:    2
   877 ;; This function calls:
   878 ;;		_LCD_set_port
   879 ;; This function is called by:
   880 ;;		_LCD_write_string
   881 ;;		_main
   882 ;; This function uses a non-reentrant model
   883 ;;
   884                           
   885                           
   886                           ;psect for function _LCD_write_char
   887  021F                     _LCD_write_char:	
   888                           
   889                           ;incstack = 0
   890                           ; Regs used in _LCD_write_char: [wreg+status,2+status,0+pclath+cstack]
   891                           ;LCD_write_char@c stored from wreg
   892  021F  00F7               	movwf	LCD_write_char@c
   893                           
   894                           ;lcd.h: 101: RB0 = 1;
   895  0220  1283               	bcf	3,5	;RP0=0, select bank0
   896  0221  1303               	bcf	3,6	;RP1=0, select bank0
   897  0222  1406               	bsf	6,0	;volatile
   898                           
   899                           ;lcd.h: 103: LCD_set_port (c >> 4);
   900  0223  0877               	movf	LCD_write_char@c,w
   901  0224  00F6               	movwf	??_LCD_write_char
   902  0225  3004               	movlw	4
   903  0226                     u465:	
   904  0226  1003               	clrc
   905  0227  0CF6               	rrf	??_LCD_write_char,f
   906  0228  3EFF               	addlw	-1
   907  0229  1D03               	skipz
   908  022A  2A26               	goto	u465
   909  022B  0876               	movf	??_LCD_write_char,w
   910  022C  118A  2268  118A   	fcall	_LCD_set_port
   911                           
   912                           ;lcd.h: 104: RB1 = 1;
   913  022F  1283               	bcf	3,5	;RP0=0, select bank0
   914  0230  1303               	bcf	3,6	;RP1=0, select bank0
   915  0231  1486               	bsf	6,1	;volatile
   916                           
   917                           ;lcd.h: 105: _delay((unsigned long)((50)*(12000000/4000000.0)));
   918  0232  3031               	movlw	49
   919  0233  00F6               	movwf	??_LCD_write_char
   920  0234                     u647:	
   921  0234  0BF6               	decfsz	??_LCD_write_char,f
   922  0235  2A34               	goto	u647
   923  0236  2A37               	nop2
   924                           
   925                           ;lcd.h: 106: RB1 = 0;
   926  0237  1283               	bcf	3,5	;RP0=0, select bank0
   927  0238  1303               	bcf	3,6	;RP1=0, select bank0
   928  0239  1086               	bcf	6,1	;volatile
   929                           
   930                           ;lcd.h: 108: LCD_set_port (c & 0x0F);
   931  023A  0877               	movf	LCD_write_char@c,w
   932  023B  390F               	andlw	15
   933  023C  118A  2268  118A   	fcall	_LCD_set_port
   934                           
   935                           ;lcd.h: 109: RB1 = 1;
   936  023F  1283               	bcf	3,5	;RP0=0, select bank0
   937  0240  1303               	bcf	3,6	;RP1=0, select bank0
   938  0241  1486               	bsf	6,1	;volatile
   939                           
   940                           ;lcd.h: 110: _delay((unsigned long)((50)*(12000000/4000000.0)));
   941  0242  3031               	movlw	49
   942  0243  00F6               	movwf	??_LCD_write_char
   943  0244                     u657:	
   944  0244  0BF6               	decfsz	??_LCD_write_char,f
   945  0245  2A44               	goto	u657
   946  0246  2A47               	nop2
   947                           
   948                           ;lcd.h: 111: RB1 = 0;
   949  0247  1283               	bcf	3,5	;RP0=0, select bank0
   950  0248  1303               	bcf	3,6	;RP1=0, select bank0
   951  0249  1086               	bcf	6,1	;volatile
   952  024A  0008               	return
   953  024B                     __end_of_LCD_write_char:	
   954                           
   955                           	psect	text5
   956  02CC                     __ptext5:	
   957 ;; *************** function _LCD_shift_right *****************
   958 ;; Defined at:
   959 ;;		line 123 in file "lcd.h"
   960 ;; Parameters:    Size  Location     Type
   961 ;;		None
   962 ;; Auto vars:     Size  Location     Type
   963 ;;		None
   964 ;; Return value:  Size  Location     Type
   965 ;;                  1    wreg      void 
   966 ;; Registers used:
   967 ;;		wreg, status,2, status,0, pclath, cstack
   968 ;; Tracked objects:
   969 ;;		On entry : 0/0
   970 ;;		On exit  : 0/0
   971 ;;		Unchanged: 0/0
   972 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   973 ;;      Params:         0       0       0       0       0
   974 ;;      Locals:         0       0       0       0       0
   975 ;;      Temps:          0       0       0       0       0
   976 ;;      Totals:         0       0       0       0       0
   977 ;;Total ram usage:        0 bytes
   978 ;; Hardware stack levels used:    1
   979 ;; Hardware stack levels required when called:    3
   980 ;; This function calls:
   981 ;;		_LCD_command
   982 ;; This function is called by:
   983 ;;		_main
   984 ;; This function uses a non-reentrant model
   985 ;;
   986                           
   987                           
   988                           ;psect for function _LCD_shift_right
   989  02CC                     _LCD_shift_right:	
   990                           
   991                           ;lcd.h: 125: LCD_command(0x01);
   992                           
   993                           ;incstack = 0
   994                           ; Regs used in _LCD_shift_right: [wreg+status,2+status,0+pclath+cstack]
   995  02CC  3001               	movlw	1
   996  02CD  118A  2282  118A   	fcall	_LCD_command
   997                           
   998                           ;lcd.h: 126: LCD_command(0x0C);
   999  02D0  300C               	movlw	12
  1000  02D1  118A  2282         	fcall	_LCD_command
  1001  02D3  0008               	return
  1002  02D4                     __end_of_LCD_shift_right:	
  1003                           
  1004                           	psect	text6
  1005  02D4                     __ptext6:	
  1006 ;; *************** function _LCD_shift_left *****************
  1007 ;; Defined at:
  1008 ;;		line 129 in file "lcd.h"
  1009 ;; Parameters:    Size  Location     Type
  1010 ;;		None
  1011 ;; Auto vars:     Size  Location     Type
  1012 ;;		None
  1013 ;; Return value:  Size  Location     Type
  1014 ;;                  1    wreg      void 
  1015 ;; Registers used:
  1016 ;;		wreg, status,2, status,0, pclath, cstack
  1017 ;; Tracked objects:
  1018 ;;		On entry : 0/0
  1019 ;;		On exit  : 0/0
  1020 ;;		Unchanged: 0/0
  1021 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1022 ;;      Params:         0       0       0       0       0
  1023 ;;      Locals:         0       0       0       0       0
  1024 ;;      Temps:          0       0       0       0       0
  1025 ;;      Totals:         0       0       0       0       0
  1026 ;;Total ram usage:        0 bytes
  1027 ;; Hardware stack levels used:    1
  1028 ;; Hardware stack levels required when called:    3
  1029 ;; This function calls:
  1030 ;;		_LCD_command
  1031 ;; This function is called by:
  1032 ;;		_main
  1033 ;; This function uses a non-reentrant model
  1034 ;;
  1035                           
  1036                           
  1037                           ;psect for function _LCD_shift_left
  1038  02D4                     _LCD_shift_left:	
  1039                           
  1040                           ;lcd.h: 131: LCD_command(0x01);
  1041                           
  1042                           ;incstack = 0
  1043                           ; Regs used in _LCD_shift_left: [wreg+status,2+status,0+pclath+cstack]
  1044  02D4  3001               	movlw	1
  1045  02D5  118A  2282  118A   	fcall	_LCD_command
  1046                           
  1047                           ;lcd.h: 132: LCD_command(0x08);
  1048  02D8  3008               	movlw	8
  1049  02D9  118A  2282         	fcall	_LCD_command
  1050  02DB  0008               	return
  1051  02DC                     __end_of_LCD_shift_left:	
  1052                           
  1053                           	psect	text7
  1054  01E0                     __ptext7:	
  1055 ;; *************** function _LCD_set_cursor *****************
  1056 ;; Defined at:
  1057 ;;		line 40 in file "lcd.h"
  1058 ;; Parameters:    Size  Location     Type
  1059 ;;  row             1    wreg     unsigned char 
  1060 ;;  column          1    1[BANK0 ] unsigned char 
  1061 ;; Auto vars:     Size  Location     Type
  1062 ;;  row             1    4[BANK0 ] unsigned char 
  1063 ;;  ddram_addres    1    3[BANK0 ] unsigned char 
  1064 ;; Return value:  Size  Location     Type
  1065 ;;                  1    wreg      void 
  1066 ;; Registers used:
  1067 ;;		wreg, status,2, status,0, pclath, cstack
  1068 ;; Tracked objects:
  1069 ;;		On entry : 0/0
  1070 ;;		On exit  : 0/0
  1071 ;;		Unchanged: 0/0
  1072 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1073 ;;      Params:         0       1       0       0       0
  1074 ;;      Locals:         0       2       0       0       0
  1075 ;;      Temps:          0       1       0       0       0
  1076 ;;      Totals:         0       4       0       0       0
  1077 ;;Total ram usage:        4 bytes
  1078 ;; Hardware stack levels used:    1
  1079 ;; Hardware stack levels required when called:    3
  1080 ;; This function calls:
  1081 ;;		_LCD_command
  1082 ;; This function is called by:
  1083 ;;		_main
  1084 ;; This function uses a non-reentrant model
  1085 ;;
  1086                           
  1087                           
  1088                           ;psect for function _LCD_set_cursor
  1089  01E0                     _LCD_set_cursor:	
  1090                           
  1091                           ;incstack = 0
  1092                           ; Regs used in _LCD_set_cursor: [wreg+status,2+status,0+pclath+cstack]
  1093                           ;LCD_set_cursor@row stored from wreg
  1094  01E0  1283               	bcf	3,5	;RP0=0, select bank0
  1095  01E1  1303               	bcf	3,6	;RP1=0, select bank0
  1096  01E2  00A4               	movwf	LCD_set_cursor@row
  1097                           
  1098                           ;lcd.h: 42: if (row < 0 || row > 4 || column < 0 || column > 20) return;
  1099  01E3  3005               	movlw	5
  1100  01E4  0224               	subwf	LCD_set_cursor@row,w
  1101  01E5  1803               	skipnc
  1102  01E6  0008               	return
  1103  01E7  3015               	movlw	21
  1104  01E8  0221               	subwf	LCD_set_cursor@column,w
  1105  01E9  1803               	btfsc	3,0
  1106  01EA  0008               	return
  1107                           
  1108                           ;lcd.h: 44: unsigned char ddram_address = 0x80;
  1109  01EB  3080               	movlw	128
  1110  01EC  00A2               	movwf	??_LCD_set_cursor
  1111  01ED  0822               	movf	??_LCD_set_cursor,w
  1112  01EE  00A3               	movwf	LCD_set_cursor@ddram_address
  1113                           
  1114                           ;lcd.h: 46: if (row == 1) ddram_address += 0x00 + (column - 1);
  1115  01EF  0324               	decf	LCD_set_cursor@row,w
  1116  01F0  1D03               	btfss	3,2
  1117  01F1  29F5               	goto	l993
  1118  01F2  0821               	movf	LCD_set_cursor@column,w
  1119  01F3  3EFF               	addlw	255
  1120  01F4  2A09               	goto	L3
  1121  01F5                     l993:	
  1122                           
  1123                           ;lcd.h: 47: else if (row == 2) ddram_address += 0x40 + (column - 1);
  1124  01F5  3002               	movlw	2
  1125  01F6  0624               	xorwf	LCD_set_cursor@row,w
  1126  01F7  1D03               	btfss	3,2
  1127  01F8  29FC               	goto	l997
  1128  01F9  0821               	movf	LCD_set_cursor@column,w
  1129  01FA  3E3F               	addlw	63
  1130  01FB  2A09               	goto	L3
  1131  01FC                     l997:	
  1132                           
  1133                           ;lcd.h: 48: else if (row == 3) ddram_address += 0x14 + (column - 1);
  1134  01FC  3003               	movlw	3
  1135  01FD  0624               	xorwf	LCD_set_cursor@row,w
  1136  01FE  1D03               	btfss	3,2
  1137  01FF  2A03               	goto	l1001
  1138  0200  0821               	movf	LCD_set_cursor@column,w
  1139  0201  3E13               	addlw	19
  1140  0202  2A09               	goto	L3
  1141  0203                     l1001:	
  1142                           
  1143                           ;lcd.h: 49: else if (row == 4) ddram_address += 0x54 + (column - 1);
  1144  0203  3004               	movlw	4
  1145  0204  0624               	xorwf	LCD_set_cursor@row,w
  1146  0205  1D03               	btfss	3,2
  1147  0206  2A0C               	goto	l1005
  1148  0207  0821               	movf	LCD_set_cursor@column,w
  1149  0208  3E53               	addlw	83
  1150  0209                     L3:	
  1151  0209  00A2               	movwf	??_LCD_set_cursor
  1152  020A  0822               	movf	??_LCD_set_cursor,w
  1153  020B  07A3               	addwf	LCD_set_cursor@ddram_address,f
  1154  020C                     l1005:	
  1155                           
  1156                           ;lcd.h: 51: LCD_command (ddram_address >> 4);
  1157  020C  0823               	movf	LCD_set_cursor@ddram_address,w
  1158  020D  00A2               	movwf	??_LCD_set_cursor
  1159  020E  3004               	movlw	4
  1160  020F                     u535:	
  1161  020F  1003               	clrc
  1162  0210  0CA2               	rrf	??_LCD_set_cursor,f
  1163  0211  3EFF               	addlw	-1
  1164  0212  1D03               	skipz
  1165  0213  2A0F               	goto	u535
  1166  0214  0822               	movf	??_LCD_set_cursor,w
  1167  0215  118A  2282  118A   	fcall	_LCD_command
  1168                           
  1169                           ;lcd.h: 52: LCD_command (ddram_address & 0x0F);
  1170  0218  1283               	bcf	3,5	;RP0=0, select bank0
  1171  0219  1303               	bcf	3,6	;RP1=0, select bank0
  1172  021A  0823               	movf	LCD_set_cursor@ddram_address,w
  1173  021B  390F               	andlw	15
  1174  021C  118A  2282         	fcall	_LCD_command
  1175  021E  0008               	return
  1176  021F                     __end_of_LCD_set_cursor:	
  1177                           
  1178                           	psect	text8
  1179  02DC                     __ptext8:	
  1180 ;; *************** function _LCD_clear *****************
  1181 ;; Defined at:
  1182 ;;		line 33 in file "lcd.h"
  1183 ;; Parameters:    Size  Location     Type
  1184 ;;		None
  1185 ;; Auto vars:     Size  Location     Type
  1186 ;;		None
  1187 ;; Return value:  Size  Location     Type
  1188 ;;                  1    wreg      void 
  1189 ;; Registers used:
  1190 ;;		wreg, status,2, status,0, pclath, cstack
  1191 ;; Tracked objects:
  1192 ;;		On entry : 0/0
  1193 ;;		On exit  : 0/0
  1194 ;;		Unchanged: 0/0
  1195 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1196 ;;      Params:         0       0       0       0       0
  1197 ;;      Locals:         0       0       0       0       0
  1198 ;;      Temps:          0       0       0       0       0
  1199 ;;      Totals:         0       0       0       0       0
  1200 ;;Total ram usage:        0 bytes
  1201 ;; Hardware stack levels used:    1
  1202 ;; Hardware stack levels required when called:    3
  1203 ;; This function calls:
  1204 ;;		_LCD_command
  1205 ;; This function is called by:
  1206 ;;		_main
  1207 ;; This function uses a non-reentrant model
  1208 ;;
  1209                           
  1210                           
  1211                           ;psect for function _LCD_clear
  1212  02DC                     _LCD_clear:	
  1213                           
  1214                           ;lcd.h: 35: LCD_command(0x0);
  1215                           
  1216                           ;incstack = 0
  1217                           ; Regs used in _LCD_clear: [wreg+status,2+status,0+pclath+cstack]
  1218  02DC  3000               	movlw	0
  1219  02DD  118A  2282  118A   	fcall	_LCD_command
  1220                           
  1221                           ;lcd.h: 36: LCD_command(0x1);
  1222  02E0  3001               	movlw	1
  1223  02E1  118A  2282         	fcall	_LCD_command
  1224  02E3  0008               	return
  1225  02E4                     __end_of_LCD_clear:	
  1226                           
  1227                           	psect	text9
  1228  00E5                     __ptext9:	
  1229 ;; *************** function _LCD_Init *****************
  1230 ;; Defined at:
  1231 ;;		line 56 in file "lcd.h"
  1232 ;; Parameters:    Size  Location     Type
  1233 ;;		None
  1234 ;; Auto vars:     Size  Location     Type
  1235 ;;		None
  1236 ;; Return value:  Size  Location     Type
  1237 ;;                  1    wreg      void 
  1238 ;; Registers used:
  1239 ;;		wreg, status,2, status,0, pclath, cstack
  1240 ;; Tracked objects:
  1241 ;;		On entry : 0/0
  1242 ;;		On exit  : 0/0
  1243 ;;		Unchanged: 0/0
  1244 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1245 ;;      Params:         0       0       0       0       0
  1246 ;;      Locals:         0       0       0       0       0
  1247 ;;      Temps:          0       2       0       0       0
  1248 ;;      Totals:         0       2       0       0       0
  1249 ;;Total ram usage:        2 bytes
  1250 ;; Hardware stack levels used:    1
  1251 ;; Hardware stack levels required when called:    3
  1252 ;; This function calls:
  1253 ;;		_LCD_command
  1254 ;; This function is called by:
  1255 ;;		_main
  1256 ;; This function uses a non-reentrant model
  1257 ;;
  1258                           
  1259                           
  1260                           ;psect for function _LCD_Init
  1261  00E5                     _LCD_Init:	
  1262                           
  1263                           ;lcd.h: 58: _delay((unsigned long)((20)*(12000000/4000.0)));
  1264                           
  1265                           ;incstack = 0
  1266                           ; Regs used in _LCD_Init: [wreg+status,2+status,0+pclath+cstack]
  1267  00E5  304E               	movlw	78
  1268  00E6  1283               	bcf	3,5	;RP0=0, select bank0
  1269  00E7  1303               	bcf	3,6	;RP1=0, select bank0
  1270  00E8  00A2               	movwf	??_LCD_Init+1
  1271  00E9  30EA               	movlw	234
  1272  00EA  00A1               	movwf	??_LCD_Init
  1273  00EB                     u667:	
  1274  00EB  0BA1               	decfsz	??_LCD_Init,f
  1275  00EC  28EB               	goto	u667
  1276  00ED  0BA2               	decfsz	??_LCD_Init+1,f
  1277  00EE  28EB               	goto	u667
  1278  00EF  0000               	nop
  1279                           
  1280                           ;lcd.h: 59: LCD_command (0x3);
  1281  00F0  3003               	movlw	3
  1282  00F1  118A  2282  118A   	fcall	_LCD_command
  1283                           
  1284                           ;lcd.h: 60: _delay((unsigned long)((20)*(12000000/4000.0)));
  1285  00F4  304E               	movlw	78
  1286  00F5  1283               	bcf	3,5	;RP0=0, select bank0
  1287  00F6  1303               	bcf	3,6	;RP1=0, select bank0
  1288  00F7  00A2               	movwf	??_LCD_Init+1
  1289  00F8  30EA               	movlw	234
  1290  00F9  00A1               	movwf	??_LCD_Init
  1291  00FA                     u677:	
  1292  00FA  0BA1               	decfsz	??_LCD_Init,f
  1293  00FB  28FA               	goto	u677
  1294  00FC  0BA2               	decfsz	??_LCD_Init+1,f
  1295  00FD  28FA               	goto	u677
  1296  00FE  0000               	nop
  1297                           
  1298                           ;lcd.h: 61: LCD_command (0x3);
  1299  00FF  3003               	movlw	3
  1300  0100  118A  2282  118A   	fcall	_LCD_command
  1301                           
  1302                           ;lcd.h: 62: _delay((unsigned long)((20)*(12000000/4000.0)));
  1303  0103  304E               	movlw	78
  1304  0104  1283               	bcf	3,5	;RP0=0, select bank0
  1305  0105  1303               	bcf	3,6	;RP1=0, select bank0
  1306  0106  00A2               	movwf	??_LCD_Init+1
  1307  0107  30EA               	movlw	234
  1308  0108  00A1               	movwf	??_LCD_Init
  1309  0109                     u687:	
  1310  0109  0BA1               	decfsz	??_LCD_Init,f
  1311  010A  2909               	goto	u687
  1312  010B  0BA2               	decfsz	??_LCD_Init+1,f
  1313  010C  2909               	goto	u687
  1314  010D  0000               	nop
  1315                           
  1316                           ;lcd.h: 63: LCD_command (0x3);
  1317  010E  3003               	movlw	3
  1318  010F  118A  2282  118A   	fcall	_LCD_command
  1319                           
  1320                           ;lcd.h: 65: _delay((unsigned long)((20)*(12000000/4000.0)));
  1321  0112  304E               	movlw	78
  1322  0113  1283               	bcf	3,5	;RP0=0, select bank0
  1323  0114  1303               	bcf	3,6	;RP1=0, select bank0
  1324  0115  00A2               	movwf	??_LCD_Init+1
  1325  0116  30EA               	movlw	234
  1326  0117  00A1               	movwf	??_LCD_Init
  1327  0118                     u697:	
  1328  0118  0BA1               	decfsz	??_LCD_Init,f
  1329  0119  2918               	goto	u697
  1330  011A  0BA2               	decfsz	??_LCD_Init+1,f
  1331  011B  2918               	goto	u697
  1332  011C  0000               	nop
  1333                           
  1334                           ;lcd.h: 66: LCD_command (0x2);
  1335  011D  3002               	movlw	2
  1336  011E  118A  2282  118A   	fcall	_LCD_command
  1337                           
  1338                           ;lcd.h: 70: _delay((unsigned long)((20)*(12000000/4000.0)));
  1339  0121  304E               	movlw	78
  1340  0122  1283               	bcf	3,5	;RP0=0, select bank0
  1341  0123  1303               	bcf	3,6	;RP1=0, select bank0
  1342  0124  00A2               	movwf	??_LCD_Init+1
  1343  0125  30EA               	movlw	234
  1344  0126  00A1               	movwf	??_LCD_Init
  1345  0127                     u707:	
  1346  0127  0BA1               	decfsz	??_LCD_Init,f
  1347  0128  2927               	goto	u707
  1348  0129  0BA2               	decfsz	??_LCD_Init+1,f
  1349  012A  2927               	goto	u707
  1350  012B  0000               	nop
  1351                           
  1352                           ;lcd.h: 71: LCD_command (0x2);
  1353  012C  3002               	movlw	2
  1354  012D  118A  2282  118A   	fcall	_LCD_command
  1355                           
  1356                           ;lcd.h: 72: LCD_command (0x8);
  1357  0130  3008               	movlw	8
  1358  0131  118A  2282  118A   	fcall	_LCD_command
  1359                           
  1360                           ;lcd.h: 74: _delay((unsigned long)((20)*(12000000/4000.0)));
  1361  0134  304E               	movlw	78
  1362  0135  1283               	bcf	3,5	;RP0=0, select bank0
  1363  0136  1303               	bcf	3,6	;RP1=0, select bank0
  1364  0137  00A2               	movwf	??_LCD_Init+1
  1365  0138  30EA               	movlw	234
  1366  0139  00A1               	movwf	??_LCD_Init
  1367  013A                     u717:	
  1368  013A  0BA1               	decfsz	??_LCD_Init,f
  1369  013B  293A               	goto	u717
  1370  013C  0BA2               	decfsz	??_LCD_Init+1,f
  1371  013D  293A               	goto	u717
  1372  013E  0000               	nop
  1373                           
  1374                           ;lcd.h: 75: LCD_command(0x0);
  1375  013F  3000               	movlw	0
  1376  0140  118A  2282  118A   	fcall	_LCD_command
  1377                           
  1378                           ;lcd.h: 76: LCD_command(0xC);
  1379  0143  300C               	movlw	12
  1380  0144  118A  2282  118A   	fcall	_LCD_command
  1381                           
  1382                           ;lcd.h: 79: _delay((unsigned long)((20)*(12000000/4000.0)));
  1383  0147  304E               	movlw	78
  1384  0148  1283               	bcf	3,5	;RP0=0, select bank0
  1385  0149  1303               	bcf	3,6	;RP1=0, select bank0
  1386  014A  00A2               	movwf	??_LCD_Init+1
  1387  014B  30EA               	movlw	234
  1388  014C  00A1               	movwf	??_LCD_Init
  1389  014D                     u727:	
  1390  014D  0BA1               	decfsz	??_LCD_Init,f
  1391  014E  294D               	goto	u727
  1392  014F  0BA2               	decfsz	??_LCD_Init+1,f
  1393  0150  294D               	goto	u727
  1394  0151  0000               	nop
  1395                           
  1396                           ;lcd.h: 80: LCD_command(0x0);
  1397  0152  3000               	movlw	0
  1398  0153  118A  2282  118A   	fcall	_LCD_command
  1399                           
  1400                           ;lcd.h: 81: LCD_command(0x8);
  1401  0156  3008               	movlw	8
  1402  0157  118A  2282  118A   	fcall	_LCD_command
  1403                           
  1404                           ;lcd.h: 84: _delay((unsigned long)((20)*(12000000/4000.0)));
  1405  015A  304E               	movlw	78
  1406  015B  1283               	bcf	3,5	;RP0=0, select bank0
  1407  015C  1303               	bcf	3,6	;RP1=0, select bank0
  1408  015D  00A2               	movwf	??_LCD_Init+1
  1409  015E  30EA               	movlw	234
  1410  015F  00A1               	movwf	??_LCD_Init
  1411  0160                     u737:	
  1412  0160  0BA1               	decfsz	??_LCD_Init,f
  1413  0161  2960               	goto	u737
  1414  0162  0BA2               	decfsz	??_LCD_Init+1,f
  1415  0163  2960               	goto	u737
  1416  0164  0000               	nop
  1417                           
  1418                           ;lcd.h: 85: LCD_command(0x0);
  1419  0165  3000               	movlw	0
  1420  0166  118A  2282  118A   	fcall	_LCD_command
  1421                           
  1422                           ;lcd.h: 86: LCD_command(0x1);
  1423  0169  3001               	movlw	1
  1424  016A  118A  2282  118A   	fcall	_LCD_command
  1425                           
  1426                           ;lcd.h: 89: _delay((unsigned long)((20)*(12000000/4000.0)));
  1427  016D  304E               	movlw	78
  1428  016E  1283               	bcf	3,5	;RP0=0, select bank0
  1429  016F  1303               	bcf	3,6	;RP1=0, select bank0
  1430  0170  00A2               	movwf	??_LCD_Init+1
  1431  0171  30EA               	movlw	234
  1432  0172  00A1               	movwf	??_LCD_Init
  1433  0173                     u747:	
  1434  0173  0BA1               	decfsz	??_LCD_Init,f
  1435  0174  2973               	goto	u747
  1436  0175  0BA2               	decfsz	??_LCD_Init+1,f
  1437  0176  2973               	goto	u747
  1438  0177  0000               	nop
  1439                           
  1440                           ;lcd.h: 90: LCD_command(0x0);
  1441  0178  3000               	movlw	0
  1442  0179  118A  2282  118A   	fcall	_LCD_command
  1443                           
  1444                           ;lcd.h: 91: LCD_command(0x6);
  1445  017C  3006               	movlw	6
  1446  017D  118A  2282  118A   	fcall	_LCD_command
  1447                           
  1448                           ;lcd.h: 94: _delay((unsigned long)((20)*(12000000/4000.0)));
  1449  0180  304E               	movlw	78
  1450  0181  1283               	bcf	3,5	;RP0=0, select bank0
  1451  0182  1303               	bcf	3,6	;RP1=0, select bank0
  1452  0183  00A2               	movwf	??_LCD_Init+1
  1453  0184  30EA               	movlw	234
  1454  0185  00A1               	movwf	??_LCD_Init
  1455  0186                     u757:	
  1456  0186  0BA1               	decfsz	??_LCD_Init,f
  1457  0187  2986               	goto	u757
  1458  0188  0BA2               	decfsz	??_LCD_Init+1,f
  1459  0189  2986               	goto	u757
  1460  018A  0000               	nop
  1461                           
  1462                           ;lcd.h: 95: LCD_command(0x0);
  1463  018B  3000               	movlw	0
  1464  018C  118A  2282  118A   	fcall	_LCD_command
  1465                           
  1466                           ;lcd.h: 96: LCD_command(0xC);
  1467  018F  300C               	movlw	12
  1468  0190  118A  2282         	fcall	_LCD_command
  1469  0192  0008               	return
  1470  0193                     __end_of_LCD_Init:	
  1471                           
  1472                           	psect	text10
  1473  0282                     __ptext10:	
  1474 ;; *************** function _LCD_command *****************
  1475 ;; Defined at:
  1476 ;;		line 24 in file "lcd.h"
  1477 ;; Parameters:    Size  Location     Type
  1478 ;;  command         1    wreg     unsigned char 
  1479 ;; Auto vars:     Size  Location     Type
  1480 ;;  command         1    0[BANK0 ] unsigned char 
  1481 ;; Return value:  Size  Location     Type
  1482 ;;                  1    wreg      void 
  1483 ;; Registers used:
  1484 ;;		wreg, status,2, status,0, pclath, cstack
  1485 ;; Tracked objects:
  1486 ;;		On entry : 0/0
  1487 ;;		On exit  : 0/0
  1488 ;;		Unchanged: 0/0
  1489 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1490 ;;      Params:         0       0       0       0       0
  1491 ;;      Locals:         0       1       0       0       0
  1492 ;;      Temps:          2       0       0       0       0
  1493 ;;      Totals:         2       1       0       0       0
  1494 ;;Total ram usage:        3 bytes
  1495 ;; Hardware stack levels used:    1
  1496 ;; Hardware stack levels required when called:    2
  1497 ;; This function calls:
  1498 ;;		_LCD_set_port
  1499 ;; This function is called by:
  1500 ;;		_LCD_clear
  1501 ;;		_LCD_set_cursor
  1502 ;;		_LCD_Init
  1503 ;;		_LCD_shift_right
  1504 ;;		_LCD_shift_left
  1505 ;; This function uses a non-reentrant model
  1506 ;;
  1507                           
  1508                           
  1509                           ;psect for function _LCD_command
  1510  0282                     _LCD_command:	
  1511                           
  1512                           ;incstack = 0
  1513                           ; Regs used in _LCD_command: [wreg+status,2+status,0+pclath+cstack]
  1514                           ;LCD_command@command stored from wreg
  1515  0282  1283               	bcf	3,5	;RP0=0, select bank0
  1516  0283  1303               	bcf	3,6	;RP1=0, select bank0
  1517  0284  00A0               	movwf	LCD_command@command
  1518                           
  1519                           ;lcd.h: 25: RB0 = 0;
  1520  0285  1006               	bcf	6,0	;volatile
  1521                           
  1522                           ;lcd.h: 26: LCD_set_port (command);
  1523  0286  0820               	movf	LCD_command@command,w
  1524  0287  118A  2268  118A   	fcall	_LCD_set_port
  1525                           
  1526                           ;lcd.h: 27: RB1 = 1;
  1527  028A  1283               	bcf	3,5	;RP0=0, select bank0
  1528  028B  1303               	bcf	3,6	;RP1=0, select bank0
  1529  028C  1486               	bsf	6,1	;volatile
  1530                           
  1531                           ;lcd.h: 28: _delay((unsigned long)((5)*(12000000/4000.0)));
  1532  028D  3014               	movlw	20
  1533  028E  00F7               	movwf	??_LCD_command+1
  1534  028F  3079               	movlw	121
  1535  0290  00F6               	movwf	??_LCD_command
  1536  0291                     u767:	
  1537  0291  0BF6               	decfsz	??_LCD_command,f
  1538  0292  2A91               	goto	u767
  1539  0293  0BF7               	decfsz	??_LCD_command+1,f
  1540  0294  2A91               	goto	u767
  1541  0295  2A96               	nop2
  1542                           
  1543                           ;lcd.h: 29: RB1 = 0;
  1544  0296  1283               	bcf	3,5	;RP0=0, select bank0
  1545  0297  1303               	bcf	3,6	;RP1=0, select bank0
  1546  0298  1086               	bcf	6,1	;volatile
  1547  0299  0008               	return
  1548  029A                     __end_of_LCD_command:	
  1549                           
  1550                           	psect	text11
  1551  0268                     __ptext11:	
  1552 ;; *************** function _LCD_set_port *****************
  1553 ;; Defined at:
  1554 ;;		line 8 in file "lcd.h"
  1555 ;; Parameters:    Size  Location     Type
  1556 ;;  value_4_bit     1    wreg     unsigned char 
  1557 ;; Auto vars:     Size  Location     Type
  1558 ;;  value_4_bit     1    5[COMMON] unsigned char 
  1559 ;; Return value:  Size  Location     Type
  1560 ;;                  1    wreg      void 
  1561 ;; Registers used:
  1562 ;;		wreg
  1563 ;; Tracked objects:
  1564 ;;		On entry : 0/0
  1565 ;;		On exit  : 0/0
  1566 ;;		Unchanged: 0/0
  1567 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1568 ;;      Params:         0       0       0       0       0
  1569 ;;      Locals:         1       0       0       0       0
  1570 ;;      Temps:          0       0       0       0       0
  1571 ;;      Totals:         1       0       0       0       0
  1572 ;;Total ram usage:        1 bytes
  1573 ;; Hardware stack levels used:    1
  1574 ;; Hardware stack levels required when called:    1
  1575 ;; This function calls:
  1576 ;;		Nothing
  1577 ;; This function is called by:
  1578 ;;		_LCD_command
  1579 ;;		_LCD_write_char
  1580 ;; This function uses a non-reentrant model
  1581 ;;
  1582                           
  1583                           
  1584                           ;psect for function _LCD_set_port
  1585  0268                     _LCD_set_port:	
  1586                           
  1587                           ;incstack = 0
  1588                           ; Regs used in _LCD_set_port: [wreg]
  1589                           ;LCD_set_port@value_4_bit stored from wreg
  1590  0268  00F5               	movwf	LCD_set_port@value_4_bit
  1591                           
  1592                           ;lcd.h: 10: if (value_4_bit & 0x1) RA0 = 1;
  1593  0269  1C75               	btfss	LCD_set_port@value_4_bit,0
  1594  026A  2A6F               	goto	l41
  1595  026B  1283               	bcf	3,5	;RP0=0, select bank0
  1596  026C  1303               	bcf	3,6	;RP1=0, select bank0
  1597  026D  1405               	bsf	5,0	;volatile
  1598  026E  2A72               	goto	l42
  1599  026F                     l41:	
  1600                           
  1601                           ;lcd.h: 11: else RA0 = 0;
  1602  026F  1283               	bcf	3,5	;RP0=0, select bank0
  1603  0270  1303               	bcf	3,6	;RP1=0, select bank0
  1604  0271  1005               	bcf	5,0	;volatile
  1605  0272                     l42:	
  1606                           
  1607                           ;lcd.h: 13: if (value_4_bit & 0x2) RA1 = 1;
  1608  0272  1CF5               	btfss	LCD_set_port@value_4_bit,1
  1609  0273  2A76               	goto	l43
  1610  0274  1485               	bsf	5,1	;volatile
  1611  0275  2A77               	goto	l44
  1612  0276                     l43:	
  1613                           
  1614                           ;lcd.h: 14: else RA1 = 0;
  1615  0276  1085               	bcf	5,1	;volatile
  1616  0277                     l44:	
  1617                           
  1618                           ;lcd.h: 16: if (value_4_bit & 0x4) RA2 = 1;
  1619  0277  1D75               	btfss	LCD_set_port@value_4_bit,2
  1620  0278  2A7B               	goto	l45
  1621  0279  1505               	bsf	5,2	;volatile
  1622  027A  2A7C               	goto	l46
  1623  027B                     l45:	
  1624                           
  1625                           ;lcd.h: 17: else RA2 = 0;
  1626  027B  1105               	bcf	5,2	;volatile
  1627  027C                     l46:	
  1628                           
  1629                           ;lcd.h: 19: if (value_4_bit & 0x8) RA3 = 1;
  1630  027C  1DF5               	btfss	LCD_set_port@value_4_bit,3
  1631  027D  2A80               	goto	l47
  1632  027E  1585               	bsf	5,3	;volatile
  1633  027F  0008               	return
  1634  0280                     l47:	
  1635                           
  1636                           ;lcd.h: 20: else RA3 = 0;
  1637  0280  1185               	bcf	5,3	;volatile
  1638  0281  0008               	return
  1639  0282                     __end_of_LCD_set_port:	
  1640                           
  1641                           	psect	text12
  1642  029A                     __ptext12:	
  1643 ;; *************** function _ISR *****************
  1644 ;; Defined at:
  1645 ;;		line 28 in file "main.c"
  1646 ;; Parameters:    Size  Location     Type
  1647 ;;		None
  1648 ;; Auto vars:     Size  Location     Type
  1649 ;;		None
  1650 ;; Return value:  Size  Location     Type
  1651 ;;                  1    wreg      void 
  1652 ;; Registers used:
  1653 ;;		wreg, status,2, status,0
  1654 ;; Tracked objects:
  1655 ;;		On entry : 0/0
  1656 ;;		On exit  : 0/0
  1657 ;;		Unchanged: 0/0
  1658 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1659 ;;      Params:         0       0       0       0       0
  1660 ;;      Locals:         0       0       0       0       0
  1661 ;;      Temps:          5       0       0       0       0
  1662 ;;      Totals:         5       0       0       0       0
  1663 ;;Total ram usage:        5 bytes
  1664 ;; Hardware stack levels used:    1
  1665 ;; This function calls:
  1666 ;;		Nothing
  1667 ;; This function is called by:
  1668 ;;		Interrupt level 1
  1669 ;; This function uses a non-reentrant model
  1670 ;;
  1671                           
  1672                           
  1673                           ;psect for function _ISR
  1674  029A                     _ISR:	
  1675                           
  1676                           ;main.c: 29: if(TMR0IE && TMR0IF){
  1677  029A  1A8B               	btfsc	11,5	;volatile
  1678  029B  1D0B               	btfss	11,2	;volatile
  1679  029C  2AA6               	goto	i1l99
  1680                           
  1681                           ;main.c: 30: TMR0IF = 0;
  1682  029D  110B               	bcf	11,2	;volatile
  1683                           
  1684                           ;main.c: 31: ++timerCount;
  1685  029E  3001               	movlw	1
  1686  029F  00F0               	movwf	??_ISR
  1687  02A0  0870               	movf	??_ISR,w
  1688  02A1  07F8               	addwf	_timerCount,f
  1689                           
  1690                           ;main.c: 33: if (timerCount >= 183) {
  1691  02A2  30B7               	movlw	183
  1692  02A3  0278               	subwf	_timerCount,w
  1693  02A4  1803               	btfsc	3,0
  1694                           
  1695                           ;main.c: 34: timerCount = 0;
  1696  02A5  01F8               	clrf	_timerCount
  1697  02A6                     i1l99:	
  1698  02A6  0874               	movf	??_ISR+4,w
  1699  02A7  00FF               	movwf	127
  1700  02A8  0873               	movf	??_ISR+3,w
  1701  02A9  008A               	movwf	10
  1702  02AA  0872               	movf	??_ISR+2,w
  1703  02AB  0084               	movwf	4
  1704  02AC  0E71               	swapf	(??_ISR+1)^(0+-128),w
  1705  02AD  0083               	movwf	3
  1706  02AE  0EFE               	swapf	126,f
  1707  02AF  0E7E               	swapf	126,w
  1708  02B0  0009               	retfie
  1709  02B1                     __end_of_ISR:	
  1710  007E                     btemp	set	126	;btemp
  1711  007E                     wtemp0	set	126
  1712                           
  1713                           	psect	intentry
  1714  0004                     __pintentry:	
  1715                           ;incstack = 0
  1716                           ; Regs used in _ISR: [wreg+status,2+status,0]
  1717                           
  1718  0004                     interrupt_function:	
  1719  007E                     saved_w	set	btemp
  1720  0004  00FE               	movwf	btemp
  1721  0005  0E03               	swapf	3,w
  1722  0006  00F1               	movwf	??_ISR+1
  1723  0007  0804               	movf	4,w
  1724  0008  00F2               	movwf	??_ISR+2
  1725  0009  080A               	movf	10,w
  1726  000A  00F3               	movwf	??_ISR+3
  1727  000B  1283               	bcf	3,5	;RP0=0, select bank0
  1728  000C  1303               	bcf	3,6	;RP1=0, select bank0
  1729  000D  087F               	movf	btemp+1,w
  1730  000E  00F4               	movwf	??_ISR+4
  1731  000F  118A  2A9A         	ljmp	_ISR


Data Sizes:
    Strings     71
    Constant    0
    Data        0
    BSS         1
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8       9
    BANK0            80      9       9
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    LCD_write_string@str	PTR unsigned char  size(1) Largest target is 20
		 -> STR_5(CODE[20]), STR_4(CODE[12]), STR_3(CODE[13]), STR_2(CODE[10]), 
		 -> STR_1(CODE[16]), 


Critical Paths under _main in COMMON

    _main->_LCD_write_char
    _LCD_write_string->_LCD_write_char
    _LCD_write_char->_LCD_set_port
    _LCD_shift_right->_LCD_command
    _LCD_shift_left->_LCD_command
    _LCD_set_cursor->_LCD_command
    _LCD_clear->_LCD_command
    _LCD_Init->_LCD_command
    _LCD_command->_LCD_set_port

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_LCD_set_cursor
    _LCD_shift_right->_LCD_command
    _LCD_shift_left->_LCD_command
    _LCD_set_cursor->_LCD_command
    _LCD_clear->_LCD_command
    _LCD_Init->_LCD_command

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0    2340
                                              5 BANK0      4     4      0
                           _LCD_Init
                          _LCD_clear
                     _LCD_set_cursor
                     _LCD_shift_left
                    _LCD_shift_right
                     _LCD_write_char
                   _LCD_write_string
                          _Syst_Init
                          _TMR0_Init
 ---------------------------------------------------------------------------------
 (1) _TMR0_Init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Syst_Init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LCD_write_string                                     3     3      0     466
                                              0 BANK0      3     3      0
                     _LCD_write_char
 ---------------------------------------------------------------------------------
 (2) _LCD_write_char                                       2     2      0     186
                                              6 COMMON     2     2      0
                       _LCD_set_port
 ---------------------------------------------------------------------------------
 (1) _LCD_shift_right                                      0     0      0     155
                        _LCD_command
 ---------------------------------------------------------------------------------
 (1) _LCD_shift_left                                       0     0      0     155
                        _LCD_command
 ---------------------------------------------------------------------------------
 (1) _LCD_set_cursor                                       4     3      1     932
                                              1 BANK0      4     3      1
                        _LCD_command
 ---------------------------------------------------------------------------------
 (1) _LCD_clear                                            0     0      0     155
                        _LCD_command
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             2     2      0     155
                                              1 BANK0      2     2      0
                        _LCD_command
 ---------------------------------------------------------------------------------
 (2) _LCD_command                                          3     3      0     155
                                              6 COMMON     2     2      0
                                              0 BANK0      1     1      0
                       _LCD_set_port
 ---------------------------------------------------------------------------------
 (3) _LCD_set_port                                         1     1      0     124
                                              5 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _ISR                                                  5     5      0       0
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_Init
     _LCD_command
       _LCD_set_port
   _LCD_clear
     _LCD_command
       _LCD_set_port
   _LCD_set_cursor
     _LCD_command
       _LCD_set_port
   _LCD_shift_left
     _LCD_command
       _LCD_set_port
   _LCD_shift_right
     _LCD_command
       _LCD_set_port
   _LCD_write_char
     _LCD_set_port
   _LCD_write_string
     _LCD_write_char
       _LCD_set_port
   _Syst_Init
   _TMR0_Init

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      8       9       1       64.3%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      12       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      9       9       5       11.3%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      12      12        0.0%


Microchip Technology PIC Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Sun Apr 22 20:31:54 2018

                          pc 0002                  __CFG_CP$OFF 0000                           l41 026F  
                         l42 0272                           l43 0276                           l44 0277  
                         l45 027B                           l46 027C                           l47 0280  
                         fsr 0004                          l993 01F5                          _GIE 005F  
                        l997 01FC                          _RA0 0028                          _RA1 0029  
                        _RB0 0030                          _RA2 002A                          _RB1 0031  
                        _RA3 002B                          u360 02BF                 __CFG_CPD$OFF 0000  
                        _ISR 029A                          u535 020F                          u607 006A  
                        u465 0226                          u617 008F                          u707 0127  
                        u627 00AF                          u717 013A                          u637 00DD  
                        u727 014D                          u647 0234                          _PSA 040B  
                        u737 0160                          u657 0244                          u747 0173  
                        u667 00EB                          u757 0186                          u677 00FA  
                        u597 0043                          u767 0291                          u687 0109  
                        u697 0118                          fsr0 0004                 __CFG_IESO$ON 0000  
               __CFG_FOSC$HS 0000                 __CFG_LVP$OFF 0000                         ?_ISR 0070  
                       l1001 0203                         l1005 020C                         l1101 00A2  
                       l1051 024F                         l1115 00C2                         l1107 00A7  
                       l1063 0020                         l1093 0087                         STR_1 01AD  
                       STR_2 01D6                         STR_3 01BD                         STR_4 01CA  
                       STR_5 0199                 ?_LCD_command 0070                         _T0CS 040D  
                       _PEIE 005E                         i1l99 02A6                 __CFG_WRT$OFF 0000  
              __CFG_FCMEN$ON 0000                         _main 0017                         btemp 007E  
              __CFG_BOREN$ON 0000                         start 0011           __size_of_LCD_clear 0008  
                      ??_ISR 0070             __end_of_LCD_Init 0193                        ?_main 0070  
              __CFG_WDTE$OFF 0000                        _ANSEL 009B                        _PORTA 0005  
                      _PORTB 0006                        _TRISA 0085                        _TRISB 0086  
             __CFG_CCPMX$RB0 0000           __size_of_TMR0_Init 000B      LCD_set_port@value_4_bit 0075  
                      main@j 0028                        pclath 000A                ?_LCD_set_port 0070  
                      status 0003                        wtemp0 007E      __size_of_LCD_shift_left 0008  
    __size_of_LCD_set_cursor 003F               __CFG_MCLRE$OFF 0000              __initialization 0013  
               __end_of_main 00E5            ?_LCD_write_string 0070                       ??_main 0025  
         ??_LCD_write_string 0020            __end_of_LCD_clear 02E4               ??_LCD_set_port 0075  
                     _TMR0IE 005D                       _TMR0IF 005A               __CFG_PWRTE$OFF 0000  
          __end_of_TMR0_Init 02CC      __size_of_LCD_write_char 002C                       saved_w 007E  
    __end_of__initialization 0014                    ?_LCD_Init 0070         __size_of_LCD_command 0018  
   __size_of_LCD_shift_right 0008           __size_of_Syst_Init 0010               __pcstackCOMMON 0070  
             _OPTION_REGbits 0081                   ??_LCD_Init 0021               _LCD_shift_left 02D4  
             _LCD_set_cursor 01E0                   __pmaintext 0017                   __pintentry 0004  
       __end_of_LCD_set_port 0282            __end_of_Syst_Init 02C1                   __stringtab 0193  
     __end_of_LCD_shift_left 02DC       __end_of_LCD_set_cursor 021F               _LCD_write_char 021F  
          ??_LCD_shift_right 0078                      __ptext1 02C1                      __ptext2 02B1  
                    __ptext3 024B                      __ptext4 021F                      __ptext5 02CC  
                    __ptext6 02D4                      __ptext7 01E0                      __ptext8 02DC  
                    __ptext9 00E5                 __size_of_ISR 0017                    _LCD_clear 02DC  
       end_of_initialization 0014    __size_of_LCD_write_string 001D              ?_LCD_shift_left 0070  
            ?_LCD_set_cursor 0021       __end_of_LCD_write_char 024B                   _timerCount 0078  
                  _TMR0_Init 02C1                   ?_LCD_clear 0070            __size_of_LCD_Init 00AE  
      __size_of_LCD_set_port 001A              ?_LCD_write_char 0070                   ?_TMR0_Init 0070  
        start_initialization 0013                  __end_of_ISR 02B1                ??_LCD_command 0076  
          LCD_set_cursor@row 0024                 _LCD_set_port 0268  LCD_set_cursor@ddram_address 0023  
       LCD_set_cursor@column 0021                  __pbssCOMMON 0078                    ___latbits 0001  
              __pcstackBANK0 0020                  ??_LCD_clear 0078                    _Syst_Init 02B1  
        LCD_write_string@str 0022             _LCD_write_string 024B              _LCD_shift_right 02CC  
        __end_of_LCD_command 029A                  ??_TMR0_Init 0075                    __pstrings 0193  
           ??_LCD_shift_left 0078             ??_LCD_set_cursor 0022                   ?_Syst_Init 0070  
            LCD_write_char@c 0077            interrupt_function 0004                     _LCD_Init 00E5  
                __stringbase 0198      __end_of_LCD_shift_right 02D4                  _LCD_command 0282  
           ??_LCD_write_char 0076           __end_of__stringtab 0199                     __ptext10 0282  
                   __ptext11 0268                     __ptext12 029A                  ??_Syst_Init 0075  
              __size_of_main 00CE     __end_of_LCD_write_string 0268             ?_LCD_shift_right 0070  
         LCD_command@command 0020            LCD_write_string@j 0021                     intlevel1 0000  
                  stringcode 0193                     stringdir 0193                     stringtab 0193  
