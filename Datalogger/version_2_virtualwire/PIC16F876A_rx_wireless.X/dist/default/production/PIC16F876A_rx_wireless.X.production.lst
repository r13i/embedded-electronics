

Microchip Technology PIC LITE Macro Assembler V1.40 build -251452761 
                                                                                               Sun May 06 20:44:48 2018

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	16F876A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     8                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	maintext,global,class=CODE,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,delta=2
    15                           	psect	text2,local,class=CODE,merge=1,delta=2
    16                           	psect	text3,local,class=CODE,merge=1,delta=2
    17                           	psect	text4,local,class=CODE,merge=1,delta=2
    18                           	psect	text5,local,class=CODE,merge=1,delta=2
    19                           	psect	text6,local,class=CODE,merge=1,delta=2
    20                           	psect	text7,local,class=CODE,merge=1,delta=2
    21                           	psect	text8,local,class=CODE,merge=1,delta=2
    22                           	psect	text9,local,class=CODE,merge=1,delta=2
    23                           	psect	text10,local,class=CODE,merge=1,delta=2
    24                           	psect	text11,local,class=CODE,merge=1,delta=2
    25                           	psect	text12,local,class=CODE,merge=1,delta=2
    26                           	psect	text13,local,class=CODE,merge=1,delta=2
    27                           	psect	text14,local,class=CODE,merge=1,delta=2
    28                           	psect	text15,local,class=CODE,merge=1,delta=2
    29                           	psect	text16,local,class=CODE,merge=1,delta=2
    30                           	psect	text17,local,class=CODE,merge=1,delta=2
    31                           	psect	text18,local,class=CODE,merge=1,delta=2
    32                           	psect	text19,local,class=CODE,merge=1,delta=2
    33                           	psect	text20,local,class=CODE,merge=1,delta=2
    34                           	psect	text21,local,class=CODE,merge=1,delta=2
    35                           	psect	text22,local,class=CODE,merge=1,delta=2
    36                           	psect	text23,local,class=CODE,merge=1,delta=2
    37                           	psect	text24,local,class=CODE,merge=1,delta=2
    38                           	psect	text25,local,class=CODE,merge=1,delta=2
    39                           	psect	text26,local,class=CODE,merge=1,delta=2
    40                           	psect	text27,local,class=CODE,merge=1,delta=2
    41                           	psect	text28,local,class=CODE,merge=1,delta=2
    42                           	psect	text29,local,class=CODE,merge=1,delta=2
    43                           	psect	intentry,global,class=CODE,delta=2
    44                           	psect	text30,local,class=CODE,merge=1,delta=2
    45                           	psect	text31,local,class=CODE,merge=1,delta=2
    46                           	psect	text32,local,class=CODE,merge=1,delta=2
    47                           	psect	text33,local,class=CODE,merge=1,delta=2
    48                           	psect	text34,local,class=CODE,merge=1,delta=2
    49                           	psect	text35,local,class=CODE,merge=1,delta=2
    50                           	psect	text36,local,class=CODE,merge=1,delta=2
    51                           	psect	text37,local,class=CODE,merge=1,delta=2
    52                           	psect	text38,local,class=CODE,merge=1,delta=2
    53                           	dabs	1,0x7E,2
    54  0000                     
    55                           ; Version 1.40
    56                           ; Generated 01/12/2016 GMT
    57                           ; 
    58                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    59                           ; All rights reserved.
    60                           ; 
    61                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    62                           ; 
    63                           ; Redistribution and use in source and binary forms, with or without modification, are
    64                           ; permitted provided that the following conditions are met:
    65                           ; 
    66                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    67                           ;        conditions and the following disclaimer.
    68                           ; 
    69                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    70                           ;        of conditions and the following disclaimer in the documentation and/or other
    71                           ;        materials provided with the distribution.
    72                           ; 
    73                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    74                           ;        software without specific prior written permission.
    75                           ; 
    76                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    77                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    78                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    79                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    80                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    81                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    82                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    83                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    84                           ; 
    85                           ; 
    86                           ; Code-generator required, PIC16F876A Definitions
    87                           ; 
    88                           ; SFR Addresses
    89  0000                     	;# 
    90  0001                     	;# 
    91  0002                     	;# 
    92  0003                     	;# 
    93  0004                     	;# 
    94  0005                     	;# 
    95  0006                     	;# 
    96  0007                     	;# 
    97  000A                     	;# 
    98  000B                     	;# 
    99  000C                     	;# 
   100  000D                     	;# 
   101  000E                     	;# 
   102  000E                     	;# 
   103  000F                     	;# 
   104  0010                     	;# 
   105  0011                     	;# 
   106  0012                     	;# 
   107  0013                     	;# 
   108  0014                     	;# 
   109  0015                     	;# 
   110  0015                     	;# 
   111  0016                     	;# 
   112  0017                     	;# 
   113  0018                     	;# 
   114  0019                     	;# 
   115  001A                     	;# 
   116  001B                     	;# 
   117  001B                     	;# 
   118  001C                     	;# 
   119  001D                     	;# 
   120  001E                     	;# 
   121  001F                     	;# 
   122  0081                     	;# 
   123  0085                     	;# 
   124  0086                     	;# 
   125  0087                     	;# 
   126  008C                     	;# 
   127  008D                     	;# 
   128  008E                     	;# 
   129  0091                     	;# 
   130  0092                     	;# 
   131  0093                     	;# 
   132  0094                     	;# 
   133  0098                     	;# 
   134  0099                     	;# 
   135  009C                     	;# 
   136  009D                     	;# 
   137  009E                     	;# 
   138  009F                     	;# 
   139  010C                     	;# 
   140  010D                     	;# 
   141  010E                     	;# 
   142  010F                     	;# 
   143  018C                     	;# 
   144  018D                     	;# 
   145  0000                     	;# 
   146  0001                     	;# 
   147  0002                     	;# 
   148  0003                     	;# 
   149  0004                     	;# 
   150  0005                     	;# 
   151  0006                     	;# 
   152  0007                     	;# 
   153  000A                     	;# 
   154  000B                     	;# 
   155  000C                     	;# 
   156  000D                     	;# 
   157  000E                     	;# 
   158  000E                     	;# 
   159  000F                     	;# 
   160  0010                     	;# 
   161  0011                     	;# 
   162  0012                     	;# 
   163  0013                     	;# 
   164  0014                     	;# 
   165  0015                     	;# 
   166  0015                     	;# 
   167  0016                     	;# 
   168  0017                     	;# 
   169  0018                     	;# 
   170  0019                     	;# 
   171  001A                     	;# 
   172  001B                     	;# 
   173  001B                     	;# 
   174  001C                     	;# 
   175  001D                     	;# 
   176  001E                     	;# 
   177  001F                     	;# 
   178  0081                     	;# 
   179  0085                     	;# 
   180  0086                     	;# 
   181  0087                     	;# 
   182  008C                     	;# 
   183  008D                     	;# 
   184  008E                     	;# 
   185  0091                     	;# 
   186  0092                     	;# 
   187  0093                     	;# 
   188  0094                     	;# 
   189  0098                     	;# 
   190  0099                     	;# 
   191  009C                     	;# 
   192  009D                     	;# 
   193  009E                     	;# 
   194  009F                     	;# 
   195  010C                     	;# 
   196  010D                     	;# 
   197  010E                     	;# 
   198  010F                     	;# 
   199  018C                     	;# 
   200  018D                     	;# 
   201                           
   202                           	psect	strings
   203  0719                     __pstrings:	
   204  0719                     stringtab:	
   205  0719                     __stringtab:	
   206                           
   207                           ;	String table - string pointers are 1 byte each
   208  0719  1BFF               	btfsc	btemp+1,7
   209  071A  2F23               	ljmp	stringcode
   210  071B  1383               	bcf	3,7
   211  071C  187F               	btfsc	btemp+1,0
   212  071D  1783               	bsf	3,7
   213  071E  0800               	movf	0,w
   214  071F  0A84               	incf	4,f
   215  0720  1903               	skipnz
   216  0721  0AFF               	incf	btemp+1,f
   217  0722  0008               	return
   218  0723                     stringcode:	
   219  0723                     stringdir:	
   220  0723  3007               	movlw	high stringdir
   221  0724  008A               	movwf	10
   222  0725  0804               	movf	4,w
   223  0726  0A84               	incf	4,f
   224  0727  0782               	addwf	2,f
   225  0728                     __stringbase:	
   226  0728  3400               	retlw	0
   227  0729                     __end_of__stringtab:	
   228  0729                     __calc_timer0_prescaler@prescaler_factor:	
   229  0729  3401               	retlw	1
   230  072A  3400               	retlw	0
   231  072B  3402               	retlw	2
   232  072C  3400               	retlw	0
   233  072D  3404               	retlw	4
   234  072E  3400               	retlw	0
   235  072F  3408               	retlw	8
   236  0730  3400               	retlw	0
   237  0731  3410               	retlw	16
   238  0732  3400               	retlw	0
   239  0733  3420               	retlw	32
   240  0734  3400               	retlw	0
   241  0735  3440               	retlw	64
   242  0736  3400               	retlw	0
   243  0737  3480               	retlw	128
   244  0738  3400               	retlw	0
   245  0739  3400               	retlw	0
   246  073A  3401               	retlw	1
   247  073B                     __end_of__calc_timer0_prescaler@prescaler_factor:	
   248  073B                     _symbols:	
   249  073B  340D               	retlw	13
   250  073C  340E               	retlw	14
   251  073D  3413               	retlw	19
   252  073E  3415               	retlw	21
   253  073F  3416               	retlw	22
   254  0740  3419               	retlw	25
   255  0741  341A               	retlw	26
   256  0742  341C               	retlw	28
   257  0743  3423               	retlw	35
   258  0744  3425               	retlw	37
   259  0745  3426               	retlw	38
   260  0746  3429               	retlw	41
   261  0747  342A               	retlw	42
   262  0748  342C               	retlw	44
   263  0749  3432               	retlw	50
   264  074A  3434               	retlw	52
   265  074B                     __end_of_symbols:	
   266  074B                     _dpowers:	
   267  074B  3401               	retlw	1
   268  074C  3400               	retlw	0
   269  074D  340A               	retlw	10
   270  074E  3400               	retlw	0
   271  074F  3464               	retlw	100
   272  0750  3400               	retlw	0
   273  0751  34E8               	retlw	232
   274  0752  3403               	retlw	3
   275  0753  3410               	retlw	16
   276  0754  3427               	retlw	39
   277  0755                     __end_of_dpowers:	
   278  0755                     _vw_tx_buf_header:	
   279  0755  342A               	retlw	42
   280  0756  342A               	retlw	42
   281  0757  342A               	retlw	42
   282  0758  342A               	retlw	42
   283  0759  342A               	retlw	42
   284  075A  342A               	retlw	42
   285  075B  3438               	retlw	56
   286  075C  342C               	retlw	44
   287  075D                     __end_of_vw_tx_buf_header:	
   288  0005                     _PORTA	set	5
   289  0006                     _PORTB	set	6
   290  0010                     _T1CONbits	set	16
   291  0001                     _TMR0	set	1
   292  005F                     _GIE	set	95
   293  005E                     _PEIE	set	94
   294  0029                     _RA1	set	41
   295  002A                     _RA2	set	42
   296  0032                     _RB2	set	50
   297  0033                     _RB3	set	51
   298  0034                     _RB4	set	52
   299  0035                     _RB5	set	53
   300  0036                     _RB6	set	54
   301  0037                     _RB7	set	55
   302  005D                     _TMR0IE	set	93
   303  005A                     _TMR0IF	set	90
   304  0081                     _TMR1CS	set	129
   305  0060                     _TMR1IF	set	96
   306  0080                     _TMR1ON	set	128
   307  009F                     _ADCON1	set	159
   308  0081                     _OPTION_REG	set	129
   309  0085                     _TRISA	set	133
   310  0086                     _TRISB	set	134
   311  040D                     _T0CS	set	1037
   312  0460                     _TMR1IE	set	1120
   313  0429                     _TRISA1	set	1065
   314  042A                     _TRISA2	set	1066
   315  075D                     STR_6:	
   316  075D  342A               	retlw	42	;'*'
   317  075E  3473               	retlw	115	;'s'
   318  075F  3475               	retlw	117	;'u'
   319  0760  3470               	retlw	112	;'p'
   320  0761  3465               	retlw	101	;'e'
   321  0762  3472               	retlw	114	;'r'
   322  0763  342A               	retlw	42	;'*'
   323  0764  3464               	retlw	100	;'d'
   324  0765  3461               	retlw	97	;'a'
   325  0766  3474               	retlw	116	;'t'
   326  0767  3461               	retlw	97	;'a'
   327  0768  346C               	retlw	108	;'l'
   328  0769  346F               	retlw	111	;'o'
   329  076A  3467               	retlw	103	;'g'
   330  076B  3467               	retlw	103	;'g'
   331  076C  3465               	retlw	101	;'e'
   332  076D  3472               	retlw	114	;'r'
   333  076E  342A               	retlw	42	;'*'
   334  076F  3400               	retlw	0
   335  0770                     STR_3:	
   336  0770  3425               	retlw	37	;'%'
   337  0771  3430               	retlw	48	;'0'
   338  0772  3432               	retlw	50	;'2'
   339  0773  3475               	retlw	117	;'u'
   340  0774  3420               	retlw	32	;' '
   341  0775  343A               	retlw	58	;':'
   342  0776  3420               	retlw	32	;' '
   343  0777  3425               	retlw	37	;'%'
   344  0778  3430               	retlw	48	;'0'
   345  0779  3432               	retlw	50	;'2'
   346  077A  3475               	retlw	117	;'u'
   347  077B  3420               	retlw	32	;' '
   348  077C  343A               	retlw	58	;':'
   349  077D  3420               	retlw	32	;' '
   350  077E  3425               	retlw	37	;'%'
   351  077F  3430               	retlw	48	;'0'
   352  0780  3432               	retlw	50	;'2'
   353  0781  3475               	retlw	117	;'u'
   354  0782  3400               	retlw	0
   355  0783                     STR_5:	
   356  0783  3476               	retlw	118	;'v'
   357  0784  346F               	retlw	111	;'o'
   358  0785  346C               	retlw	108	;'l'
   359  0786  3474               	retlw	116	;'t'
   360  0787  3461               	retlw	97	;'a'
   361  0788  3467               	retlw	103	;'g'
   362  0789  3465               	retlw	101	;'e'
   363  078A  343A               	retlw	58	;':'
   364  078B  3420               	retlw	32	;' '
   365  078C  3425               	retlw	37	;'%'
   366  078D  3473               	retlw	115	;'s'
   367  078E  3420               	retlw	32	;' '
   368  078F  3425               	retlw	37	;'%'
   369  0790  3425               	retlw	37	;'%'
   370  0791  3400               	retlw	0
   371  0792                     STR_4:	
   372  0792  346C               	retlw	108	;'l'
   373  0793  3469               	retlw	105	;'i'
   374  0794  3467               	retlw	103	;'g'
   375  0795  3468               	retlw	104	;'h'
   376  0796  3474               	retlw	116	;'t'
   377  0797  343A               	retlw	58	;':'
   378  0798  3420               	retlw	32	;' '
   379  0799  3425               	retlw	37	;'%'
   380  079A  3473               	retlw	115	;'s'
   381  079B  3420               	retlw	32	;' '
   382  079C  3425               	retlw	37	;'%'
   383  079D  3425               	retlw	37	;'%'
   384  079E  3400               	retlw	0
   385  079F                     STR_7:	
   386  079F  3428               	retlw	40	;'('
   387  07A0  346E               	retlw	110	;'n'
   388  07A1  3475               	retlw	117	;'u'
   389  07A2  346C               	retlw	108	;'l'
   390  07A3  346C               	retlw	108	;'l'
   391  07A4  3429               	retlw	41	;')'
   392  07A5  3400               	retlw	0
   393  07A6                     STR_1:	
   394  07A6  342C               	retlw	44	;','
   395  07A7  3400               	retlw	0
   396  07A6                     
   397                           ; #config settings
   398  0000                     
   399                           	psect	cinit
   400  0015                     start_initialization:	
   401  0015                     __initialization:	
   402                           
   403                           ; Clear objects allocated to BANK0
   404  0015  1383               	bcf	3,7	;select IRP bank0
   405  0016  3043               	movlw	low __pbssBANK0
   406  0017  0084               	movwf	4
   407  0018  305C               	movlw	low (__pbssBANK0+25)
   408  0019  120A  158A  21C3  120A  118A  	fcall	clear_ram0
   409                           
   410                           ; Clear objects allocated to BANK1
   411  001E  30D4               	movlw	low __pbssBANK1
   412  001F  0084               	movwf	4
   413  0020  30EE               	movlw	low (__pbssBANK1+26)
   414  0021  120A  158A  21C3  120A  118A  	fcall	clear_ram0
   415                           
   416                           ; Clear objects allocated to BANK3
   417  0026  1783               	bsf	3,7	;select IRP bank2
   418  0027  3090               	movlw	low __pbssBANK3
   419  0028  0084               	movwf	4
   420  0029  30CC               	movlw	low (__pbssBANK3+60)
   421  002A  120A  158A  21C3   	fcall	clear_ram0
   422  002D                     end_of_initialization:	
   423                           ;End of C runtime variable initialization code
   424                           
   425  002D                     __end_of__initialization:	
   426  002D  0183               	clrf	3
   427  002E  120A  118A  2C39   	ljmp	_main	;jump to C main() function
   428                           
   429                           	psect	bssBANK0
   430  0043                     __pbssBANK0:	
   431  0043                     _vw_rx_bits:	
   432  0043                     	ds	2
   433  0045                     _HH:	
   434  0045                     	ds	1
   435  0046                     _MM:	
   436  0046                     	ds	1
   437  0047                     _SS:	
   438  0047                     	ds	1
   439  0048                     _timerCounter:	
   440  0048                     	ds	1
   441  0049                     _vw_rx_active:	
   442  0049                     	ds	1
   443  004A                     _vw_rx_bit_count:	
   444  004A                     	ds	1
   445  004B                     _vw_rx_count:	
   446  004B                     	ds	1
   447  004C                     _vw_rx_done:	
   448  004C                     	ds	1
   449  004D                     _vw_rx_enabled:	
   450  004D                     	ds	1
   451  004E                     _vw_rx_enabled_last:	
   452  004E                     	ds	1
   453  004F                     _vw_rx_integrator:	
   454  004F                     	ds	1
   455  0050                     _vw_rx_inverted:	
   456  0050                     	ds	1
   457  0051                     _vw_rx_last_sample:	
   458  0051                     	ds	1
   459  0052                     _vw_rx_len:	
   460  0052                     	ds	1
   461  0053                     _vw_rx_pll_ramp:	
   462  0053                     	ds	1
   463  0054                     _vw_rx_sample:	
   464  0054                     	ds	1
   465  0055                     _vw_tx_bit:	
   466  0055                     	ds	1
   467  0056                     _vw_tx_enabled:	
   468  0056                     	ds	1
   469  0057                     _vw_tx_header:	
   470  0057                     	ds	1
   471  0058                     _vw_tx_index:	
   472  0058                     	ds	1
   473  0059                     _vw_tx_len:	
   474  0059                     	ds	1
   475  005A                     _vw_tx_sample:	
   476  005A                     	ds	1
   477  005B                     strtok@sp:	
   478  005B                     	ds	1
   479                           
   480                           	psect	bssBANK1
   481  00D4                     __pbssBANK1:	
   482  00D4                     _clockBuffer:	
   483  00D4                     	ds	15
   484  00E3                     _text:	
   485  00E3                     	ds	10
   486  00ED                     _vw_tmr0_value:	
   487  00ED                     	ds	1
   488                           
   489                           	psect	bssBANK3
   490  0190                     __pbssBANK3:	
   491  0190                     _adcBuffer_0:	
   492  0190                     	ds	20
   493  01A4                     _adcBuffer_1:	
   494  01A4                     	ds	20
   495  01B8                     _vw_tx_buf:	
   496  01B8                     	ds	20
   497                           
   498                           	psect	clrtext
   499  09C3                     clear_ram0:	
   500                           ;	Called with FSR containing the base address, and
   501                           ;	W with the last address+1
   502                           
   503  09C3  0064               	clrwdt	;clear the watchdog before getting into this loop
   504  09C4                     clrloop0:	
   505  09C4  0180               	clrf	0	;clear RAM location pointed to by FSR
   506  09C5  0A84               	incf	4,f	;increment pointer
   507  09C6  0604               	xorwf	4,w	;XOR with final address
   508  09C7  1903               	btfsc	3,2	;have we reached the end yet?
   509  09C8  3400               	retlw	0	;all done for this memory range, return
   510  09C9  0604               	xorwf	4,w	;XOR again to restore value
   511  09CA  29C4               	goto	clrloop0	;do the next byte
   512                           
   513                           	psect	cstackBANK1
   514  00A0                     __pcstackBANK1:	
   515  00A0                     ??_vw_rx_start:	
   516  00A0                     ??_vw_have_message:	
   517                           ; 1 bytes @ 0x0
   518                           
   519  00A0                     ??_isdigit:	
   520                           ; 1 bytes @ 0x0
   521                           
   522  00A0                     ?_strchr:	
   523                           ; 1 bytes @ 0x0
   524                           
   525  00A0                     ??_LCD_set_port:	
   526                           ; 1 bytes @ 0x0
   527                           
   528  00A0                     ??_SYST_Init:	
   529                           ; 1 bytes @ 0x0
   530                           
   531  00A0                     ??_TMR1_Init:	
   532                           ; 1 bytes @ 0x0
   533                           
   534  00A0                     ?_memcpy:	
   535                           ; 1 bytes @ 0x0
   536                           
   537  00A0                     ?__crc_ccitt_update:	
   538                           ; 1 bytes @ 0x0
   539                           
   540  00A0                     ?___wmul:	
   541                           ; 2 bytes @ 0x0
   542                           
   543  00A0                     ?___lwdiv:	
   544                           ; 2 bytes @ 0x0
   545                           
   546  00A0                     LCD_set_port@value_4_bit:	
   547                           ; 2 bytes @ 0x0
   548                           
   549  00A0                     memcpy@src:	
   550                           ; 1 bytes @ 0x0
   551                           
   552  00A0                     _isdigit$506:	
   553                           ; 1 bytes @ 0x0
   554                           
   555  00A0                     __crc_ccitt_update@crc:	
   556                           ; 1 bytes @ 0x0
   557                           
   558  00A0                     ___wmul@multiplier:	
   559                           ; 2 bytes @ 0x0
   560                           
   561  00A0                     ___lwdiv@divisor:	
   562                           ; 2 bytes @ 0x0
   563                           
   564  00A0                     strchr@chr:	
   565                           ; 2 bytes @ 0x0
   566                           
   567                           
   568                           ; 2 bytes @ 0x0
   569  00A0                     	ds	1
   570  00A1                     ??_LCD_command:	
   571  00A1                     ??_LCD_write_char:	
   572                           ; 1 bytes @ 0x1
   573                           
   574  00A1                     isdigit@c:	
   575                           ; 1 bytes @ 0x1
   576                           
   577  00A1                     memcpy@n:	
   578                           ; 1 bytes @ 0x1
   579                           
   580                           
   581                           ; 2 bytes @ 0x1
   582  00A1                     	ds	1
   583  00A2                     ??_strchr:	
   584  00A2                     LCD_write_char@c:	
   585                           ; 1 bytes @ 0x2
   586                           
   587  00A2                     __crc_ccitt_update@data:	
   588                           ; 1 bytes @ 0x2
   589                           
   590  00A2                     strchr@ptr:	
   591                           ; 1 bytes @ 0x2
   592                           
   593  00A2                     ___wmul@multiplicand:	
   594                           ; 1 bytes @ 0x2
   595                           
   596  00A2                     ___lwdiv@dividend:	
   597                           ; 2 bytes @ 0x2
   598                           
   599                           
   600                           ; 2 bytes @ 0x2
   601  00A2                     	ds	1
   602  00A3                     ?_LCD_write_string:	
   603  00A3                     ??__crc_ccitt_update:	
   604                           ; 1 bytes @ 0x3
   605                           
   606  00A3                     ??_memcpy:	
   607                           ; 1 bytes @ 0x3
   608                           
   609  00A3                     ?_strspn:	
   610                           ; 1 bytes @ 0x3
   611                           
   612  00A3                     ?_strcspn:	
   613                           ; 2 bytes @ 0x3
   614                           
   615  00A3                     LCD_command@command:	
   616                           ; 2 bytes @ 0x3
   617                           
   618  00A3                     strcspn@s2:	
   619                           ; 1 bytes @ 0x3
   620                           
   621  00A3                     strspn@s2:	
   622                           ; 1 bytes @ 0x3
   623                           
   624  00A3                     LCD_write_string@str:	
   625                           ; 1 bytes @ 0x3
   626                           
   627                           
   628                           ; 2 bytes @ 0x3
   629  00A3                     	ds	1
   630  00A4                     ?_LCD_set_cursor:	
   631  00A4                     ??_LCD_Init:	
   632                           ; 1 bytes @ 0x4
   633                           
   634  00A4                     ??___wmul:	
   635                           ; 1 bytes @ 0x4
   636                           
   637  00A4                     ??___lwdiv:	
   638                           ; 1 bytes @ 0x4
   639                           
   640  00A4                     LCD_set_cursor@column:	
   641                           ; 1 bytes @ 0x4
   642                           
   643  00A4                     ___wmul@product:	
   644                           ; 1 bytes @ 0x4
   645                           
   646                           
   647                           ; 2 bytes @ 0x4
   648  00A4                     	ds	1
   649  00A5                     ??_strspn:	
   650  00A5                     ??_strcspn:	
   651                           ; 1 bytes @ 0x5
   652                           
   653  00A5                     ??_LCD_set_cursor:	
   654                           ; 1 bytes @ 0x5
   655                           
   656  00A5                     ??_LCD_write_string:	
   657                           ; 1 bytes @ 0x5
   658                           
   659  00A5                     ___lwdiv@counter:	
   660                           ; 1 bytes @ 0x5
   661                           
   662                           
   663                           ; 1 bytes @ 0x5
   664  00A5                     	ds	1
   665  00A6                     ?_atoi:	
   666  00A6                     ?___aldiv:	
   667                           ; 2 bytes @ 0x6
   668                           
   669  00A6                     LCD_set_cursor@ddram_address:	
   670                           ; 4 bytes @ 0x6
   671                           
   672  00A6                     LCD_write_string@j:	
   673                           ; 1 bytes @ 0x6
   674                           
   675  00A6                     memcpy@dest:	
   676                           ; 1 bytes @ 0x6
   677                           
   678  00A6                     ___lwdiv@quotient:	
   679                           ; 1 bytes @ 0x6
   680                           
   681  00A6                     ___aldiv@divisor:	
   682                           ; 2 bytes @ 0x6
   683                           
   684                           
   685                           ; 4 bytes @ 0x6
   686  00A6                     	ds	1
   687  00A7                     LCD_set_cursor@row:	
   688  00A7                     strcspn@i:	
   689                           ; 1 bytes @ 0x7
   690                           
   691  00A7                     strspn@i:	
   692                           ; 2 bytes @ 0x7
   693                           
   694                           
   695                           ; 2 bytes @ 0x7
   696  00A7                     	ds	1
   697  00A8                     ??_atoi:	
   698  00A8                     ?___lwmod:	
   699                           ; 1 bytes @ 0x8
   700                           
   701  00A8                     ___lwmod@divisor:	
   702                           ; 2 bytes @ 0x8
   703                           
   704                           
   705                           ; 2 bytes @ 0x8
   706  00A8                     	ds	1
   707  00A9                     strcspn@s1:	
   708  00A9                     strspn@s1:	
   709                           ; 1 bytes @ 0x9
   710                           
   711                           
   712                           ; 1 bytes @ 0x9
   713  00A9                     	ds	1
   714  00AA                     ?_strtok:	
   715  00AA                     atoi@sign:	
   716                           ; 1 bytes @ 0xA
   717                           
   718  00AA                     strtok@s2:	
   719                           ; 1 bytes @ 0xA
   720                           
   721  00AA                     ___lwmod@dividend:	
   722                           ; 1 bytes @ 0xA
   723                           
   724  00AA                     ___aldiv@dividend:	
   725                           ; 2 bytes @ 0xA
   726                           
   727                           
   728                           ; 4 bytes @ 0xA
   729  00AA                     	ds	1
   730  00AB                     ??_strtok:	
   731  00AB                     atoi@a:	
   732                           ; 1 bytes @ 0xB
   733                           
   734                           
   735                           ; 2 bytes @ 0xB
   736  00AB                     	ds	1
   737  00AC                     ??___lwmod:	
   738                           
   739                           ; 1 bytes @ 0xC
   740  00AC                     	ds	1
   741  00AD                     atoi@s:	
   742  00AD                     ___lwmod@counter:	
   743                           ; 1 bytes @ 0xD
   744                           
   745  00AD                     strtok@s1:	
   746                           ; 1 bytes @ 0xD
   747                           
   748                           
   749                           ; 1 bytes @ 0xD
   750  00AD                     	ds	1
   751  00AE                     ?_parse_id_value:	
   752  00AE                     ??___aldiv:	
   753                           ; 1 bytes @ 0xE
   754                           
   755  00AE                     ?_sprintf:	
   756                           ; 1 bytes @ 0xE
   757                           
   758  00AE                     parse_id_value@id:	
   759                           ; 2 bytes @ 0xE
   760                           
   761  00AE                     sprintf@sp:	
   762                           ; 1 bytes @ 0xE
   763                           
   764                           
   765                           ; 2 bytes @ 0xE
   766  00AE                     	ds	1
   767  00AF                     parse_id_value@value:	
   768  00AF                     ___aldiv@counter:	
   769                           ; 1 bytes @ 0xF
   770                           
   771                           
   772                           ; 1 bytes @ 0xF
   773  00AF                     	ds	1
   774  00B0                     ??_parse_id_value:	
   775  00B0                     ?_vw_crc:	
   776                           ; 1 bytes @ 0x10
   777                           
   778  00B0                     vw_crc@count:	
   779                           ; 2 bytes @ 0x10
   780                           
   781  00B0                     sprintf@f:	
   782                           ; 1 bytes @ 0x10
   783                           
   784  00B0                     ___aldiv@sign:	
   785                           ; 1 bytes @ 0x10
   786                           
   787                           
   788                           ; 1 bytes @ 0x10
   789  00B0                     	ds	1
   790  00B1                     ___aldiv@quotient:	
   791                           
   792                           ; 4 bytes @ 0x11
   793  00B1                     	ds	1
   794  00B2                     ??_sprintf:	
   795  00B2                     ??_vw_crc:	
   796                           ; 1 bytes @ 0x12
   797                           
   798  00B2                     parse_id_value@str:	
   799                           ; 1 bytes @ 0x12
   800                           
   801                           
   802                           ; 1 bytes @ 0x12
   803  00B2                     	ds	1
   804  00B3                     vw_crc@ptr:	
   805                           
   806                           ; 1 bytes @ 0x13
   807  00B3                     	ds	1
   808  00B4                     vw_crc@crc:	
   809                           
   810                           ; 2 bytes @ 0x14
   811  00B4                     	ds	1
   812  00B5                     ?__calc_timer0_prescaler:	
   813  00B5                     sprintf@flag:	
   814                           ; 1 bytes @ 0x15
   815                           
   816  00B5                     __calc_timer0_prescaler@brate:	
   817                           ; 1 bytes @ 0x15
   818                           
   819                           
   820                           ; 2 bytes @ 0x15
   821  00B5                     	ds	1
   822  00B6                     ?_vw_recv:	
   823  00B6                     vw_recv@len:	
   824                           ; 1 bytes @ 0x16
   825                           
   826  00B6                     sprintf@val:	
   827                           ; 1 bytes @ 0x16
   828                           
   829                           
   830                           ; 2 bytes @ 0x16
   831  00B6                     	ds	1
   832  00B7                     ??_vw_recv:	
   833  00B7                     __calc_timer0_prescaler@prescaler_value:	
   834                           ; 1 bytes @ 0x17
   835                           
   836                           
   837                           ; 1 bytes @ 0x17
   838  00B7                     	ds	1
   839  00B8                     __calc_timer0_prescaler@prescaler_bits:	
   840  00B8                     sprintf@prec:	
   841                           ; 1 bytes @ 0x18
   842                           
   843                           
   844                           ; 1 bytes @ 0x18
   845  00B8                     	ds	1
   846  00B9                     __calc_timer0_prescaler@k_tmr0:	
   847  00B9                     sprintf@ap:	
   848                           ; 1 bytes @ 0x19
   849                           
   850                           
   851                           ; 1 bytes @ 0x19
   852  00B9                     	ds	1
   853  00BA                     ??__calc_timer0_prescaler:	
   854  00BA                     vw_recv@buf:	
   855                           ; 1 bytes @ 0x1A
   856                           
   857  00BA                     sprintf@cp:	
   858                           ; 1 bytes @ 0x1A
   859                           
   860                           
   861                           ; 2 bytes @ 0x1A
   862  00BA                     	ds	1
   863  00BB                     vw_recv@rxlen:	
   864                           
   865                           ; 1 bytes @ 0x1B
   866  00BB                     	ds	1
   867  00BC                     sprintf@len:	
   868                           
   869                           ; 2 bytes @ 0x1C
   870  00BC                     	ds	2
   871  00BE                     sprintf@width:	
   872                           
   873                           ; 2 bytes @ 0x1E
   874  00BE                     	ds	2
   875  00C0                     sprintf@c:	
   876                           
   877                           ; 1 bytes @ 0x20
   878  00C0                     	ds	2
   879  00C2                     __calc_timer0_prescaler@aux_tmr0:	
   880                           
   881                           ; 2 bytes @ 0x22
   882  00C2                     	ds	2
   883  00C4                     __calc_timer0_prescaler@pindex:	
   884                           
   885                           ; 1 bytes @ 0x24
   886  00C4                     	ds	1
   887  00C5                     ?_vw_setup:	
   888  00C5                     vw_setup@brate:	
   889                           ; 1 bytes @ 0x25
   890                           
   891                           
   892                           ; 2 bytes @ 0x25
   893  00C5                     	ds	2
   894  00C7                     ??_vw_setup:	
   895                           
   896                           ; 1 bytes @ 0x27
   897  00C7                     	ds	3
   898  00CA                     vw_setup@prescaler_bits:	
   899                           
   900                           ; 1 bytes @ 0x2A
   901  00CA                     	ds	1
   902  00CB                     vw_setup@prescaler_value:	
   903                           
   904                           ; 2 bytes @ 0x2B
   905  00CB                     	ds	2
   906  00CD                     ??_main:	
   907                           
   908                           ; 1 bytes @ 0x2D
   909  00CD                     	ds	2
   910  00CF                     main@int_id:	
   911                           
   912                           ; 2 bytes @ 0x2F
   913  00CF                     	ds	2
   914  00D1                     main@len:	
   915                           
   916                           ; 1 bytes @ 0x31
   917  00D1                     	ds	1
   918  00D2                     main@id:	
   919                           
   920                           ; 1 bytes @ 0x32
   921  00D2                     	ds	1
   922  00D3                     main@value:	
   923                           
   924                           ; 1 bytes @ 0x33
   925  00D3                     	ds	1
   926                           
   927                           	psect	cstackCOMMON
   928  0070                     __pcstackCOMMON:	
   929  0070                     ?_isdigit:	
   930  0070                     ?i1_isdigit:	
   931                           ; 1 bit 
   932                           
   933  0070                     ?_vw_isr_tmr0:	
   934                           ; 1 bit 
   935                           
   936  0070                     ?_vw_rx_start:	
   937                           ; 1 bytes @ 0x0
   938                           
   939  0070                     ?_vw_have_message:	
   940                           ; 1 bytes @ 0x0
   941                           
   942  0070                     ?_LCD_set_port:	
   943                           ; 1 bytes @ 0x0
   944                           
   945  0070                     ?_LCD_command:	
   946                           ; 1 bytes @ 0x0
   947                           
   948  0070                     ?_LCD_Init:	
   949                           ; 1 bytes @ 0x0
   950                           
   951  0070                     ?_LCD_write_char:	
   952                           ; 1 bytes @ 0x0
   953                           
   954  0070                     ?_SYST_Init:	
   955                           ; 1 bytes @ 0x0
   956                           
   957  0070                     ?_TMR1_Init:	
   958                           ; 1 bytes @ 0x0
   959                           
   960  0070                     ?_global_isr:	
   961                           ; 1 bytes @ 0x0
   962                           
   963  0070                     ?_main:	
   964                           ; 1 bytes @ 0x0
   965                           
   966  0070                     ?_vw_tx_stop:	
   967                           ; 1 bytes @ 0x0
   968                           
   969  0070                     ??_vw_tx_stop:	
   970                           ; 1 bytes @ 0x0
   971                           
   972  0070                     ?_vw_symbol_6to4:	
   973                           ; 1 bytes @ 0x0
   974                           
   975  0070                     ??_vw_symbol_6to4:	
   976                           ; 1 bytes @ 0x0
   977                           
   978  0070                     ?_vw_pll:	
   979                           ; 1 bytes @ 0x0
   980                           
   981  0070                     ??i1_isdigit:	
   982                           ; 1 bytes @ 0x0
   983                           
   984  0070                     ?i1___wmul:	
   985                           ; 1 bytes @ 0x0
   986                           
   987  0070                     ?i1___lwdiv:	
   988                           ; 2 bytes @ 0x0
   989                           
   990  0070                     i1_isdigit$506:	
   991                           ; 2 bytes @ 0x0
   992                           
   993  0070                     i1___wmul@multiplier:	
   994                           ; 1 bytes @ 0x0
   995                           
   996  0070                     i1___lwdiv@divisor:	
   997                           ; 2 bytes @ 0x0
   998                           
   999                           
  1000                           ; 2 bytes @ 0x0
  1001  0070                     	ds	1
  1002  0071                     vw_symbol_6to4@symbol:	
  1003  0071                     i1isdigit@c:	
  1004                           ; 1 bytes @ 0x1
  1005                           
  1006                           
  1007                           ; 1 bytes @ 0x1
  1008  0071                     	ds	1
  1009  0072                     vw_symbol_6to4@i:	
  1010  0072                     i1___wmul@multiplicand:	
  1011                           ; 1 bytes @ 0x2
  1012                           
  1013  0072                     i1___lwdiv@dividend:	
  1014                           ; 2 bytes @ 0x2
  1015                           
  1016                           
  1017                           ; 2 bytes @ 0x2
  1018  0072                     	ds	1
  1019  0073                     ??_vw_pll:	
  1020                           
  1021                           ; 1 bytes @ 0x3
  1022  0073                     	ds	1
  1023  0074                     ??i1___wmul:	
  1024  0074                     ??i1___lwdiv:	
  1025                           ; 1 bytes @ 0x4
  1026                           
  1027  0074                     i1___wmul@product:	
  1028                           ; 1 bytes @ 0x4
  1029                           
  1030                           
  1031                           ; 2 bytes @ 0x4
  1032  0074                     	ds	1
  1033  0075                     i1___lwdiv@quotient:	
  1034                           
  1035                           ; 2 bytes @ 0x5
  1036  0075                     	ds	2
  1037  0077                     i1___lwdiv@counter:	
  1038                           
  1039                           ; 1 bytes @ 0x7
  1040  0077                     	ds	1
  1041  0078                     ?i1___lwmod:	
  1042  0078                     _vw_pll$266:	
  1043                           ; 2 bytes @ 0x8
  1044                           
  1045  0078                     i1___lwmod@divisor:	
  1046                           ; 2 bytes @ 0x8
  1047                           
  1048                           
  1049                           ; 2 bytes @ 0x8
  1050  0078                     	ds	2
  1051  007A                     vw_pll@this_byte:	
  1052  007A                     i1___lwmod@dividend:	
  1053                           ; 1 bytes @ 0xA
  1054                           
  1055                           
  1056                           ; 2 bytes @ 0xA
  1057  007A                     	ds	1
  1058  007B                     ??_vw_isr_tmr0:	
  1059                           
  1060                           ; 1 bytes @ 0xB
  1061  007B                     	ds	1
  1062  007C                     ??i1___lwmod:	
  1063                           
  1064                           ; 1 bytes @ 0xC
  1065  007C                     	ds	1
  1066  007D                     i1___lwmod@counter:	
  1067                           
  1068                           ; 1 bytes @ 0xD
  1069  007D                     	ds	1
  1070                           
  1071                           	psect	cstackBANK0
  1072  0020                     __pcstackBANK0:	
  1073  0020                     ?i1_sprintf:	
  1074  0020                     i1sprintf@sp:	
  1075                           ; 2 bytes @ 0x0
  1076                           
  1077                           
  1078                           ; 2 bytes @ 0x0
  1079  0020                     	ds	2
  1080  0022                     i1sprintf@f:	
  1081                           
  1082                           ; 1 bytes @ 0x2
  1083  0022                     	ds	7
  1084  0029                     ??i1_sprintf:	
  1085                           
  1086                           ; 1 bytes @ 0x9
  1087  0029                     	ds	3
  1088  002C                     i1sprintf@flag:	
  1089                           
  1090                           ; 1 bytes @ 0xC
  1091  002C                     	ds	1
  1092  002D                     i1sprintf@val:	
  1093                           
  1094                           ; 2 bytes @ 0xD
  1095  002D                     	ds	2
  1096  002F                     i1sprintf@prec:	
  1097                           
  1098                           ; 1 bytes @ 0xF
  1099  002F                     	ds	1
  1100  0030                     i1sprintf@ap:	
  1101                           
  1102                           ; 1 bytes @ 0x10
  1103  0030                     	ds	1
  1104  0031                     i1sprintf@cp:	
  1105                           
  1106                           ; 2 bytes @ 0x11
  1107  0031                     	ds	2
  1108  0033                     i1sprintf@len:	
  1109                           
  1110                           ; 2 bytes @ 0x13
  1111  0033                     	ds	2
  1112  0035                     i1sprintf@width:	
  1113                           
  1114                           ; 2 bytes @ 0x15
  1115  0035                     	ds	2
  1116  0037                     i1sprintf@c:	
  1117                           
  1118                           ; 1 bytes @ 0x17
  1119  0037                     	ds	1
  1120  0038                     ??_global_isr:	
  1121                           
  1122                           ; 1 bytes @ 0x18
  1123  0038                     	ds	11
  1124                           
  1125                           	psect	maintext
  1126  0439                     __pmaintext:	
  1127 ;;
  1128 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1129 ;;
  1130 ;; *************** function _main *****************
  1131 ;; Defined at:
  1132 ;;		line 79 in file "main.c"
  1133 ;; Parameters:    Size  Location     Type
  1134 ;;		None
  1135 ;; Auto vars:     Size  Location     Type
  1136 ;;  int_id          2   47[BANK1 ] int 
  1137 ;;  value           1   51[BANK1 ] PTR unsigned char 
  1138 ;;		 -> text(10), NULL(0), 
  1139 ;;  id              1   50[BANK1 ] PTR unsigned char 
  1140 ;;		 -> text(10), NULL(0), 
  1141 ;;  len             1   49[BANK1 ] unsigned char 
  1142 ;; Return value:  Size  Location     Type
  1143 ;;                  1    wreg      void 
  1144 ;; Registers used:
  1145 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1146 ;; Tracked objects:
  1147 ;;		On entry : B00/0
  1148 ;;		On exit  : 0/0
  1149 ;;		Unchanged: 0/0
  1150 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1151 ;;      Params:         0       0       0       0       0
  1152 ;;      Locals:         0       0       5       0       0
  1153 ;;      Temps:          0       0       2       0       0
  1154 ;;      Totals:         0       0       7       0       0
  1155 ;;Total ram usage:        7 bytes
  1156 ;; Hardware stack levels required when called:    9
  1157 ;; This function calls:
  1158 ;;		_LCD_Init
  1159 ;;		_LCD_set_cursor
  1160 ;;		_LCD_write_string
  1161 ;;		_SYST_Init
  1162 ;;		_TMR1_Init
  1163 ;;		_atoi
  1164 ;;		_parse_id_value
  1165 ;;		_sprintf
  1166 ;;		_vw_have_message
  1167 ;;		_vw_recv
  1168 ;;		_vw_rx_start
  1169 ;;		_vw_setup
  1170 ;; This function is called by:
  1171 ;;		Startup code after reset
  1172 ;; This function uses a non-reentrant model
  1173 ;;
  1174                           
  1175                           
  1176                           ;psect for function _main
  1177  0439                     _main:	
  1178                           
  1179                           ;main.c: 81: SYST_Init();
  1180                           
  1181                           ;incstack = 0
  1182 ;; hardware stack exceeded
  1183                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1184  0439  120A  158A  21F8  120A  118A  	fcall	_SYST_Init
  1185                           
  1186                           ;main.c: 82: TMR1_Init();
  1187  043E  120A  158A  21D9  120A  118A  	fcall	_TMR1_Init
  1188                           
  1189                           ;main.c: 83: LCD_Init();
  1190  0443  120A  118A  250B  120A  118A  	fcall	_LCD_Init
  1191                           
  1192                           ;main.c: 85: vw_setup(200);
  1193  0448  30C8               	movlw	200
  1194  0449  1683               	bsf	3,5	;RP0=1, select bank1
  1195  044A  1303               	bcf	3,6	;RP1=0, select bank1
  1196  044B  00C5               	movwf	vw_setup@brate^(0+128)
  1197  044C  3000               	movlw	0
  1198  044D  00C6               	movwf	(vw_setup@brate^(0+128)+1)
  1199  044E  120A  158A  24F0  120A  118A  	fcall	_vw_setup
  1200                           
  1201                           ;main.c: 87: vw_rx_start();
  1202  0453  120A  158A  21BC  120A  118A  	fcall	_vw_rx_start
  1203  0458                     l3667:	
  1204                           ;main.c: 89: while(1){
  1205                           
  1206                           
  1207                           ;main.c: 90: if (vw_have_message()){
  1208  0458  120A  118A  27F5  120A  118A  	fcall	_vw_have_message
  1209  045D  3A00               	xorlw	0
  1210  045E  1903               	skipnz
  1211  045F  2CB2               	goto	l3683
  1212                           
  1213                           ;main.c: 91: uint8_t len = 10;
  1214  0460  300A               	movlw	10
  1215  0461  1683               	bsf	3,5	;RP0=1, select bank1
  1216  0462  1303               	bcf	3,6	;RP1=0, select bank1
  1217  0463  00CD               	movwf	??_main^(0+128)
  1218  0464  084D               	movf	??_main^(0+128),w
  1219  0465  00D1               	movwf	main@len^(0+128)
  1220                           
  1221                           ;main.c: 93: if (vw_recv(text, &len)){
  1222  0466  30D1               	movlw	(low (main@len| 0))& (0+255)
  1223  0467  00CD               	movwf	??_main^(0+128)
  1224  0468  084D               	movf	??_main^(0+128),w
  1225  0469  00B6               	movwf	vw_recv@len^(0+128)
  1226  046A  30E3               	movlw	(low (_text| 0))& (0+255)
  1227  046B  120A  118A  27A8  120A  118A  	fcall	_vw_recv
  1228  0470  3A00               	xorlw	0
  1229  0471  1903               	skipnz
  1230  0472  2CB2               	goto	l3683
  1231                           
  1232                           ;main.c: 94: char * id;
  1233                           ;main.c: 95: char * value;
  1234                           ;main.c: 96: parse_id_value (text, &id, &value);
  1235  0473  30D2               	movlw	(low (main@id| 0))& (0+255)
  1236  0474  1683               	bsf	3,5	;RP0=1, select bank1
  1237  0475  1303               	bcf	3,6	;RP1=0, select bank1
  1238  0476  00CD               	movwf	??_main^(0+128)
  1239  0477  084D               	movf	??_main^(0+128),w
  1240  0478  00AE               	movwf	parse_id_value@id^(0+128)
  1241  0479  30D3               	movlw	(low (main@value| 0))& (0+255)
  1242  047A  00CE               	movwf	(??_main+1)^(0+128)
  1243  047B  084E               	movf	(??_main+1)^(0+128),w
  1244  047C  00AF               	movwf	parse_id_value@value^(0+128)
  1245  047D  30E3               	movlw	(low (_text| 0))& (0+255)
  1246  047E  120A  158A  22C6  120A  118A  	fcall	_parse_id_value
  1247                           
  1248                           ;main.c: 98: int int_id = atoi(id);
  1249  0483  1683               	bsf	3,5	;RP0=1, select bank1
  1250  0484  1303               	bcf	3,6	;RP1=0, select bank1
  1251  0485  0852               	movf	main@id^(0+128),w
  1252  0486  120A  158A  2678  120A  118A  	fcall	_atoi
  1253  048B  1683               	bsf	3,5	;RP0=1, select bank1
  1254  048C  1303               	bcf	3,6	;RP1=0, select bank1
  1255  048D  0827               	movf	(?_atoi+1)^(0+128),w
  1256  048E  00D0               	movwf	(main@int_id+1)^(0+128)
  1257  048F  0826               	movf	?_atoi^(0+128),w
  1258  0490  00CF               	movwf	main@int_id^(0+128)
  1259                           
  1260                           ;main.c: 99: if (int_id == 0) {
  1261  0491  084F               	movf	main@int_id^(0+128),w
  1262  0492  0450               	iorwf	(main@int_id+1)^(0+128),w
  1263  0493  1D03               	btfss	3,2
  1264  0494  2C9B               	goto	l3679
  1265                           
  1266                           ;main.c: 100: sprintf((char *) adcBuffer_0, "light: %s %%", value);
  1267  0495  3090               	movlw	(low (_adcBuffer_0| (0+256)))& (0+255)
  1268  0496  00AE               	movwf	sprintf@sp^(0+128)
  1269  0497  3001               	movlw	1
  1270  0498  00AF               	movwf	(sprintf@sp+1)^(0+128)
  1271  0499  306A               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  1272  049A  2CA6               	goto	L1
  1273  049B                     l3679:	
  1274                           ;main.c: 101: }
  1275                           
  1276                           
  1277                           ;main.c: 102: else if (int_id == 1) {
  1278  049B  1683               	bsf	3,5	;RP0=1, select bank1
  1279  049C  1303               	bcf	3,6	;RP1=0, select bank1
  1280  049D  034F               	decf	main@int_id^(0+128),w
  1281  049E  0450               	iorwf	(main@int_id+1)^(0+128),w
  1282  049F  1D03               	btfss	3,2
  1283  04A0  2CB2               	goto	l3683
  1284                           
  1285                           ;main.c: 103: sprintf((char *) adcBuffer_1, "voltage: %s %%", value);
  1286  04A1  30A4               	movlw	(low (_adcBuffer_1| (0+256)))& (0+255)
  1287  04A2  00AE               	movwf	sprintf@sp^(0+128)
  1288  04A3  3001               	movlw	1
  1289  04A4  00AF               	movwf	(sprintf@sp+1)^(0+128)
  1290  04A5  305B               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
  1291  04A6                     L1:	
  1292  04A6  00CD               	movwf	??_main^(0+128)
  1293  04A7  084D               	movf	??_main^(0+128),w
  1294  04A8  00B0               	movwf	sprintf@f^(0+128)
  1295  04A9  0853               	movf	main@value^(0+128),w
  1296  04AA  00CE               	movwf	(??_main+1)^(0+128)
  1297  04AB  084E               	movf	(??_main+1)^(0+128),w
  1298  04AC  00B1               	movwf	(low ((?_sprintf| 0+3)))^(0+128)
  1299  04AD  120A  118A  2031  120A  118A  	fcall	_sprintf
  1300  04B2                     l3683:	
  1301                           
  1302                           ;main.c: 104: }
  1303                           ;main.c: 105: }
  1304                           ;main.c: 106: }
  1305                           ;main.c: 109: LCD_set_cursor(1, 2);
  1306  04B2  3002               	movlw	2
  1307  04B3  1683               	bsf	3,5	;RP0=1, select bank1
  1308  04B4  1303               	bcf	3,6	;RP1=0, select bank1
  1309  04B5  00CD               	movwf	??_main^(0+128)
  1310  04B6  084D               	movf	??_main^(0+128),w
  1311  04B7  00A4               	movwf	LCD_set_cursor@column^(0+128)
  1312  04B8  3001               	movlw	1
  1313  04B9  120A  158A  252F  120A  118A  	fcall	_LCD_set_cursor
  1314                           
  1315                           ;main.c: 110: LCD_write_string((char *) "*super*datalogger*");
  1316  04BE  3035               	movlw	(low ((STR_6-__stringbase)| (0+32768)))& (0+255)
  1317  04BF  1683               	bsf	3,5	;RP0=1, select bank1
  1318  04C0  1303               	bcf	3,6	;RP1=0, select bank1
  1319  04C1  00A3               	movwf	LCD_write_string@str^(0+128)
  1320  04C2  3080               	movlw	128
  1321  04C3  00A4               	movwf	(LCD_write_string@str+1)^(0+128)
  1322  04C4  120A  158A  2346  120A  118A  	fcall	_LCD_write_string
  1323                           
  1324                           ;main.c: 111: LCD_set_cursor(2, 5);
  1325  04C9  3005               	movlw	5
  1326  04CA  1683               	bsf	3,5	;RP0=1, select bank1
  1327  04CB  1303               	bcf	3,6	;RP1=0, select bank1
  1328  04CC  00CD               	movwf	??_main^(0+128)
  1329  04CD  084D               	movf	??_main^(0+128),w
  1330  04CE  00A4               	movwf	LCD_set_cursor@column^(0+128)
  1331  04CF  3002               	movlw	2
  1332  04D0  120A  158A  252F  120A  118A  	fcall	_LCD_set_cursor
  1333                           
  1334                           ;main.c: 112: LCD_write_string((char *) clockBuffer);
  1335  04D5  30D4               	movlw	(low (_clockBuffer| 0))& (0+255)
  1336  04D6  1683               	bsf	3,5	;RP0=1, select bank1
  1337  04D7  1303               	bcf	3,6	;RP1=0, select bank1
  1338  04D8  00A3               	movwf	LCD_write_string@str^(0+128)
  1339  04D9  3000               	movlw	0
  1340  04DA  00A4               	movwf	(LCD_write_string@str+1)^(0+128)
  1341  04DB  120A  158A  2346  120A  118A  	fcall	_LCD_write_string
  1342                           
  1343                           ;main.c: 113: LCD_set_cursor(3, 1);
  1344  04E0  1683               	bsf	3,5	;RP0=1, select bank1
  1345  04E1  1303               	bcf	3,6	;RP1=0, select bank1
  1346  04E2  01A4               	clrf	LCD_set_cursor@column^(0+128)
  1347  04E3  0AA4               	incf	LCD_set_cursor@column^(0+128),f
  1348  04E4  3003               	movlw	3
  1349  04E5  120A  158A  252F  120A  118A  	fcall	_LCD_set_cursor
  1350                           
  1351                           ;main.c: 114: LCD_write_string((char *) adcBuffer_0);
  1352  04EA  3090               	movlw	(low (_adcBuffer_0| (0+256)))& (0+255)
  1353  04EB  1683               	bsf	3,5	;RP0=1, select bank1
  1354  04EC  1303               	bcf	3,6	;RP1=0, select bank1
  1355  04ED  00A3               	movwf	LCD_write_string@str^(0+128)
  1356  04EE  3001               	movlw	1
  1357  04EF  00A4               	movwf	(LCD_write_string@str+1)^(0+128)
  1358  04F0  120A  158A  2346  120A  118A  	fcall	_LCD_write_string
  1359                           
  1360                           ;main.c: 115: LCD_set_cursor(4, 1);
  1361  04F5  1683               	bsf	3,5	;RP0=1, select bank1
  1362  04F6  1303               	bcf	3,6	;RP1=0, select bank1
  1363  04F7  01A4               	clrf	LCD_set_cursor@column^(0+128)
  1364  04F8  0AA4               	incf	LCD_set_cursor@column^(0+128),f
  1365  04F9  3004               	movlw	4
  1366  04FA  120A  158A  252F  120A  118A  	fcall	_LCD_set_cursor
  1367                           
  1368                           ;main.c: 116: LCD_write_string((char *) adcBuffer_1);
  1369  04FF  30A4               	movlw	(low (_adcBuffer_1| (0+256)))& (0+255)
  1370  0500  1683               	bsf	3,5	;RP0=1, select bank1
  1371  0501  1303               	bcf	3,6	;RP1=0, select bank1
  1372  0502  00A3               	movwf	LCD_write_string@str^(0+128)
  1373  0503  3001               	movlw	1
  1374  0504  00A4               	movwf	(LCD_write_string@str+1)^(0+128)
  1375  0505  120A  158A  2346  120A  118A  	fcall	_LCD_write_string
  1376  050A  2C58               	goto	l3667
  1377  050B                     __end_of_main:	
  1378                           
  1379                           	psect	text1
  1380  0CF0                     __ptext1:	
  1381 ;; *************** function _vw_setup *****************
  1382 ;; Defined at:
  1383 ;;		line 123 in file "virtualwire.c"
  1384 ;; Parameters:    Size  Location     Type
  1385 ;;  brate           2   37[BANK1 ] unsigned int 
  1386 ;; Auto vars:     Size  Location     Type
  1387 ;;  prescaler_va    2   43[BANK1 ] unsigned int 
  1388 ;;  prescaler_bi    1   42[BANK1 ] unsigned char 
  1389 ;; Return value:  Size  Location     Type
  1390 ;;                  1    wreg      void 
  1391 ;; Registers used:
  1392 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1393 ;; Tracked objects:
  1394 ;;		On entry : 0/0
  1395 ;;		On exit  : 0/0
  1396 ;;		Unchanged: 0/0
  1397 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1398 ;;      Params:         0       0       2       0       0
  1399 ;;      Locals:         0       0       3       0       0
  1400 ;;      Temps:          0       0       3       0       0
  1401 ;;      Totals:         0       0       8       0       0
  1402 ;;Total ram usage:        8 bytes
  1403 ;; Hardware stack levels used:    1
  1404 ;; Hardware stack levels required when called:    7
  1405 ;; This function calls:
  1406 ;;		__calc_timer0_prescaler
  1407 ;; This function is called by:
  1408 ;;		_main
  1409 ;; This function uses a non-reentrant model
  1410 ;;
  1411                           
  1412                           
  1413                           ;psect for function _vw_setup
  1414  0CF0                     _vw_setup:	
  1415                           
  1416                           ;virtualwire.c: 125: uint16_t prescaler_value;
  1417                           ;virtualwire.c: 126: uint8_t prescaler_bits;
  1418                           ;virtualwire.c: 129: TRISA1 = 1;
  1419                           
  1420                           ;incstack = 0
  1421                           ; Regs used in _vw_setup: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1422  0CF0  1683               	bsf	3,5	;RP0=1, select bank1
  1423  0CF1  1303               	bcf	3,6	;RP1=0, select bank1
  1424  0CF2  1485               	bsf	5,1	;volatile
  1425                           
  1426                           ;virtualwire.c: 130: TRISA2 = 0;
  1427  0CF3  1105               	bcf	5,2	;volatile
  1428                           
  1429                           ;virtualwire.c: 133: RA2 = 0;
  1430  0CF4  1283               	bcf	3,5	;RP0=0, select bank0
  1431  0CF5  1303               	bcf	3,6	;RP1=0, select bank0
  1432  0CF6  1105               	bcf	5,2	;volatile
  1433                           
  1434                           ;virtualwire.c: 136: _calc_timer0_prescaler(brate, &prescaler_value, &prescaler_bits, &v
      +                          w_tmr0_value);
  1435  0CF7  1683               	bsf	3,5	;RP0=1, select bank1
  1436  0CF8  1303               	bcf	3,6	;RP1=0, select bank1
  1437  0CF9  0846               	movf	(vw_setup@brate+1)^(0+128),w
  1438  0CFA  00B6               	movwf	(__calc_timer0_prescaler@brate+1)^(0+128)
  1439  0CFB  0845               	movf	vw_setup@brate^(0+128),w
  1440  0CFC  00B5               	movwf	__calc_timer0_prescaler@brate^(0+128)
  1441  0CFD  30CB               	movlw	(low (vw_setup@prescaler_value| 0))& (0+255)
  1442  0CFE  00C7               	movwf	??_vw_setup^(0+128)
  1443  0CFF  0847               	movf	??_vw_setup^(0+128),w
  1444  0D00  00B7               	movwf	__calc_timer0_prescaler@prescaler_value^(0+128)
  1445  0D01  30CA               	movlw	(low (vw_setup@prescaler_bits| 0))& (0+255)
  1446  0D02  00C8               	movwf	(??_vw_setup+1)^(0+128)
  1447  0D03  0848               	movf	(??_vw_setup+1)^(0+128),w
  1448  0D04  00B8               	movwf	__calc_timer0_prescaler@prescaler_bits^(0+128)
  1449  0D05  30ED               	movlw	(low (_vw_tmr0_value| 0))& (0+255)
  1450  0D06  00C9               	movwf	(??_vw_setup+2)^(0+128)
  1451  0D07  0849               	movf	(??_vw_setup+2)^(0+128),w
  1452  0D08  00B9               	movwf	__calc_timer0_prescaler@k_tmr0^(0+128)
  1453  0D09  120A  158A  26E9  120A  158A  	fcall	__calc_timer0_prescaler
  1454                           
  1455                           ;virtualwire.c: 138: if (prescaler_value > 1)
  1456  0D0E  3000               	movlw	0
  1457  0D0F  1683               	bsf	3,5	;RP0=1, select bank1
  1458  0D10  1303               	bcf	3,6	;RP1=0, select bank1
  1459  0D11  024C               	subwf	(vw_setup@prescaler_value+1)^(0+128),w
  1460  0D12  3002               	movlw	2
  1461  0D13  1903               	skipnz
  1462  0D14  024B               	subwf	vw_setup@prescaler_value^(0+128),w
  1463  0D15  1C03               	skipc
  1464  0D16  2D1F               	goto	l3587
  1465                           
  1466                           ;virtualwire.c: 139: {
  1467                           ;virtualwire.c: 141: OPTION_REG &= 0xF0;
  1468  0D17  30F0               	movlw	240
  1469  0D18  00C7               	movwf	??_vw_setup^(0+128)
  1470  0D19  0847               	movf	??_vw_setup^(0+128),w
  1471  0D1A  0581               	andwf	1,f	;volatile
  1472                           
  1473                           ;virtualwire.c: 142: OPTION_REG |= prescaler_bits;
  1474  0D1B  084A               	movf	vw_setup@prescaler_bits^(0+128),w
  1475  0D1C  00C7               	movwf	??_vw_setup^(0+128)
  1476  0D1D  0847               	movf	??_vw_setup^(0+128),w
  1477  0D1E  0481               	iorwf	1,f	;volatile
  1478  0D1F                     l3587:	
  1479                           
  1480                           ;virtualwire.c: 143: }
  1481                           ;virtualwire.c: 145: T0CS = 0;
  1482  0D1F  1281               	bcf	1,5	;volatile
  1483                           
  1484                           ;virtualwire.c: 146: TMR0 = (2 - vw_tmr0_value);
  1485  0D20  036D               	decf	_vw_tmr0_value^(0+128),w
  1486  0D21  3AFF               	xorlw	255
  1487  0D22  3E02               	addlw	2
  1488  0D23  1283               	bcf	3,5	;RP0=0, select bank0
  1489  0D24  1303               	bcf	3,6	;RP1=0, select bank0
  1490  0D25  0081               	movwf	1	;volatile
  1491                           
  1492                           ;virtualwire.c: 148: TMR0IF = 0;
  1493  0D26  110B               	bcf	11,2	;volatile
  1494                           
  1495                           ;virtualwire.c: 149: TMR0IE = 1;
  1496  0D27  168B               	bsf	11,5	;volatile
  1497                           
  1498                           ;virtualwire.c: 150: GIE = PEIE = 1;
  1499  0D28  170B               	bsf	11,6	;volatile
  1500  0D29  1F0B               	btfss	11,6	;volatile
  1501  0D2A  2D2D               	goto	u4690
  1502  0D2B  178B               	bsf	11,7	;volatile
  1503  0D2C  0008               	return
  1504  0D2D                     u4690:	
  1505  0D2D  138B               	bcf	11,7	;volatile
  1506  0D2E  0008               	return
  1507  0D2F                     __end_of_vw_setup:	
  1508                           
  1509                           	psect	text2
  1510  0EE9                     __ptext2:	
  1511 ;; *************** function __calc_timer0_prescaler *****************
  1512 ;; Defined at:
  1513 ;;		line 97 in file "virtualwire.c"
  1514 ;; Parameters:    Size  Location     Type
  1515 ;;  brate           2   21[BANK1 ] unsigned int 
  1516 ;;  prescaler_va    1   23[BANK1 ] PTR unsigned int 
  1517 ;;		 -> vw_setup@prescaler_value(2), 
  1518 ;;  prescaler_bi    1   24[BANK1 ] PTR unsigned char 
  1519 ;;		 -> vw_setup@prescaler_bits(1), 
  1520 ;;  k_tmr0          1   25[BANK1 ] PTR unsigned char 
  1521 ;;		 -> vw_tmr0_value(1), 
  1522 ;; Auto vars:     Size  Location     Type
  1523 ;;  aux_tmr0        2   34[BANK1 ] unsigned int 
  1524 ;;  pindex          1   36[BANK1 ] unsigned char 
  1525 ;; Return value:  Size  Location     Type
  1526 ;;                  1    wreg      unsigned char 
  1527 ;; Registers used:
  1528 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1529 ;; Tracked objects:
  1530 ;;		On entry : 0/0
  1531 ;;		On exit  : 0/0
  1532 ;;		Unchanged: 0/0
  1533 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1534 ;;      Params:         0       0       5       0       0
  1535 ;;      Locals:         0       0       3       0       0
  1536 ;;      Temps:          0       0       8       0       0
  1537 ;;      Totals:         0       0      16       0       0
  1538 ;;Total ram usage:       16 bytes
  1539 ;; Hardware stack levels used:    1
  1540 ;; Hardware stack levels required when called:    6
  1541 ;; This function calls:
  1542 ;;		___aldiv
  1543 ;;		___wmul
  1544 ;; This function is called by:
  1545 ;;		_vw_setup
  1546 ;; This function uses a non-reentrant model
  1547 ;;
  1548                           
  1549                           
  1550                           ;psect for function __calc_timer0_prescaler
  1551  0EE9                     __calc_timer0_prescaler:	
  1552                           
  1553                           ;virtualwire.c: 99: const uint16_t prescaler_factor[] = {1, 2, 4, 8, 16, 32, 64, 128, 25
      +                          6};
  1554                           ;virtualwire.c: 100: uint8_t pindex;
  1555                           ;virtualwire.c: 101: uint16_t aux_tmr0;
  1556                           ;virtualwire.c: 103: for (pindex = 0; pindex < 8; pindex++)
  1557                           
  1558                           ;incstack = 0
  1559 ;; using string table level
  1560                           ; Regs used in __calc_timer0_prescaler: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cst
      +                          ack]
  1561  0EE9  1683               	bsf	3,5	;RP0=1, select bank1
  1562  0EEA  1303               	bcf	3,6	;RP1=0, select bank1
  1563  0EEB  01C4               	clrf	__calc_timer0_prescaler@pindex^(0+128)
  1564  0EEC                     L2:	
  1565  0EEC  3008               	movlw	8
  1566  0EED  0244               	subwf	__calc_timer0_prescaler@pindex^(0+128),w
  1567  0EEE  1803               	btfsc	3,0
  1568  0EEF  0008               	return
  1569                           
  1570                           ;virtualwire.c: 104: {
  1571                           ;virtualwire.c: 105: *prescaler_value = prescaler_factor[pindex];
  1572  0EF0  0844               	movf	__calc_timer0_prescaler@pindex^(0+128),w
  1573  0EF1  00BA               	movwf	??__calc_timer0_prescaler^(0+128)
  1574  0EF2  073A               	addwf	??__calc_timer0_prescaler^(0+128),w
  1575  0EF3  3E01               	addlw	low ((__calc_timer0_prescaler@prescaler_factor-__stringbase)| (0+32768))
  1576  0EF4  0084               	movwf	4
  1577  0EF5  120A  118A  2723  120A  158A  	fcall	stringdir
  1578  0EFA  00BB               	movwf	(??__calc_timer0_prescaler+1)^(0+128)
  1579  0EFB  120A  118A  2723  120A  158A  	fcall	stringdir
  1580  0F00  00BC               	movwf	((??__calc_timer0_prescaler+1)^(0+128)+1)
  1581  0F01  0837               	movf	__calc_timer0_prescaler@prescaler_value^(0+128),w
  1582  0F02  0084               	movwf	4
  1583  0F03  083B               	movf	(??__calc_timer0_prescaler+1)^(0+128),w
  1584  0F04  1383               	bcf	3,7	;select IRP bank0
  1585  0F05  0080               	movwf	0
  1586  0F06  0A84               	incf	4,f
  1587  0F07  083C               	movf	(??__calc_timer0_prescaler+2)^(0+128),w
  1588  0F08  0080               	movwf	0
  1589                           
  1590                           ;virtualwire.c: 106: aux_tmr0 = 12000000 / (4 * (*prescaler_value) * brate * 8);
  1591  0F09  0836               	movf	(__calc_timer0_prescaler@brate+1)^(0+128),w
  1592  0F0A  00A3               	movwf	(___wmul@multiplicand+1)^(0+128)
  1593  0F0B  0835               	movf	__calc_timer0_prescaler@brate^(0+128),w
  1594  0F0C  00A2               	movwf	___wmul@multiplicand^(0+128)
  1595  0F0D  0837               	movf	__calc_timer0_prescaler@prescaler_value^(0+128),w
  1596  0F0E  0084               	movwf	4
  1597  0F0F  0800               	movf	0,w
  1598  0F10  00BA               	movwf	??__calc_timer0_prescaler^(0+128)
  1599  0F11  0A84               	incf	4,f
  1600  0F12  0800               	movf	0,w
  1601  0F13  00BB               	movwf	(??__calc_timer0_prescaler^(0+128)+1)
  1602  0F14  1003               	clrc
  1603  0F15  0DBA               	rlf	??__calc_timer0_prescaler^(0+128),f
  1604  0F16  0DBB               	rlf	(??__calc_timer0_prescaler^(0+128)+1),f
  1605  0F17  1003               	clrc
  1606  0F18  0DBA               	rlf	??__calc_timer0_prescaler^(0+128),f
  1607  0F19  0DBB               	rlf	(??__calc_timer0_prescaler^(0+128)+1),f
  1608  0F1A  083A               	movf	??__calc_timer0_prescaler^(0+128),w
  1609  0F1B  00A0               	movwf	___wmul@multiplier^(0+128)
  1610  0F1C  083B               	movf	(??__calc_timer0_prescaler+1)^(0+128),w
  1611  0F1D  00A1               	movwf	(___wmul@multiplier+1)^(0+128)
  1612  0F1E  120A  158A  22A3  120A  158A  	fcall	___wmul
  1613  0F23  1683               	bsf	3,5	;RP0=1, select bank1
  1614  0F24  1303               	bcf	3,6	;RP1=0, select bank1
  1615  0F25  0820               	movf	?___wmul^(0+128),w
  1616  0F26  00BC               	movwf	(??__calc_timer0_prescaler+2)^(0+128)
  1617  0F27  0821               	movf	(?___wmul+1)^(0+128),w
  1618  0F28  00BD               	movwf	((??__calc_timer0_prescaler+2)^(0+128)+1)
  1619  0F29  1003               	clrc
  1620  0F2A  0DBC               	rlf	(??__calc_timer0_prescaler+2)^(0+128),f
  1621  0F2B  0DBD               	rlf	((??__calc_timer0_prescaler+2)^(0+128)+1),f
  1622  0F2C  1003               	clrc
  1623  0F2D  0DBC               	rlf	(??__calc_timer0_prescaler+2)^(0+128),f
  1624  0F2E  0DBD               	rlf	((??__calc_timer0_prescaler+2)^(0+128)+1),f
  1625  0F2F  1003               	clrc
  1626  0F30  0DBC               	rlf	(??__calc_timer0_prescaler+2)^(0+128),f
  1627  0F31  0DBD               	rlf	((??__calc_timer0_prescaler+2)^(0+128)+1),f
  1628  0F32  083C               	movf	(??__calc_timer0_prescaler+2)^(0+128),w
  1629  0F33  00BE               	movwf	(??__calc_timer0_prescaler+4)^(0+128)
  1630  0F34  083D               	movf	(??__calc_timer0_prescaler+3)^(0+128),w
  1631  0F35  00BF               	movwf	((??__calc_timer0_prescaler+4)^(0+128)+1)
  1632  0F36  01C0               	clrf	((??__calc_timer0_prescaler+4)^(0+128)+2)
  1633  0F37  01C1               	clrf	((??__calc_timer0_prescaler+4)^(0+128)+3)
  1634  0F38  0841               	movf	(??__calc_timer0_prescaler+7)^(0+128),w
  1635  0F39  00A9               	movwf	(___aldiv@divisor+3)^(0+128)
  1636  0F3A  0840               	movf	(??__calc_timer0_prescaler+6)^(0+128),w
  1637  0F3B  00A8               	movwf	(___aldiv@divisor+2)^(0+128)
  1638  0F3C  083F               	movf	(??__calc_timer0_prescaler+5)^(0+128),w
  1639  0F3D  00A7               	movwf	(___aldiv@divisor+1)^(0+128)
  1640  0F3E  083E               	movf	(??__calc_timer0_prescaler+4)^(0+128),w
  1641  0F3F  00A6               	movwf	___aldiv@divisor^(0+128)
  1642  0F40  3000               	movlw	0
  1643  0F41  00AD               	movwf	(___aldiv@dividend+3)^(0+128)
  1644  0F42  30B7               	movlw	183
  1645  0F43  00AC               	movwf	(___aldiv@dividend+2)^(0+128)
  1646  0F44  301B               	movlw	27
  1647  0F45  00AB               	movwf	(___aldiv@dividend+1)^(0+128)
  1648  0F46  3000               	movlw	0
  1649  0F47  00AA               	movwf	___aldiv@dividend^(0+128)
  1650  0F48  120A  158A  2771  120A  158A  	fcall	___aldiv
  1651  0F4D  1683               	bsf	3,5	;RP0=1, select bank1
  1652  0F4E  1303               	bcf	3,6	;RP1=0, select bank1
  1653  0F4F  0827               	movf	(?___aldiv^(0+128)+1),w
  1654  0F50  00C3               	movwf	(__calc_timer0_prescaler@aux_tmr0+1)^(0+128)
  1655  0F51  0826               	movf	?___aldiv^(0+128),w
  1656  0F52  00C2               	movwf	__calc_timer0_prescaler@aux_tmr0^(0+128)
  1657                           
  1658                           ;virtualwire.c: 108: if (aux_tmr0 < 256)
  1659  0F53  3001               	movlw	1
  1660  0F54  0243               	subwf	(__calc_timer0_prescaler@aux_tmr0+1)^(0+128),w
  1661  0F55  3000               	movlw	0
  1662  0F56  1903               	skipnz
  1663  0F57  0242               	subwf	__calc_timer0_prescaler@aux_tmr0^(0+128),w
  1664  0F58  1803               	skipnc
  1665  0F59  2F6C               	goto	l3283
  1666                           
  1667                           ;virtualwire.c: 109: {
  1668                           ;virtualwire.c: 110: *k_tmr0 = aux_tmr0;
  1669  0F5A  0842               	movf	__calc_timer0_prescaler@aux_tmr0^(0+128),w
  1670  0F5B  00BA               	movwf	??__calc_timer0_prescaler^(0+128)
  1671  0F5C  0839               	movf	__calc_timer0_prescaler@k_tmr0^(0+128),w
  1672  0F5D  0084               	movwf	4
  1673  0F5E  083A               	movf	??__calc_timer0_prescaler^(0+128),w
  1674  0F5F  1383               	bcf	3,7	;select IRP bank0
  1675  0F60  0080               	movwf	0
  1676                           
  1677                           ;virtualwire.c: 111: if (pindex > 0)
  1678  0F61  0844               	movf	__calc_timer0_prescaler@pindex^(0+128),w
  1679  0F62  1903               	btfsc	3,2
  1680  0F63  0008               	return
  1681                           
  1682                           ;virtualwire.c: 112: {
  1683                           ;virtualwire.c: 113: *prescaler_bits = pindex - 1;
  1684  0F64  0844               	movf	__calc_timer0_prescaler@pindex^(0+128),w
  1685  0F65  3EFF               	addlw	255
  1686  0F66  00BA               	movwf	??__calc_timer0_prescaler^(0+128)
  1687  0F67  0838               	movf	__calc_timer0_prescaler@prescaler_bits^(0+128),w
  1688  0F68  0084               	movwf	4
  1689  0F69  083A               	movf	??__calc_timer0_prescaler^(0+128),w
  1690  0F6A  0080               	movwf	0
  1691                           
  1692                           ;virtualwire.c: 114: }
  1693                           ;virtualwire.c: 115: return 1;
  1694                           ;	Return value of __calc_timer0_prescaler is never used
  1695  0F6B  0008               	return
  1696  0F6C                     l3283:	
  1697  0F6C  3001               	movlw	1
  1698  0F6D  00BA               	movwf	??__calc_timer0_prescaler^(0+128)
  1699  0F6E  083A               	movf	??__calc_timer0_prescaler^(0+128),w
  1700  0F6F  07C4               	addwf	__calc_timer0_prescaler@pindex^(0+128),f
  1701  0F70  2EEC               	goto	L2
  1702  0F71                     __end_of__calc_timer0_prescaler:	
  1703                           ;virtualwire.c: 116: }
  1704                           ;virtualwire.c: 117: }
  1705                           ;virtualwire.c: 120: return 0;
  1706                           ;	Return value of __calc_timer0_prescaler is never used
  1707                           
  1708                           
  1709                           	psect	text3
  1710  0F71                     __ptext3:	
  1711 ;; *************** function ___aldiv *****************
  1712 ;; Defined at:
  1713 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\aldiv.c"
  1714 ;; Parameters:    Size  Location     Type
  1715 ;;  divisor         4    6[BANK1 ] long 
  1716 ;;  dividend        4   10[BANK1 ] long 
  1717 ;; Auto vars:     Size  Location     Type
  1718 ;;  quotient        4   17[BANK1 ] long 
  1719 ;;  sign            1   16[BANK1 ] unsigned char 
  1720 ;;  counter         1   15[BANK1 ] unsigned char 
  1721 ;; Return value:  Size  Location     Type
  1722 ;;                  4    6[BANK1 ] long 
  1723 ;; Registers used:
  1724 ;;		wreg, status,2, status,0
  1725 ;; Tracked objects:
  1726 ;;		On entry : 0/0
  1727 ;;		On exit  : 0/0
  1728 ;;		Unchanged: 0/0
  1729 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1730 ;;      Params:         0       0       8       0       0
  1731 ;;      Locals:         0       0       6       0       0
  1732 ;;      Temps:          0       0       1       0       0
  1733 ;;      Totals:         0       0      15       0       0
  1734 ;;Total ram usage:       15 bytes
  1735 ;; Hardware stack levels used:    1
  1736 ;; Hardware stack levels required when called:    5
  1737 ;; This function calls:
  1738 ;;		Nothing
  1739 ;; This function is called by:
  1740 ;;		__calc_timer0_prescaler
  1741 ;; This function uses a non-reentrant model
  1742 ;;
  1743                           
  1744                           
  1745                           ;psect for function ___aldiv
  1746  0F71                     ___aldiv:	
  1747                           
  1748                           ;incstack = 0
  1749                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  1750  0F71  1683               	bsf	3,5	;RP0=1, select bank1
  1751  0F72  1303               	bcf	3,6	;RP1=0, select bank1
  1752  0F73  01B0               	clrf	___aldiv@sign^(0+128)
  1753  0F74  1FA9               	btfss	(___aldiv@divisor+3)^(0+128),7
  1754  0F75  2F83               	goto	l548
  1755  0F76  09A6               	comf	___aldiv@divisor^(0+128),f
  1756  0F77  09A7               	comf	(___aldiv@divisor+1)^(0+128),f
  1757  0F78  09A8               	comf	(___aldiv@divisor+2)^(0+128),f
  1758  0F79  09A9               	comf	(___aldiv@divisor+3)^(0+128),f
  1759  0F7A  0AA6               	incf	___aldiv@divisor^(0+128),f
  1760  0F7B  1903               	skipnz
  1761  0F7C  0AA7               	incf	(___aldiv@divisor+1)^(0+128),f
  1762  0F7D  1903               	skipnz
  1763  0F7E  0AA8               	incf	(___aldiv@divisor+2)^(0+128),f
  1764  0F7F  1903               	skipnz
  1765  0F80  0AA9               	incf	(___aldiv@divisor+3)^(0+128),f
  1766  0F81  01B0               	clrf	___aldiv@sign^(0+128)
  1767  0F82  0AB0               	incf	___aldiv@sign^(0+128),f
  1768  0F83                     l548:	
  1769  0F83  1FAD               	btfss	(___aldiv@dividend+3)^(0+128),7
  1770  0F84  2F94               	goto	l3145
  1771  0F85  09AA               	comf	___aldiv@dividend^(0+128),f
  1772  0F86  09AB               	comf	(___aldiv@dividend+1)^(0+128),f
  1773  0F87  09AC               	comf	(___aldiv@dividend+2)^(0+128),f
  1774  0F88  09AD               	comf	(___aldiv@dividend+3)^(0+128),f
  1775  0F89  0AAA               	incf	___aldiv@dividend^(0+128),f
  1776  0F8A  1903               	skipnz
  1777  0F8B  0AAB               	incf	(___aldiv@dividend+1)^(0+128),f
  1778  0F8C  1903               	skipnz
  1779  0F8D  0AAC               	incf	(___aldiv@dividend+2)^(0+128),f
  1780  0F8E  1903               	skipnz
  1781  0F8F  0AAD               	incf	(___aldiv@dividend+3)^(0+128),f
  1782  0F90  3001               	movlw	1
  1783  0F91  00AE               	movwf	??___aldiv^(0+128)
  1784  0F92  082E               	movf	??___aldiv^(0+128),w
  1785  0F93  06B0               	xorwf	___aldiv@sign^(0+128),f
  1786  0F94                     l3145:	
  1787  0F94  3000               	movlw	0
  1788  0F95  00B4               	movwf	(___aldiv@quotient+3)^(0+128)
  1789  0F96  3000               	movlw	0
  1790  0F97  00B3               	movwf	(___aldiv@quotient+2)^(0+128)
  1791  0F98  3000               	movlw	0
  1792  0F99  00B2               	movwf	(___aldiv@quotient+1)^(0+128)
  1793  0F9A  3000               	movlw	0
  1794  0F9B  00B1               	movwf	___aldiv@quotient^(0+128)
  1795  0F9C  0829               	movf	(___aldiv@divisor+3)^(0+128),w
  1796  0F9D  0428               	iorwf	(___aldiv@divisor+2)^(0+128),w
  1797  0F9E  0427               	iorwf	(___aldiv@divisor+1)^(0+128),w
  1798  0F9F  0426               	iorwf	___aldiv@divisor^(0+128),w
  1799  0FA0  1903               	skipnz
  1800  0FA1  2FE9               	goto	l3167
  1801  0FA2  01AF               	clrf	___aldiv@counter^(0+128)
  1802  0FA3  0AAF               	incf	___aldiv@counter^(0+128),f
  1803  0FA4                     l3153:	
  1804  0FA4  1BA9               	btfsc	(___aldiv@divisor+3)^(0+128),7
  1805  0FA5  2FB4               	goto	l3155
  1806  0FA6  3001               	movlw	1
  1807  0FA7  00AE               	movwf	??___aldiv^(0+128)
  1808  0FA8                     u4025:	
  1809  0FA8  1003               	clrc
  1810  0FA9  0DA6               	rlf	___aldiv@divisor^(0+128),f
  1811  0FAA  0DA7               	rlf	(___aldiv@divisor+1)^(0+128),f
  1812  0FAB  0DA8               	rlf	(___aldiv@divisor+2)^(0+128),f
  1813  0FAC  0DA9               	rlf	(___aldiv@divisor+3)^(0+128),f
  1814  0FAD  0BAE               	decfsz	??___aldiv^(0+128),f
  1815  0FAE  2FA8               	goto	u4025
  1816  0FAF  3001               	movlw	1
  1817  0FB0  00AE               	movwf	??___aldiv^(0+128)
  1818  0FB1  082E               	movf	??___aldiv^(0+128),w
  1819  0FB2  07AF               	addwf	___aldiv@counter^(0+128),f
  1820  0FB3  2FA4               	goto	l3153
  1821  0FB4                     l3155:	
  1822  0FB4  3001               	movlw	1
  1823  0FB5  00AE               	movwf	??___aldiv^(0+128)
  1824  0FB6                     u4045:	
  1825  0FB6  1003               	clrc
  1826  0FB7  0DB1               	rlf	___aldiv@quotient^(0+128),f
  1827  0FB8  0DB2               	rlf	(___aldiv@quotient+1)^(0+128),f
  1828  0FB9  0DB3               	rlf	(___aldiv@quotient+2)^(0+128),f
  1829  0FBA  0DB4               	rlf	(___aldiv@quotient+3)^(0+128),f
  1830  0FBB  0BAE               	decfsz	??___aldiv^(0+128),f
  1831  0FBC  2FB6               	goto	u4045
  1832  0FBD  0829               	movf	(___aldiv@divisor+3)^(0+128),w
  1833  0FBE  022D               	subwf	(___aldiv@dividend+3)^(0+128),w
  1834  0FBF  1D03               	skipz
  1835  0FC0  2FCB               	goto	u4055
  1836  0FC1  0828               	movf	(___aldiv@divisor+2)^(0+128),w
  1837  0FC2  022C               	subwf	(___aldiv@dividend+2)^(0+128),w
  1838  0FC3  1D03               	skipz
  1839  0FC4  2FCB               	goto	u4055
  1840  0FC5  0827               	movf	(___aldiv@divisor+1)^(0+128),w
  1841  0FC6  022B               	subwf	(___aldiv@dividend+1)^(0+128),w
  1842  0FC7  1D03               	skipz
  1843  0FC8  2FCB               	goto	u4055
  1844  0FC9  0826               	movf	___aldiv@divisor^(0+128),w
  1845  0FCA  022A               	subwf	___aldiv@dividend^(0+128),w
  1846  0FCB                     u4055:	
  1847  0FCB  1C03               	skipc
  1848  0FCC  2FDC               	goto	l3163
  1849  0FCD  0826               	movf	___aldiv@divisor^(0+128),w
  1850  0FCE  02AA               	subwf	___aldiv@dividend^(0+128),f
  1851  0FCF  0827               	movf	(___aldiv@divisor+1)^(0+128),w
  1852  0FD0  1C03               	skipc
  1853  0FD1  0F27               	incfsz	(___aldiv@divisor+1)^(0+128),w
  1854  0FD2  02AB               	subwf	(___aldiv@dividend+1)^(0+128),f
  1855  0FD3  0828               	movf	(___aldiv@divisor+2)^(0+128),w
  1856  0FD4  1C03               	skipc
  1857  0FD5  0F28               	incfsz	(___aldiv@divisor+2)^(0+128),w
  1858  0FD6  02AC               	subwf	(___aldiv@dividend+2)^(0+128),f
  1859  0FD7  0829               	movf	(___aldiv@divisor+3)^(0+128),w
  1860  0FD8  1C03               	skipc
  1861  0FD9  0F29               	incfsz	(___aldiv@divisor+3)^(0+128),w
  1862  0FDA  02AD               	subwf	(___aldiv@dividend+3)^(0+128),f
  1863  0FDB  1431               	bsf	___aldiv@quotient^(0+128),0
  1864  0FDC                     l3163:	
  1865  0FDC  3001               	movlw	1
  1866  0FDD                     u4065:	
  1867  0FDD  1003               	clrc
  1868  0FDE  0CA9               	rrf	(___aldiv@divisor+3)^(0+128),f
  1869  0FDF  0CA8               	rrf	(___aldiv@divisor+2)^(0+128),f
  1870  0FE0  0CA7               	rrf	(___aldiv@divisor+1)^(0+128),f
  1871  0FE1  0CA6               	rrf	___aldiv@divisor^(0+128),f
  1872  0FE2  3EFF               	addlw	-1
  1873  0FE3  1D03               	skipz
  1874  0FE4  2FDD               	goto	u4065
  1875  0FE5  3001               	movlw	1
  1876  0FE6  02AF               	subwf	___aldiv@counter^(0+128),f
  1877  0FE7  1D03               	btfss	3,2
  1878  0FE8  2FB4               	goto	l3155
  1879  0FE9                     l3167:	
  1880  0FE9  0830               	movf	___aldiv@sign^(0+128),w
  1881  0FEA  1903               	btfsc	3,2
  1882  0FEB  2FF7               	goto	l3171
  1883  0FEC  09B1               	comf	___aldiv@quotient^(0+128),f
  1884  0FED  09B2               	comf	(___aldiv@quotient+1)^(0+128),f
  1885  0FEE  09B3               	comf	(___aldiv@quotient+2)^(0+128),f
  1886  0FEF  09B4               	comf	(___aldiv@quotient+3)^(0+128),f
  1887  0FF0  0AB1               	incf	___aldiv@quotient^(0+128),f
  1888  0FF1  1903               	skipnz
  1889  0FF2  0AB2               	incf	(___aldiv@quotient+1)^(0+128),f
  1890  0FF3  1903               	skipnz
  1891  0FF4  0AB3               	incf	(___aldiv@quotient+2)^(0+128),f
  1892  0FF5  1903               	skipnz
  1893  0FF6  0AB4               	incf	(___aldiv@quotient+3)^(0+128),f
  1894  0FF7                     l3171:	
  1895  0FF7  0834               	movf	(___aldiv@quotient+3)^(0+128),w
  1896  0FF8  00A9               	movwf	(?___aldiv+3)^(0+128)
  1897  0FF9  0833               	movf	(___aldiv@quotient+2)^(0+128),w
  1898  0FFA  00A8               	movwf	(?___aldiv+2)^(0+128)
  1899  0FFB  0832               	movf	(___aldiv@quotient+1)^(0+128),w
  1900  0FFC  00A7               	movwf	(?___aldiv+1)^(0+128)
  1901  0FFD  0831               	movf	___aldiv@quotient^(0+128),w
  1902  0FFE  00A6               	movwf	?___aldiv^(0+128)
  1903  0FFF  0008               	return
  1904  1000                     __end_of___aldiv:	
  1905                           
  1906                           	psect	text4
  1907  09BC                     __ptext4:	
  1908 ;; *************** function _vw_rx_start *****************
  1909 ;; Defined at:
  1910 ;;		line 382 in file "virtualwire.c"
  1911 ;; Parameters:    Size  Location     Type
  1912 ;;		None
  1913 ;; Auto vars:     Size  Location     Type
  1914 ;;		None
  1915 ;; Return value:  Size  Location     Type
  1916 ;;                  1    wreg      void 
  1917 ;; Registers used:
  1918 ;;		None
  1919 ;; Tracked objects:
  1920 ;;		On entry : 0/0
  1921 ;;		On exit  : 0/0
  1922 ;;		Unchanged: 0/0
  1923 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1924 ;;      Params:         0       0       0       0       0
  1925 ;;      Locals:         0       0       0       0       0
  1926 ;;      Temps:          0       0       0       0       0
  1927 ;;      Totals:         0       0       0       0       0
  1928 ;;Total ram usage:        0 bytes
  1929 ;; Hardware stack levels used:    1
  1930 ;; Hardware stack levels required when called:    5
  1931 ;; This function calls:
  1932 ;;		Nothing
  1933 ;; This function is called by:
  1934 ;;		_main
  1935 ;; This function uses a non-reentrant model
  1936 ;;
  1937                           
  1938                           
  1939                           ;psect for function _vw_rx_start
  1940  09BC                     _vw_rx_start:	
  1941                           
  1942                           ;virtualwire.c: 384: vw_rx_enabled = 1;
  1943                           
  1944                           ;incstack = 0
  1945                           ; Regs used in _vw_rx_start: []
  1946  09BC  1283               	bcf	3,5	;RP0=0, select bank0
  1947  09BD  1303               	bcf	3,6	;RP1=0, select bank0
  1948  09BE  01CD               	clrf	_vw_rx_enabled
  1949  09BF  0ACD               	incf	_vw_rx_enabled,f
  1950                           
  1951                           ;virtualwire.c: 385: vw_rx_enabled_last = 1;
  1952  09C0  01CE               	clrf	_vw_rx_enabled_last
  1953  09C1  0ACE               	incf	_vw_rx_enabled_last,f
  1954  09C2  0008               	return
  1955  09C3                     __end_of_vw_rx_start:	
  1956                           
  1957                           	psect	text5
  1958  07A8                     __ptext5:	
  1959 ;; *************** function _vw_recv *****************
  1960 ;; Defined at:
  1961 ;;		line 353 in file "virtualwire.c"
  1962 ;; Parameters:    Size  Location     Type
  1963 ;;  buf             1    wreg     PTR unsigned char 
  1964 ;;		 -> text(10), 
  1965 ;;  len             1   22[BANK1 ] PTR unsigned char 
  1966 ;;		 -> main@len(1), 
  1967 ;; Auto vars:     Size  Location     Type
  1968 ;;  buf             1   26[BANK1 ] PTR unsigned char 
  1969 ;;		 -> text(10), 
  1970 ;;  rxlen           1   27[BANK1 ] unsigned char 
  1971 ;; Return value:  Size  Location     Type
  1972 ;;                  1    wreg      unsigned char 
  1973 ;; Registers used:
  1974 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1975 ;; Tracked objects:
  1976 ;;		On entry : 0/0
  1977 ;;		On exit  : 0/0
  1978 ;;		Unchanged: 0/0
  1979 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1980 ;;      Params:         0       0       1       0       0
  1981 ;;      Locals:         0       0       2       0       0
  1982 ;;      Temps:          0       0       3       0       0
  1983 ;;      Totals:         0       0       6       0       0
  1984 ;;Total ram usage:        6 bytes
  1985 ;; Hardware stack levels used:    1
  1986 ;; Hardware stack levels required when called:    7
  1987 ;; This function calls:
  1988 ;;		_memcpy
  1989 ;;		_vw_crc
  1990 ;; This function is called by:
  1991 ;;		_main
  1992 ;; This function uses a non-reentrant model
  1993 ;;
  1994                           
  1995                           
  1996                           ;psect for function _vw_recv
  1997  07A8                     _vw_recv:	
  1998                           
  1999                           ;incstack = 0
  2000                           ; Regs used in _vw_recv: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2001                           ;vw_recv@buf stored from wreg
  2002  07A8  1683               	bsf	3,5	;RP0=1, select bank1
  2003  07A9  1303               	bcf	3,6	;RP1=0, select bank1
  2004  07AA  00BA               	movwf	vw_recv@buf^(0+128)
  2005                           
  2006                           ;virtualwire.c: 355: uint8_t rxlen;
  2007                           ;virtualwire.c: 358: if (!vw_rx_done)
  2008  07AB  1283               	bcf	3,5	;RP0=0, select bank0
  2009  07AC  1303               	bcf	3,6	;RP1=0, select bank0
  2010  07AD  084C               	movf	_vw_rx_done,w	;volatile
  2011  07AE  1D03               	btfss	3,2
  2012  07AF  2FB2               	goto	l3607
  2013                           
  2014                           ;virtualwire.c: 359: return 0;
  2015  07B0  3000               	movlw	0
  2016  07B1  0008               	return
  2017  07B2                     l3607:	
  2018                           
  2019                           ;virtualwire.c: 363: rxlen = vw_rx_len - 3;
  2020  07B2  0852               	movf	_vw_rx_len,w
  2021  07B3  3EFD               	addlw	253
  2022  07B4  1683               	bsf	3,5	;RP0=1, select bank1
  2023  07B5  1303               	bcf	3,6	;RP1=0, select bank1
  2024  07B6  00B7               	movwf	??_vw_recv^(0+128)
  2025  07B7  0837               	movf	??_vw_recv^(0+128),w
  2026  07B8  00BB               	movwf	vw_recv@rxlen^(0+128)
  2027                           
  2028                           ;virtualwire.c: 366: if (*len > rxlen)
  2029  07B9  0836               	movf	vw_recv@len^(0+128),w
  2030  07BA  0084               	movwf	4
  2031  07BB  1383               	bcf	3,7	;select IRP bank0
  2032  07BC  0800               	movf	0,w
  2033  07BD  023B               	subwf	vw_recv@rxlen^(0+128),w
  2034  07BE  1803               	skipnc
  2035  07BF  2FC6               	goto	l3613
  2036                           
  2037                           ;virtualwire.c: 367: *len = rxlen;
  2038  07C0  083B               	movf	vw_recv@rxlen^(0+128),w
  2039  07C1  00B7               	movwf	??_vw_recv^(0+128)
  2040  07C2  0836               	movf	vw_recv@len^(0+128),w
  2041  07C3  0084               	movwf	4
  2042  07C4  0837               	movf	??_vw_recv^(0+128),w
  2043  07C5  0080               	movwf	0
  2044  07C6                     l3613:	
  2045                           
  2046                           ;virtualwire.c: 368: memcpy(buf, vw_tx_buf + 1, *len);
  2047  07C6  30B9               	movlw	(low ((_vw_tx_buf| (0+256)+1)))& (0+255)
  2048  07C7  00B7               	movwf	??_vw_recv^(0+128)
  2049  07C8  0837               	movf	??_vw_recv^(0+128),w
  2050  07C9  00A0               	movwf	memcpy@src^(0+128)
  2051  07CA  0836               	movf	vw_recv@len^(0+128),w
  2052  07CB  0084               	movwf	4
  2053  07CC  0800               	movf	0,w
  2054  07CD  00B8               	movwf	(??_vw_recv+1)^(0+128)
  2055  07CE  01B9               	clrf	((??_vw_recv+1)^(0+128)+1)
  2056  07CF  0838               	movf	(??_vw_recv+1)^(0+128),w
  2057  07D0  00A1               	movwf	memcpy@n^(0+128)
  2058  07D1  0839               	movf	(??_vw_recv+2)^(0+128),w
  2059  07D2  00A2               	movwf	(memcpy@n+1)^(0+128)
  2060  07D3  083A               	movf	vw_recv@buf^(0+128),w
  2061  07D4  120A  158A  2263  120A  118A  	fcall	_memcpy
  2062                           
  2063                           ;virtualwire.c: 370: vw_rx_done = 0;
  2064  07D9  1283               	bcf	3,5	;RP0=0, select bank0
  2065  07DA  1303               	bcf	3,6	;RP1=0, select bank0
  2066  07DB  01CC               	clrf	_vw_rx_done	;volatile
  2067                           
  2068                           ;virtualwire.c: 373: return (vw_crc(vw_tx_buf, vw_rx_len) == 0xf0b8);
  2069  07DC  0852               	movf	_vw_rx_len,w
  2070  07DD  1683               	bsf	3,5	;RP0=1, select bank1
  2071  07DE  1303               	bcf	3,6	;RP1=0, select bank1
  2072  07DF  00B7               	movwf	??_vw_recv^(0+128)
  2073  07E0  0837               	movf	??_vw_recv^(0+128),w
  2074  07E1  00B0               	movwf	vw_crc@count^(0+128)
  2075  07E2  30B8               	movlw	(low (_vw_tx_buf| (0+256)))& (0+255)
  2076  07E3  120A  158A  22EC  120A  118A  	fcall	_vw_crc
  2077  07E8  30B8               	movlw	184
  2078  07E9  1683               	bsf	3,5	;RP0=1, select bank1
  2079  07EA  1303               	bcf	3,6	;RP1=0, select bank1
  2080  07EB  0630               	xorwf	?_vw_crc^(0+128),w
  2081  07EC  30F0               	movlw	240
  2082  07ED  1903               	skipnz
  2083  07EE  0631               	xorwf	(?_vw_crc+1)^(0+128),w
  2084  07EF  1D03               	btfss	3,2
  2085  07F0  2FF3               	goto	u4750
  2086  07F1  3001               	movlw	1
  2087  07F2  0008               	return
  2088  07F3                     u4750:	
  2089  07F3  3000               	movlw	0
  2090  07F4  0008               	return
  2091  07F5                     __end_of_vw_recv:	
  2092                           
  2093                           	psect	text6
  2094  0AEC                     __ptext6:	
  2095 ;; *************** function _vw_crc *****************
  2096 ;; Defined at:
  2097 ;;		line 234 in file "virtualwire.c"
  2098 ;; Parameters:    Size  Location     Type
  2099 ;;  ptr             1    wreg     PTR unsigned char 
  2100 ;;		 -> vw_tx_buf(20), 
  2101 ;;  count           1   16[BANK1 ] unsigned char 
  2102 ;; Auto vars:     Size  Location     Type
  2103 ;;  ptr             1   19[BANK1 ] PTR unsigned char 
  2104 ;;		 -> vw_tx_buf(20), 
  2105 ;;  crc             2   20[BANK1 ] unsigned int 
  2106 ;; Return value:  Size  Location     Type
  2107 ;;                  2   16[BANK1 ] unsigned int 
  2108 ;; Registers used:
  2109 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2110 ;; Tracked objects:
  2111 ;;		On entry : 0/0
  2112 ;;		On exit  : 0/0
  2113 ;;		Unchanged: 0/0
  2114 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2115 ;;      Params:         0       0       2       0       0
  2116 ;;      Locals:         0       0       3       0       0
  2117 ;;      Temps:          0       0       1       0       0
  2118 ;;      Totals:         0       0       6       0       0
  2119 ;;Total ram usage:        6 bytes
  2120 ;; Hardware stack levels used:    1
  2121 ;; Hardware stack levels required when called:    6
  2122 ;; This function calls:
  2123 ;;		__crc_ccitt_update
  2124 ;; This function is called by:
  2125 ;;		_vw_recv
  2126 ;; This function uses a non-reentrant model
  2127 ;;
  2128                           
  2129                           
  2130                           ;psect for function _vw_crc
  2131  0AEC                     _vw_crc:	
  2132                           
  2133                           ;incstack = 0
  2134                           ; Regs used in _vw_crc: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2135                           ;vw_crc@ptr stored from wreg
  2136  0AEC  1683               	bsf	3,5	;RP0=1, select bank1
  2137  0AED  1303               	bcf	3,6	;RP1=0, select bank1
  2138  0AEE  00B3               	movwf	vw_crc@ptr^(0+128)
  2139                           
  2140                           ;virtualwire.c: 236: uint16_t crc = 0xffff;
  2141  0AEF  30FF               	movlw	255
  2142  0AF0  00B4               	movwf	vw_crc@crc^(0+128)
  2143  0AF1  30FF               	movlw	255
  2144  0AF2  00B5               	movwf	(vw_crc@crc^(0+128)+1)
  2145  0AF3                     l3293:	
  2146                           ;virtualwire.c: 238: while (count-- > 0)
  2147                           
  2148  0AF3  3001               	movlw	1
  2149  0AF4  02B0               	subwf	vw_crc@count^(0+128),f
  2150  0AF5  0A30               	incf	vw_crc@count^(0+128),w
  2151  0AF6  1903               	btfsc	3,2
  2152  0AF7  2B13               	goto	l3295
  2153                           
  2154                           ;virtualwire.c: 239: crc = _crc_ccitt_update(crc, *ptr++);
  2155  0AF8  0835               	movf	(vw_crc@crc+1)^(0+128),w
  2156  0AF9  00A1               	movwf	(__crc_ccitt_update@crc+1)^(0+128)
  2157  0AFA  0834               	movf	vw_crc@crc^(0+128),w
  2158  0AFB  00A0               	movwf	__crc_ccitt_update@crc^(0+128)
  2159  0AFC  0833               	movf	vw_crc@ptr^(0+128),w
  2160  0AFD  0084               	movwf	4
  2161  0AFE  1783               	bsf	3,7	;select IRP bank2
  2162  0AFF  0800               	movf	0,w
  2163  0B00  00B2               	movwf	??_vw_crc^(0+128)
  2164  0B01  0832               	movf	??_vw_crc^(0+128),w
  2165  0B02  00A2               	movwf	__crc_ccitt_update@data^(0+128)
  2166  0B03  120A  158A  2571  120A  158A  	fcall	__crc_ccitt_update
  2167  0B08  1683               	bsf	3,5	;RP0=1, select bank1
  2168  0B09  1303               	bcf	3,6	;RP1=0, select bank1
  2169  0B0A  0821               	movf	(?__crc_ccitt_update+1)^(0+128),w
  2170  0B0B  00B5               	movwf	(vw_crc@crc+1)^(0+128)
  2171  0B0C  0820               	movf	?__crc_ccitt_update^(0+128),w
  2172  0B0D  00B4               	movwf	vw_crc@crc^(0+128)
  2173  0B0E  3001               	movlw	1
  2174  0B0F  00B2               	movwf	??_vw_crc^(0+128)
  2175  0B10  0832               	movf	??_vw_crc^(0+128),w
  2176  0B11  07B3               	addwf	vw_crc@ptr^(0+128),f
  2177  0B12  2AF3               	goto	l3293
  2178  0B13                     l3295:	
  2179                           
  2180                           ;virtualwire.c: 240: return crc;
  2181  0B13  0835               	movf	(vw_crc@crc+1)^(0+128),w
  2182  0B14  00B1               	movwf	(?_vw_crc+1)^(0+128)
  2183  0B15  0834               	movf	vw_crc@crc^(0+128),w
  2184  0B16  00B0               	movwf	?_vw_crc^(0+128)
  2185  0B17  0008               	return
  2186  0B18                     __end_of_vw_crc:	
  2187                           
  2188                           	psect	text7
  2189  0D71                     __ptext7:	
  2190 ;; *************** function __crc_ccitt_update *****************
  2191 ;; Defined at:
  2192 ;;		line 51 in file "../_libs/crc16.h"
  2193 ;; Parameters:    Size  Location     Type
  2194 ;;  crc             2    0[BANK1 ] unsigned int 
  2195 ;;  data            1    2[BANK1 ] unsigned char 
  2196 ;; Auto vars:     Size  Location     Type
  2197 ;;		None
  2198 ;; Return value:  Size  Location     Type
  2199 ;;                  2    0[BANK1 ] unsigned int 
  2200 ;; Registers used:
  2201 ;;		wreg, status,2, status,0, btemp+1
  2202 ;; Tracked objects:
  2203 ;;		On entry : 0/0
  2204 ;;		On exit  : 0/0
  2205 ;;		Unchanged: 0/0
  2206 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2207 ;;      Params:         0       0       3       0       0
  2208 ;;      Locals:         0       0       0       0       0
  2209 ;;      Temps:          0       0      13       0       0
  2210 ;;      Totals:         0       0      16       0       0
  2211 ;;Total ram usage:       16 bytes
  2212 ;; Hardware stack levels used:    1
  2213 ;; Hardware stack levels required when called:    5
  2214 ;; This function calls:
  2215 ;;		Nothing
  2216 ;; This function is called by:
  2217 ;;		_vw_crc
  2218 ;;		_vw_send
  2219 ;; This function uses a non-reentrant model
  2220 ;;
  2221                           
  2222                           
  2223                           ;psect for function __crc_ccitt_update
  2224  0D71                     __crc_ccitt_update:	
  2225                           
  2226                           ;crc16.h: 53: data ^= ((crc)&0xff);
  2227                           
  2228                           ;incstack = 0
  2229                           ; Regs used in __crc_ccitt_update: [wreg+status,2+status,0+btemp+1]
  2230  0D71  1683               	bsf	3,5	;RP0=1, select bank1
  2231  0D72  1303               	bcf	3,6	;RP1=0, select bank1
  2232  0D73  0820               	movf	__crc_ccitt_update@crc^(0+128),w
  2233  0D74  00A3               	movwf	??__crc_ccitt_update^(0+128)
  2234  0D75  0823               	movf	??__crc_ccitt_update^(0+128),w
  2235  0D76  06A2               	xorwf	__crc_ccitt_update@data^(0+128),f
  2236                           
  2237                           ;crc16.h: 54: data ^= data << 4;
  2238  0D77  0822               	movf	__crc_ccitt_update@data^(0+128),w
  2239  0D78  00A3               	movwf	??__crc_ccitt_update^(0+128)
  2240  0D79  3003               	movlw	3
  2241  0D7A                     u3935:	
  2242  0D7A  1003               	clrc
  2243  0D7B  0DA3               	rlf	??__crc_ccitt_update^(0+128),f
  2244  0D7C  3EFF               	addlw	-1
  2245  0D7D  1D03               	skipz
  2246  0D7E  2D7A               	goto	u3935
  2247  0D7F  1003               	clrc
  2248  0D80  0D23               	rlf	??__crc_ccitt_update^(0+128),w
  2249  0D81  00A4               	movwf	(??__crc_ccitt_update+1)^(0+128)
  2250  0D82  0824               	movf	(??__crc_ccitt_update+1)^(0+128),w
  2251  0D83  06A2               	xorwf	__crc_ccitt_update@data^(0+128),f
  2252                           
  2253                           ;crc16.h: 56: return ((((uint16_t) data << 8) | ((crc)>>8)) ^ (uint8_t) (data >> 4)
  2254                           ;crc16.h: 57: ^ ((uint16_t) data << 3));
  2255  0D84  0822               	movf	__crc_ccitt_update@data^(0+128),w
  2256  0D85  00A3               	movwf	??__crc_ccitt_update^(0+128)
  2257  0D86  01A4               	clrf	(??__crc_ccitt_update^(0+128)+1)
  2258  0D87  1003               	clrc
  2259  0D88  0DA3               	rlf	??__crc_ccitt_update^(0+128),f
  2260  0D89  0DA4               	rlf	(??__crc_ccitt_update^(0+128)+1),f
  2261  0D8A  1003               	clrc
  2262  0D8B  0DA3               	rlf	??__crc_ccitt_update^(0+128),f
  2263  0D8C  0DA4               	rlf	(??__crc_ccitt_update^(0+128)+1),f
  2264  0D8D  1003               	clrc
  2265  0D8E  0DA3               	rlf	??__crc_ccitt_update^(0+128),f
  2266  0D8F  0DA4               	rlf	(??__crc_ccitt_update^(0+128)+1),f
  2267  0D90  0822               	movf	__crc_ccitt_update@data^(0+128),w
  2268  0D91  00A5               	movwf	(??__crc_ccitt_update+2)^(0+128)
  2269  0D92  3004               	movlw	4
  2270  0D93                     u3945:	
  2271  0D93  1003               	clrc
  2272  0D94  0CA5               	rrf	(??__crc_ccitt_update+2)^(0+128),f
  2273  0D95  3EFF               	addlw	-1
  2274  0D96  1D03               	skipz
  2275  0D97  2D93               	goto	u3945
  2276  0D98  0825               	movf	(??__crc_ccitt_update+2)^(0+128),w
  2277  0D99  00A6               	movwf	(??__crc_ccitt_update+3)^(0+128)
  2278  0D9A  01A7               	clrf	((??__crc_ccitt_update+3)^(0+128)+1)
  2279  0D9B  0821               	movf	(__crc_ccitt_update@crc+1)^(0+128),w
  2280  0D9C  00A9               	movwf	((??__crc_ccitt_update+5)^(0+128)+1)
  2281  0D9D  0820               	movf	__crc_ccitt_update@crc^(0+128),w
  2282  0D9E  00A8               	movwf	(??__crc_ccitt_update+5)^(0+128)
  2283  0D9F  0829               	movf	((??__crc_ccitt_update+5)^(0+128)+1),w
  2284  0DA0  00A8               	movwf	(??__crc_ccitt_update+5)^(0+128)
  2285  0DA1  01A9               	clrf	((??__crc_ccitt_update+5)^(0+128)+1)
  2286  0DA2  0822               	movf	__crc_ccitt_update@data^(0+128),w
  2287  0DA3  00AA               	movwf	(??__crc_ccitt_update+7)^(0+128)
  2288  0DA4  01AB               	clrf	((??__crc_ccitt_update+7)^(0+128)+1)
  2289  0DA5  082A               	movf	(??__crc_ccitt_update+7)^(0+128),w
  2290  0DA6  00AB               	movwf	((??__crc_ccitt_update+7)^(0+128)+1)
  2291  0DA7  01AA               	clrf	(??__crc_ccitt_update+7)^(0+128)
  2292  0DA8  0828               	movf	(??__crc_ccitt_update+5)^(0+128),w
  2293  0DA9  042A               	iorwf	(??__crc_ccitt_update+7)^(0+128),w
  2294  0DAA  00AC               	movwf	(??__crc_ccitt_update+9)^(0+128)
  2295  0DAB  0829               	movf	(??__crc_ccitt_update+6)^(0+128),w
  2296  0DAC  042B               	iorwf	(??__crc_ccitt_update+8)^(0+128),w
  2297  0DAD  00AD               	movwf	(??__crc_ccitt_update+10)^(0+128)
  2298  0DAE  0826               	movf	(??__crc_ccitt_update+3)^(0+128),w
  2299  0DAF  062C               	xorwf	(??__crc_ccitt_update+9)^(0+128),w
  2300  0DB0  00AE               	movwf	(??__crc_ccitt_update+11)^(0+128)
  2301  0DB1  0827               	movf	(??__crc_ccitt_update+4)^(0+128),w
  2302  0DB2  062D               	xorwf	(??__crc_ccitt_update+10)^(0+128),w
  2303  0DB3  00AF               	movwf	(??__crc_ccitt_update+12)^(0+128)
  2304  0DB4  0823               	movf	??__crc_ccitt_update^(0+128),w
  2305  0DB5  062E               	xorwf	(??__crc_ccitt_update+11)^(0+128),w
  2306  0DB6  00A0               	movwf	?__crc_ccitt_update^(0+128)
  2307  0DB7  0824               	movf	(??__crc_ccitt_update+1)^(0+128),w
  2308  0DB8  062F               	xorwf	(??__crc_ccitt_update+12)^(0+128),w
  2309  0DB9  00A1               	movwf	(?__crc_ccitt_update+1)^(0+128)
  2310  0DBA  0008               	return
  2311  0DBB                     __end_of__crc_ccitt_update:	
  2312                           
  2313                           	psect	text8
  2314  0A63                     __ptext8:	
  2315 ;; *************** function _memcpy *****************
  2316 ;; Defined at:
  2317 ;;		line 6 in file "../_libs/string.h"
  2318 ;; Parameters:    Size  Location     Type
  2319 ;;  dest            1    wreg     PTR unsigned char 
  2320 ;;		 -> text(10), 
  2321 ;;  src             1    0[BANK1 ] PTR unsigned char 
  2322 ;;		 -> vw_tx_buf(20), 
  2323 ;;  n               2    1[BANK1 ] unsigned int 
  2324 ;; Auto vars:     Size  Location     Type
  2325 ;;  dest            1    6[BANK1 ] PTR unsigned char 
  2326 ;;		 -> text(10), 
  2327 ;; Return value:  Size  Location     Type
  2328 ;;                  1    wreg      PTR unsigned char 
  2329 ;; Registers used:
  2330 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2331 ;; Tracked objects:
  2332 ;;		On entry : 0/0
  2333 ;;		On exit  : 0/0
  2334 ;;		Unchanged: 0/0
  2335 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2336 ;;      Params:         0       0       3       0       0
  2337 ;;      Locals:         0       0       1       0       0
  2338 ;;      Temps:          0       0       3       0       0
  2339 ;;      Totals:         0       0       7       0       0
  2340 ;;Total ram usage:        7 bytes
  2341 ;; Hardware stack levels used:    1
  2342 ;; Hardware stack levels required when called:    5
  2343 ;; This function calls:
  2344 ;;		Nothing
  2345 ;; This function is called by:
  2346 ;;		_vw_recv
  2347 ;; This function uses a non-reentrant model
  2348 ;;
  2349                           
  2350                           
  2351                           ;psect for function _memcpy
  2352  0A63                     _memcpy:	
  2353                           
  2354                           ;incstack = 0
  2355                           ; Regs used in _memcpy: [wreg-fsr0h+status,2+status,0]
  2356                           ;memcpy@dest stored from wreg
  2357  0A63  1683               	bsf	3,5	;RP0=1, select bank1
  2358  0A64  1303               	bcf	3,6	;RP1=0, select bank1
  2359  0A65  00A6               	movwf	memcpy@dest^(0+128)
  2360  0A66                     l3261:	
  2361                           ;string.h: 16: while (n--)
  2362                           
  2363  0A66  3001               	movlw	1
  2364  0A67  02A1               	subwf	memcpy@n^(0+128),f
  2365  0A68  3000               	movlw	0
  2366  0A69  1C03               	skipc
  2367  0A6A  03A2               	decf	(memcpy@n+1)^(0+128),f
  2368  0A6B  02A2               	subwf	(memcpy@n+1)^(0+128),f
  2369  0A6C  0A21               	incf	memcpy@n^(0+128),w
  2370  0A6D  1903               	btfsc	3,2
  2371  0A6E  0A22               	incf	(memcpy@n+1)^(0+128),w
  2372  0A6F  1903               	btfsc	3,2
  2373  0A70  0008               	return
  2374                           
  2375                           ;string.h: 17: dest[n] = src[n];
  2376  0A71  0821               	movf	memcpy@n^(0+128),w
  2377  0A72  0720               	addwf	memcpy@src^(0+128),w
  2378  0A73  00A3               	movwf	??_memcpy^(0+128)
  2379  0A74  0823               	movf	??_memcpy^(0+128),w
  2380  0A75  0084               	movwf	4
  2381  0A76  1783               	bsf	3,7	;select IRP bank2
  2382  0A77  0800               	movf	0,w
  2383  0A78  00A4               	movwf	(??_memcpy+1)^(0+128)
  2384  0A79  0821               	movf	memcpy@n^(0+128),w
  2385  0A7A  0726               	addwf	memcpy@dest^(0+128),w
  2386  0A7B  00A5               	movwf	(??_memcpy+2)^(0+128)
  2387  0A7C  0825               	movf	(??_memcpy+2)^(0+128),w
  2388  0A7D  0084               	movwf	4
  2389  0A7E  0824               	movf	(??_memcpy+1)^(0+128),w
  2390  0A7F  1383               	bcf	3,7	;select IRP bank0
  2391  0A80  0080               	movwf	0
  2392  0A81  2A66               	goto	l3261
  2393  0A82                     __end_of_memcpy:	
  2394                           ;string.h: 20: return dest;
  2395                           ;	Return value of _memcpy is never used
  2396                           
  2397                           
  2398                           	psect	text9
  2399  07F5                     __ptext9:	
  2400 ;; *************** function _vw_have_message *****************
  2401 ;; Defined at:
  2402 ;;		line 348 in file "virtualwire.c"
  2403 ;; Parameters:    Size  Location     Type
  2404 ;;		None
  2405 ;; Auto vars:     Size  Location     Type
  2406 ;;		None
  2407 ;; Return value:  Size  Location     Type
  2408 ;;                  1    wreg      unsigned char 
  2409 ;; Registers used:
  2410 ;;		wreg, status,2, status,0
  2411 ;; Tracked objects:
  2412 ;;		On entry : 0/0
  2413 ;;		On exit  : 0/0
  2414 ;;		Unchanged: 0/0
  2415 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2416 ;;      Params:         0       0       0       0       0
  2417 ;;      Locals:         0       0       0       0       0
  2418 ;;      Temps:          0       0       0       0       0
  2419 ;;      Totals:         0       0       0       0       0
  2420 ;;Total ram usage:        0 bytes
  2421 ;; Hardware stack levels used:    1
  2422 ;; Hardware stack levels required when called:    5
  2423 ;; This function calls:
  2424 ;;		Nothing
  2425 ;; This function is called by:
  2426 ;;		_main
  2427 ;; This function uses a non-reentrant model
  2428 ;;
  2429                           
  2430                           
  2431                           ;psect for function _vw_have_message
  2432  07F5                     _vw_have_message:	
  2433                           
  2434                           ;virtualwire.c: 350: return (vw_rx_done) ? 1 : 0;
  2435                           
  2436                           ;incstack = 0
  2437                           ; Regs used in _vw_have_message: [wreg+status,2+status,0]
  2438  07F5  1283               	bcf	3,5	;RP0=0, select bank0
  2439  07F6  1303               	bcf	3,6	;RP1=0, select bank0
  2440  07F7  084C               	movf	_vw_rx_done,w	;volatile
  2441  07F8  1903               	btfsc	3,2
  2442  07F9  2FFC               	goto	u4710
  2443  07FA  3001               	movlw	1
  2444  07FB  0008               	return
  2445  07FC                     u4710:	
  2446  07FC  3000               	movlw	0
  2447  07FD  0008               	return
  2448  07FE                     __end_of_vw_have_message:	
  2449                           
  2450                           	psect	text10
  2451  0031                     __ptext10:	
  2452 ;; *************** function _sprintf *****************
  2453 ;; Defined at:
  2454 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  2455 ;; Parameters:    Size  Location     Type
  2456 ;;  sp              2   14[BANK1 ] PTR unsigned char 
  2457 ;;		 -> adcBuffer_1(20), adcBuffer_0(20), clockBuffer(15), 
  2458 ;;  f               1   16[BANK1 ] PTR const unsigned char 
  2459 ;;		 -> STR_5(15), STR_4(13), STR_3(19), 
  2460 ;; Auto vars:     Size  Location     Type
  2461 ;;  tmpval          4    0        struct .
  2462 ;;  width           2   30[BANK1 ] int 
  2463 ;;  len             2   28[BANK1 ] unsigned int 
  2464 ;;  cp              2   26[BANK1 ] PTR const unsigned char 
  2465 ;;		 -> STR_7(7), sprintf@c(1), text(10), NULL(0), 
  2466 ;;  val             2   22[BANK1 ] unsigned int 
  2467 ;;  c               1   32[BANK1 ] char 
  2468 ;;  ap              1   25[BANK1 ] PTR void [1]
  2469 ;;		 -> ?i1_sprintf(2), ?_sprintf(2), 
  2470 ;;  prec            1   24[BANK1 ] char 
  2471 ;;  flag            1   21[BANK1 ] unsigned char 
  2472 ;; Return value:  Size  Location     Type
  2473 ;;                  2   14[BANK1 ] int 
  2474 ;; Registers used:
  2475 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2476 ;; Tracked objects:
  2477 ;;		On entry : 0/0
  2478 ;;		On exit  : 0/0
  2479 ;;		Unchanged: 0/0
  2480 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2481 ;;      Params:         0       0       4       0       0
  2482 ;;      Locals:         0       0      12       0       0
  2483 ;;      Temps:          0       0       3       0       0
  2484 ;;      Totals:         0       0      19       0       0
  2485 ;;Total ram usage:       19 bytes
  2486 ;; Hardware stack levels used:    1
  2487 ;; Hardware stack levels required when called:    6
  2488 ;; This function calls:
  2489 ;;		___lwdiv
  2490 ;;		___lwmod
  2491 ;;		___wmul
  2492 ;;		_isdigit
  2493 ;; This function is called by:
  2494 ;;		_main
  2495 ;; This function uses a non-reentrant model
  2496 ;;
  2497                           
  2498                           
  2499                           ;psect for function _sprintf
  2500  0031                     _sprintf:	
  2501                           
  2502                           ;doprnt.c: 494: va_list ap;
  2503                           ;doprnt.c: 499: signed char c;
  2504                           ;doprnt.c: 501: int width;
  2505                           ;doprnt.c: 506: signed char prec;
  2506                           ;doprnt.c: 508: unsigned char flag;
  2507                           ;doprnt.c: 523: union {
  2508                           ;doprnt.c: 524: unsigned long vd;
  2509                           ;doprnt.c: 525: double integ;
  2510                           ;doprnt.c: 526: } tmpval;
  2511                           ;doprnt.c: 528: unsigned int val;
  2512                           ;doprnt.c: 529: unsigned len;
  2513                           ;doprnt.c: 530: const char * cp;
  2514                           ;doprnt.c: 533: *ap = __va_start();
  2515                           
  2516                           ;incstack = 0
  2517                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2518  0031  30B1               	movlw	(low ((?_sprintf| 0+3)))& (0+255)
  2519  0032  1683               	bsf	3,5	;RP0=1, select bank1
  2520  0033  1303               	bcf	3,6	;RP1=0, select bank1
  2521  0034  00B2               	movwf	??_sprintf^(0+128)
  2522  0035  0832               	movf	??_sprintf^(0+128),w
  2523  0036  00B9               	movwf	sprintf@ap^(0+128)
  2524  0037                     l3573:	
  2525                           ;doprnt.c: 536: while(c = *f++) {
  2526                           
  2527  0037  3001               	movlw	1
  2528  0038  07B0               	addwf	sprintf@f^(0+128),f
  2529  0039  30FF               	movlw	-1
  2530  003A  0730               	addwf	sprintf@f^(0+128),w
  2531  003B  0084               	movwf	4
  2532  003C  120A  118A  2723  120A  118A  	fcall	stringdir
  2533  0041  00B2               	movwf	??_sprintf^(0+128)
  2534  0042  0832               	movf	??_sprintf^(0+128),w
  2535  0043  00C0               	movwf	sprintf@c^(0+128)
  2536  0044  0840               	movf	sprintf@c^(0+128),w
  2537  0045  1903               	btfsc	3,2
  2538  0046  2A34               	goto	l3575
  2539                           
  2540                           ;doprnt.c: 538: if(c != '%')
  2541  0047  3025               	movlw	37
  2542  0048  0640               	xorwf	sprintf@c^(0+128),w
  2543  0049  1903               	btfsc	3,2
  2544  004A  2857               	goto	l3459
  2545                           
  2546                           ;doprnt.c: 540: {
  2547                           ;doprnt.c: 541: ((*sp++ = (c)));
  2548  004B  082E               	movf	sprintf@sp^(0+128),w
  2549  004C  0084               	movwf	4
  2550  004D  1383               	bcf	3,7
  2551  004E  182F               	btfsc	(sprintf@sp+1)^(0+128),0
  2552  004F  1783               	bsf	3,7
  2553  0050  0840               	movf	sprintf@c^(0+128),w
  2554  0051  0080               	movwf	0
  2555  0052  3001               	movlw	1
  2556  0053  07AE               	addwf	sprintf@sp^(0+128),f
  2557  0054  1803               	skipnc
  2558  0055  0AAF               	incf	(sprintf@sp+1)^(0+128),f
  2559                           
  2560                           ;doprnt.c: 542: continue;
  2561  0056  2837               	goto	l3573
  2562  0057                     l3459:	
  2563                           
  2564                           ;doprnt.c: 543: }
  2565                           ;doprnt.c: 546: width = 0;
  2566  0057  01BE               	clrf	sprintf@width^(0+128)
  2567  0058  01BF               	clrf	(sprintf@width+1)^(0+128)
  2568                           
  2569                           ;doprnt.c: 548: flag = 0;
  2570  0059  01B5               	clrf	sprintf@flag^(0+128)
  2571                           
  2572                           ;doprnt.c: 551: switch(*f) {
  2573                           
  2574                           ;doprnt.c: 550: for(;;) {
  2575  005A  2860               	goto	l3465
  2576  005B                     l365:	
  2577                           ;doprnt.c: 579: case '0':
  2578                           
  2579                           
  2580                           ;doprnt.c: 580: flag |= 0x04;
  2581  005B  1535               	bsf	sprintf@flag^(0+128),2
  2582                           
  2583                           ;doprnt.c: 581: f++;
  2584  005C  3001               	movlw	1
  2585  005D  00B2               	movwf	??_sprintf^(0+128)
  2586  005E  0832               	movf	??_sprintf^(0+128),w
  2587  005F  07B0               	addwf	sprintf@f^(0+128),f
  2588  0060                     l3465:	
  2589                           ;doprnt.c: 584: }
  2590                           
  2591                           ;doprnt.c: 582: continue;
  2592                           
  2593  0060  0830               	movf	sprintf@f^(0+128),w
  2594  0061  0084               	movwf	4
  2595  0062  120A  118A  2723  120A  118A  	fcall	stringdir
  2596                           
  2597                           ; Switch size 1, requested type "space"
  2598                           ; Number of cases is 1, Range of values is 48 to 48
  2599                           ; switch strategies available:
  2600                           ; Name         Instructions Cycles
  2601                           ; simple_byte            4     3 (average)
  2602                           ; direct_byte           14    11 (fixed)
  2603                           ; jumptable            263     9 (fixed)
  2604                           ;	Chosen strategy is simple_byte
  2605  0067  3A30               	xorlw	48	; case 48
  2606  0068  1903               	skipnz
  2607  0069  285B               	goto	l365
  2608  006A  286B               	goto	l3467
  2609  006B                     l3467:	
  2610                           ;doprnt.c: 586: }
  2611                           
  2612                           ;doprnt.c: 585: break;
  2613                           
  2614                           
  2615                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  2616  006B  0830               	movf	sprintf@f^(0+128),w
  2617  006C  0084               	movwf	4
  2618  006D  120A  118A  2723  120A  118A  	fcall	stringdir
  2619  0072  120A  158A  21E8  120A  118A  	fcall	_isdigit
  2620  0077  1C03               	btfss	3,0
  2621  0078  294F               	goto	l3521
  2622                           
  2623                           ;doprnt.c: 598: width = 0;
  2624  0079  1683               	bsf	3,5	;RP0=1, select bank1
  2625  007A  1303               	bcf	3,6	;RP1=0, select bank1
  2626  007B  01BE               	clrf	sprintf@width^(0+128)
  2627  007C  01BF               	clrf	(sprintf@width+1)^(0+128)
  2628  007D                     l3471:	
  2629                           ;doprnt.c: 599: do {
  2630                           
  2631                           
  2632                           ;doprnt.c: 600: width *= 10;
  2633  007D  300A               	movlw	10
  2634  007E  1683               	bsf	3,5	;RP0=1, select bank1
  2635  007F  1303               	bcf	3,6	;RP1=0, select bank1
  2636  0080  00A0               	movwf	___wmul@multiplier^(0+128)
  2637  0081  3000               	movlw	0
  2638  0082  00A1               	movwf	(___wmul@multiplier^(0+128)+1)
  2639  0083  083F               	movf	(sprintf@width+1)^(0+128),w
  2640  0084  00A3               	movwf	(___wmul@multiplicand+1)^(0+128)
  2641  0085  083E               	movf	sprintf@width^(0+128),w
  2642  0086  00A2               	movwf	___wmul@multiplicand^(0+128)
  2643  0087  120A  158A  22A3  120A  118A  	fcall	___wmul
  2644  008C  1683               	bsf	3,5	;RP0=1, select bank1
  2645  008D  1303               	bcf	3,6	;RP1=0, select bank1
  2646  008E  0821               	movf	(?___wmul+1)^(0+128),w
  2647  008F  00BF               	movwf	(sprintf@width+1)^(0+128)
  2648  0090  0820               	movf	?___wmul^(0+128),w
  2649  0091  00BE               	movwf	sprintf@width^(0+128)
  2650                           
  2651                           ;doprnt.c: 601: width += *f++ - '0';
  2652  0092  0830               	movf	sprintf@f^(0+128),w
  2653  0093  0084               	movwf	4
  2654  0094  120A  118A  2723  120A  118A  	fcall	stringdir
  2655  0099  3ED0               	addlw	208
  2656  009A  00B2               	movwf	??_sprintf^(0+128)
  2657  009B  30FF               	movlw	255
  2658  009C  1803               	skipnc
  2659  009D  3000               	movlw	0
  2660  009E  00B3               	movwf	(??_sprintf^(0+128)+1)
  2661  009F  0832               	movf	??_sprintf^(0+128),w
  2662  00A0  07BE               	addwf	sprintf@width^(0+128),f
  2663  00A1  1803               	skipnc
  2664  00A2  0ABF               	incf	(sprintf@width+1)^(0+128),f
  2665  00A3  0833               	movf	(??_sprintf+1)^(0+128),w
  2666  00A4  07BF               	addwf	(sprintf@width+1)^(0+128),f
  2667  00A5  3001               	movlw	1
  2668  00A6  00B2               	movwf	??_sprintf^(0+128)
  2669  00A7  0832               	movf	??_sprintf^(0+128),w
  2670  00A8  07B0               	addwf	sprintf@f^(0+128),f
  2671                           
  2672                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  2673  00A9  0830               	movf	sprintf@f^(0+128),w
  2674  00AA  0084               	movwf	4
  2675  00AB  120A  118A  2723  120A  118A  	fcall	stringdir
  2676  00B0  120A  158A  21E8  120A  118A  	fcall	_isdigit
  2677  00B5  1C03               	btfss	3,0
  2678  00B6  294F               	goto	l3521
  2679  00B7  287D               	goto	l3471
  2680  00B8                     l3479:	
  2681                           ;doprnt.c: 728: case 's':
  2682                           
  2683                           ;doprnt.c: 638: goto alldone;
  2684                           
  2685                           ;doprnt.c: 637: case 0:
  2686                           
  2687                           ;doprnt.c: 608: }
  2688                           ;doprnt.c: 635: switch(c = *f++) {
  2689                           
  2690                           
  2691                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  2692  00B8  1683               	bsf	3,5	;RP0=1, select bank1
  2693  00B9  1303               	bcf	3,6	;RP1=0, select bank1
  2694  00BA  0839               	movf	sprintf@ap^(0+128),w
  2695  00BB  0084               	movwf	4
  2696  00BC  1383               	bcf	3,7	;select IRP bank0
  2697  00BD  0800               	movf	0,w
  2698  00BE  00BA               	movwf	sprintf@cp^(0+128)
  2699  00BF  3000               	movlw	0
  2700  00C0  00BB               	movwf	(sprintf@cp+1)^(0+128)
  2701  00C1  3001               	movlw	1
  2702  00C2  00B2               	movwf	??_sprintf^(0+128)
  2703  00C3  0832               	movf	??_sprintf^(0+128),w
  2704  00C4  07B9               	addwf	sprintf@ap^(0+128),f
  2705                           
  2706                           ;doprnt.c: 740: if(!cp)
  2707  00C5  083A               	movf	sprintf@cp^(0+128),w
  2708  00C6  043B               	iorwf	(sprintf@cp+1)^(0+128),w
  2709  00C7  1D03               	btfss	3,2
  2710  00C8  28CD               	goto	l3487
  2711                           
  2712                           ;doprnt.c: 741: cp = "(null)";
  2713  00C9  3077               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
  2714  00CA  00BA               	movwf	sprintf@cp^(0+128)
  2715  00CB  3080               	movlw	128
  2716  00CC  00BB               	movwf	(sprintf@cp+1)^(0+128)
  2717  00CD                     l3487:	
  2718                           
  2719                           ;doprnt.c: 745: len = 0;
  2720  00CD  01BC               	clrf	sprintf@len^(0+128)
  2721  00CE  01BD               	clrf	(sprintf@len+1)^(0+128)
  2722  00CF                     l3491:	
  2723                           ;doprnt.c: 746: while(cp[len])
  2724                           
  2725  00CF  083C               	movf	sprintf@len^(0+128),w
  2726  00D0  073A               	addwf	sprintf@cp^(0+128),w
  2727  00D1  0084               	movwf	4
  2728  00D2  083B               	movf	(sprintf@cp+1)^(0+128),w
  2729  00D3  1803               	skipnc
  2730  00D4  0A3B               	incf	(sprintf@cp+1)^(0+128),w
  2731  00D5  1283               	bcf	3,5	;RP0=0, select bank0
  2732  00D6  1303               	bcf	3,6	;RP1=0, select bank0
  2733  00D7  00FF               	movwf	127
  2734  00D8  120A  118A  2719  120A  118A  	fcall	stringtab
  2735  00DD  3A00               	xorlw	0
  2736  00DE  1903               	btfsc	3,2
  2737  00DF  28E9               	goto	l3493
  2738                           
  2739                           ;doprnt.c: 747: len++;
  2740  00E0  3001               	movlw	1
  2741  00E1  1683               	bsf	3,5	;RP0=1, select bank1
  2742  00E2  1303               	bcf	3,6	;RP1=0, select bank1
  2743  00E3  07BC               	addwf	sprintf@len^(0+128),f
  2744  00E4  1803               	skipnc
  2745  00E5  0ABD               	incf	(sprintf@len+1)^(0+128),f
  2746  00E6  3000               	movlw	0
  2747  00E7  07BD               	addwf	(sprintf@len+1)^(0+128),f
  2748  00E8  28CF               	goto	l3491
  2749  00E9                     l3493:	
  2750                           ;doprnt.c: 750: dostring:
  2751                           
  2752                           
  2753                           ;doprnt.c: 757: if(width > len)
  2754  00E9  1683               	bsf	3,5	;RP0=1, select bank1
  2755  00EA  1303               	bcf	3,6	;RP1=0, select bank1
  2756  00EB  083F               	movf	(sprintf@width+1)^(0+128),w
  2757  00EC  023D               	subwf	(sprintf@len+1)^(0+128),w
  2758  00ED  1D03               	skipz
  2759  00EE  28F1               	goto	u4545
  2760  00EF  083E               	movf	sprintf@width^(0+128),w
  2761  00F0  023C               	subwf	sprintf@len^(0+128),w
  2762  00F1                     u4545:	
  2763  00F1  1803               	skipnc
  2764  00F2  28FA               	goto	l3497
  2765                           
  2766                           ;doprnt.c: 758: width -= len;
  2767  00F3  083C               	movf	sprintf@len^(0+128),w
  2768  00F4  02BE               	subwf	sprintf@width^(0+128),f
  2769  00F5  083D               	movf	(sprintf@len+1)^(0+128),w
  2770  00F6  1C03               	skipc
  2771  00F7  03BF               	decf	(sprintf@width+1)^(0+128),f
  2772  00F8  02BF               	subwf	(sprintf@width+1)^(0+128),f
  2773  00F9  28FC               	goto	l3503
  2774  00FA                     l3497:	
  2775                           
  2776                           ;doprnt.c: 759: else
  2777                           ;doprnt.c: 760: width = 0;
  2778  00FA  01BE               	clrf	sprintf@width^(0+128)
  2779  00FB  01BF               	clrf	(sprintf@width+1)^(0+128)
  2780  00FC                     l3503:	
  2781                           ;doprnt.c: 764: while(width--)
  2782                           
  2783  00FC  30FF               	movlw	255
  2784  00FD  07BE               	addwf	sprintf@width^(0+128),f
  2785  00FE  1803               	skipnc
  2786  00FF  0ABF               	incf	(sprintf@width+1)^(0+128),f
  2787  0100  30FF               	movlw	255
  2788  0101  07BF               	addwf	(sprintf@width+1)^(0+128),f
  2789  0102  0A3E               	incf	sprintf@width^(0+128),w
  2790  0103  1903               	btfsc	3,2
  2791  0104  0A3F               	incf	(sprintf@width+1)^(0+128),w
  2792  0105  1903               	btfsc	3,2
  2793  0106  2934               	goto	l3511
  2794                           
  2795                           ;doprnt.c: 765: ((*sp++ = (' ')));
  2796  0107  082E               	movf	sprintf@sp^(0+128),w
  2797  0108  0084               	movwf	4
  2798  0109  1383               	bcf	3,7
  2799  010A  182F               	btfsc	(sprintf@sp+1)^(0+128),0
  2800  010B  1783               	bsf	3,7
  2801  010C  3020               	movlw	32
  2802  010D  0080               	movwf	0
  2803  010E  3001               	movlw	1
  2804  010F  07AE               	addwf	sprintf@sp^(0+128),f
  2805  0110  1803               	skipnc
  2806  0111  0AAF               	incf	(sprintf@sp+1)^(0+128),f
  2807  0112  28FC               	goto	l3503
  2808  0113                     l3505:	
  2809                           ;doprnt.c: 767: while(len--)
  2810                           
  2811                           
  2812                           ;doprnt.c: 768: ((*sp++ = (*cp++)));
  2813  0113  083B               	movf	(sprintf@cp+1)^(0+128),w
  2814  0114  1283               	bcf	3,5	;RP0=0, select bank0
  2815  0115  1303               	bcf	3,6	;RP1=0, select bank0
  2816  0116  00FF               	movwf	127
  2817  0117  1683               	bsf	3,5	;RP0=1, select bank1
  2818  0118  1303               	bcf	3,6	;RP1=0, select bank1
  2819  0119  083A               	movf	sprintf@cp^(0+128),w
  2820  011A  0084               	movwf	4
  2821  011B  1283               	bcf	3,5	;RP0=0, select bank0
  2822  011C  1303               	bcf	3,6	;RP1=0, select bank0
  2823  011D  120A  118A  2719  120A  118A  	fcall	stringtab
  2824  0122  1683               	bsf	3,5	;RP0=1, select bank1
  2825  0123  1303               	bcf	3,6	;RP1=0, select bank1
  2826  0124  00B2               	movwf	??_sprintf^(0+128)
  2827  0125  082E               	movf	sprintf@sp^(0+128),w
  2828  0126  0084               	movwf	4
  2829  0127  1383               	bcf	3,7
  2830  0128  182F               	btfsc	(sprintf@sp+1)^(0+128),0
  2831  0129  1783               	bsf	3,7
  2832  012A  0832               	movf	??_sprintf^(0+128),w
  2833  012B  0080               	movwf	0
  2834  012C  3001               	movlw	1
  2835  012D  07BA               	addwf	sprintf@cp^(0+128),f
  2836  012E  1803               	skipnc
  2837  012F  0ABB               	incf	(sprintf@cp+1)^(0+128),f
  2838  0130  3001               	movlw	1
  2839  0131  07AE               	addwf	sprintf@sp^(0+128),f
  2840  0132  1803               	skipnc
  2841  0133  0AAF               	incf	(sprintf@sp+1)^(0+128),f
  2842  0134                     l3511:	
  2843  0134  3001               	movlw	1
  2844  0135  02BC               	subwf	sprintf@len^(0+128),f
  2845  0136  3000               	movlw	0
  2846  0137  1C03               	skipc
  2847  0138  03BD               	decf	(sprintf@len+1)^(0+128),f
  2848  0139  02BD               	subwf	(sprintf@len+1)^(0+128),f
  2849  013A  0A3C               	incf	sprintf@len^(0+128),w
  2850  013B  1D03               	skipz
  2851  013C  2913               	goto	l3505
  2852  013D  0A3D               	incf	(sprintf@len+1)^(0+128),w
  2853  013E  1903               	btfsc	3,2
  2854  013F  2837               	goto	l3573
  2855  0140  2913               	goto	l3505
  2856  0141                     l3513:	
  2857                           ;doprnt.c: 802: default:
  2858                           
  2859                           ;doprnt.c: 774: continue;
  2860                           
  2861                           
  2862                           ;doprnt.c: 805: cp = (char *)&c;
  2863  0141  30C0               	movlw	(low (sprintf@c| 0))& (0+255)
  2864  0142  00BA               	movwf	sprintf@cp^(0+128)
  2865  0143  3000               	movlw	0
  2866  0144  00BB               	movwf	(sprintf@cp+1)^(0+128)
  2867                           
  2868                           ;doprnt.c: 806: len = 1;
  2869  0145  3001               	movlw	1
  2870  0146  00BC               	movwf	sprintf@len^(0+128)
  2871  0147  3000               	movlw	0
  2872  0148  00BD               	movwf	(sprintf@len^(0+128)+1)
  2873                           
  2874                           ;doprnt.c: 807: goto dostring;
  2875  0149  28E9               	goto	l3493
  2876  014A                     l3517:	
  2877                           ;doprnt.c: 817: case 'u':
  2878                           
  2879                           
  2880                           ;doprnt.c: 818: flag |= 0xC0;
  2881  014A  30C0               	movlw	192
  2882  014B  00B2               	movwf	??_sprintf^(0+128)
  2883  014C  0832               	movf	??_sprintf^(0+128),w
  2884  014D  04B5               	iorwf	sprintf@flag^(0+128),f
  2885                           
  2886                           ;doprnt.c: 822: }
  2887                           
  2888                           ;doprnt.c: 819: break;
  2889  014E  2966               	goto	l3523
  2890  014F                     l3521:	
  2891  014F  3001               	movlw	1
  2892  0150  1683               	bsf	3,5	;RP0=1, select bank1
  2893  0151  1303               	bcf	3,6	;RP1=0, select bank1
  2894  0152  07B0               	addwf	sprintf@f^(0+128),f
  2895  0153  30FF               	movlw	-1
  2896  0154  0730               	addwf	sprintf@f^(0+128),w
  2897  0155  0084               	movwf	4
  2898  0156  120A  118A  2723  120A  118A  	fcall	stringdir
  2899  015B  00C0               	movwf	sprintf@c^(0+128)
  2900                           
  2901                           ; Switch size 1, requested type "space"
  2902                           ; Number of cases is 3, Range of values is 0 to 117
  2903                           ; switch strategies available:
  2904                           ; Name         Instructions Cycles
  2905                           ; simple_byte           10     6 (average)
  2906                           ; jumptable            260     6 (fixed)
  2907                           ;	Chosen strategy is simple_byte
  2908  015C  3A00               	xorlw	0	; case 0
  2909  015D  1903               	skipnz
  2910  015E  2A34               	goto	l3575
  2911  015F  3A73               	xorlw	115	; case 115
  2912  0160  1903               	skipnz
  2913  0161  28B8               	goto	l3479
  2914  0162  3A06               	xorlw	6	; case 117
  2915  0163  1903               	skipnz
  2916  0164  294A               	goto	l3517
  2917  0165  2941               	goto	l3513
  2918  0166                     l3523:	
  2919                           
  2920                           ;doprnt.c: 1273: {
  2921                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  2922  0166  0839               	movf	sprintf@ap^(0+128),w
  2923  0167  0084               	movwf	4
  2924  0168  1383               	bcf	3,7	;select IRP bank0
  2925  0169  0800               	movf	0,w
  2926  016A  00B6               	movwf	sprintf@val^(0+128)
  2927  016B  0A84               	incf	4,f
  2928  016C  0800               	movf	0,w
  2929  016D  00B7               	movwf	(sprintf@val+1)^(0+128)
  2930  016E  3002               	movlw	2
  2931  016F  00B2               	movwf	??_sprintf^(0+128)
  2932  0170  0832               	movf	??_sprintf^(0+128),w
  2933  0171  07B9               	addwf	sprintf@ap^(0+128),f
  2934                           
  2935                           ;doprnt.c: 1287: }
  2936                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2937  0172  01C0               	clrf	sprintf@c^(0+128)
  2938  0173  0AC0               	incf	sprintf@c^(0+128),f
  2939  0174  3005               	movlw	5
  2940  0175  0640               	xorwf	sprintf@c^(0+128),w
  2941  0176  1903               	btfsc	3,2
  2942  0177  2999               	goto	l3539
  2943  0178                     l3533:	
  2944                           
  2945                           ;doprnt.c: 1306: if(val < dpowers[c])
  2946  0178  0840               	movf	sprintf@c^(0+128),w
  2947  0179  00B2               	movwf	??_sprintf^(0+128)
  2948  017A  0732               	addwf	??_sprintf^(0+128),w
  2949  017B  3E23               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  2950  017C  0084               	movwf	4
  2951  017D  120A  118A  2723  120A  118A  	fcall	stringdir
  2952  0182  00B3               	movwf	(??_sprintf+1)^(0+128)
  2953  0183  120A  118A  2723  120A  118A  	fcall	stringdir
  2954  0188  00B4               	movwf	((??_sprintf+1)^(0+128)+1)
  2955  0189  0834               	movf	(??_sprintf+2)^(0+128),w
  2956  018A  0237               	subwf	(sprintf@val+1)^(0+128),w
  2957  018B  1D03               	skipz
  2958  018C  298F               	goto	u4585
  2959  018D  0833               	movf	(??_sprintf+1)^(0+128),w
  2960  018E  0236               	subwf	sprintf@val^(0+128),w
  2961  018F                     u4585:	
  2962  018F  1C03               	btfss	3,0
  2963  0190  2999               	goto	l3539
  2964                           
  2965                           ;doprnt.c: 1307: break;
  2966  0191  3001               	movlw	1
  2967  0192  00B2               	movwf	??_sprintf^(0+128)
  2968  0193  0832               	movf	??_sprintf^(0+128),w
  2969  0194  07C0               	addwf	sprintf@c^(0+128),f
  2970  0195  3005               	movlw	5
  2971  0196  0640               	xorwf	sprintf@c^(0+128),w
  2972  0197  1D03               	btfss	3,2
  2973  0198  2978               	goto	l3533
  2974  0199                     l3539:	
  2975                           
  2976                           ;doprnt.c: 1381: if(width > c)
  2977  0199  0840               	movf	sprintf@c^(0+128),w
  2978  019A  00B2               	movwf	??_sprintf^(0+128)
  2979  019B  01B3               	clrf	(??_sprintf^(0+128)+1)
  2980  019C  1BB2               	btfsc	??_sprintf^(0+128),7
  2981  019D  03B3               	decf	(??_sprintf^(0+128)+1),f
  2982  019E  0833               	movf	(??_sprintf+1)^(0+128),w
  2983  019F  3A80               	xorlw	128
  2984  01A0  00B4               	movwf	(??_sprintf+2)^(0+128)
  2985  01A1  083F               	movf	(sprintf@width+1)^(0+128),w
  2986  01A2  3A80               	xorlw	128
  2987  01A3  0234               	subwf	(??_sprintf+2)^(0+128),w
  2988  01A4  1D03               	skipz
  2989  01A5  29A8               	goto	u4605
  2990  01A6  083E               	movf	sprintf@width^(0+128),w
  2991  01A7  0232               	subwf	??_sprintf^(0+128),w
  2992  01A8                     u4605:	
  2993  01A8  1803               	skipnc
  2994  01A9  29B8               	goto	l3543
  2995                           
  2996                           ;doprnt.c: 1382: width -= c;
  2997  01AA  1683               	bsf	3,5	;RP0=1, select bank1
  2998  01AB  1303               	bcf	3,6	;RP1=0, select bank1
  2999  01AC  0840               	movf	sprintf@c^(0+128),w
  3000  01AD  00B2               	movwf	??_sprintf^(0+128)
  3001  01AE  01B3               	clrf	(??_sprintf^(0+128)+1)
  3002  01AF  1BB2               	btfsc	??_sprintf^(0+128),7
  3003  01B0  03B3               	decf	(??_sprintf^(0+128)+1),f
  3004  01B1  0832               	movf	??_sprintf^(0+128),w
  3005  01B2  02BE               	subwf	sprintf@width^(0+128),f
  3006  01B3  0833               	movf	(??_sprintf+1)^(0+128),w
  3007  01B4  1C03               	skipc
  3008  01B5  03BF               	decf	(sprintf@width+1)^(0+128),f
  3009  01B6  02BF               	subwf	(sprintf@width+1)^(0+128),f
  3010  01B7  29BC               	goto	l3545
  3011  01B8                     l3543:	
  3012                           
  3013                           ;doprnt.c: 1383: else
  3014                           ;doprnt.c: 1384: width = 0;
  3015  01B8  1683               	bsf	3,5	;RP0=1, select bank1
  3016  01B9  1303               	bcf	3,6	;RP1=0, select bank1
  3017  01BA  01BE               	clrf	sprintf@width^(0+128)
  3018  01BB  01BF               	clrf	(sprintf@width+1)^(0+128)
  3019  01BC                     l3545:	
  3020                           
  3021                           ;doprnt.c: 1387: if(flag & 0x04) {
  3022  01BC  1D35               	btfss	sprintf@flag^(0+128),2
  3023  01BD  29D4               	goto	l3555
  3024  01BE                     L4:	
  3025                           
  3026                           ;doprnt.c: 1415: if(width)
  3027  01BE  083E               	movf	sprintf@width^(0+128),w
  3028  01BF  043F               	iorwf	(sprintf@width+1)^(0+128),w
  3029  01C0  1903               	btfsc	3,2
  3030  01C1  29ED               	goto	l3563
  3031                           
  3032                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  3033                           
  3034                           ;doprnt.c: 1416: do
  3035  01C2  082E               	movf	sprintf@sp^(0+128),w
  3036  01C3  0084               	movwf	4
  3037  01C4  1383               	bcf	3,7
  3038  01C5  182F               	btfsc	(sprintf@sp+1)^(0+128),0
  3039  01C6  1783               	bsf	3,7
  3040  01C7  3030               	movlw	48
  3041  01C8  0080               	movwf	0
  3042  01C9  3001               	movlw	1
  3043  01CA  07AE               	addwf	sprintf@sp^(0+128),f
  3044  01CB  1803               	skipnc
  3045  01CC  0AAF               	incf	(sprintf@sp+1)^(0+128),f
  3046                           
  3047                           ;doprnt.c: 1418: while(--width);
  3048  01CD  30FF               	movlw	255
  3049  01CE  07BE               	addwf	sprintf@width^(0+128),f
  3050  01CF  1803               	skipnc
  3051  01D0  0ABF               	incf	(sprintf@width+1)^(0+128),f
  3052  01D1  30FF               	movlw	255
  3053  01D2  07BF               	addwf	(sprintf@width+1)^(0+128),f
  3054  01D3  29BE               	goto	L4
  3055  01D4                     l3555:	
  3056                           ;doprnt.c: 1420: } else
  3057                           
  3058                           
  3059                           ;doprnt.c: 1422: {
  3060                           ;doprnt.c: 1424: if(width
  3061                           ;doprnt.c: 1428: )
  3062  01D4  083E               	movf	sprintf@width^(0+128),w
  3063  01D5  043F               	iorwf	(sprintf@width+1)^(0+128),w
  3064  01D6  1903               	btfsc	3,2
  3065  01D7  29ED               	goto	l3563
  3066  01D8                     l3557:	
  3067                           ;doprnt.c: 1429: do
  3068                           
  3069                           
  3070                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  3071  01D8  082E               	movf	sprintf@sp^(0+128),w
  3072  01D9  0084               	movwf	4
  3073  01DA  1383               	bcf	3,7
  3074  01DB  182F               	btfsc	(sprintf@sp+1)^(0+128),0
  3075  01DC  1783               	bsf	3,7
  3076  01DD  3020               	movlw	32
  3077  01DE  0080               	movwf	0
  3078  01DF  3001               	movlw	1
  3079  01E0  07AE               	addwf	sprintf@sp^(0+128),f
  3080  01E1  1803               	skipnc
  3081  01E2  0AAF               	incf	(sprintf@sp+1)^(0+128),f
  3082                           
  3083                           ;doprnt.c: 1431: while(--width);
  3084  01E3  30FF               	movlw	255
  3085  01E4  07BE               	addwf	sprintf@width^(0+128),f
  3086  01E5  1803               	skipnc
  3087  01E6  0ABF               	incf	(sprintf@width+1)^(0+128),f
  3088  01E7  30FF               	movlw	255
  3089  01E8  07BF               	addwf	(sprintf@width+1)^(0+128),f
  3090  01E9  083E               	movf	sprintf@width^(0+128),w
  3091  01EA  043F               	iorwf	(sprintf@width+1)^(0+128),w
  3092  01EB  1D03               	btfss	3,2
  3093  01EC  29D8               	goto	l3557
  3094  01ED                     l3563:	
  3095                           
  3096                           ;doprnt.c: 1469: }
  3097                           ;doprnt.c: 1472: prec = c;
  3098  01ED  0840               	movf	sprintf@c^(0+128),w
  3099  01EE  00B2               	movwf	??_sprintf^(0+128)
  3100  01EF  0832               	movf	??_sprintf^(0+128),w
  3101  01F0  00B8               	movwf	sprintf@prec^(0+128)
  3102  01F1                     l3571:	
  3103                           ;doprnt.c: 1474: while(prec--) {
  3104                           
  3105  01F1  30FF               	movlw	255
  3106  01F2  00B2               	movwf	??_sprintf^(0+128)
  3107  01F3  0832               	movf	??_sprintf^(0+128),w
  3108  01F4  07B8               	addwf	sprintf@prec^(0+128),f
  3109  01F5  0A38               	incf	sprintf@prec^(0+128),w
  3110  01F6  1903               	btfsc	3,2
  3111  01F7  2837               	goto	l3573
  3112                           
  3113                           ;doprnt.c: 1478: {
  3114                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  3115  01F8  300A               	movlw	10
  3116  01F9  00A8               	movwf	___lwmod@divisor^(0+128)
  3117  01FA  3000               	movlw	0
  3118  01FB  00A9               	movwf	(___lwmod@divisor^(0+128)+1)
  3119  01FC  0838               	movf	sprintf@prec^(0+128),w
  3120  01FD  00B2               	movwf	??_sprintf^(0+128)
  3121  01FE  0732               	addwf	??_sprintf^(0+128),w
  3122  01FF  3E23               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  3123  0200  0084               	movwf	4
  3124  0201  120A  118A  2723  120A  118A  	fcall	stringdir
  3125  0206  00A0               	movwf	___lwdiv@divisor^(0+128)
  3126  0207  120A  118A  2723  120A  118A  	fcall	stringdir
  3127  020C  00A1               	movwf	(___lwdiv@divisor+1)^(0+128)
  3128  020D  0837               	movf	(sprintf@val+1)^(0+128),w
  3129  020E  00A3               	movwf	(___lwdiv@dividend+1)^(0+128)
  3130  020F  0836               	movf	sprintf@val^(0+128),w
  3131  0210  00A2               	movwf	___lwdiv@dividend^(0+128)
  3132  0211  120A  158A  24B2  120A  118A  	fcall	___lwdiv
  3133  0216  1683               	bsf	3,5	;RP0=1, select bank1
  3134  0217  1303               	bcf	3,6	;RP1=0, select bank1
  3135  0218  0821               	movf	(?___lwdiv+1)^(0+128),w
  3136  0219  00AB               	movwf	(___lwmod@dividend+1)^(0+128)
  3137  021A  0820               	movf	?___lwdiv^(0+128),w
  3138  021B  00AA               	movwf	___lwmod@dividend^(0+128)
  3139  021C  120A  158A  240A  120A  118A  	fcall	___lwmod
  3140  0221  1683               	bsf	3,5	;RP0=1, select bank1
  3141  0222  1303               	bcf	3,6	;RP1=0, select bank1
  3142  0223  0828               	movf	?___lwmod^(0+128),w
  3143  0224  3E30               	addlw	48
  3144  0225  00B3               	movwf	(??_sprintf+1)^(0+128)
  3145  0226  0833               	movf	(??_sprintf+1)^(0+128),w
  3146  0227  00C0               	movwf	sprintf@c^(0+128)
  3147                           
  3148                           ;doprnt.c: 1523: }
  3149                           ;doprnt.c: 1524: ((*sp++ = (c)));
  3150  0228  082E               	movf	sprintf@sp^(0+128),w
  3151  0229  0084               	movwf	4
  3152  022A  1383               	bcf	3,7
  3153  022B  182F               	btfsc	(sprintf@sp+1)^(0+128),0
  3154  022C  1783               	bsf	3,7
  3155  022D  0840               	movf	sprintf@c^(0+128),w
  3156  022E  0080               	movwf	0
  3157  022F  3001               	movlw	1
  3158  0230  07AE               	addwf	sprintf@sp^(0+128),f
  3159  0231  1803               	skipnc
  3160  0232  0AAF               	incf	(sprintf@sp+1)^(0+128),f
  3161  0233  29F1               	goto	l3571
  3162  0234                     l3575:	
  3163                           ;doprnt.c: 1525: }
  3164                           ;doprnt.c: 1533: }
  3165                           ;doprnt.c: 1535: alldone:
  3166                           
  3167                           
  3168                           ;doprnt.c: 1538: *sp = 0;
  3169  0234  1683               	bsf	3,5	;RP0=1, select bank1
  3170  0235  1303               	bcf	3,6	;RP1=0, select bank1
  3171  0236  082E               	movf	sprintf@sp^(0+128),w
  3172  0237  0084               	movwf	4
  3173  0238  1783               	bsf	3,7
  3174  0239  1C2F               	btfss	(sprintf@sp+1)^(0+128),0
  3175  023A  1383               	bcf	3,7
  3176  023B  0180               	clrf	0
  3177  023C  0008               	return
  3178  023D                     __end_of_sprintf:	
  3179                           ;doprnt.c: 1540: return 0;
  3180                           ;	Return value of _sprintf is never used
  3181                           
  3182                           
  3183                           	psect	text11
  3184  0C0A                     __ptext11:	
  3185 ;; *************** function ___lwmod *****************
  3186 ;; Defined at:
  3187 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
  3188 ;; Parameters:    Size  Location     Type
  3189 ;;  divisor         2    8[BANK1 ] unsigned int 
  3190 ;;  dividend        2   10[BANK1 ] unsigned int 
  3191 ;; Auto vars:     Size  Location     Type
  3192 ;;  counter         1   13[BANK1 ] unsigned char 
  3193 ;; Return value:  Size  Location     Type
  3194 ;;                  2    8[BANK1 ] unsigned int 
  3195 ;; Registers used:
  3196 ;;		wreg, status,2, status,0
  3197 ;; Tracked objects:
  3198 ;;		On entry : 0/0
  3199 ;;		On exit  : 0/0
  3200 ;;		Unchanged: 0/0
  3201 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3202 ;;      Params:         0       0       4       0       0
  3203 ;;      Locals:         0       0       1       0       0
  3204 ;;      Temps:          0       0       1       0       0
  3205 ;;      Totals:         0       0       6       0       0
  3206 ;;Total ram usage:        6 bytes
  3207 ;; Hardware stack levels used:    1
  3208 ;; Hardware stack levels required when called:    5
  3209 ;; This function calls:
  3210 ;;		Nothing
  3211 ;; This function is called by:
  3212 ;;		_sprintf
  3213 ;; This function uses a non-reentrant model
  3214 ;;
  3215                           
  3216                           
  3217                           ;psect for function ___lwmod
  3218  0C0A                     ___lwmod:	
  3219                           
  3220                           ;incstack = 0
  3221                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  3222  0C0A  1683               	bsf	3,5	;RP0=1, select bank1
  3223  0C0B  1303               	bcf	3,6	;RP1=0, select bank1
  3224  0C0C  0828               	movf	___lwmod@divisor^(0+128),w
  3225  0C0D  0429               	iorwf	(___lwmod@divisor+1)^(0+128),w
  3226  0C0E  1903               	btfsc	3,2
  3227  0C0F  2C39               	goto	l3355
  3228  0C10  01AD               	clrf	___lwmod@counter^(0+128)
  3229  0C11  0AAD               	incf	___lwmod@counter^(0+128),f
  3230  0C12                     l3345:	
  3231  0C12  1BA9               	btfsc	(___lwmod@divisor+1)^(0+128),7
  3232  0C13  2C20               	goto	l3347
  3233  0C14  3001               	movlw	1
  3234  0C15                     u4345:	
  3235  0C15  1003               	clrc
  3236  0C16  0DA8               	rlf	___lwmod@divisor^(0+128),f
  3237  0C17  0DA9               	rlf	(___lwmod@divisor+1)^(0+128),f
  3238  0C18  3EFF               	addlw	-1
  3239  0C19  1D03               	skipz
  3240  0C1A  2C15               	goto	u4345
  3241  0C1B  3001               	movlw	1
  3242  0C1C  00AC               	movwf	??___lwmod^(0+128)
  3243  0C1D  082C               	movf	??___lwmod^(0+128),w
  3244  0C1E  07AD               	addwf	___lwmod@counter^(0+128),f
  3245  0C1F  2C12               	goto	l3345
  3246  0C20                     l3347:	
  3247  0C20  0829               	movf	(___lwmod@divisor+1)^(0+128),w
  3248  0C21  022B               	subwf	(___lwmod@dividend+1)^(0+128),w
  3249  0C22  1D03               	skipz
  3250  0C23  2C26               	goto	u4365
  3251  0C24  0828               	movf	___lwmod@divisor^(0+128),w
  3252  0C25  022A               	subwf	___lwmod@dividend^(0+128),w
  3253  0C26                     u4365:	
  3254  0C26  1C03               	skipc
  3255  0C27  2C2E               	goto	l3351
  3256  0C28  0828               	movf	___lwmod@divisor^(0+128),w
  3257  0C29  02AA               	subwf	___lwmod@dividend^(0+128),f
  3258  0C2A  0829               	movf	(___lwmod@divisor+1)^(0+128),w
  3259  0C2B  1C03               	skipc
  3260  0C2C  03AB               	decf	(___lwmod@dividend+1)^(0+128),f
  3261  0C2D  02AB               	subwf	(___lwmod@dividend+1)^(0+128),f
  3262  0C2E                     l3351:	
  3263  0C2E  3001               	movlw	1
  3264  0C2F                     u4375:	
  3265  0C2F  1003               	clrc
  3266  0C30  0CA9               	rrf	(___lwmod@divisor+1)^(0+128),f
  3267  0C31  0CA8               	rrf	___lwmod@divisor^(0+128),f
  3268  0C32  3EFF               	addlw	-1
  3269  0C33  1D03               	skipz
  3270  0C34  2C2F               	goto	u4375
  3271  0C35  3001               	movlw	1
  3272  0C36  02AD               	subwf	___lwmod@counter^(0+128),f
  3273  0C37  1D03               	btfss	3,2
  3274  0C38  2C20               	goto	l3347
  3275  0C39                     l3355:	
  3276  0C39  082B               	movf	(___lwmod@dividend+1)^(0+128),w
  3277  0C3A  00A9               	movwf	(?___lwmod+1)^(0+128)
  3278  0C3B  082A               	movf	___lwmod@dividend^(0+128),w
  3279  0C3C  00A8               	movwf	?___lwmod^(0+128)
  3280  0C3D  0008               	return
  3281  0C3E                     __end_of___lwmod:	
  3282                           
  3283                           	psect	text12
  3284  0CB2                     __ptext12:	
  3285 ;; *************** function ___lwdiv *****************
  3286 ;; Defined at:
  3287 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
  3288 ;; Parameters:    Size  Location     Type
  3289 ;;  divisor         2    0[BANK1 ] unsigned int 
  3290 ;;  dividend        2    2[BANK1 ] unsigned int 
  3291 ;; Auto vars:     Size  Location     Type
  3292 ;;  quotient        2    6[BANK1 ] unsigned int 
  3293 ;;  counter         1    5[BANK1 ] unsigned char 
  3294 ;; Return value:  Size  Location     Type
  3295 ;;                  2    0[BANK1 ] unsigned int 
  3296 ;; Registers used:
  3297 ;;		wreg, status,2, status,0
  3298 ;; Tracked objects:
  3299 ;;		On entry : 0/0
  3300 ;;		On exit  : 0/0
  3301 ;;		Unchanged: 0/0
  3302 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3303 ;;      Params:         0       0       4       0       0
  3304 ;;      Locals:         0       0       3       0       0
  3305 ;;      Temps:          0       0       1       0       0
  3306 ;;      Totals:         0       0       8       0       0
  3307 ;;Total ram usage:        8 bytes
  3308 ;; Hardware stack levels used:    1
  3309 ;; Hardware stack levels required when called:    5
  3310 ;; This function calls:
  3311 ;;		Nothing
  3312 ;; This function is called by:
  3313 ;;		_sprintf
  3314 ;; This function uses a non-reentrant model
  3315 ;;
  3316                           
  3317                           
  3318                           ;psect for function ___lwdiv
  3319  0CB2                     ___lwdiv:	
  3320                           
  3321                           ;incstack = 0
  3322                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  3323  0CB2  1683               	bsf	3,5	;RP0=1, select bank1
  3324  0CB3  1303               	bcf	3,6	;RP1=0, select bank1
  3325  0CB4  01A6               	clrf	___lwdiv@quotient^(0+128)
  3326  0CB5  01A7               	clrf	(___lwdiv@quotient+1)^(0+128)
  3327  0CB6  0820               	movf	___lwdiv@divisor^(0+128),w
  3328  0CB7  0421               	iorwf	(___lwdiv@divisor+1)^(0+128),w
  3329  0CB8  1903               	btfsc	3,2
  3330  0CB9  2CEB               	goto	l3333
  3331  0CBA  01A5               	clrf	___lwdiv@counter^(0+128)
  3332  0CBB  0AA5               	incf	___lwdiv@counter^(0+128),f
  3333  0CBC                     l3321:	
  3334  0CBC  1BA1               	btfsc	(___lwdiv@divisor+1)^(0+128),7
  3335  0CBD  2CCA               	goto	l3323
  3336  0CBE  3001               	movlw	1
  3337  0CBF                     u4275:	
  3338  0CBF  1003               	clrc
  3339  0CC0  0DA0               	rlf	___lwdiv@divisor^(0+128),f
  3340  0CC1  0DA1               	rlf	(___lwdiv@divisor+1)^(0+128),f
  3341  0CC2  3EFF               	addlw	-1
  3342  0CC3  1D03               	skipz
  3343  0CC4  2CBF               	goto	u4275
  3344  0CC5  3001               	movlw	1
  3345  0CC6  00A4               	movwf	??___lwdiv^(0+128)
  3346  0CC7  0824               	movf	??___lwdiv^(0+128),w
  3347  0CC8  07A5               	addwf	___lwdiv@counter^(0+128),f
  3348  0CC9  2CBC               	goto	l3321
  3349  0CCA                     l3323:	
  3350  0CCA  3001               	movlw	1
  3351  0CCB                     u4295:	
  3352  0CCB  1003               	clrc
  3353  0CCC  0DA6               	rlf	___lwdiv@quotient^(0+128),f
  3354  0CCD  0DA7               	rlf	(___lwdiv@quotient+1)^(0+128),f
  3355  0CCE  3EFF               	addlw	-1
  3356  0CCF  1D03               	skipz
  3357  0CD0  2CCB               	goto	u4295
  3358  0CD1  0821               	movf	(___lwdiv@divisor+1)^(0+128),w
  3359  0CD2  0223               	subwf	(___lwdiv@dividend+1)^(0+128),w
  3360  0CD3  1D03               	skipz
  3361  0CD4  2CD7               	goto	u4305
  3362  0CD5  0820               	movf	___lwdiv@divisor^(0+128),w
  3363  0CD6  0222               	subwf	___lwdiv@dividend^(0+128),w
  3364  0CD7                     u4305:	
  3365  0CD7  1C03               	skipc
  3366  0CD8  2CE0               	goto	l3329
  3367  0CD9  0820               	movf	___lwdiv@divisor^(0+128),w
  3368  0CDA  02A2               	subwf	___lwdiv@dividend^(0+128),f
  3369  0CDB  0821               	movf	(___lwdiv@divisor+1)^(0+128),w
  3370  0CDC  1C03               	skipc
  3371  0CDD  03A3               	decf	(___lwdiv@dividend+1)^(0+128),f
  3372  0CDE  02A3               	subwf	(___lwdiv@dividend+1)^(0+128),f
  3373  0CDF  1426               	bsf	___lwdiv@quotient^(0+128),0
  3374  0CE0                     l3329:	
  3375  0CE0  3001               	movlw	1
  3376  0CE1                     u4315:	
  3377  0CE1  1003               	clrc
  3378  0CE2  0CA1               	rrf	(___lwdiv@divisor+1)^(0+128),f
  3379  0CE3  0CA0               	rrf	___lwdiv@divisor^(0+128),f
  3380  0CE4  3EFF               	addlw	-1
  3381  0CE5  1D03               	skipz
  3382  0CE6  2CE1               	goto	u4315
  3383  0CE7  3001               	movlw	1
  3384  0CE8  02A5               	subwf	___lwdiv@counter^(0+128),f
  3385  0CE9  1D03               	btfss	3,2
  3386  0CEA  2CCA               	goto	l3323
  3387  0CEB                     l3333:	
  3388  0CEB  0827               	movf	(___lwdiv@quotient+1)^(0+128),w
  3389  0CEC  00A1               	movwf	(?___lwdiv+1)^(0+128)
  3390  0CED  0826               	movf	___lwdiv@quotient^(0+128),w
  3391  0CEE  00A0               	movwf	?___lwdiv^(0+128)
  3392  0CEF  0008               	return
  3393  0CF0                     __end_of___lwdiv:	
  3394                           
  3395                           	psect	text13
  3396  0AC6                     __ptext13:	
  3397 ;; *************** function _parse_id_value *****************
  3398 ;; Defined at:
  3399 ;;		line 32 in file "main.c"
  3400 ;; Parameters:    Size  Location     Type
  3401 ;;  str             1    wreg     PTR unsigned char 
  3402 ;;		 -> text(10), 
  3403 ;;  id              1   14[BANK1 ] PTR PTR unsigned char 
  3404 ;;		 -> main@id(1), 
  3405 ;;  value           1   15[BANK1 ] PTR PTR unsigned char 
  3406 ;;		 -> main@value(1), 
  3407 ;; Auto vars:     Size  Location     Type
  3408 ;;  str             1   18[BANK1 ] PTR unsigned char 
  3409 ;;		 -> text(10), 
  3410 ;; Return value:  Size  Location     Type
  3411 ;;                  1    wreg      void 
  3412 ;; Registers used:
  3413 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3414 ;; Tracked objects:
  3415 ;;		On entry : 0/0
  3416 ;;		On exit  : 0/0
  3417 ;;		Unchanged: 0/0
  3418 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3419 ;;      Params:         0       0       2       0       0
  3420 ;;      Locals:         0       0       1       0       0
  3421 ;;      Temps:          0       0       2       0       0
  3422 ;;      Totals:         0       0       5       0       0
  3423 ;;Total ram usage:        5 bytes
  3424 ;; Hardware stack levels used:    1
  3425 ;; Hardware stack levels required when called:    8
  3426 ;; This function calls:
  3427 ;;		_strtok
  3428 ;; This function is called by:
  3429 ;;		_main
  3430 ;; This function uses a non-reentrant model
  3431 ;;
  3432                           
  3433                           
  3434                           ;psect for function _parse_id_value
  3435  0AC6                     _parse_id_value:	
  3436                           
  3437                           ;incstack = 0
  3438 ;; hardware stack exceeded
  3439                           ; Regs used in _parse_id_value: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3440                           ;parse_id_value@str stored from wreg
  3441  0AC6  1683               	bsf	3,5	;RP0=1, select bank1
  3442  0AC7  1303               	bcf	3,6	;RP1=0, select bank1
  3443  0AC8  00B2               	movwf	parse_id_value@str^(0+128)
  3444                           
  3445                           ;main.c: 34: (* id) = strtok(str, (char *) ",");
  3446  0AC9  307E               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  3447  0ACA  00B0               	movwf	??_parse_id_value^(0+128)
  3448  0ACB  0830               	movf	??_parse_id_value^(0+128),w
  3449  0ACC  00AA               	movwf	strtok@s2^(0+128)
  3450  0ACD  0832               	movf	parse_id_value@str^(0+128),w
  3451  0ACE  120A  158A  25BB  120A  158A  	fcall	_strtok
  3452  0AD3  1683               	bsf	3,5	;RP0=1, select bank1
  3453  0AD4  1303               	bcf	3,6	;RP1=0, select bank1
  3454  0AD5  00B1               	movwf	(??_parse_id_value+1)^(0+128)
  3455  0AD6  082E               	movf	parse_id_value@id^(0+128),w
  3456  0AD7  0084               	movwf	4
  3457  0AD8  0831               	movf	(??_parse_id_value+1)^(0+128),w
  3458  0AD9  1383               	bcf	3,7	;select IRP bank0
  3459  0ADA  0080               	movwf	0
  3460                           
  3461                           ;main.c: 35: (* value) = strtok((0), (char *) ",");
  3462  0ADB  307E               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  3463  0ADC  00B0               	movwf	??_parse_id_value^(0+128)
  3464  0ADD  0830               	movf	??_parse_id_value^(0+128),w
  3465  0ADE  00AA               	movwf	strtok@s2^(0+128)
  3466  0ADF  3000               	movlw	0
  3467  0AE0  120A  158A  25BB   	fcall	_strtok
  3468  0AE3  1683               	bsf	3,5	;RP0=1, select bank1
  3469  0AE4  1303               	bcf	3,6	;RP1=0, select bank1
  3470  0AE5  00B1               	movwf	(??_parse_id_value+1)^(0+128)
  3471  0AE6  082F               	movf	parse_id_value@value^(0+128),w
  3472  0AE7  0084               	movwf	4
  3473  0AE8  0831               	movf	(??_parse_id_value+1)^(0+128),w
  3474  0AE9  1383               	bcf	3,7	;select IRP bank0
  3475  0AEA  0080               	movwf	0
  3476  0AEB  0008               	return
  3477  0AEC                     __end_of_parse_id_value:	
  3478                           
  3479                           	psect	text14
  3480  0DBB                     __ptext14:	
  3481 ;; *************** function _strtok *****************
  3482 ;; Defined at:
  3483 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strtok.c"
  3484 ;; Parameters:    Size  Location     Type
  3485 ;;  s1              1    wreg     PTR unsigned char 
  3486 ;;		 -> text(10), NULL(0), 
  3487 ;;  s2              1   10[BANK1 ] PTR const unsigned char 
  3488 ;;		 -> STR_2(2), STR_1(2), 
  3489 ;; Auto vars:     Size  Location     Type
  3490 ;;  s1              1   13[BANK1 ] PTR unsigned char 
  3491 ;;		 -> text(10), NULL(0), 
  3492 ;; Return value:  Size  Location     Type
  3493 ;;                  1    wreg      PTR unsigned char 
  3494 ;; Registers used:
  3495 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3496 ;; Tracked objects:
  3497 ;;		On entry : 0/0
  3498 ;;		On exit  : 0/0
  3499 ;;		Unchanged: 0/0
  3500 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3501 ;;      Params:         0       0       1       0       0
  3502 ;;      Locals:         0       0       1       0       0
  3503 ;;      Temps:          0       0       2       0       0
  3504 ;;      Totals:         0       0       4       0       0
  3505 ;;Total ram usage:        4 bytes
  3506 ;; Hardware stack levels used:    1
  3507 ;; Hardware stack levels required when called:    7
  3508 ;; This function calls:
  3509 ;;		_strcspn
  3510 ;;		_strspn
  3511 ;; This function is called by:
  3512 ;;		_parse_id_value
  3513 ;; This function uses a non-reentrant model
  3514 ;;
  3515                           
  3516                           
  3517                           ;psect for function _strtok
  3518  0DBB                     _strtok:	
  3519                           
  3520                           ;incstack = 0
  3521 ;; hardware stack exceeded
  3522                           ; Regs used in _strtok: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3523                           ;strtok@s1 stored from wreg
  3524  0DBB  1683               	bsf	3,5	;RP0=1, select bank1
  3525  0DBC  1303               	bcf	3,6	;RP1=0, select bank1
  3526  0DBD  00AD               	movwf	strtok@s1^(0+128)
  3527  0DBE  082D               	movf	strtok@s1^(0+128),w
  3528  0DBF  1D03               	btfss	3,2
  3529  0DC0  2DC9               	goto	l3229
  3530  0DC1  1283               	bcf	3,5	;RP0=0, select bank0
  3531  0DC2  1303               	bcf	3,6	;RP1=0, select bank0
  3532  0DC3  085B               	movf	strtok@sp,w
  3533  0DC4  1683               	bsf	3,5	;RP0=1, select bank1
  3534  0DC5  1303               	bcf	3,6	;RP1=0, select bank1
  3535  0DC6  00AB               	movwf	??_strtok^(0+128)
  3536  0DC7  082B               	movf	??_strtok^(0+128),w
  3537  0DC8  00AD               	movwf	strtok@s1^(0+128)
  3538  0DC9                     l3229:	
  3539  0DC9  082D               	movf	strtok@s1^(0+128),w
  3540  0DCA  1D03               	btfss	3,2
  3541  0DCB  2DCE               	goto	l3235
  3542  0DCC  3000               	movlw	0
  3543  0DCD  0008               	return
  3544  0DCE                     l3235:	
  3545  0DCE  082A               	movf	strtok@s2^(0+128),w
  3546  0DCF  00AB               	movwf	??_strtok^(0+128)
  3547  0DD0  082B               	movf	??_strtok^(0+128),w
  3548  0DD1  00A3               	movwf	strspn@s2^(0+128)
  3549  0DD2  082D               	movf	strtok@s1^(0+128),w
  3550  0DD3  120A  158A  23A7  120A  158A  	fcall	_strspn
  3551  0DD8  1683               	bsf	3,5	;RP0=1, select bank1
  3552  0DD9  1303               	bcf	3,6	;RP1=0, select bank1
  3553  0DDA  0823               	movf	?_strspn^(0+128),w
  3554  0DDB  00AC               	movwf	(??_strtok+1)^(0+128)
  3555  0DDC  082C               	movf	(??_strtok+1)^(0+128),w
  3556  0DDD  07AD               	addwf	strtok@s1^(0+128),f
  3557  0DDE  082D               	movf	strtok@s1^(0+128),w
  3558  0DDF  0084               	movwf	4
  3559  0DE0  1383               	bcf	3,7	;select IRP bank0
  3560  0DE1  0800               	movf	0,w
  3561  0DE2  1D03               	btfss	3,2
  3562  0DE3  2DE9               	goto	l3243
  3563  0DE4  1283               	bcf	3,5	;RP0=0, select bank0
  3564  0DE5  1303               	bcf	3,6	;RP1=0, select bank0
  3565  0DE6  01DB               	clrf	strtok@sp
  3566  0DE7  3000               	movlw	0
  3567  0DE8  0008               	return
  3568  0DE9                     l3243:	
  3569  0DE9  1683               	bsf	3,5	;RP0=1, select bank1
  3570  0DEA  1303               	bcf	3,6	;RP1=0, select bank1
  3571  0DEB  082A               	movf	strtok@s2^(0+128),w
  3572  0DEC  00AB               	movwf	??_strtok^(0+128)
  3573  0DED  082B               	movf	??_strtok^(0+128),w
  3574  0DEE  00A3               	movwf	strcspn@s2^(0+128)
  3575  0DEF  082D               	movf	strtok@s1^(0+128),w
  3576  0DF0  120A  158A  2376  120A  158A  	fcall	_strcspn
  3577  0DF5  1683               	bsf	3,5	;RP0=1, select bank1
  3578  0DF6  1303               	bcf	3,6	;RP1=0, select bank1
  3579  0DF7  0823               	movf	?_strcspn^(0+128),w
  3580  0DF8  072D               	addwf	strtok@s1^(0+128),w
  3581  0DF9  00AC               	movwf	(??_strtok+1)^(0+128)
  3582  0DFA  082C               	movf	(??_strtok+1)^(0+128),w
  3583  0DFB  1283               	bcf	3,5	;RP0=0, select bank0
  3584  0DFC  1303               	bcf	3,6	;RP1=0, select bank0
  3585  0DFD  00DB               	movwf	strtok@sp
  3586  0DFE  085B               	movf	strtok@sp,w
  3587  0DFF  0084               	movwf	4
  3588  0E00  1383               	bcf	3,7	;select IRP bank0
  3589  0E01  0800               	movf	0,w
  3590  0E02  1903               	btfsc	3,2
  3591  0E03  2E10               	goto	l3251
  3592  0E04  085B               	movf	strtok@sp,w
  3593  0E05  0084               	movwf	4
  3594  0E06  0180               	clrf	0
  3595  0E07  3001               	movlw	1
  3596  0E08  1683               	bsf	3,5	;RP0=1, select bank1
  3597  0E09  1303               	bcf	3,6	;RP1=0, select bank1
  3598  0E0A  00AB               	movwf	??_strtok^(0+128)
  3599  0E0B  082B               	movf	??_strtok^(0+128),w
  3600  0E0C  1283               	bcf	3,5	;RP0=0, select bank0
  3601  0E0D  1303               	bcf	3,6	;RP1=0, select bank0
  3602  0E0E  07DB               	addwf	strtok@sp,f
  3603  0E0F  2E11               	goto	l3253
  3604  0E10                     l3251:	
  3605  0E10  01DB               	clrf	strtok@sp
  3606  0E11                     l3253:	
  3607  0E11  1683               	bsf	3,5	;RP0=1, select bank1
  3608  0E12  1303               	bcf	3,6	;RP1=0, select bank1
  3609  0E13  082D               	movf	strtok@s1^(0+128),w
  3610  0E14  0008               	return
  3611  0E15                     __end_of_strtok:	
  3612                           
  3613                           	psect	text15
  3614  0BA7                     __ptext15:	
  3615 ;; *************** function _strspn *****************
  3616 ;; Defined at:
  3617 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strspn.c"
  3618 ;; Parameters:    Size  Location     Type
  3619 ;;  s1              1    wreg     PTR const unsigned char 
  3620 ;;		 -> text(10), NULL(0), 
  3621 ;;  s2              1    3[BANK1 ] PTR const unsigned char 
  3622 ;;		 -> STR_2(2), STR_1(2), 
  3623 ;; Auto vars:     Size  Location     Type
  3624 ;;  s1              1    9[BANK1 ] PTR const unsigned char 
  3625 ;;		 -> text(10), NULL(0), 
  3626 ;;  i               2    7[BANK1 ] unsigned int 
  3627 ;; Return value:  Size  Location     Type
  3628 ;;                  2    3[BANK1 ] unsigned int 
  3629 ;; Registers used:
  3630 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3631 ;; Tracked objects:
  3632 ;;		On entry : 0/0
  3633 ;;		On exit  : 0/0
  3634 ;;		Unchanged: 0/0
  3635 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3636 ;;      Params:         0       0       2       0       0
  3637 ;;      Locals:         0       0       3       0       0
  3638 ;;      Temps:          0       0       2       0       0
  3639 ;;      Totals:         0       0       7       0       0
  3640 ;;Total ram usage:        7 bytes
  3641 ;; Hardware stack levels used:    1
  3642 ;; Hardware stack levels required when called:    6
  3643 ;; This function calls:
  3644 ;;		_strchr
  3645 ;; This function is called by:
  3646 ;;		_strtok
  3647 ;; This function uses a non-reentrant model
  3648 ;;
  3649                           
  3650                           
  3651                           ;psect for function _strspn
  3652  0BA7                     _strspn:	
  3653                           
  3654                           ;incstack = 0
  3655 ;; hardware stack exceeded
  3656                           ; Regs used in _strspn: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3657                           ;strspn@s1 stored from wreg
  3658  0BA7  1683               	bsf	3,5	;RP0=1, select bank1
  3659  0BA8  1303               	bcf	3,6	;RP1=0, select bank1
  3660  0BA9  00A9               	movwf	strspn@s1^(0+128)
  3661  0BAA  01A7               	clrf	strspn@i^(0+128)
  3662  0BAB  01A8               	clrf	(strspn@i+1)^(0+128)
  3663  0BAC  2BB9               	goto	l3179
  3664  0BAD                     l3177:	
  3665  0BAD  3001               	movlw	1
  3666  0BAE  1683               	bsf	3,5	;RP0=1, select bank1
  3667  0BAF  1303               	bcf	3,6	;RP1=0, select bank1
  3668  0BB0  00A5               	movwf	??_strspn^(0+128)
  3669  0BB1  0825               	movf	??_strspn^(0+128),w
  3670  0BB2  07A9               	addwf	strspn@s1^(0+128),f
  3671  0BB3  3001               	movlw	1
  3672  0BB4  07A7               	addwf	strspn@i^(0+128),f
  3673  0BB5  1803               	skipnc
  3674  0BB6  0AA8               	incf	(strspn@i+1)^(0+128),f
  3675  0BB7  3000               	movlw	0
  3676  0BB8  07A8               	addwf	(strspn@i+1)^(0+128),f
  3677  0BB9                     l3179:	
  3678  0BB9  0829               	movf	strspn@s1^(0+128),w
  3679  0BBA  0084               	movwf	4
  3680  0BBB  1383               	bcf	3,7	;select IRP bank0
  3681  0BBC  0800               	movf	0,w
  3682  0BBD  1903               	btfsc	3,2
  3683  0BBE  2BD1               	goto	l3183
  3684  0BBF  0829               	movf	strspn@s1^(0+128),w
  3685  0BC0  0084               	movwf	4
  3686  0BC1  0800               	movf	0,w
  3687  0BC2  00A5               	movwf	??_strspn^(0+128)
  3688  0BC3  01A6               	clrf	(??_strspn^(0+128)+1)
  3689  0BC4  0825               	movf	??_strspn^(0+128),w
  3690  0BC5  00A0               	movwf	strchr@chr^(0+128)
  3691  0BC6  0826               	movf	(??_strspn+1)^(0+128),w
  3692  0BC7  00A1               	movwf	(strchr@chr+1)^(0+128)
  3693  0BC8  0823               	movf	strspn@s2^(0+128),w
  3694  0BC9  120A  158A  2226  120A  158A  	fcall	_strchr
  3695  0BCE  3A00               	xorlw	0
  3696  0BCF  1D03               	skipz
  3697  0BD0  2BAD               	goto	l3177
  3698  0BD1                     l3183:	
  3699  0BD1  1683               	bsf	3,5	;RP0=1, select bank1
  3700  0BD2  1303               	bcf	3,6	;RP1=0, select bank1
  3701  0BD3  0828               	movf	(strspn@i+1)^(0+128),w
  3702  0BD4  00A4               	movwf	(?_strspn+1)^(0+128)
  3703  0BD5  0827               	movf	strspn@i^(0+128),w
  3704  0BD6  00A3               	movwf	?_strspn^(0+128)
  3705  0BD7  0008               	return
  3706  0BD8                     __end_of_strspn:	
  3707                           
  3708                           	psect	text16
  3709  0B76                     __ptext16:	
  3710 ;; *************** function _strcspn *****************
  3711 ;; Defined at:
  3712 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcspn.c"
  3713 ;; Parameters:    Size  Location     Type
  3714 ;;  s1              1    wreg     PTR const unsigned char 
  3715 ;;		 -> text(10), NULL(0), 
  3716 ;;  s2              1    3[BANK1 ] PTR const unsigned char 
  3717 ;;		 -> STR_2(2), STR_1(2), 
  3718 ;; Auto vars:     Size  Location     Type
  3719 ;;  s1              1    9[BANK1 ] PTR const unsigned char 
  3720 ;;		 -> text(10), NULL(0), 
  3721 ;;  i               2    7[BANK1 ] unsigned int 
  3722 ;; Return value:  Size  Location     Type
  3723 ;;                  2    3[BANK1 ] unsigned int 
  3724 ;; Registers used:
  3725 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3726 ;; Tracked objects:
  3727 ;;		On entry : 0/0
  3728 ;;		On exit  : 0/0
  3729 ;;		Unchanged: 0/0
  3730 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3731 ;;      Params:         0       0       2       0       0
  3732 ;;      Locals:         0       0       3       0       0
  3733 ;;      Temps:          0       0       2       0       0
  3734 ;;      Totals:         0       0       7       0       0
  3735 ;;Total ram usage:        7 bytes
  3736 ;; Hardware stack levels used:    1
  3737 ;; Hardware stack levels required when called:    6
  3738 ;; This function calls:
  3739 ;;		_strchr
  3740 ;; This function is called by:
  3741 ;;		_strtok
  3742 ;; This function uses a non-reentrant model
  3743 ;;
  3744                           
  3745                           
  3746                           ;psect for function _strcspn
  3747  0B76                     _strcspn:	
  3748                           
  3749                           ;incstack = 0
  3750 ;; hardware stack exceeded
  3751                           ; Regs used in _strcspn: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3752                           ;strcspn@s1 stored from wreg
  3753  0B76  1683               	bsf	3,5	;RP0=1, select bank1
  3754  0B77  1303               	bcf	3,6	;RP1=0, select bank1
  3755  0B78  00A9               	movwf	strcspn@s1^(0+128)
  3756  0B79  01A7               	clrf	strcspn@i^(0+128)
  3757  0B7A  01A8               	clrf	(strcspn@i+1)^(0+128)
  3758  0B7B  2B88               	goto	l3191
  3759  0B7C                     l3189:	
  3760  0B7C  3001               	movlw	1
  3761  0B7D  1683               	bsf	3,5	;RP0=1, select bank1
  3762  0B7E  1303               	bcf	3,6	;RP1=0, select bank1
  3763  0B7F  00A5               	movwf	??_strcspn^(0+128)
  3764  0B80  0825               	movf	??_strcspn^(0+128),w
  3765  0B81  07A9               	addwf	strcspn@s1^(0+128),f
  3766  0B82  3001               	movlw	1
  3767  0B83  07A7               	addwf	strcspn@i^(0+128),f
  3768  0B84  1803               	skipnc
  3769  0B85  0AA8               	incf	(strcspn@i+1)^(0+128),f
  3770  0B86  3000               	movlw	0
  3771  0B87  07A8               	addwf	(strcspn@i+1)^(0+128),f
  3772  0B88                     l3191:	
  3773  0B88  0829               	movf	strcspn@s1^(0+128),w
  3774  0B89  0084               	movwf	4
  3775  0B8A  1383               	bcf	3,7	;select IRP bank0
  3776  0B8B  0800               	movf	0,w
  3777  0B8C  1903               	btfsc	3,2
  3778  0B8D  2BA0               	goto	l3195
  3779  0B8E  0829               	movf	strcspn@s1^(0+128),w
  3780  0B8F  0084               	movwf	4
  3781  0B90  0800               	movf	0,w
  3782  0B91  00A5               	movwf	??_strcspn^(0+128)
  3783  0B92  01A6               	clrf	(??_strcspn^(0+128)+1)
  3784  0B93  0825               	movf	??_strcspn^(0+128),w
  3785  0B94  00A0               	movwf	strchr@chr^(0+128)
  3786  0B95  0826               	movf	(??_strcspn+1)^(0+128),w
  3787  0B96  00A1               	movwf	(strchr@chr+1)^(0+128)
  3788  0B97  0823               	movf	strcspn@s2^(0+128),w
  3789  0B98  120A  158A  2226  120A  158A  	fcall	_strchr
  3790  0B9D  3A00               	xorlw	0
  3791  0B9E  1903               	skipnz
  3792  0B9F  2B7C               	goto	l3189
  3793  0BA0                     l3195:	
  3794  0BA0  1683               	bsf	3,5	;RP0=1, select bank1
  3795  0BA1  1303               	bcf	3,6	;RP1=0, select bank1
  3796  0BA2  0828               	movf	(strcspn@i+1)^(0+128),w
  3797  0BA3  00A4               	movwf	(?_strcspn+1)^(0+128)
  3798  0BA4  0827               	movf	strcspn@i^(0+128),w
  3799  0BA5  00A3               	movwf	?_strcspn^(0+128)
  3800  0BA6  0008               	return
  3801  0BA7                     __end_of_strcspn:	
  3802                           
  3803                           	psect	text17
  3804  0A26                     __ptext17:	
  3805 ;; *************** function _strchr *****************
  3806 ;; Defined at:
  3807 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strchr.c"
  3808 ;; Parameters:    Size  Location     Type
  3809 ;;  ptr             1    wreg     PTR const unsigned char 
  3810 ;;		 -> STR_2(2), STR_1(2), 
  3811 ;;  chr             2    0[BANK1 ] int 
  3812 ;; Auto vars:     Size  Location     Type
  3813 ;;  ptr             1    2[BANK1 ] PTR const unsigned char 
  3814 ;;		 -> STR_2(2), STR_1(2), 
  3815 ;; Return value:  Size  Location     Type
  3816 ;;                  1    wreg      PTR unsigned char 
  3817 ;; Registers used:
  3818 ;;		wreg, fsr0l, fsr0h, pclath
  3819 ;; Tracked objects:
  3820 ;;		On entry : 0/0
  3821 ;;		On exit  : 0/0
  3822 ;;		Unchanged: 0/0
  3823 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3824 ;;      Params:         0       0       2       0       0
  3825 ;;      Locals:         0       0       1       0       0
  3826 ;;      Temps:          0       0       0       0       0
  3827 ;;      Totals:         0       0       3       0       0
  3828 ;;Total ram usage:        3 bytes
  3829 ;; Hardware stack levels used:    1
  3830 ;; Hardware stack levels required when called:    5
  3831 ;; This function calls:
  3832 ;;		Nothing
  3833 ;; This function is called by:
  3834 ;;		_strcspn
  3835 ;;		_strspn
  3836 ;; This function uses a non-reentrant model
  3837 ;;
  3838                           
  3839                           
  3840                           ;psect for function _strchr
  3841  0A26                     _strchr:	
  3842                           
  3843                           ;incstack = 0
  3844 ;; hardware stack exceeded
  3845                           ; Regs used in _strchr: [wreg-fsr0h+pclath]
  3846                           ;strchr@ptr stored from wreg
  3847  0A26  1683               	bsf	3,5	;RP0=1, select bank1
  3848  0A27  1303               	bcf	3,6	;RP1=0, select bank1
  3849  0A28  00A2               	movwf	strchr@ptr^(0+128)
  3850  0A29                     l904:	
  3851  0A29  0822               	movf	strchr@ptr^(0+128),w
  3852  0A2A  0084               	movwf	4
  3853  0A2B  120A  118A  2723  120A  158A  	fcall	stringdir
  3854  0A30  0620               	xorwf	strchr@chr^(0+128),w
  3855  0A31  1D03               	skipz
  3856  0A32  2A35               	goto	l3099
  3857  0A33  0822               	movf	strchr@ptr^(0+128),w
  3858  0A34  0008               	return
  3859  0A35                     l3099:	
  3860  0A35  3001               	movlw	1
  3861  0A36  07A2               	addwf	strchr@ptr^(0+128),f
  3862  0A37  30FF               	movlw	-1
  3863  0A38  0722               	addwf	strchr@ptr^(0+128),w
  3864  0A39  0084               	movwf	4
  3865  0A3A  120A  118A  2723  120A  158A  	fcall	stringdir
  3866  0A3F  3A00               	xorlw	0
  3867  0A40  1D03               	skipz
  3868  0A41  2A29               	goto	l904
  3869  0A42  3000               	movlw	0
  3870  0A43  0008               	return
  3871  0A44                     __end_of_strchr:	
  3872                           
  3873                           	psect	text18
  3874  0E78                     __ptext18:	
  3875 ;; *************** function _atoi *****************
  3876 ;; Defined at:
  3877 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\atoi.c"
  3878 ;; Parameters:    Size  Location     Type
  3879 ;;  s               1    wreg     PTR const unsigned char 
  3880 ;;		 -> text(10), NULL(0), 
  3881 ;; Auto vars:     Size  Location     Type
  3882 ;;  s               1   13[BANK1 ] PTR const unsigned char 
  3883 ;;		 -> text(10), NULL(0), 
  3884 ;;  a               2   11[BANK1 ] int 
  3885 ;;  sign            1   10[BANK1 ] unsigned char 
  3886 ;; Return value:  Size  Location     Type
  3887 ;;                  2    6[BANK1 ] int 
  3888 ;; Registers used:
  3889 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3890 ;; Tracked objects:
  3891 ;;		On entry : 0/0
  3892 ;;		On exit  : 0/0
  3893 ;;		Unchanged: 0/0
  3894 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3895 ;;      Params:         0       0       2       0       0
  3896 ;;      Locals:         0       0       4       0       0
  3897 ;;      Temps:          0       0       2       0       0
  3898 ;;      Totals:         0       0       8       0       0
  3899 ;;Total ram usage:        8 bytes
  3900 ;; Hardware stack levels used:    1
  3901 ;; Hardware stack levels required when called:    6
  3902 ;; This function calls:
  3903 ;;		___wmul
  3904 ;;		_isdigit
  3905 ;; This function is called by:
  3906 ;;		_main
  3907 ;; This function uses a non-reentrant model
  3908 ;;
  3909                           
  3910                           
  3911                           ;psect for function _atoi
  3912  0E78                     _atoi:	
  3913                           
  3914                           ;incstack = 0
  3915                           ; Regs used in _atoi: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3916                           ;atoi@s stored from wreg
  3917  0E78  1683               	bsf	3,5	;RP0=1, select bank1
  3918  0E79  1303               	bcf	3,6	;RP1=0, select bank1
  3919  0E7A  00AD               	movwf	atoi@s^(0+128)
  3920  0E7B                     l3625:	
  3921  0E7B  082D               	movf	atoi@s^(0+128),w
  3922  0E7C  0084               	movwf	4
  3923  0E7D  3020               	movlw	32
  3924  0E7E  1383               	bcf	3,7	;select IRP bank0
  3925  0E7F  0600               	xorwf	0,w
  3926  0E80  1D03               	btfss	3,2
  3927  0E81  2E87               	goto	l3627
  3928  0E82                     l3623:	
  3929  0E82  3001               	movlw	1
  3930  0E83  00A8               	movwf	??_atoi^(0+128)
  3931  0E84  0828               	movf	??_atoi^(0+128),w
  3932  0E85  07AD               	addwf	atoi@s^(0+128),f
  3933  0E86  2E7B               	goto	l3625
  3934  0E87                     l3627:	
  3935  0E87  082D               	movf	atoi@s^(0+128),w
  3936  0E88  0084               	movwf	4
  3937  0E89  3009               	movlw	9
  3938  0E8A  0600               	xorwf	0,w
  3939  0E8B  1903               	btfsc	3,2
  3940  0E8C  2E82               	goto	l3623
  3941  0E8D  01AB               	clrf	atoi@a^(0+128)
  3942  0E8E  01AC               	clrf	(atoi@a+1)^(0+128)
  3943  0E8F  01AA               	clrf	atoi@sign^(0+128)
  3944  0E90  082D               	movf	atoi@s^(0+128),w
  3945  0E91  0084               	movwf	4
  3946  0E92  302D               	movlw	45
  3947  0E93  0600               	xorwf	0,w
  3948  0E94  1D03               	btfss	3,2
  3949  0E95  2E9B               	goto	l3635
  3950  0E96  3001               	movlw	1
  3951  0E97  00A8               	movwf	??_atoi^(0+128)
  3952  0E98  0828               	movf	??_atoi^(0+128),w
  3953  0E99  07AA               	addwf	atoi@sign^(0+128),f
  3954  0E9A  2EA1               	goto	l3641
  3955  0E9B                     l3635:	
  3956  0E9B  082D               	movf	atoi@s^(0+128),w
  3957  0E9C  0084               	movwf	4
  3958  0E9D  302B               	movlw	43
  3959  0E9E  0600               	xorwf	0,w
  3960  0E9F  1D03               	btfss	3,2
  3961  0EA0  2EA5               	goto	l3643
  3962  0EA1                     l3641:	
  3963  0EA1  3001               	movlw	1
  3964  0EA2  00A8               	movwf	??_atoi^(0+128)
  3965  0EA3  0828               	movf	??_atoi^(0+128),w
  3966  0EA4  07AD               	addwf	atoi@s^(0+128),f
  3967  0EA5                     l3643:	
  3968  0EA5  082D               	movf	atoi@s^(0+128),w
  3969  0EA6  0084               	movwf	4
  3970  0EA7  0800               	movf	0,w
  3971  0EA8  120A  158A  21E8  120A  158A  	fcall	_isdigit
  3972  0EAD  1C03               	btfss	3,0
  3973  0EAE  2ED3               	goto	l3645
  3974  0EAF  1683               	bsf	3,5	;RP0=1, select bank1
  3975  0EB0  1303               	bcf	3,6	;RP1=0, select bank1
  3976  0EB1  082C               	movf	(atoi@a+1)^(0+128),w
  3977  0EB2  00A1               	movwf	(___wmul@multiplier+1)^(0+128)
  3978  0EB3  082B               	movf	atoi@a^(0+128),w
  3979  0EB4  00A0               	movwf	___wmul@multiplier^(0+128)
  3980  0EB5  300A               	movlw	10
  3981  0EB6  00A2               	movwf	___wmul@multiplicand^(0+128)
  3982  0EB7  3000               	movlw	0
  3983  0EB8  00A3               	movwf	(___wmul@multiplicand^(0+128)+1)
  3984  0EB9  120A  158A  22A3  120A  158A  	fcall	___wmul
  3985  0EBE  1683               	bsf	3,5	;RP0=1, select bank1
  3986  0EBF  1303               	bcf	3,6	;RP1=0, select bank1
  3987  0EC0  082D               	movf	atoi@s^(0+128),w
  3988  0EC1  0084               	movwf	4
  3989  0EC2  1383               	bcf	3,7	;select IRP bank0
  3990  0EC3  0800               	movf	0,w
  3991  0EC4  0720               	addwf	?___wmul^(0+128),w
  3992  0EC5  00A8               	movwf	??_atoi^(0+128)
  3993  0EC6  0821               	movf	(?___wmul+1)^(0+128),w
  3994  0EC7  1803               	skipnc
  3995  0EC8  0A21               	incf	(?___wmul+1)^(0+128),w
  3996  0EC9  00A9               	movwf	(??_atoi^(0+128)+1)
  3997  0ECA  0828               	movf	??_atoi^(0+128),w
  3998  0ECB  3ED0               	addlw	208
  3999  0ECC  00AB               	movwf	atoi@a^(0+128)
  4000  0ECD  0829               	movf	(??_atoi+1)^(0+128),w
  4001  0ECE  1803               	skipnc
  4002  0ECF  3E01               	addlw	1
  4003  0ED0  3EFF               	addlw	255
  4004  0ED1  00AC               	movwf	(atoi@a+1)^(0+128)
  4005  0ED2  2EA1               	goto	l3641
  4006  0ED3                     l3645:	
  4007  0ED3  1683               	bsf	3,5	;RP0=1, select bank1
  4008  0ED4  1303               	bcf	3,6	;RP1=0, select bank1
  4009  0ED5  082A               	movf	atoi@sign^(0+128),w
  4010  0ED6  1903               	btfsc	3,2
  4011  0ED7  2EE4               	goto	l3651
  4012  0ED8  092B               	comf	atoi@a^(0+128),w
  4013  0ED9  00A8               	movwf	??_atoi^(0+128)
  4014  0EDA  092C               	comf	(atoi@a+1)^(0+128),w
  4015  0EDB  00A9               	movwf	(??_atoi^(0+128)+1)
  4016  0EDC  0AA8               	incf	??_atoi^(0+128),f
  4017  0EDD  1903               	skipnz
  4018  0EDE  0AA9               	incf	(??_atoi^(0+128)+1),f
  4019  0EDF  0828               	movf	??_atoi^(0+128),w
  4020  0EE0  00A6               	movwf	?_atoi^(0+128)
  4021  0EE1  0829               	movf	(??_atoi+1)^(0+128),w
  4022  0EE2  00A7               	movwf	(?_atoi+1)^(0+128)
  4023  0EE3  0008               	return
  4024  0EE4                     l3651:	
  4025  0EE4  082C               	movf	(atoi@a+1)^(0+128),w
  4026  0EE5  00A7               	movwf	(?_atoi+1)^(0+128)
  4027  0EE6  082B               	movf	atoi@a^(0+128),w
  4028  0EE7  00A6               	movwf	?_atoi^(0+128)
  4029  0EE8  0008               	return
  4030  0EE9                     __end_of_atoi:	
  4031                           
  4032                           	psect	text19
  4033  09E8                     __ptext19:	
  4034 ;; *************** function _isdigit *****************
  4035 ;; Defined at:
  4036 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  4037 ;; Parameters:    Size  Location     Type
  4038 ;;  c               1    wreg     unsigned char 
  4039 ;; Auto vars:     Size  Location     Type
  4040 ;;  c               1    1[BANK1 ] unsigned char 
  4041 ;; Return value:  Size  Location     Type
  4042 ;;		None               void
  4043 ;; Registers used:
  4044 ;;		wreg, status,2, status,0
  4045 ;; Tracked objects:
  4046 ;;		On entry : 0/0
  4047 ;;		On exit  : 0/0
  4048 ;;		Unchanged: 0/0
  4049 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4050 ;;      Params:         0       0       0       0       0
  4051 ;;      Locals:         0       0       2       0       0
  4052 ;;      Temps:          0       0       0       0       0
  4053 ;;      Totals:         0       0       2       0       0
  4054 ;;Total ram usage:        2 bytes
  4055 ;; Hardware stack levels used:    1
  4056 ;; Hardware stack levels required when called:    5
  4057 ;; This function calls:
  4058 ;;		Nothing
  4059 ;; This function is called by:
  4060 ;;		_sprintf
  4061 ;;		_atoi
  4062 ;; This function uses a non-reentrant model
  4063 ;;
  4064                           
  4065                           
  4066                           ;psect for function _isdigit
  4067  09E8                     _isdigit:	
  4068                           
  4069                           ;incstack = 0
  4070                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  4071                           ;isdigit@c stored from wreg
  4072  09E8  1683               	bsf	3,5	;RP0=1, select bank1
  4073  09E9  1303               	bcf	3,6	;RP1=0, select bank1
  4074  09EA  00A1               	movwf	isdigit@c^(0+128)
  4075  09EB  01A0               	clrf	_isdigit$506^(0+128)
  4076  09EC  303A               	movlw	58
  4077  09ED  0221               	subwf	isdigit@c^(0+128),w
  4078  09EE  1803               	skipnc
  4079  09EF  29F6               	goto	l3307
  4080  09F0  3030               	movlw	48
  4081  09F1  0221               	subwf	isdigit@c^(0+128),w
  4082  09F2  1C03               	skipc
  4083  09F3  29F6               	goto	l3307
  4084  09F4  01A0               	clrf	_isdigit$506^(0+128)
  4085  09F5  0AA0               	incf	_isdigit$506^(0+128),f
  4086  09F6                     l3307:	
  4087  09F6  0C20               	rrf	_isdigit$506^(0+128),w
  4088  09F7  0008               	return
  4089  09F8                     __end_of_isdigit:	
  4090                           
  4091                           	psect	text20
  4092  0AA3                     __ptext20:	
  4093 ;; *************** function ___wmul *****************
  4094 ;; Defined at:
  4095 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  4096 ;; Parameters:    Size  Location     Type
  4097 ;;  multiplier      2    0[BANK1 ] unsigned int 
  4098 ;;  multiplicand    2    2[BANK1 ] unsigned int 
  4099 ;; Auto vars:     Size  Location     Type
  4100 ;;  product         2    4[BANK1 ] unsigned int 
  4101 ;; Return value:  Size  Location     Type
  4102 ;;                  2    0[BANK1 ] unsigned int 
  4103 ;; Registers used:
  4104 ;;		wreg, status,2, status,0
  4105 ;; Tracked objects:
  4106 ;;		On entry : 0/0
  4107 ;;		On exit  : 0/0
  4108 ;;		Unchanged: 0/0
  4109 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4110 ;;      Params:         0       0       4       0       0
  4111 ;;      Locals:         0       0       2       0       0
  4112 ;;      Temps:          0       0       0       0       0
  4113 ;;      Totals:         0       0       6       0       0
  4114 ;;Total ram usage:        6 bytes
  4115 ;; Hardware stack levels used:    1
  4116 ;; Hardware stack levels required when called:    5
  4117 ;; This function calls:
  4118 ;;		Nothing
  4119 ;; This function is called by:
  4120 ;;		__calc_timer0_prescaler
  4121 ;;		_sprintf
  4122 ;;		_atoi
  4123 ;; This function uses a non-reentrant model
  4124 ;;
  4125                           
  4126                           
  4127                           ;psect for function ___wmul
  4128  0AA3                     ___wmul:	
  4129                           
  4130                           ;incstack = 0
  4131                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  4132  0AA3  1683               	bsf	3,5	;RP0=1, select bank1
  4133  0AA4  1303               	bcf	3,6	;RP1=0, select bank1
  4134  0AA5  01A4               	clrf	___wmul@product^(0+128)
  4135  0AA6  01A5               	clrf	(___wmul@product+1)^(0+128)
  4136  0AA7                     l3123:	
  4137  0AA7  1C20               	btfss	___wmul@multiplier^(0+128),0
  4138  0AA8  2AAF               	goto	l493
  4139  0AA9  0822               	movf	___wmul@multiplicand^(0+128),w
  4140  0AAA  07A4               	addwf	___wmul@product^(0+128),f
  4141  0AAB  1803               	skipnc
  4142  0AAC  0AA5               	incf	(___wmul@product+1)^(0+128),f
  4143  0AAD  0823               	movf	(___wmul@multiplicand+1)^(0+128),w
  4144  0AAE  07A5               	addwf	(___wmul@product+1)^(0+128),f
  4145  0AAF                     l493:	
  4146  0AAF  3001               	movlw	1
  4147  0AB0                     u3965:	
  4148  0AB0  1003               	clrc
  4149  0AB1  0DA2               	rlf	___wmul@multiplicand^(0+128),f
  4150  0AB2  0DA3               	rlf	(___wmul@multiplicand+1)^(0+128),f
  4151  0AB3  3EFF               	addlw	-1
  4152  0AB4  1D03               	skipz
  4153  0AB5  2AB0               	goto	u3965
  4154  0AB6  3001               	movlw	1
  4155  0AB7                     u3975:	
  4156  0AB7  1003               	clrc
  4157  0AB8  0CA1               	rrf	(___wmul@multiplier+1)^(0+128),f
  4158  0AB9  0CA0               	rrf	___wmul@multiplier^(0+128),f
  4159  0ABA  3EFF               	addlw	-1
  4160  0ABB  1D03               	skipz
  4161  0ABC  2AB7               	goto	u3975
  4162  0ABD  0820               	movf	___wmul@multiplier^(0+128),w
  4163  0ABE  0421               	iorwf	(___wmul@multiplier+1)^(0+128),w
  4164  0ABF  1D03               	btfss	3,2
  4165  0AC0  2AA7               	goto	l3123
  4166  0AC1  0825               	movf	(___wmul@product+1)^(0+128),w
  4167  0AC2  00A1               	movwf	(?___wmul+1)^(0+128)
  4168  0AC3  0824               	movf	___wmul@product^(0+128),w
  4169  0AC4  00A0               	movwf	?___wmul^(0+128)
  4170  0AC5  0008               	return
  4171  0AC6                     __end_of___wmul:	
  4172                           
  4173                           	psect	text21
  4174  09D9                     __ptext21:	
  4175 ;; *************** function _TMR1_Init *****************
  4176 ;; Defined at:
  4177 ;;		line 49 in file "main.c"
  4178 ;; Parameters:    Size  Location     Type
  4179 ;;		None
  4180 ;; Auto vars:     Size  Location     Type
  4181 ;;		None
  4182 ;; Return value:  Size  Location     Type
  4183 ;;                  1    wreg      void 
  4184 ;; Registers used:
  4185 ;;		wreg, status,2, status,0
  4186 ;; Tracked objects:
  4187 ;;		On entry : 0/0
  4188 ;;		On exit  : 0/0
  4189 ;;		Unchanged: 0/0
  4190 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4191 ;;      Params:         0       0       0       0       0
  4192 ;;      Locals:         0       0       0       0       0
  4193 ;;      Temps:          0       0       0       0       0
  4194 ;;      Totals:         0       0       0       0       0
  4195 ;;Total ram usage:        0 bytes
  4196 ;; Hardware stack levels used:    1
  4197 ;; Hardware stack levels required when called:    5
  4198 ;; This function calls:
  4199 ;;		Nothing
  4200 ;; This function is called by:
  4201 ;;		_main
  4202 ;; This function uses a non-reentrant model
  4203 ;;
  4204                           
  4205                           
  4206                           ;psect for function _TMR1_Init
  4207  09D9                     _TMR1_Init:	
  4208                           
  4209                           ;main.c: 50: TMR1IF = 0;
  4210                           
  4211                           ;incstack = 0
  4212                           ; Regs used in _TMR1_Init: [wreg+status,2+status,0]
  4213  09D9  1283               	bcf	3,5	;RP0=0, select bank0
  4214  09DA  1303               	bcf	3,6	;RP1=0, select bank0
  4215  09DB  100C               	bcf	12,0	;volatile
  4216                           
  4217                           ;main.c: 51: TMR1IE = 1;
  4218  09DC  1683               	bsf	3,5	;RP0=1, select bank1
  4219  09DD  1303               	bcf	3,6	;RP1=0, select bank1
  4220  09DE  140C               	bsf	12,0	;volatile
  4221                           
  4222                           ;main.c: 53: T1CONbits.T1CKPS = 1;
  4223  09DF  1283               	bcf	3,5	;RP0=0, select bank0
  4224  09E0  1303               	bcf	3,6	;RP1=0, select bank0
  4225  09E1  0810               	movf	16,w	;volatile
  4226  09E2  39CF               	andlw	-49
  4227  09E3  3810               	iorlw	16
  4228  09E4  0090               	movwf	16	;volatile
  4229                           
  4230                           ;main.c: 54: TMR1CS = 0;
  4231  09E5  1090               	bcf	16,1	;volatile
  4232                           
  4233                           ;main.c: 55: TMR1ON = 1;
  4234  09E6  1410               	bsf	16,0	;volatile
  4235  09E7  0008               	return
  4236  09E8                     __end_of_TMR1_Init:	
  4237                           
  4238                           	psect	text22
  4239  09F8                     __ptext22:	
  4240 ;; *************** function _SYST_Init *****************
  4241 ;; Defined at:
  4242 ;;		line 38 in file "main.c"
  4243 ;; Parameters:    Size  Location     Type
  4244 ;;		None
  4245 ;; Auto vars:     Size  Location     Type
  4246 ;;		None
  4247 ;; Return value:  Size  Location     Type
  4248 ;;                  1    wreg      void 
  4249 ;; Registers used:
  4250 ;;		wreg, status,2
  4251 ;; Tracked objects:
  4252 ;;		On entry : 0/0
  4253 ;;		On exit  : 0/0
  4254 ;;		Unchanged: 0/0
  4255 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4256 ;;      Params:         0       0       0       0       0
  4257 ;;      Locals:         0       0       0       0       0
  4258 ;;      Temps:          0       0       0       0       0
  4259 ;;      Totals:         0       0       0       0       0
  4260 ;;Total ram usage:        0 bytes
  4261 ;; Hardware stack levels used:    1
  4262 ;; Hardware stack levels required when called:    5
  4263 ;; This function calls:
  4264 ;;		Nothing
  4265 ;; This function is called by:
  4266 ;;		_main
  4267 ;; This function uses a non-reentrant model
  4268 ;;
  4269                           
  4270                           
  4271                           ;psect for function _SYST_Init
  4272  09F8                     _SYST_Init:	
  4273                           
  4274                           ;main.c: 39: ADCON1 = 0x06;
  4275                           
  4276                           ;incstack = 0
  4277                           ; Regs used in _SYST_Init: [wreg+status,2]
  4278  09F8  3006               	movlw	6
  4279  09F9  1683               	bsf	3,5	;RP0=1, select bank1
  4280  09FA  1303               	bcf	3,6	;RP1=0, select bank1
  4281  09FB  009F               	movwf	31	;volatile
  4282                           
  4283                           ;main.c: 40: TRISA = 0;
  4284  09FC  0185               	clrf	5	;volatile
  4285                           
  4286                           ;main.c: 41: TRISB = 0;
  4287  09FD  0186               	clrf	6	;volatile
  4288                           
  4289                           ;main.c: 43: PORTA = 0;
  4290  09FE  1283               	bcf	3,5	;RP0=0, select bank0
  4291  09FF  1303               	bcf	3,6	;RP1=0, select bank0
  4292  0A00  0185               	clrf	5	;volatile
  4293                           
  4294                           ;main.c: 44: PORTB = 0;
  4295  0A01  0186               	clrf	6	;volatile
  4296                           
  4297                           ;main.c: 46: GIE = PEIE = 1;
  4298  0A02  170B               	bsf	11,6	;volatile
  4299  0A03  1F0B               	btfss	11,6	;volatile
  4300  0A04  2A07               	goto	u4470
  4301  0A05  178B               	bsf	11,7	;volatile
  4302  0A06  0008               	return
  4303  0A07                     u4470:	
  4304  0A07  138B               	bcf	11,7	;volatile
  4305  0A08  0008               	return
  4306  0A09                     __end_of_SYST_Init:	
  4307                           
  4308                           	psect	text23
  4309  0B46                     __ptext23:	
  4310 ;; *************** function _LCD_write_string *****************
  4311 ;; Defined at:
  4312 ;;		line 115 in file "lcd.h"
  4313 ;; Parameters:    Size  Location     Type
  4314 ;;  str             2    3[BANK1 ] PTR unsigned char 
  4315 ;;		 -> STR_6(19), adcBuffer_1(20), adcBuffer_0(20), clockBuffer(15), 
  4316 ;; Auto vars:     Size  Location     Type
  4317 ;;  j               1    6[BANK1 ] unsigned char 
  4318 ;; Return value:  Size  Location     Type
  4319 ;;                  1    wreg      void 
  4320 ;; Registers used:
  4321 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4322 ;; Tracked objects:
  4323 ;;		On entry : 0/0
  4324 ;;		On exit  : 0/0
  4325 ;;		Unchanged: 0/0
  4326 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4327 ;;      Params:         0       0       2       0       0
  4328 ;;      Locals:         0       0       1       0       0
  4329 ;;      Temps:          0       0       1       0       0
  4330 ;;      Totals:         0       0       4       0       0
  4331 ;;Total ram usage:        4 bytes
  4332 ;; Hardware stack levels used:    1
  4333 ;; Hardware stack levels required when called:    7
  4334 ;; This function calls:
  4335 ;;		_LCD_write_char
  4336 ;; This function is called by:
  4337 ;;		_main
  4338 ;; This function uses a non-reentrant model
  4339 ;;
  4340                           
  4341                           
  4342                           ;psect for function _LCD_write_string
  4343  0B46                     _LCD_write_string:	
  4344                           
  4345                           ;lcd.h: 116: unsigned char j;
  4346                           ;lcd.h: 117: for (j = 0; str[j] != '\0'; ++j) {
  4347                           
  4348                           ;incstack = 0
  4349 ;; using string table level
  4350                           ; Regs used in _LCD_write_string: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4351  0B46  1683               	bsf	3,5	;RP0=1, select bank1
  4352  0B47  1303               	bcf	3,6	;RP1=0, select bank1
  4353  0B48  01A6               	clrf	LCD_write_string@j^(0+128)
  4354  0B49                     l3427:	
  4355  0B49  0826               	movf	LCD_write_string@j^(0+128),w
  4356  0B4A  0723               	addwf	LCD_write_string@str^(0+128),w
  4357  0B4B  0084               	movwf	4
  4358  0B4C  0824               	movf	(LCD_write_string@str+1)^(0+128),w
  4359  0B4D  1803               	skipnc
  4360  0B4E  0A24               	incf	(LCD_write_string@str+1)^(0+128),w
  4361  0B4F  1283               	bcf	3,5	;RP0=0, select bank0
  4362  0B50  1303               	bcf	3,6	;RP1=0, select bank0
  4363  0B51  00FF               	movwf	127
  4364  0B52  120A  118A  2719  120A  158A  	fcall	stringtab
  4365  0B57  3A00               	xorlw	0
  4366  0B58  1903               	btfsc	3,2
  4367  0B59  0008               	return
  4368                           
  4369                           ;lcd.h: 118: LCD_write_char (str[j]);
  4370  0B5A  1683               	bsf	3,5	;RP0=1, select bank1
  4371  0B5B  1303               	bcf	3,6	;RP1=0, select bank1
  4372  0B5C  0826               	movf	LCD_write_string@j^(0+128),w
  4373  0B5D  0723               	addwf	LCD_write_string@str^(0+128),w
  4374  0B5E  0084               	movwf	4
  4375  0B5F  0824               	movf	(LCD_write_string@str+1)^(0+128),w
  4376  0B60  1803               	skipnc
  4377  0B61  0A24               	incf	(LCD_write_string@str+1)^(0+128),w
  4378  0B62  1283               	bcf	3,5	;RP0=0, select bank0
  4379  0B63  1303               	bcf	3,6	;RP1=0, select bank0
  4380  0B64  00FF               	movwf	127
  4381  0B65  120A  118A  2719  120A  158A  	fcall	stringtab
  4382  0B6A  120A  158A  243E  120A  158A  	fcall	_LCD_write_char
  4383  0B6F  3001               	movlw	1
  4384  0B70  1683               	bsf	3,5	;RP0=1, select bank1
  4385  0B71  1303               	bcf	3,6	;RP1=0, select bank1
  4386  0B72  00A5               	movwf	??_LCD_write_string^(0+128)
  4387  0B73  0825               	movf	??_LCD_write_string^(0+128),w
  4388  0B74  07A6               	addwf	LCD_write_string@j^(0+128),f
  4389  0B75  2B49               	goto	l3427
  4390  0B76                     __end_of_LCD_write_string:	
  4391                           
  4392                           	psect	text24
  4393  0C3E                     __ptext24:	
  4394 ;; *************** function _LCD_write_char *****************
  4395 ;; Defined at:
  4396 ;;		line 100 in file "lcd.h"
  4397 ;; Parameters:    Size  Location     Type
  4398 ;;  c               1    wreg     unsigned char 
  4399 ;; Auto vars:     Size  Location     Type
  4400 ;;  c               1    2[BANK1 ] unsigned char 
  4401 ;; Return value:  Size  Location     Type
  4402 ;;                  1    wreg      void 
  4403 ;; Registers used:
  4404 ;;		wreg, status,2, status,0, pclath, cstack
  4405 ;; Tracked objects:
  4406 ;;		On entry : 0/0
  4407 ;;		On exit  : 0/0
  4408 ;;		Unchanged: 0/0
  4409 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4410 ;;      Params:         0       0       0       0       0
  4411 ;;      Locals:         0       0       1       0       0
  4412 ;;      Temps:          0       0       1       0       0
  4413 ;;      Totals:         0       0       2       0       0
  4414 ;;Total ram usage:        2 bytes
  4415 ;; Hardware stack levels used:    1
  4416 ;; Hardware stack levels required when called:    6
  4417 ;; This function calls:
  4418 ;;		_LCD_set_port
  4419 ;; This function is called by:
  4420 ;;		_LCD_write_string
  4421 ;; This function uses a non-reentrant model
  4422 ;;
  4423                           
  4424                           
  4425                           ;psect for function _LCD_write_char
  4426  0C3E                     _LCD_write_char:	
  4427                           
  4428                           ;incstack = 0
  4429                           ; Regs used in _LCD_write_char: [wreg+status,2+status,0+pclath+cstack]
  4430                           ;LCD_write_char@c stored from wreg
  4431  0C3E  1683               	bsf	3,5	;RP0=1, select bank1
  4432  0C3F  1303               	bcf	3,6	;RP1=0, select bank1
  4433  0C40  00A2               	movwf	LCD_write_char@c^(0+128)
  4434                           
  4435                           ;lcd.h: 101: RB2 = 1;
  4436  0C41  1283               	bcf	3,5	;RP0=0, select bank0
  4437  0C42  1303               	bcf	3,6	;RP1=0, select bank0
  4438  0C43  1506               	bsf	6,2	;volatile
  4439                           
  4440                           ;lcd.h: 103: LCD_set_port (c >> 4);
  4441  0C44  1683               	bsf	3,5	;RP0=1, select bank1
  4442  0C45  1303               	bcf	3,6	;RP1=0, select bank1
  4443  0C46  0822               	movf	LCD_write_char@c^(0+128),w
  4444  0C47  00A1               	movwf	??_LCD_write_char^(0+128)
  4445  0C48  3004               	movlw	4
  4446  0C49                     u4135:	
  4447  0C49  1003               	clrc
  4448  0C4A  0CA1               	rrf	??_LCD_write_char^(0+128),f
  4449  0C4B  3EFF               	addlw	-1
  4450  0C4C  1D03               	skipz
  4451  0C4D  2C49               	goto	u4135
  4452  0C4E  0821               	movf	??_LCD_write_char^(0+128),w
  4453  0C4F  120A  158A  2318  120A  158A  	fcall	_LCD_set_port
  4454                           
  4455                           ;lcd.h: 104: RB3 = 1;
  4456  0C54  1283               	bcf	3,5	;RP0=0, select bank0
  4457  0C55  1303               	bcf	3,6	;RP1=0, select bank0
  4458  0C56  1586               	bsf	6,3	;volatile
  4459                           
  4460                           ;lcd.h: 105: _delay((unsigned long)((50)*(12000000/4000000.0)));
  4461  0C57  3031               	movlw	49
  4462  0C58  1683               	bsf	3,5	;RP0=1, select bank1
  4463  0C59  1303               	bcf	3,6	;RP1=0, select bank1
  4464  0C5A  00A1               	movwf	??_LCD_write_char^(0+128)
  4465  0C5B                     u4927:	
  4466  0C5B  0BA1               	decfsz	??_LCD_write_char^(0+128),f
  4467  0C5C  2C5B               	goto	u4927
  4468                           
  4469                           ;lcd.h: 106: RB3 = 0;
  4470  0C5D  1283               	bcf	3,5	;RP0=0, select bank0
  4471  0C5E  1303               	bcf	3,6	;RP1=0, select bank0
  4472  0C5F  1186               	bcf	6,3	;volatile
  4473                           
  4474                           ;lcd.h: 108: LCD_set_port (c & 0x0F);
  4475  0C60  1683               	bsf	3,5	;RP0=1, select bank1
  4476  0C61  1303               	bcf	3,6	;RP1=0, select bank1
  4477  0C62  0822               	movf	LCD_write_char@c^(0+128),w
  4478  0C63  390F               	andlw	15
  4479  0C64  120A  158A  2318  120A  158A  	fcall	_LCD_set_port
  4480                           
  4481                           ;lcd.h: 109: RB3 = 1;
  4482  0C69  1283               	bcf	3,5	;RP0=0, select bank0
  4483  0C6A  1303               	bcf	3,6	;RP1=0, select bank0
  4484  0C6B  1586               	bsf	6,3	;volatile
  4485                           
  4486                           ;lcd.h: 110: _delay((unsigned long)((50)*(12000000/4000000.0)));
  4487  0C6C  3031               	movlw	49
  4488  0C6D  1683               	bsf	3,5	;RP0=1, select bank1
  4489  0C6E  1303               	bcf	3,6	;RP1=0, select bank1
  4490  0C6F  00A1               	movwf	??_LCD_write_char^(0+128)
  4491  0C70                     u4937:	
  4492  0C70  0BA1               	decfsz	??_LCD_write_char^(0+128),f
  4493  0C71  2C70               	goto	u4937
  4494                           
  4495                           ;lcd.h: 111: RB3 = 0;
  4496  0C72  1283               	bcf	3,5	;RP0=0, select bank0
  4497  0C73  1303               	bcf	3,6	;RP1=0, select bank0
  4498  0C74  1186               	bcf	6,3	;volatile
  4499  0C75  0008               	return
  4500  0C76                     __end_of_LCD_write_char:	
  4501                           
  4502                           	psect	text25
  4503  0D2F                     __ptext25:	
  4504 ;; *************** function _LCD_set_cursor *****************
  4505 ;; Defined at:
  4506 ;;		line 40 in file "lcd.h"
  4507 ;; Parameters:    Size  Location     Type
  4508 ;;  row             1    wreg     unsigned char 
  4509 ;;  column          1    4[BANK1 ] unsigned char 
  4510 ;; Auto vars:     Size  Location     Type
  4511 ;;  row             1    7[BANK1 ] unsigned char 
  4512 ;;  ddram_addres    1    6[BANK1 ] unsigned char 
  4513 ;; Return value:  Size  Location     Type
  4514 ;;                  1    wreg      void 
  4515 ;; Registers used:
  4516 ;;		wreg, status,2, status,0, pclath, cstack
  4517 ;; Tracked objects:
  4518 ;;		On entry : 0/0
  4519 ;;		On exit  : 0/0
  4520 ;;		Unchanged: 0/0
  4521 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4522 ;;      Params:         0       0       1       0       0
  4523 ;;      Locals:         0       0       2       0       0
  4524 ;;      Temps:          0       0       1       0       0
  4525 ;;      Totals:         0       0       4       0       0
  4526 ;;Total ram usage:        4 bytes
  4527 ;; Hardware stack levels used:    1
  4528 ;; Hardware stack levels required when called:    7
  4529 ;; This function calls:
  4530 ;;		_LCD_command
  4531 ;; This function is called by:
  4532 ;;		_main
  4533 ;; This function uses a non-reentrant model
  4534 ;;
  4535                           
  4536                           
  4537                           ;psect for function _LCD_set_cursor
  4538  0D2F                     _LCD_set_cursor:	
  4539                           
  4540                           ;incstack = 0
  4541                           ; Regs used in _LCD_set_cursor: [wreg+status,2+status,0+pclath+cstack]
  4542                           ;LCD_set_cursor@row stored from wreg
  4543  0D2F  1683               	bsf	3,5	;RP0=1, select bank1
  4544  0D30  1303               	bcf	3,6	;RP1=0, select bank1
  4545  0D31  00A7               	movwf	LCD_set_cursor@row^(0+128)
  4546                           
  4547                           ;lcd.h: 42: if (row < 0 || row > 4 || column < 0 || column > 20) return;
  4548  0D32  3005               	movlw	5
  4549  0D33  0227               	subwf	LCD_set_cursor@row^(0+128),w
  4550  0D34  1803               	skipnc
  4551  0D35  0008               	return
  4552  0D36  3015               	movlw	21
  4553  0D37  0224               	subwf	LCD_set_cursor@column^(0+128),w
  4554  0D38  1803               	btfsc	3,0
  4555  0D39  0008               	return
  4556                           
  4557                           ;lcd.h: 44: unsigned char ddram_address = 0x80;
  4558  0D3A  3080               	movlw	128
  4559  0D3B  00A5               	movwf	??_LCD_set_cursor^(0+128)
  4560  0D3C  0825               	movf	??_LCD_set_cursor^(0+128),w
  4561  0D3D  00A6               	movwf	LCD_set_cursor@ddram_address^(0+128)
  4562                           
  4563                           ;lcd.h: 46: if (row == 1) ddram_address += 0x00 + (column - 1);
  4564  0D3E  0327               	decf	LCD_set_cursor@row^(0+128),w
  4565  0D3F  1D03               	btfss	3,2
  4566  0D40  2D44               	goto	l3369
  4567  0D41  0824               	movf	LCD_set_cursor@column^(0+128),w
  4568  0D42  3EFF               	addlw	255
  4569  0D43  2D58               	goto	L7
  4570  0D44                     l3369:	
  4571                           
  4572                           ;lcd.h: 47: else if (row == 2) ddram_address += 0x40 + (column - 1);
  4573  0D44  3002               	movlw	2
  4574  0D45  0627               	xorwf	LCD_set_cursor@row^(0+128),w
  4575  0D46  1D03               	btfss	3,2
  4576  0D47  2D4B               	goto	l3373
  4577  0D48  0824               	movf	LCD_set_cursor@column^(0+128),w
  4578  0D49  3E3F               	addlw	63
  4579  0D4A  2D58               	goto	L7
  4580  0D4B                     l3373:	
  4581                           
  4582                           ;lcd.h: 48: else if (row == 3) ddram_address += 0x14 + (column - 1);
  4583  0D4B  3003               	movlw	3
  4584  0D4C  0627               	xorwf	LCD_set_cursor@row^(0+128),w
  4585  0D4D  1D03               	btfss	3,2
  4586  0D4E  2D52               	goto	l3377
  4587  0D4F  0824               	movf	LCD_set_cursor@column^(0+128),w
  4588  0D50  3E13               	addlw	19
  4589  0D51  2D58               	goto	L7
  4590  0D52                     l3377:	
  4591                           
  4592                           ;lcd.h: 49: else if (row == 4) ddram_address += 0x54 + (column - 1);
  4593  0D52  3004               	movlw	4
  4594  0D53  0627               	xorwf	LCD_set_cursor@row^(0+128),w
  4595  0D54  1D03               	btfss	3,2
  4596  0D55  2D5B               	goto	l3381
  4597  0D56  0824               	movf	LCD_set_cursor@column^(0+128),w
  4598  0D57  3E53               	addlw	83
  4599  0D58                     L7:	
  4600  0D58  00A5               	movwf	??_LCD_set_cursor^(0+128)
  4601  0D59  0825               	movf	??_LCD_set_cursor^(0+128),w
  4602  0D5A  07A6               	addwf	LCD_set_cursor@ddram_address^(0+128),f
  4603  0D5B                     l3381:	
  4604                           
  4605                           ;lcd.h: 51: LCD_command ((unsigned char) ddram_address >> 4);
  4606  0D5B  0826               	movf	LCD_set_cursor@ddram_address^(0+128),w
  4607  0D5C  00A5               	movwf	??_LCD_set_cursor^(0+128)
  4608  0D5D  3004               	movlw	4
  4609  0D5E                     u4455:	
  4610  0D5E  1003               	clrc
  4611  0D5F  0CA5               	rrf	??_LCD_set_cursor^(0+128),f
  4612  0D60  3EFF               	addlw	-1
  4613  0D61  1D03               	skipz
  4614  0D62  2D5E               	goto	u4455
  4615  0D63  0825               	movf	??_LCD_set_cursor^(0+128),w
  4616  0D64  120A  158A  2244  120A  158A  	fcall	_LCD_command
  4617                           
  4618                           ;lcd.h: 52: LCD_command ((unsigned char) ddram_address & 0x0F);
  4619  0D69  1683               	bsf	3,5	;RP0=1, select bank1
  4620  0D6A  1303               	bcf	3,6	;RP1=0, select bank1
  4621  0D6B  0826               	movf	LCD_set_cursor@ddram_address^(0+128),w
  4622  0D6C  390F               	andlw	15
  4623  0D6D  120A  158A  2244   	fcall	_LCD_command
  4624  0D70  0008               	return
  4625  0D71                     __end_of_LCD_set_cursor:	
  4626                           
  4627                           	psect	text26
  4628  050B                     __ptext26:	
  4629 ;; *************** function _LCD_Init *****************
  4630 ;; Defined at:
  4631 ;;		line 56 in file "lcd.h"
  4632 ;; Parameters:    Size  Location     Type
  4633 ;;		None
  4634 ;; Auto vars:     Size  Location     Type
  4635 ;;		None
  4636 ;; Return value:  Size  Location     Type
  4637 ;;                  1    wreg      void 
  4638 ;; Registers used:
  4639 ;;		wreg, status,2, status,0, pclath, cstack
  4640 ;; Tracked objects:
  4641 ;;		On entry : 0/0
  4642 ;;		On exit  : 0/0
  4643 ;;		Unchanged: 0/0
  4644 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4645 ;;      Params:         0       0       0       0       0
  4646 ;;      Locals:         0       0       0       0       0
  4647 ;;      Temps:          0       0       2       0       0
  4648 ;;      Totals:         0       0       2       0       0
  4649 ;;Total ram usage:        2 bytes
  4650 ;; Hardware stack levels used:    1
  4651 ;; Hardware stack levels required when called:    7
  4652 ;; This function calls:
  4653 ;;		_LCD_command
  4654 ;; This function is called by:
  4655 ;;		_main
  4656 ;; This function uses a non-reentrant model
  4657 ;;
  4658                           
  4659                           
  4660                           ;psect for function _LCD_Init
  4661  050B                     _LCD_Init:	
  4662                           
  4663                           ;lcd.h: 58: _delay((unsigned long)((20)*(12000000/4000.0)));
  4664                           
  4665                           ;incstack = 0
  4666                           ; Regs used in _LCD_Init: [wreg+status,2+status,0+pclath+cstack]
  4667  050B  304E               	movlw	78
  4668  050C  1683               	bsf	3,5	;RP0=1, select bank1
  4669  050D  1303               	bcf	3,6	;RP1=0, select bank1
  4670  050E  00A5               	movwf	(??_LCD_Init^(0+128)+1)
  4671  050F  30EA               	movlw	234
  4672  0510  00A4               	movwf	??_LCD_Init^(0+128)
  4673  0511                     u4947:	
  4674  0511  0BA4               	decfsz	??_LCD_Init^(0+128),f
  4675  0512  2D11               	goto	u4947
  4676  0513  0BA5               	decfsz	(??_LCD_Init^(0+128)+1),f
  4677  0514  2D11               	goto	u4947
  4678  0515  0000               	nop
  4679                           
  4680                           ;lcd.h: 59: LCD_command ((unsigned char) 0x3);
  4681  0516  3003               	movlw	3
  4682  0517  120A  158A  2244  120A  118A  	fcall	_LCD_command
  4683                           
  4684                           ;lcd.h: 60: _delay((unsigned long)((20)*(12000000/4000.0)));
  4685  051C  304E               	movlw	78
  4686  051D  1683               	bsf	3,5	;RP0=1, select bank1
  4687  051E  1303               	bcf	3,6	;RP1=0, select bank1
  4688  051F  00A5               	movwf	(??_LCD_Init^(0+128)+1)
  4689  0520  30EA               	movlw	234
  4690  0521  00A4               	movwf	??_LCD_Init^(0+128)
  4691  0522                     u4957:	
  4692  0522  0BA4               	decfsz	??_LCD_Init^(0+128),f
  4693  0523  2D22               	goto	u4957
  4694  0524  0BA5               	decfsz	(??_LCD_Init^(0+128)+1),f
  4695  0525  2D22               	goto	u4957
  4696  0526  0000               	nop
  4697                           
  4698                           ;lcd.h: 61: LCD_command ((unsigned char) 0x3);
  4699  0527  3003               	movlw	3
  4700  0528  120A  158A  2244  120A  118A  	fcall	_LCD_command
  4701                           
  4702                           ;lcd.h: 62: _delay((unsigned long)((20)*(12000000/4000.0)));
  4703  052D  304E               	movlw	78
  4704  052E  1683               	bsf	3,5	;RP0=1, select bank1
  4705  052F  1303               	bcf	3,6	;RP1=0, select bank1
  4706  0530  00A5               	movwf	(??_LCD_Init^(0+128)+1)
  4707  0531  30EA               	movlw	234
  4708  0532  00A4               	movwf	??_LCD_Init^(0+128)
  4709  0533                     u4967:	
  4710  0533  0BA4               	decfsz	??_LCD_Init^(0+128),f
  4711  0534  2D33               	goto	u4967
  4712  0535  0BA5               	decfsz	(??_LCD_Init^(0+128)+1),f
  4713  0536  2D33               	goto	u4967
  4714  0537  0000               	nop
  4715                           
  4716                           ;lcd.h: 63: LCD_command ((unsigned char) 0x3);
  4717  0538  3003               	movlw	3
  4718  0539  120A  158A  2244  120A  118A  	fcall	_LCD_command
  4719                           
  4720                           ;lcd.h: 65: _delay((unsigned long)((20)*(12000000/4000.0)));
  4721  053E  304E               	movlw	78
  4722  053F  1683               	bsf	3,5	;RP0=1, select bank1
  4723  0540  1303               	bcf	3,6	;RP1=0, select bank1
  4724  0541  00A5               	movwf	(??_LCD_Init^(0+128)+1)
  4725  0542  30EA               	movlw	234
  4726  0543  00A4               	movwf	??_LCD_Init^(0+128)
  4727  0544                     u4977:	
  4728  0544  0BA4               	decfsz	??_LCD_Init^(0+128),f
  4729  0545  2D44               	goto	u4977
  4730  0546  0BA5               	decfsz	(??_LCD_Init^(0+128)+1),f
  4731  0547  2D44               	goto	u4977
  4732  0548  0000               	nop
  4733                           
  4734                           ;lcd.h: 66: LCD_command ((unsigned char) 0x2);
  4735  0549  3002               	movlw	2
  4736  054A  120A  158A  2244  120A  118A  	fcall	_LCD_command
  4737                           
  4738                           ;lcd.h: 70: _delay((unsigned long)((20)*(12000000/4000.0)));
  4739  054F  304E               	movlw	78
  4740  0550  1683               	bsf	3,5	;RP0=1, select bank1
  4741  0551  1303               	bcf	3,6	;RP1=0, select bank1
  4742  0552  00A5               	movwf	(??_LCD_Init^(0+128)+1)
  4743  0553  30EA               	movlw	234
  4744  0554  00A4               	movwf	??_LCD_Init^(0+128)
  4745  0555                     u4987:	
  4746  0555  0BA4               	decfsz	??_LCD_Init^(0+128),f
  4747  0556  2D55               	goto	u4987
  4748  0557  0BA5               	decfsz	(??_LCD_Init^(0+128)+1),f
  4749  0558  2D55               	goto	u4987
  4750  0559  0000               	nop
  4751                           
  4752                           ;lcd.h: 71: LCD_command ((unsigned char) 0x2);
  4753  055A  3002               	movlw	2
  4754  055B  120A  158A  2244  120A  118A  	fcall	_LCD_command
  4755                           
  4756                           ;lcd.h: 72: LCD_command ((unsigned char) 0x8);
  4757  0560  3008               	movlw	8
  4758  0561  120A  158A  2244  120A  118A  	fcall	_LCD_command
  4759                           
  4760                           ;lcd.h: 74: _delay((unsigned long)((20)*(12000000/4000.0)));
  4761  0566  304E               	movlw	78
  4762  0567  1683               	bsf	3,5	;RP0=1, select bank1
  4763  0568  1303               	bcf	3,6	;RP1=0, select bank1
  4764  0569  00A5               	movwf	(??_LCD_Init^(0+128)+1)
  4765  056A  30EA               	movlw	234
  4766  056B  00A4               	movwf	??_LCD_Init^(0+128)
  4767  056C                     u4997:	
  4768  056C  0BA4               	decfsz	??_LCD_Init^(0+128),f
  4769  056D  2D6C               	goto	u4997
  4770  056E  0BA5               	decfsz	(??_LCD_Init^(0+128)+1),f
  4771  056F  2D6C               	goto	u4997
  4772  0570  0000               	nop
  4773                           
  4774                           ;lcd.h: 75: LCD_command((unsigned char) 0x0);
  4775  0571  3000               	movlw	0
  4776  0572  120A  158A  2244  120A  118A  	fcall	_LCD_command
  4777                           
  4778                           ;lcd.h: 76: LCD_command((unsigned char) 0xC);
  4779  0577  300C               	movlw	12
  4780  0578  120A  158A  2244  120A  118A  	fcall	_LCD_command
  4781                           
  4782                           ;lcd.h: 79: _delay((unsigned long)((20)*(12000000/4000.0)));
  4783  057D  304E               	movlw	78
  4784  057E  1683               	bsf	3,5	;RP0=1, select bank1
  4785  057F  1303               	bcf	3,6	;RP1=0, select bank1
  4786  0580  00A5               	movwf	(??_LCD_Init^(0+128)+1)
  4787  0581  30EA               	movlw	234
  4788  0582  00A4               	movwf	??_LCD_Init^(0+128)
  4789  0583                     u5007:	
  4790  0583  0BA4               	decfsz	??_LCD_Init^(0+128),f
  4791  0584  2D83               	goto	u5007
  4792  0585  0BA5               	decfsz	(??_LCD_Init^(0+128)+1),f
  4793  0586  2D83               	goto	u5007
  4794  0587  0000               	nop
  4795                           
  4796                           ;lcd.h: 80: LCD_command((unsigned char) 0x0);
  4797  0588  3000               	movlw	0
  4798  0589  120A  158A  2244  120A  118A  	fcall	_LCD_command
  4799                           
  4800                           ;lcd.h: 81: LCD_command((unsigned char) 0x8);
  4801  058E  3008               	movlw	8
  4802  058F  120A  158A  2244  120A  118A  	fcall	_LCD_command
  4803                           
  4804                           ;lcd.h: 84: _delay((unsigned long)((20)*(12000000/4000.0)));
  4805  0594  304E               	movlw	78
  4806  0595  1683               	bsf	3,5	;RP0=1, select bank1
  4807  0596  1303               	bcf	3,6	;RP1=0, select bank1
  4808  0597  00A5               	movwf	(??_LCD_Init^(0+128)+1)
  4809  0598  30EA               	movlw	234
  4810  0599  00A4               	movwf	??_LCD_Init^(0+128)
  4811  059A                     u5017:	
  4812  059A  0BA4               	decfsz	??_LCD_Init^(0+128),f
  4813  059B  2D9A               	goto	u5017
  4814  059C  0BA5               	decfsz	(??_LCD_Init^(0+128)+1),f
  4815  059D  2D9A               	goto	u5017
  4816  059E  0000               	nop
  4817                           
  4818                           ;lcd.h: 85: LCD_command((unsigned char) 0x0);
  4819  059F  3000               	movlw	0
  4820  05A0  120A  158A  2244  120A  118A  	fcall	_LCD_command
  4821                           
  4822                           ;lcd.h: 86: LCD_command((unsigned char) 0x1);
  4823  05A5  3001               	movlw	1
  4824  05A6  120A  158A  2244  120A  118A  	fcall	_LCD_command
  4825                           
  4826                           ;lcd.h: 89: _delay((unsigned long)((20)*(12000000/4000.0)));
  4827  05AB  304E               	movlw	78
  4828  05AC  1683               	bsf	3,5	;RP0=1, select bank1
  4829  05AD  1303               	bcf	3,6	;RP1=0, select bank1
  4830  05AE  00A5               	movwf	(??_LCD_Init^(0+128)+1)
  4831  05AF  30EA               	movlw	234
  4832  05B0  00A4               	movwf	??_LCD_Init^(0+128)
  4833  05B1                     u5027:	
  4834  05B1  0BA4               	decfsz	??_LCD_Init^(0+128),f
  4835  05B2  2DB1               	goto	u5027
  4836  05B3  0BA5               	decfsz	(??_LCD_Init^(0+128)+1),f
  4837  05B4  2DB1               	goto	u5027
  4838  05B5  0000               	nop
  4839                           
  4840                           ;lcd.h: 90: LCD_command((unsigned char) 0x0);
  4841  05B6  3000               	movlw	0
  4842  05B7  120A  158A  2244  120A  118A  	fcall	_LCD_command
  4843                           
  4844                           ;lcd.h: 91: LCD_command((unsigned char) 0x6);
  4845  05BC  3006               	movlw	6
  4846  05BD  120A  158A  2244  120A  118A  	fcall	_LCD_command
  4847                           
  4848                           ;lcd.h: 94: _delay((unsigned long)((20)*(12000000/4000.0)));
  4849  05C2  304E               	movlw	78
  4850  05C3  1683               	bsf	3,5	;RP0=1, select bank1
  4851  05C4  1303               	bcf	3,6	;RP1=0, select bank1
  4852  05C5  00A5               	movwf	(??_LCD_Init^(0+128)+1)
  4853  05C6  30EA               	movlw	234
  4854  05C7  00A4               	movwf	??_LCD_Init^(0+128)
  4855  05C8                     u5037:	
  4856  05C8  0BA4               	decfsz	??_LCD_Init^(0+128),f
  4857  05C9  2DC8               	goto	u5037
  4858  05CA  0BA5               	decfsz	(??_LCD_Init^(0+128)+1),f
  4859  05CB  2DC8               	goto	u5037
  4860  05CC  0000               	nop
  4861                           
  4862                           ;lcd.h: 95: LCD_command((unsigned char) 0x0);
  4863  05CD  3000               	movlw	0
  4864  05CE  120A  158A  2244  120A  118A  	fcall	_LCD_command
  4865                           
  4866                           ;lcd.h: 96: LCD_command((unsigned char) 0xC);
  4867  05D3  300C               	movlw	12
  4868  05D4  120A  158A  2244   	fcall	_LCD_command
  4869  05D7  0008               	return
  4870  05D8                     __end_of_LCD_Init:	
  4871                           
  4872                           	psect	text27
  4873  0A44                     __ptext27:	
  4874 ;; *************** function _LCD_command *****************
  4875 ;; Defined at:
  4876 ;;		line 24 in file "lcd.h"
  4877 ;; Parameters:    Size  Location     Type
  4878 ;;  command         1    wreg     unsigned char 
  4879 ;; Auto vars:     Size  Location     Type
  4880 ;;  command         1    3[BANK1 ] unsigned char 
  4881 ;; Return value:  Size  Location     Type
  4882 ;;                  1    wreg      void 
  4883 ;; Registers used:
  4884 ;;		wreg, status,2, status,0, pclath, cstack
  4885 ;; Tracked objects:
  4886 ;;		On entry : 0/0
  4887 ;;		On exit  : 0/0
  4888 ;;		Unchanged: 0/0
  4889 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4890 ;;      Params:         0       0       0       0       0
  4891 ;;      Locals:         0       0       1       0       0
  4892 ;;      Temps:          0       0       2       0       0
  4893 ;;      Totals:         0       0       3       0       0
  4894 ;;Total ram usage:        3 bytes
  4895 ;; Hardware stack levels used:    1
  4896 ;; Hardware stack levels required when called:    6
  4897 ;; This function calls:
  4898 ;;		_LCD_set_port
  4899 ;; This function is called by:
  4900 ;;		_LCD_set_cursor
  4901 ;;		_LCD_Init
  4902 ;;		_LCD_clear
  4903 ;;		_LCD_shift_right
  4904 ;;		_LCD_shift_left
  4905 ;; This function uses a non-reentrant model
  4906 ;;
  4907                           
  4908                           
  4909                           ;psect for function _LCD_command
  4910  0A44                     _LCD_command:	
  4911                           
  4912                           ;incstack = 0
  4913                           ; Regs used in _LCD_command: [wreg+status,2+status,0+pclath+cstack]
  4914                           ;LCD_command@command stored from wreg
  4915  0A44  1683               	bsf	3,5	;RP0=1, select bank1
  4916  0A45  1303               	bcf	3,6	;RP1=0, select bank1
  4917  0A46  00A3               	movwf	LCD_command@command^(0+128)
  4918                           
  4919                           ;lcd.h: 25: RB2 = 0;
  4920  0A47  1283               	bcf	3,5	;RP0=0, select bank0
  4921  0A48  1303               	bcf	3,6	;RP1=0, select bank0
  4922  0A49  1106               	bcf	6,2	;volatile
  4923                           
  4924                           ;lcd.h: 26: LCD_set_port (command);
  4925  0A4A  1683               	bsf	3,5	;RP0=1, select bank1
  4926  0A4B  1303               	bcf	3,6	;RP1=0, select bank1
  4927  0A4C  0823               	movf	LCD_command@command^(0+128),w
  4928  0A4D  120A  158A  2318  120A  158A  	fcall	_LCD_set_port
  4929                           
  4930                           ;lcd.h: 27: RB3 = 1;
  4931  0A52  1283               	bcf	3,5	;RP0=0, select bank0
  4932  0A53  1303               	bcf	3,6	;RP1=0, select bank0
  4933  0A54  1586               	bsf	6,3	;volatile
  4934                           
  4935                           ;lcd.h: 28: _delay((unsigned long)((5)*(12000000/4000.0)));
  4936  0A55  3014               	movlw	20
  4937  0A56  1683               	bsf	3,5	;RP0=1, select bank1
  4938  0A57  1303               	bcf	3,6	;RP1=0, select bank1
  4939  0A58  00A2               	movwf	(??_LCD_command^(0+128)+1)
  4940  0A59  3079               	movlw	121
  4941  0A5A  00A1               	movwf	??_LCD_command^(0+128)
  4942  0A5B                     u5047:	
  4943  0A5B  0BA1               	decfsz	??_LCD_command^(0+128),f
  4944  0A5C  2A5B               	goto	u5047
  4945  0A5D  0BA2               	decfsz	(??_LCD_command^(0+128)+1),f
  4946  0A5E  2A5B               	goto	u5047
  4947                           
  4948                           ;lcd.h: 29: RB3 = 0;
  4949  0A5F  1283               	bcf	3,5	;RP0=0, select bank0
  4950  0A60  1303               	bcf	3,6	;RP1=0, select bank0
  4951  0A61  1186               	bcf	6,3	;volatile
  4952  0A62  0008               	return
  4953  0A63                     __end_of_LCD_command:	
  4954                           
  4955                           	psect	text28
  4956  0B18                     __ptext28:	
  4957 ;; *************** function _LCD_set_port *****************
  4958 ;; Defined at:
  4959 ;;		line 8 in file "lcd.h"
  4960 ;; Parameters:    Size  Location     Type
  4961 ;;  value_4_bit     1    wreg     unsigned char 
  4962 ;; Auto vars:     Size  Location     Type
  4963 ;;  value_4_bit     1    0[BANK1 ] unsigned char 
  4964 ;; Return value:  Size  Location     Type
  4965 ;;                  1    wreg      void 
  4966 ;; Registers used:
  4967 ;;		wreg
  4968 ;; Tracked objects:
  4969 ;;		On entry : 0/0
  4970 ;;		On exit  : 0/0
  4971 ;;		Unchanged: 0/0
  4972 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4973 ;;      Params:         0       0       0       0       0
  4974 ;;      Locals:         0       0       1       0       0
  4975 ;;      Temps:          0       0       0       0       0
  4976 ;;      Totals:         0       0       1       0       0
  4977 ;;Total ram usage:        1 bytes
  4978 ;; Hardware stack levels used:    1
  4979 ;; Hardware stack levels required when called:    5
  4980 ;; This function calls:
  4981 ;;		Nothing
  4982 ;; This function is called by:
  4983 ;;		_LCD_command
  4984 ;;		_LCD_write_char
  4985 ;; This function uses a non-reentrant model
  4986 ;;
  4987                           
  4988                           
  4989                           ;psect for function _LCD_set_port
  4990  0B18                     _LCD_set_port:	
  4991                           
  4992                           ;incstack = 0
  4993                           ; Regs used in _LCD_set_port: [wreg]
  4994                           ;LCD_set_port@value_4_bit stored from wreg
  4995  0B18  1683               	bsf	3,5	;RP0=1, select bank1
  4996  0B19  1303               	bcf	3,6	;RP1=0, select bank1
  4997  0B1A  00A0               	movwf	LCD_set_port@value_4_bit^(0+128)
  4998                           
  4999                           ;lcd.h: 10: if (value_4_bit & 0x1) RB4 = 1;
  5000  0B1B  1C20               	btfss	LCD_set_port@value_4_bit^(0+128),0
  5001  0B1C  2B21               	goto	l59
  5002  0B1D  1283               	bcf	3,5	;RP0=0, select bank0
  5003  0B1E  1303               	bcf	3,6	;RP1=0, select bank0
  5004  0B1F  1606               	bsf	6,4	;volatile
  5005  0B20  2B24               	goto	l60
  5006  0B21                     l59:	
  5007                           
  5008                           ;lcd.h: 11: else RB4 = 0;
  5009  0B21  1283               	bcf	3,5	;RP0=0, select bank0
  5010  0B22  1303               	bcf	3,6	;RP1=0, select bank0
  5011  0B23  1206               	bcf	6,4	;volatile
  5012  0B24                     l60:	
  5013                           
  5014                           ;lcd.h: 13: if (value_4_bit & 0x2) RB5 = 1;
  5015  0B24  1683               	bsf	3,5	;RP0=1, select bank1
  5016  0B25  1303               	bcf	3,6	;RP1=0, select bank1
  5017  0B26  1CA0               	btfss	LCD_set_port@value_4_bit^(0+128),1
  5018  0B27  2B2C               	goto	l61
  5019  0B28  1283               	bcf	3,5	;RP0=0, select bank0
  5020  0B29  1303               	bcf	3,6	;RP1=0, select bank0
  5021  0B2A  1686               	bsf	6,5	;volatile
  5022  0B2B  2B2F               	goto	l62
  5023  0B2C                     l61:	
  5024                           
  5025                           ;lcd.h: 14: else RB5 = 0;
  5026  0B2C  1283               	bcf	3,5	;RP0=0, select bank0
  5027  0B2D  1303               	bcf	3,6	;RP1=0, select bank0
  5028  0B2E  1286               	bcf	6,5	;volatile
  5029  0B2F                     l62:	
  5030                           
  5031                           ;lcd.h: 16: if (value_4_bit & 0x4) RB6 = 1;
  5032  0B2F  1683               	bsf	3,5	;RP0=1, select bank1
  5033  0B30  1303               	bcf	3,6	;RP1=0, select bank1
  5034  0B31  1D20               	btfss	LCD_set_port@value_4_bit^(0+128),2
  5035  0B32  2B37               	goto	l63
  5036  0B33  1283               	bcf	3,5	;RP0=0, select bank0
  5037  0B34  1303               	bcf	3,6	;RP1=0, select bank0
  5038  0B35  1706               	bsf	6,6	;volatile
  5039  0B36  2B3A               	goto	l64
  5040  0B37                     l63:	
  5041                           
  5042                           ;lcd.h: 17: else RB6 = 0;
  5043  0B37  1283               	bcf	3,5	;RP0=0, select bank0
  5044  0B38  1303               	bcf	3,6	;RP1=0, select bank0
  5045  0B39  1306               	bcf	6,6	;volatile
  5046  0B3A                     l64:	
  5047                           
  5048                           ;lcd.h: 19: if (value_4_bit & 0x8) RB7 = 1;
  5049  0B3A  1683               	bsf	3,5	;RP0=1, select bank1
  5050  0B3B  1303               	bcf	3,6	;RP1=0, select bank1
  5051  0B3C  1DA0               	btfss	LCD_set_port@value_4_bit^(0+128),3
  5052  0B3D  2B42               	goto	l65
  5053  0B3E  1283               	bcf	3,5	;RP0=0, select bank0
  5054  0B3F  1303               	bcf	3,6	;RP1=0, select bank0
  5055  0B40  1786               	bsf	6,7	;volatile
  5056  0B41  0008               	return
  5057  0B42                     l65:	
  5058                           
  5059                           ;lcd.h: 20: else RB7 = 0;
  5060  0B42  1283               	bcf	3,5	;RP0=0, select bank0
  5061  0B43  1303               	bcf	3,6	;RP1=0, select bank0
  5062  0B44  1386               	bcf	6,7	;volatile
  5063  0B45  0008               	return
  5064  0B46                     __end_of_LCD_set_port:	
  5065                           
  5066                           	psect	text29
  5067  0E15                     __ptext29:	
  5068 ;; *************** function _global_isr *****************
  5069 ;; Defined at:
  5070 ;;		line 58 in file "main.c"
  5071 ;; Parameters:    Size  Location     Type
  5072 ;;		None
  5073 ;; Auto vars:     Size  Location     Type
  5074 ;;		None
  5075 ;; Return value:  Size  Location     Type
  5076 ;;                  1    wreg      void 
  5077 ;; Registers used:
  5078 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5079 ;; Tracked objects:
  5080 ;;		On entry : 0/0
  5081 ;;		On exit  : 0/0
  5082 ;;		Unchanged: 0/0
  5083 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5084 ;;      Params:         0       0       0       0       0
  5085 ;;      Locals:         0       0       0       0       0
  5086 ;;      Temps:          0      11       0       0       0
  5087 ;;      Totals:         0      11       0       0       0
  5088 ;;Total ram usage:       11 bytes
  5089 ;; Hardware stack levels used:    1
  5090 ;; Hardware stack levels required when called:    4
  5091 ;; This function calls:
  5092 ;;		_vw_isr_tmr0
  5093 ;;		i1_sprintf
  5094 ;; This function is called by:
  5095 ;;		Interrupt level 1
  5096 ;; This function uses a non-reentrant model
  5097 ;;
  5098                           
  5099                           
  5100                           ;psect for function _global_isr
  5101  0E15                     _global_isr:	
  5102                           
  5103                           ;main.c: 59: if(TMR0IF)
  5104  0E15  1D0B               	btfss	11,2	;volatile
  5105  0E16  2E1D               	goto	i1l132
  5106                           
  5107                           ;main.c: 60: vw_isr_tmr0();
  5108  0E17  120A  118A  25D8  120A  158A  	fcall	_vw_isr_tmr0
  5109  0E1C  2E6B               	goto	i1l139
  5110  0E1D                     i1l132:	
  5111                           
  5112                           ;main.c: 62: else if (TMR1IE && TMR1IF) {
  5113  0E1D  1683               	bsf	3,5	;RP0=1, select bank1
  5114  0E1E  1303               	bcf	3,6	;RP1=0, select bank1
  5115  0E1F  1C0C               	btfss	12,0	;volatile
  5116  0E20  2E6B               	goto	i1l139
  5117  0E21  1283               	bcf	3,5	;RP0=0, select bank0
  5118  0E22  1303               	bcf	3,6	;RP1=0, select bank0
  5119  0E23  1C0C               	btfss	12,0	;volatile
  5120  0E24  2E6B               	goto	i1l139
  5121                           
  5122                           ;main.c: 63: TMR1IF = 0;
  5123  0E25  100C               	bcf	12,0	;volatile
  5124                           
  5125                           ;main.c: 64: timerCounter++;
  5126  0E26  3001               	movlw	1
  5127  0E27  00B8               	movwf	??_global_isr
  5128  0E28  0838               	movf	??_global_isr,w
  5129  0E29  07C8               	addwf	_timerCounter,f	;volatile
  5130                           
  5131                           ;main.c: 66: if (timerCounter >= 23) {
  5132  0E2A  3017               	movlw	23
  5133  0E2B  0248               	subwf	_timerCounter,w	;volatile
  5134  0E2C  1C03               	skipc
  5135  0E2D  2E6B               	goto	i1l139
  5136                           
  5137                           ;main.c: 67: timerCounter = 0;
  5138  0E2E  01C8               	clrf	_timerCounter	;volatile
  5139                           
  5140                           ;main.c: 69: SS++;
  5141  0E2F  3001               	movlw	1
  5142  0E30  00B8               	movwf	??_global_isr
  5143  0E31  0838               	movf	??_global_isr,w
  5144  0E32  07C7               	addwf	_SS,f	;volatile
  5145                           
  5146                           ;main.c: 70: if (SS > 59) { SS = 0; MM++; }
  5147  0E33  303C               	movlw	60
  5148  0E34  0247               	subwf	_SS,w	;volatile
  5149  0E35  1C03               	skipc
  5150  0E36  2E3C               	goto	i1l2983
  5151  0E37  01C7               	clrf	_SS	;volatile
  5152  0E38  3001               	movlw	1
  5153  0E39  00B8               	movwf	??_global_isr
  5154  0E3A  0838               	movf	??_global_isr,w
  5155  0E3B  07C6               	addwf	_MM,f	;volatile
  5156  0E3C                     i1l2983:	
  5157                           
  5158                           ;main.c: 71: if (MM > 59) { MM = 0; HH++; }
  5159  0E3C  303C               	movlw	60
  5160  0E3D  0246               	subwf	_MM,w	;volatile
  5161  0E3E  1C03               	skipc
  5162  0E3F  2E45               	goto	i1l2989
  5163  0E40  01C6               	clrf	_MM	;volatile
  5164  0E41  3001               	movlw	1
  5165  0E42  00B8               	movwf	??_global_isr
  5166  0E43  0838               	movf	??_global_isr,w
  5167  0E44  07C5               	addwf	_HH,f	;volatile
  5168  0E45                     i1l2989:	
  5169                           
  5170                           ;main.c: 72: if (HH > 59) { HH = 0; }
  5171  0E45  303C               	movlw	60
  5172  0E46  0245               	subwf	_HH,w	;volatile
  5173  0E47  1803               	btfsc	3,0
  5174  0E48  01C5               	clrf	_HH	;volatile
  5175                           
  5176                           ;main.c: 74: sprintf((char *) clockBuffer, "%02u : %02u : %02u", HH, MM, SS);
  5177  0E49  30D4               	movlw	(low (_clockBuffer| 0))& (0+255)
  5178  0E4A  00A0               	movwf	i1sprintf@sp
  5179  0E4B  3000               	movlw	0
  5180  0E4C  00A1               	movwf	i1sprintf@sp+1
  5181  0E4D  3048               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  5182  0E4E  00B8               	movwf	??_global_isr
  5183  0E4F  0838               	movf	??_global_isr,w
  5184  0E50  00A2               	movwf	i1sprintf@f
  5185  0E51  0845               	movf	_HH,w	;volatile
  5186  0E52  00B9               	movwf	??_global_isr+1
  5187  0E53  01BA               	clrf	??_global_isr+2
  5188  0E54  0839               	movf	??_global_isr+1,w
  5189  0E55  00A3               	movwf	?i1_sprintf+3
  5190  0E56  083A               	movf	??_global_isr+2,w
  5191  0E57  00A4               	movwf	?i1_sprintf+4
  5192  0E58  0846               	movf	_MM,w	;volatile
  5193  0E59  00BB               	movwf	??_global_isr+3
  5194  0E5A  01BC               	clrf	??_global_isr+4
  5195  0E5B  083B               	movf	??_global_isr+3,w
  5196  0E5C  00A5               	movwf	?i1_sprintf+5
  5197  0E5D  083C               	movf	??_global_isr+4,w
  5198  0E5E  00A6               	movwf	?i1_sprintf+6
  5199  0E5F  0847               	movf	_SS,w	;volatile
  5200  0E60  00BD               	movwf	??_global_isr+5
  5201  0E61  01BE               	clrf	??_global_isr+6
  5202  0E62  083D               	movf	??_global_isr+5,w
  5203  0E63  00A7               	movwf	?i1_sprintf+7
  5204  0E64  083E               	movf	??_global_isr+6,w
  5205  0E65  00A8               	movwf	?i1_sprintf+8
  5206  0E66  120A  118A  223D  120A  158A  	fcall	i1_sprintf
  5207  0E6B                     i1l139:	
  5208  0E6B  1283               	bcf	3,5	;RP0=0, select bank0
  5209  0E6C  1303               	bcf	3,6	;RP1=0, select bank0
  5210  0E6D  0842               	movf	??_global_isr+10,w
  5211  0E6E  00FF               	movwf	127
  5212  0E6F  0841               	movf	??_global_isr+9,w
  5213  0E70  008A               	movwf	10
  5214  0E71  0840               	movf	??_global_isr+8,w
  5215  0E72  0084               	movwf	4
  5216  0E73  0E3F               	swapf	(??_global_isr+7)^0,w
  5217  0E74  0083               	movwf	3
  5218  0E75  0EFE               	swapf	126,f
  5219  0E76  0E7E               	swapf	126,w
  5220  0E77  0009               	retfie
  5221  0E78                     __end_of_global_isr:	
  5222                           
  5223                           	psect	intentry
  5224  0004                     __pintentry:	
  5225                           ;incstack = 0
  5226 ;; hardware stack exceeded
  5227                           ; Regs used in _global_isr: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5228                           
  5229  0004                     interrupt_function:	
  5230  007E                     saved_w	set	btemp
  5231  0004  00FE               	movwf	btemp
  5232  0005  0E03               	swapf	3,w
  5233  0006  1283               	bcf	3,5	;RP0=0, select bank0
  5234  0007  1303               	bcf	3,6	;RP1=0, select bank0
  5235  0008  00BF               	movwf	??_global_isr+7
  5236  0009  0804               	movf	4,w
  5237  000A  00C0               	movwf	??_global_isr+8
  5238  000B  080A               	movf	10,w
  5239  000C  00C1               	movwf	??_global_isr+9
  5240  000D  087F               	movf	btemp+1,w
  5241  000E  00C2               	movwf	??_global_isr+10
  5242  000F  120A  158A  2E15   	ljmp	_global_isr
  5243                           
  5244                           	psect	text30
  5245  023D                     __ptext30:	
  5246 ;; *************** function i1_sprintf *****************
  5247 ;; Defined at:
  5248 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  5249 ;; Parameters:    Size  Location     Type
  5250 ;;  sp              2    0[BANK0 ] PTR unsigned char 
  5251 ;;		 -> adcBuffer_1(20), adcBuffer_0(20), clockBuffer(15), 
  5252 ;;  f               1    2[BANK0 ] PTR const unsigned char 
  5253 ;;		 -> STR_5(15), STR_4(13), STR_3(19), 
  5254 ;; Auto vars:     Size  Location     Type
  5255 ;;  sprintf         4    0        struct .
  5256 ;;  sprintf         2   21[BANK0 ] int 
  5257 ;;  sprintf         2   19[BANK0 ] unsigned int 
  5258 ;;  sprintf         2   17[BANK0 ] PTR const unsigned char 
  5259 ;;		 -> STR_7(7), sprintf@c(1), text(10), NULL(0), 
  5260 ;;  sprintf         2   13[BANK0 ] unsigned int 
  5261 ;;  sprintf         1   23[BANK0 ] char 
  5262 ;;  sprintf         1   16[BANK0 ] PTR void [1]
  5263 ;;		 -> ?i1_sprintf(2), ?_sprintf(2), 
  5264 ;;  sprintf         1   15[BANK0 ] char 
  5265 ;;  sprintf         1   12[BANK0 ] unsigned char 
  5266 ;; Return value:  Size  Location     Type
  5267 ;;                  2    0[BANK0 ] int 
  5268 ;; Registers used:
  5269 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5270 ;; Tracked objects:
  5271 ;;		On entry : 0/0
  5272 ;;		On exit  : 0/0
  5273 ;;		Unchanged: 0/0
  5274 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5275 ;;      Params:         0       9       0       0       0
  5276 ;;      Locals:         0      12       0       0       0
  5277 ;;      Temps:          0       3       0       0       0
  5278 ;;      Totals:         0      24       0       0       0
  5279 ;;Total ram usage:       24 bytes
  5280 ;; Hardware stack levels used:    1
  5281 ;; Hardware stack levels required when called:    1
  5282 ;; This function calls:
  5283 ;;		i1___lwdiv
  5284 ;;		i1___lwmod
  5285 ;;		i1___wmul
  5286 ;;		i1_isdigit
  5287 ;; This function is called by:
  5288 ;;		_global_isr
  5289 ;; This function uses a non-reentrant model
  5290 ;;
  5291                           
  5292                           
  5293                           ;psect for function i1_sprintf
  5294  023D                     i1_sprintf:	
  5295                           
  5296                           ;doprnt.c: 494: va_list ap;
  5297                           ;doprnt.c: 499: signed char c;
  5298                           ;doprnt.c: 501: int width;
  5299                           ;doprnt.c: 506: signed char prec;
  5300                           ;doprnt.c: 508: unsigned char flag;
  5301                           ;doprnt.c: 523: union {
  5302                           ;doprnt.c: 524: unsigned long vd;
  5303                           ;doprnt.c: 525: double integ;
  5304                           ;doprnt.c: 526: } tmpval;
  5305                           ;doprnt.c: 528: unsigned int val;
  5306                           ;doprnt.c: 529: unsigned len;
  5307                           ;doprnt.c: 530: const char * cp;
  5308                           ;doprnt.c: 533: *ap = __va_start();
  5309                           
  5310                           ;incstack = 0
  5311                           ; Regs used in i1_sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5312  023D  3023               	movlw	(low ((?i1_sprintf| 0+3)))& (0+255)
  5313  023E  1283               	bcf	3,5	;RP0=0, select bank0
  5314  023F  1303               	bcf	3,6	;RP1=0, select bank0
  5315  0240  00A9               	movwf	??i1_sprintf
  5316  0241  0829               	movf	??i1_sprintf,w
  5317  0242  00B0               	movwf	i1sprintf@ap
  5318  0243                     i1l2949:	
  5319                           ;doprnt.c: 536: while(c = *f++) {
  5320                           
  5321  0243  3001               	movlw	1
  5322  0244  07A2               	addwf	i1sprintf@f,f
  5323  0245  30FF               	movlw	-1
  5324  0246  0722               	addwf	i1sprintf@f,w
  5325  0247  0084               	movwf	4
  5326  0248  120A  118A  2723  120A  118A  	fcall	stringdir
  5327  024D  00A9               	movwf	??i1_sprintf
  5328  024E  0829               	movf	??i1_sprintf,w
  5329  024F  00B7               	movwf	i1sprintf@c
  5330  0250  0837               	movf	i1sprintf@c,w
  5331  0251  1903               	btfsc	3,2
  5332  0252  2C30               	goto	i1l2951
  5333                           
  5334                           ;doprnt.c: 538: if(c != '%')
  5335  0253  3025               	movlw	37
  5336  0254  0637               	xorwf	i1sprintf@c,w
  5337  0255  1903               	btfsc	3,2
  5338  0256  2A63               	goto	i1l2835
  5339                           
  5340                           ;doprnt.c: 540: {
  5341                           ;doprnt.c: 541: ((*sp++ = (c)));
  5342  0257  0820               	movf	i1sprintf@sp,w
  5343  0258  0084               	movwf	4
  5344  0259  1383               	bcf	3,7
  5345  025A  1821               	btfsc	i1sprintf@sp+1,0
  5346  025B  1783               	bsf	3,7
  5347  025C  0837               	movf	i1sprintf@c,w
  5348  025D  0080               	movwf	0
  5349  025E  3001               	movlw	1
  5350  025F  07A0               	addwf	i1sprintf@sp,f
  5351  0260  1803               	skipnc
  5352  0261  0AA1               	incf	i1sprintf@sp+1,f
  5353                           
  5354                           ;doprnt.c: 542: continue;
  5355  0262  2A43               	goto	i1l2949
  5356  0263                     i1l2835:	
  5357                           
  5358                           ;doprnt.c: 543: }
  5359                           ;doprnt.c: 546: width = 0;
  5360  0263  01B5               	clrf	i1sprintf@width
  5361  0264  01B6               	clrf	i1sprintf@width+1
  5362                           
  5363                           ;doprnt.c: 548: flag = 0;
  5364  0265  01AC               	clrf	i1sprintf@flag
  5365                           
  5366                           ;doprnt.c: 551: switch(*f) {
  5367                           
  5368                           ;doprnt.c: 550: for(;;) {
  5369  0266  2A6C               	goto	i1l2841
  5370  0267                     i1l365:	
  5371                           ;doprnt.c: 579: case '0':
  5372                           
  5373                           
  5374                           ;doprnt.c: 580: flag |= 0x04;
  5375  0267  152C               	bsf	i1sprintf@flag,2
  5376                           
  5377                           ;doprnt.c: 581: f++;
  5378  0268  3001               	movlw	1
  5379  0269  00A9               	movwf	??i1_sprintf
  5380  026A  0829               	movf	??i1_sprintf,w
  5381  026B  07A2               	addwf	i1sprintf@f,f
  5382  026C                     i1l2841:	
  5383                           ;doprnt.c: 584: }
  5384                           
  5385                           ;doprnt.c: 582: continue;
  5386                           
  5387  026C  0822               	movf	i1sprintf@f,w
  5388  026D  0084               	movwf	4
  5389  026E  120A  118A  2723  120A  118A  	fcall	stringdir
  5390                           
  5391                           ; Switch size 1, requested type "space"
  5392                           ; Number of cases is 1, Range of values is 48 to 48
  5393                           ; switch strategies available:
  5394                           ; Name         Instructions Cycles
  5395                           ; simple_byte            4     3 (average)
  5396                           ; direct_byte           14    11 (fixed)
  5397                           ; jumptable            263     9 (fixed)
  5398                           ;	Chosen strategy is simple_byte
  5399  0273  3A30               	xorlw	48	; case 48
  5400  0274  1903               	skipnz
  5401  0275  2A67               	goto	i1l365
  5402  0276  2A77               	goto	i1l2843
  5403  0277                     i1l2843:	
  5404                           ;doprnt.c: 586: }
  5405                           
  5406                           ;doprnt.c: 585: break;
  5407                           
  5408                           
  5409                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  5410  0277  0822               	movf	i1sprintf@f,w
  5411  0278  0084               	movwf	4
  5412  0279  120A  118A  2723  120A  118A  	fcall	stringdir
  5413  027E  120A  158A  21CB  120A  118A  	fcall	i1_isdigit
  5414  0283  1C03               	btfss	3,0
  5415  0284  2B4D               	goto	i1l2897
  5416                           
  5417                           ;doprnt.c: 598: width = 0;
  5418  0285  1283               	bcf	3,5	;RP0=0, select bank0
  5419  0286  1303               	bcf	3,6	;RP1=0, select bank0
  5420  0287  01B5               	clrf	i1sprintf@width
  5421  0288  01B6               	clrf	i1sprintf@width+1
  5422  0289                     i1l2847:	
  5423                           ;doprnt.c: 599: do {
  5424                           
  5425                           
  5426                           ;doprnt.c: 600: width *= 10;
  5427  0289  300A               	movlw	10
  5428  028A  00F0               	movwf	i1___wmul@multiplier
  5429  028B  3000               	movlw	0
  5430  028C  00F1               	movwf	i1___wmul@multiplier+1
  5431  028D  1283               	bcf	3,5	;RP0=0, select bank0
  5432  028E  1303               	bcf	3,6	;RP1=0, select bank0
  5433  028F  0836               	movf	i1sprintf@width+1,w
  5434  0290  00F3               	movwf	i1___wmul@multiplicand+1
  5435  0291  0835               	movf	i1sprintf@width,w
  5436  0292  00F2               	movwf	i1___wmul@multiplicand
  5437  0293  120A  158A  2282  120A  118A  	fcall	i1___wmul
  5438  0298  0871               	movf	?i1___wmul+1,w
  5439  0299  1283               	bcf	3,5	;RP0=0, select bank0
  5440  029A  1303               	bcf	3,6	;RP1=0, select bank0
  5441  029B  00B6               	movwf	i1sprintf@width+1
  5442  029C  0870               	movf	?i1___wmul,w
  5443  029D  00B5               	movwf	i1sprintf@width
  5444                           
  5445                           ;doprnt.c: 601: width += *f++ - '0';
  5446  029E  0822               	movf	i1sprintf@f,w
  5447  029F  0084               	movwf	4
  5448  02A0  120A  118A  2723  120A  118A  	fcall	stringdir
  5449  02A5  3ED0               	addlw	208
  5450  02A6  00A9               	movwf	??i1_sprintf
  5451  02A7  30FF               	movlw	255
  5452  02A8  1803               	skipnc
  5453  02A9  3000               	movlw	0
  5454  02AA  00AA               	movwf	??i1_sprintf+1
  5455  02AB  0829               	movf	??i1_sprintf,w
  5456  02AC  07B5               	addwf	i1sprintf@width,f
  5457  02AD  1803               	skipnc
  5458  02AE  0AB6               	incf	i1sprintf@width+1,f
  5459  02AF  082A               	movf	??i1_sprintf+1,w
  5460  02B0  07B6               	addwf	i1sprintf@width+1,f
  5461  02B1  3001               	movlw	1
  5462  02B2  00A9               	movwf	??i1_sprintf
  5463  02B3  0829               	movf	??i1_sprintf,w
  5464  02B4  07A2               	addwf	i1sprintf@f,f
  5465                           
  5466                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  5467  02B5  0822               	movf	i1sprintf@f,w
  5468  02B6  0084               	movwf	4
  5469  02B7  120A  118A  2723  120A  118A  	fcall	stringdir
  5470  02BC  120A  158A  21CB  120A  118A  	fcall	i1_isdigit
  5471  02C1  1C03               	btfss	3,0
  5472  02C2  2B4D               	goto	i1l2897
  5473  02C3  2A89               	goto	i1l2847
  5474  02C4                     i1l2855:	
  5475                           ;doprnt.c: 728: case 's':
  5476                           
  5477                           ;doprnt.c: 638: goto alldone;
  5478                           
  5479                           ;doprnt.c: 637: case 0:
  5480                           
  5481                           ;doprnt.c: 608: }
  5482                           ;doprnt.c: 635: switch(c = *f++) {
  5483                           
  5484                           
  5485                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  5486  02C4  1283               	bcf	3,5	;RP0=0, select bank0
  5487  02C5  1303               	bcf	3,6	;RP1=0, select bank0
  5488  02C6  0830               	movf	i1sprintf@ap,w
  5489  02C7  0084               	movwf	4
  5490  02C8  1383               	bcf	3,7	;select IRP bank0
  5491  02C9  0800               	movf	0,w
  5492  02CA  00B1               	movwf	i1sprintf@cp
  5493  02CB  3000               	movlw	0
  5494  02CC  00B2               	movwf	i1sprintf@cp+1
  5495  02CD  3001               	movlw	1
  5496  02CE  00A9               	movwf	??i1_sprintf
  5497  02CF  0829               	movf	??i1_sprintf,w
  5498  02D0  07B0               	addwf	i1sprintf@ap,f
  5499                           
  5500                           ;doprnt.c: 740: if(!cp)
  5501  02D1  0831               	movf	i1sprintf@cp,w
  5502  02D2  0432               	iorwf	i1sprintf@cp+1,w
  5503  02D3  1D03               	btfss	3,2
  5504  02D4  2AD9               	goto	i1l2863
  5505                           
  5506                           ;doprnt.c: 741: cp = "(null)";
  5507  02D5  3077               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
  5508  02D6  00B1               	movwf	i1sprintf@cp
  5509  02D7  3080               	movlw	128
  5510  02D8  00B2               	movwf	i1sprintf@cp+1
  5511  02D9                     i1l2863:	
  5512                           
  5513                           ;doprnt.c: 745: len = 0;
  5514  02D9  01B3               	clrf	i1sprintf@len
  5515  02DA  01B4               	clrf	i1sprintf@len+1
  5516  02DB                     i1l2867:	
  5517                           ;doprnt.c: 746: while(cp[len])
  5518                           
  5519  02DB  0833               	movf	i1sprintf@len,w
  5520  02DC  0731               	addwf	i1sprintf@cp,w
  5521  02DD  0084               	movwf	4
  5522  02DE  0832               	movf	i1sprintf@cp+1,w
  5523  02DF  1803               	skipnc
  5524  02E0  0A32               	incf	i1sprintf@cp+1,w
  5525  02E1  00FF               	movwf	127
  5526  02E2  120A  118A  2719  120A  118A  	fcall	stringtab
  5527  02E7  3A00               	xorlw	0
  5528  02E8  1903               	btfsc	3,2
  5529  02E9  2AF1               	goto	i1l2869
  5530                           
  5531                           ;doprnt.c: 747: len++;
  5532  02EA  3001               	movlw	1
  5533  02EB  07B3               	addwf	i1sprintf@len,f
  5534  02EC  1803               	skipnc
  5535  02ED  0AB4               	incf	i1sprintf@len+1,f
  5536  02EE  3000               	movlw	0
  5537  02EF  07B4               	addwf	i1sprintf@len+1,f
  5538  02F0  2ADB               	goto	i1l2867
  5539  02F1                     i1l2869:	
  5540                           ;doprnt.c: 750: dostring:
  5541                           
  5542                           
  5543                           ;doprnt.c: 757: if(width > len)
  5544  02F1  0836               	movf	i1sprintf@width+1,w
  5545  02F2  0234               	subwf	i1sprintf@len+1,w
  5546  02F3  1D03               	skipz
  5547  02F4  2AF7               	goto	u357_25
  5548  02F5  0835               	movf	i1sprintf@width,w
  5549  02F6  0233               	subwf	i1sprintf@len,w
  5550  02F7                     u357_25:	
  5551  02F7  1803               	skipnc
  5552  02F8  2B00               	goto	i1l2873
  5553                           
  5554                           ;doprnt.c: 758: width -= len;
  5555  02F9  0833               	movf	i1sprintf@len,w
  5556  02FA  02B5               	subwf	i1sprintf@width,f
  5557  02FB  0834               	movf	i1sprintf@len+1,w
  5558  02FC  1C03               	skipc
  5559  02FD  03B6               	decf	i1sprintf@width+1,f
  5560  02FE  02B6               	subwf	i1sprintf@width+1,f
  5561  02FF  2B02               	goto	i1l2879
  5562  0300                     i1l2873:	
  5563                           
  5564                           ;doprnt.c: 759: else
  5565                           ;doprnt.c: 760: width = 0;
  5566  0300  01B5               	clrf	i1sprintf@width
  5567  0301  01B6               	clrf	i1sprintf@width+1
  5568  0302                     i1l2879:	
  5569                           ;doprnt.c: 764: while(width--)
  5570                           
  5571  0302  30FF               	movlw	255
  5572  0303  07B5               	addwf	i1sprintf@width,f
  5573  0304  1803               	skipnc
  5574  0305  0AB6               	incf	i1sprintf@width+1,f
  5575  0306  30FF               	movlw	255
  5576  0307  07B6               	addwf	i1sprintf@width+1,f
  5577  0308  0A35               	incf	i1sprintf@width,w
  5578  0309  1903               	btfsc	3,2
  5579  030A  0A36               	incf	i1sprintf@width+1,w
  5580  030B  1903               	btfsc	3,2
  5581  030C  2B32               	goto	i1l2887
  5582                           
  5583                           ;doprnt.c: 765: ((*sp++ = (' ')));
  5584  030D  0820               	movf	i1sprintf@sp,w
  5585  030E  0084               	movwf	4
  5586  030F  1383               	bcf	3,7
  5587  0310  1821               	btfsc	i1sprintf@sp+1,0
  5588  0311  1783               	bsf	3,7
  5589  0312  3020               	movlw	32
  5590  0313  0080               	movwf	0
  5591  0314  3001               	movlw	1
  5592  0315  07A0               	addwf	i1sprintf@sp,f
  5593  0316  1803               	skipnc
  5594  0317  0AA1               	incf	i1sprintf@sp+1,f
  5595  0318  2B02               	goto	i1l2879
  5596  0319                     i1l2881:	
  5597                           ;doprnt.c: 767: while(len--)
  5598                           
  5599                           
  5600                           ;doprnt.c: 768: ((*sp++ = (*cp++)));
  5601  0319  0832               	movf	i1sprintf@cp+1,w
  5602  031A  00FF               	movwf	127
  5603  031B  0831               	movf	i1sprintf@cp,w
  5604  031C  0084               	movwf	4
  5605  031D  120A  118A  2719  120A  118A  	fcall	stringtab
  5606  0322  00A9               	movwf	??i1_sprintf
  5607  0323  0820               	movf	i1sprintf@sp,w
  5608  0324  0084               	movwf	4
  5609  0325  1383               	bcf	3,7
  5610  0326  1821               	btfsc	i1sprintf@sp+1,0
  5611  0327  1783               	bsf	3,7
  5612  0328  0829               	movf	??i1_sprintf,w
  5613  0329  0080               	movwf	0
  5614  032A  3001               	movlw	1
  5615  032B  07B1               	addwf	i1sprintf@cp,f
  5616  032C  1803               	skipnc
  5617  032D  0AB2               	incf	i1sprintf@cp+1,f
  5618  032E  3001               	movlw	1
  5619  032F  07A0               	addwf	i1sprintf@sp,f
  5620  0330  1803               	skipnc
  5621  0331  0AA1               	incf	i1sprintf@sp+1,f
  5622  0332                     i1l2887:	
  5623  0332  3001               	movlw	1
  5624  0333  02B3               	subwf	i1sprintf@len,f
  5625  0334  3000               	movlw	0
  5626  0335  1C03               	skipc
  5627  0336  03B4               	decf	i1sprintf@len+1,f
  5628  0337  02B4               	subwf	i1sprintf@len+1,f
  5629  0338  0A33               	incf	i1sprintf@len,w
  5630  0339  1D03               	skipz
  5631  033A  2B19               	goto	i1l2881
  5632  033B  0A34               	incf	i1sprintf@len+1,w
  5633  033C  1903               	btfsc	3,2
  5634  033D  2A43               	goto	i1l2949
  5635  033E  2B19               	goto	i1l2881
  5636  033F                     i1l2889:	
  5637                           ;doprnt.c: 802: default:
  5638                           
  5639                           ;doprnt.c: 774: continue;
  5640                           
  5641                           
  5642                           ;doprnt.c: 805: cp = (char *)&c;
  5643  033F  3037               	movlw	(low (i1sprintf@c| 0))& (0+255)
  5644  0340  00B1               	movwf	i1sprintf@cp
  5645  0341  3000               	movlw	0
  5646  0342  00B2               	movwf	i1sprintf@cp+1
  5647                           
  5648                           ;doprnt.c: 806: len = 1;
  5649  0343  3001               	movlw	1
  5650  0344  00B3               	movwf	i1sprintf@len
  5651  0345  3000               	movlw	0
  5652  0346  00B4               	movwf	i1sprintf@len+1
  5653                           
  5654                           ;doprnt.c: 807: goto dostring;
  5655  0347  2AF1               	goto	i1l2869
  5656  0348                     i1l2893:	
  5657                           ;doprnt.c: 817: case 'u':
  5658                           
  5659                           
  5660                           ;doprnt.c: 818: flag |= 0xC0;
  5661  0348  30C0               	movlw	192
  5662  0349  00A9               	movwf	??i1_sprintf
  5663  034A  0829               	movf	??i1_sprintf,w
  5664  034B  04AC               	iorwf	i1sprintf@flag,f
  5665                           
  5666                           ;doprnt.c: 822: }
  5667                           
  5668                           ;doprnt.c: 819: break;
  5669  034C  2B64               	goto	i1l2899
  5670  034D                     i1l2897:	
  5671  034D  3001               	movlw	1
  5672  034E  1283               	bcf	3,5	;RP0=0, select bank0
  5673  034F  1303               	bcf	3,6	;RP1=0, select bank0
  5674  0350  07A2               	addwf	i1sprintf@f,f
  5675  0351  30FF               	movlw	-1
  5676  0352  0722               	addwf	i1sprintf@f,w
  5677  0353  0084               	movwf	4
  5678  0354  120A  118A  2723  120A  118A  	fcall	stringdir
  5679  0359  00B7               	movwf	i1sprintf@c
  5680                           
  5681                           ; Switch size 1, requested type "space"
  5682                           ; Number of cases is 3, Range of values is 0 to 117
  5683                           ; switch strategies available:
  5684                           ; Name         Instructions Cycles
  5685                           ; simple_byte           10     6 (average)
  5686                           ; jumptable            260     6 (fixed)
  5687                           ;	Chosen strategy is simple_byte
  5688  035A  3A00               	xorlw	0	; case 0
  5689  035B  1903               	skipnz
  5690  035C  2C30               	goto	i1l2951
  5691  035D  3A73               	xorlw	115	; case 115
  5692  035E  1903               	skipnz
  5693  035F  2AC4               	goto	i1l2855
  5694  0360  3A06               	xorlw	6	; case 117
  5695  0361  1903               	skipnz
  5696  0362  2B48               	goto	i1l2893
  5697  0363  2B3F               	goto	i1l2889
  5698  0364                     i1l2899:	
  5699                           
  5700                           ;doprnt.c: 1273: {
  5701                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  5702  0364  0830               	movf	i1sprintf@ap,w
  5703  0365  0084               	movwf	4
  5704  0366  1383               	bcf	3,7	;select IRP bank0
  5705  0367  0800               	movf	0,w
  5706  0368  00AD               	movwf	i1sprintf@val
  5707  0369  0A84               	incf	4,f
  5708  036A  0800               	movf	0,w
  5709  036B  00AE               	movwf	i1sprintf@val+1
  5710  036C  3002               	movlw	2
  5711  036D  00A9               	movwf	??i1_sprintf
  5712  036E  0829               	movf	??i1_sprintf,w
  5713  036F  07B0               	addwf	i1sprintf@ap,f
  5714                           
  5715                           ;doprnt.c: 1287: }
  5716                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  5717  0370  01B7               	clrf	i1sprintf@c
  5718  0371  0AB7               	incf	i1sprintf@c,f
  5719  0372  3005               	movlw	5
  5720  0373  0637               	xorwf	i1sprintf@c,w
  5721  0374  1903               	btfsc	3,2
  5722  0375  2B97               	goto	i1l2915
  5723  0376                     i1l2909:	
  5724                           
  5725                           ;doprnt.c: 1306: if(val < dpowers[c])
  5726  0376  0837               	movf	i1sprintf@c,w
  5727  0377  00A9               	movwf	??i1_sprintf
  5728  0378  0729               	addwf	??i1_sprintf,w
  5729  0379  3E23               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  5730  037A  0084               	movwf	4
  5731  037B  120A  118A  2723  120A  118A  	fcall	stringdir
  5732  0380  00AA               	movwf	??i1_sprintf+1
  5733  0381  120A  118A  2723  120A  118A  	fcall	stringdir
  5734  0386  00AB               	movwf	??i1_sprintf+2
  5735  0387  082B               	movf	??i1_sprintf+2,w
  5736  0388  022E               	subwf	i1sprintf@val+1,w
  5737  0389  1D03               	skipz
  5738  038A  2B8D               	goto	u361_25
  5739  038B  082A               	movf	??i1_sprintf+1,w
  5740  038C  022D               	subwf	i1sprintf@val,w
  5741  038D                     u361_25:	
  5742  038D  1C03               	btfss	3,0
  5743  038E  2B97               	goto	i1l2915
  5744                           
  5745                           ;doprnt.c: 1307: break;
  5746  038F  3001               	movlw	1
  5747  0390  00A9               	movwf	??i1_sprintf
  5748  0391  0829               	movf	??i1_sprintf,w
  5749  0392  07B7               	addwf	i1sprintf@c,f
  5750  0393  3005               	movlw	5
  5751  0394  0637               	xorwf	i1sprintf@c,w
  5752  0395  1D03               	btfss	3,2
  5753  0396  2B76               	goto	i1l2909
  5754  0397                     i1l2915:	
  5755                           
  5756                           ;doprnt.c: 1381: if(width > c)
  5757  0397  0837               	movf	i1sprintf@c,w
  5758  0398  00A9               	movwf	??i1_sprintf
  5759  0399  01AA               	clrf	??i1_sprintf+1
  5760  039A  1BA9               	btfsc	??i1_sprintf,7
  5761  039B  03AA               	decf	??i1_sprintf+1,f
  5762  039C  082A               	movf	??i1_sprintf+1,w
  5763  039D  3A80               	xorlw	128
  5764  039E  00AB               	movwf	??i1_sprintf+2
  5765  039F  0836               	movf	i1sprintf@width+1,w
  5766  03A0  3A80               	xorlw	128
  5767  03A1  022B               	subwf	??i1_sprintf+2,w
  5768  03A2  1D03               	skipz
  5769  03A3  2BA6               	goto	u363_25
  5770  03A4  0835               	movf	i1sprintf@width,w
  5771  03A5  0229               	subwf	??i1_sprintf,w
  5772  03A6                     u363_25:	
  5773  03A6  1803               	skipnc
  5774  03A7  2BB6               	goto	i1l2919
  5775                           
  5776                           ;doprnt.c: 1382: width -= c;
  5777  03A8  1283               	bcf	3,5	;RP0=0, select bank0
  5778  03A9  1303               	bcf	3,6	;RP1=0, select bank0
  5779  03AA  0837               	movf	i1sprintf@c,w
  5780  03AB  00A9               	movwf	??i1_sprintf
  5781  03AC  01AA               	clrf	??i1_sprintf+1
  5782  03AD  1BA9               	btfsc	??i1_sprintf,7
  5783  03AE  03AA               	decf	??i1_sprintf+1,f
  5784  03AF  0829               	movf	??i1_sprintf,w
  5785  03B0  02B5               	subwf	i1sprintf@width,f
  5786  03B1  082A               	movf	??i1_sprintf+1,w
  5787  03B2  1C03               	skipc
  5788  03B3  03B6               	decf	i1sprintf@width+1,f
  5789  03B4  02B6               	subwf	i1sprintf@width+1,f
  5790  03B5  2BBA               	goto	i1l2921
  5791  03B6                     i1l2919:	
  5792                           
  5793                           ;doprnt.c: 1383: else
  5794                           ;doprnt.c: 1384: width = 0;
  5795  03B6  1283               	bcf	3,5	;RP0=0, select bank0
  5796  03B7  1303               	bcf	3,6	;RP1=0, select bank0
  5797  03B8  01B5               	clrf	i1sprintf@width
  5798  03B9  01B6               	clrf	i1sprintf@width+1
  5799  03BA                     i1l2921:	
  5800                           
  5801                           ;doprnt.c: 1387: if(flag & 0x04) {
  5802  03BA  1D2C               	btfss	i1sprintf@flag,2
  5803  03BB  2BD2               	goto	i1l2931
  5804  03BC                     L9:	
  5805                           
  5806                           ;doprnt.c: 1415: if(width)
  5807  03BC  0835               	movf	i1sprintf@width,w
  5808  03BD  0436               	iorwf	i1sprintf@width+1,w
  5809  03BE  1903               	btfsc	3,2
  5810  03BF  2BEB               	goto	i1l2939
  5811                           
  5812                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  5813                           
  5814                           ;doprnt.c: 1416: do
  5815  03C0  0820               	movf	i1sprintf@sp,w
  5816  03C1  0084               	movwf	4
  5817  03C2  1383               	bcf	3,7
  5818  03C3  1821               	btfsc	i1sprintf@sp+1,0
  5819  03C4  1783               	bsf	3,7
  5820  03C5  3030               	movlw	48
  5821  03C6  0080               	movwf	0
  5822  03C7  3001               	movlw	1
  5823  03C8  07A0               	addwf	i1sprintf@sp,f
  5824  03C9  1803               	skipnc
  5825  03CA  0AA1               	incf	i1sprintf@sp+1,f
  5826                           
  5827                           ;doprnt.c: 1418: while(--width);
  5828  03CB  30FF               	movlw	255
  5829  03CC  07B5               	addwf	i1sprintf@width,f
  5830  03CD  1803               	skipnc
  5831  03CE  0AB6               	incf	i1sprintf@width+1,f
  5832  03CF  30FF               	movlw	255
  5833  03D0  07B6               	addwf	i1sprintf@width+1,f
  5834  03D1  2BBC               	goto	L9
  5835  03D2                     i1l2931:	
  5836                           ;doprnt.c: 1420: } else
  5837                           
  5838                           
  5839                           ;doprnt.c: 1422: {
  5840                           ;doprnt.c: 1424: if(width
  5841                           ;doprnt.c: 1428: )
  5842  03D2  0835               	movf	i1sprintf@width,w
  5843  03D3  0436               	iorwf	i1sprintf@width+1,w
  5844  03D4  1903               	btfsc	3,2
  5845  03D5  2BEB               	goto	i1l2939
  5846  03D6                     i1l2933:	
  5847                           ;doprnt.c: 1429: do
  5848                           
  5849                           
  5850                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  5851  03D6  0820               	movf	i1sprintf@sp,w
  5852  03D7  0084               	movwf	4
  5853  03D8  1383               	bcf	3,7
  5854  03D9  1821               	btfsc	i1sprintf@sp+1,0
  5855  03DA  1783               	bsf	3,7
  5856  03DB  3020               	movlw	32
  5857  03DC  0080               	movwf	0
  5858  03DD  3001               	movlw	1
  5859  03DE  07A0               	addwf	i1sprintf@sp,f
  5860  03DF  1803               	skipnc
  5861  03E0  0AA1               	incf	i1sprintf@sp+1,f
  5862                           
  5863                           ;doprnt.c: 1431: while(--width);
  5864  03E1  30FF               	movlw	255
  5865  03E2  07B5               	addwf	i1sprintf@width,f
  5866  03E3  1803               	skipnc
  5867  03E4  0AB6               	incf	i1sprintf@width+1,f
  5868  03E5  30FF               	movlw	255
  5869  03E6  07B6               	addwf	i1sprintf@width+1,f
  5870  03E7  0835               	movf	i1sprintf@width,w
  5871  03E8  0436               	iorwf	i1sprintf@width+1,w
  5872  03E9  1D03               	btfss	3,2
  5873  03EA  2BD6               	goto	i1l2933
  5874  03EB                     i1l2939:	
  5875                           
  5876                           ;doprnt.c: 1469: }
  5877                           ;doprnt.c: 1472: prec = c;
  5878  03EB  0837               	movf	i1sprintf@c,w
  5879  03EC  00A9               	movwf	??i1_sprintf
  5880  03ED  0829               	movf	??i1_sprintf,w
  5881  03EE  00AF               	movwf	i1sprintf@prec
  5882  03EF                     i1l2947:	
  5883                           ;doprnt.c: 1474: while(prec--) {
  5884                           
  5885  03EF  30FF               	movlw	255
  5886  03F0  00A9               	movwf	??i1_sprintf
  5887  03F1  0829               	movf	??i1_sprintf,w
  5888  03F2  07AF               	addwf	i1sprintf@prec,f
  5889  03F3  0A2F               	incf	i1sprintf@prec,w
  5890  03F4  1903               	btfsc	3,2
  5891  03F5  2A43               	goto	i1l2949
  5892                           
  5893                           ;doprnt.c: 1478: {
  5894                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  5895  03F6  300A               	movlw	10
  5896  03F7  00F8               	movwf	i1___lwmod@divisor
  5897  03F8  3000               	movlw	0
  5898  03F9  00F9               	movwf	i1___lwmod@divisor+1
  5899  03FA  082F               	movf	i1sprintf@prec,w
  5900  03FB  00A9               	movwf	??i1_sprintf
  5901  03FC  0729               	addwf	??i1_sprintf,w
  5902  03FD  3E23               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  5903  03FE  0084               	movwf	4
  5904  03FF  120A  118A  2723  120A  118A  	fcall	stringdir
  5905  0404  00F0               	movwf	i1___lwdiv@divisor
  5906  0405  120A  118A  2723  120A  118A  	fcall	stringdir
  5907  040A  00F1               	movwf	i1___lwdiv@divisor+1
  5908  040B  082E               	movf	i1sprintf@val+1,w
  5909  040C  00F3               	movwf	i1___lwdiv@dividend+1
  5910  040D  082D               	movf	i1sprintf@val,w
  5911  040E  00F2               	movwf	i1___lwdiv@dividend
  5912  040F  120A  158A  2476  120A  118A  	fcall	i1___lwdiv
  5913  0414  0871               	movf	?i1___lwdiv+1,w
  5914  0415  00FB               	movwf	i1___lwmod@dividend+1
  5915  0416  0870               	movf	?i1___lwdiv,w
  5916  0417  00FA               	movwf	i1___lwmod@dividend
  5917  0418  120A  158A  23D8  120A  118A  	fcall	i1___lwmod
  5918  041D  0878               	movf	?i1___lwmod,w
  5919  041E  3E30               	addlw	48
  5920  041F  1283               	bcf	3,5	;RP0=0, select bank0
  5921  0420  1303               	bcf	3,6	;RP1=0, select bank0
  5922  0421  00AA               	movwf	??i1_sprintf+1
  5923  0422  082A               	movf	??i1_sprintf+1,w
  5924  0423  00B7               	movwf	i1sprintf@c
  5925                           
  5926                           ;doprnt.c: 1523: }
  5927                           ;doprnt.c: 1524: ((*sp++ = (c)));
  5928  0424  0820               	movf	i1sprintf@sp,w
  5929  0425  0084               	movwf	4
  5930  0426  1383               	bcf	3,7
  5931  0427  1821               	btfsc	i1sprintf@sp+1,0
  5932  0428  1783               	bsf	3,7
  5933  0429  0837               	movf	i1sprintf@c,w
  5934  042A  0080               	movwf	0
  5935  042B  3001               	movlw	1
  5936  042C  07A0               	addwf	i1sprintf@sp,f
  5937  042D  1803               	skipnc
  5938  042E  0AA1               	incf	i1sprintf@sp+1,f
  5939  042F  2BEF               	goto	i1l2947
  5940  0430                     i1l2951:	
  5941                           ;doprnt.c: 1525: }
  5942                           ;doprnt.c: 1533: }
  5943                           ;doprnt.c: 1535: alldone:
  5944                           
  5945                           
  5946                           ;doprnt.c: 1538: *sp = 0;
  5947  0430  1283               	bcf	3,5	;RP0=0, select bank0
  5948  0431  1303               	bcf	3,6	;RP1=0, select bank0
  5949  0432  0820               	movf	i1sprintf@sp,w
  5950  0433  0084               	movwf	4
  5951  0434  1783               	bsf	3,7
  5952  0435  1C21               	btfss	i1sprintf@sp+1,0
  5953  0436  1383               	bcf	3,7
  5954  0437  0180               	clrf	0
  5955  0438  0008               	return
  5956  0439                     __end_ofi1_sprintf:	
  5957                           ;doprnt.c: 1540: return 0;
  5958                           ;	Return value of i1_sprintf is never used
  5959                           
  5960                           
  5961                           	psect	text31
  5962  09CB                     __ptext31:	
  5963 ;; *************** function i1_isdigit *****************
  5964 ;; Defined at:
  5965 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  5966 ;; Parameters:    Size  Location     Type
  5967 ;;  c               1    wreg     unsigned char 
  5968 ;; Auto vars:     Size  Location     Type
  5969 ;;  c               1    1[COMMON] unsigned char 
  5970 ;; Return value:  Size  Location     Type
  5971 ;;		None               void
  5972 ;; Registers used:
  5973 ;;		wreg, status,2, status,0
  5974 ;; Tracked objects:
  5975 ;;		On entry : 0/0
  5976 ;;		On exit  : 0/0
  5977 ;;		Unchanged: 0/0
  5978 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5979 ;;      Params:         0       0       0       0       0
  5980 ;;      Locals:         2       0       0       0       0
  5981 ;;      Temps:          0       0       0       0       0
  5982 ;;      Totals:         2       0       0       0       0
  5983 ;;Total ram usage:        2 bytes
  5984 ;; Hardware stack levels used:    1
  5985 ;; This function calls:
  5986 ;;		Nothing
  5987 ;; This function is called by:
  5988 ;;		i1_sprintf
  5989 ;; This function uses a non-reentrant model
  5990 ;;
  5991                           
  5992                           
  5993                           ;psect for function i1_isdigit
  5994  09CB                     i1_isdigit:	
  5995                           
  5996                           ;incstack = 0
  5997                           ; Regs used in i1_isdigit: [wreg+status,2+status,0]
  5998                           ;i1isdigit@c stored from wreg
  5999  09CB  00F1               	movwf	i1isdigit@c
  6000  09CC  01F0               	clrf	i1_isdigit$506
  6001  09CD  303A               	movlw	58
  6002  09CE  0271               	subwf	i1isdigit@c,w
  6003  09CF  1803               	skipnc
  6004  09D0  29D7               	goto	i1l2411
  6005  09D1  3030               	movlw	48
  6006  09D2  0271               	subwf	i1isdigit@c,w
  6007  09D3  1C03               	skipc
  6008  09D4  29D7               	goto	i1l2411
  6009  09D5  01F0               	clrf	i1_isdigit$506
  6010  09D6  0AF0               	incf	i1_isdigit$506,f
  6011  09D7                     i1l2411:	
  6012  09D7  0C70               	rrf	i1_isdigit$506,w
  6013  09D8  0008               	return
  6014  09D9                     __end_ofi1_isdigit:	
  6015                           
  6016                           	psect	text32
  6017  0A82                     __ptext32:	
  6018 ;; *************** function i1___wmul *****************
  6019 ;; Defined at:
  6020 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  6021 ;; Parameters:    Size  Location     Type
  6022 ;;  multiplier      2    0[COMMON] unsigned int 
  6023 ;;  multiplicand    2    2[COMMON] unsigned int 
  6024 ;; Auto vars:     Size  Location     Type
  6025 ;;  __wmul          2    4[COMMON] unsigned int 
  6026 ;; Return value:  Size  Location     Type
  6027 ;;                  2    0[COMMON] unsigned int 
  6028 ;; Registers used:
  6029 ;;		wreg, status,2, status,0
  6030 ;; Tracked objects:
  6031 ;;		On entry : 0/0
  6032 ;;		On exit  : 0/0
  6033 ;;		Unchanged: 0/0
  6034 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6035 ;;      Params:         4       0       0       0       0
  6036 ;;      Locals:         2       0       0       0       0
  6037 ;;      Temps:          0       0       0       0       0
  6038 ;;      Totals:         6       0       0       0       0
  6039 ;;Total ram usage:        6 bytes
  6040 ;; Hardware stack levels used:    1
  6041 ;; This function calls:
  6042 ;;		Nothing
  6043 ;; This function is called by:
  6044 ;;		i1_sprintf
  6045 ;; This function uses a non-reentrant model
  6046 ;;
  6047                           
  6048                           
  6049                           ;psect for function i1___wmul
  6050  0A82                     i1___wmul:	
  6051                           
  6052                           ;incstack = 0
  6053                           ; Regs used in i1___wmul: [wreg+status,2+status,0]
  6054  0A82  01F4               	clrf	i1___wmul@product
  6055  0A83  01F5               	clrf	i1___wmul@product+1
  6056  0A84                     i1l2391:	
  6057  0A84  1C70               	btfss	i1___wmul@multiplier,0
  6058  0A85  2A8C               	goto	i1l493
  6059  0A86  0872               	movf	i1___wmul@multiplicand,w
  6060  0A87  07F4               	addwf	i1___wmul@product,f
  6061  0A88  1803               	skipnc
  6062  0A89  0AF5               	incf	i1___wmul@product+1,f
  6063  0A8A  0873               	movf	i1___wmul@multiplicand+1,w
  6064  0A8B  07F5               	addwf	i1___wmul@product+1,f
  6065  0A8C                     i1l493:	
  6066  0A8C  3001               	movlw	1
  6067  0A8D                     u270_25:	
  6068  0A8D  1003               	clrc
  6069  0A8E  0DF2               	rlf	i1___wmul@multiplicand,f
  6070  0A8F  0DF3               	rlf	i1___wmul@multiplicand+1,f
  6071  0A90  3EFF               	addlw	-1
  6072  0A91  1D03               	skipz
  6073  0A92  2A8D               	goto	u270_25
  6074  0A93  3001               	movlw	1
  6075  0A94                     u271_25:	
  6076  0A94  1003               	clrc
  6077  0A95  0CF1               	rrf	i1___wmul@multiplier+1,f
  6078  0A96  0CF0               	rrf	i1___wmul@multiplier,f
  6079  0A97  3EFF               	addlw	-1
  6080  0A98  1D03               	skipz
  6081  0A99  2A94               	goto	u271_25
  6082  0A9A  0870               	movf	i1___wmul@multiplier,w
  6083  0A9B  0471               	iorwf	i1___wmul@multiplier+1,w
  6084  0A9C  1D03               	btfss	3,2
  6085  0A9D  2A84               	goto	i1l2391
  6086  0A9E  0875               	movf	i1___wmul@product+1,w
  6087  0A9F  00F1               	movwf	?i1___wmul+1
  6088  0AA0  0874               	movf	i1___wmul@product,w
  6089  0AA1  00F0               	movwf	?i1___wmul
  6090  0AA2  0008               	return
  6091  0AA3                     __end_ofi1___wmul:	
  6092                           
  6093                           	psect	text33
  6094  0BD8                     __ptext33:	
  6095 ;; *************** function i1___lwmod *****************
  6096 ;; Defined at:
  6097 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
  6098 ;; Parameters:    Size  Location     Type
  6099 ;;  divisor         2    8[COMMON] unsigned int 
  6100 ;;  dividend        2   10[COMMON] unsigned int 
  6101 ;; Auto vars:     Size  Location     Type
  6102 ;;  __lwmod         1   13[COMMON] unsigned char 
  6103 ;; Return value:  Size  Location     Type
  6104 ;;                  2    8[COMMON] unsigned int 
  6105 ;; Registers used:
  6106 ;;		wreg, status,2, status,0
  6107 ;; Tracked objects:
  6108 ;;		On entry : 0/0
  6109 ;;		On exit  : 0/0
  6110 ;;		Unchanged: 0/0
  6111 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6112 ;;      Params:         4       0       0       0       0
  6113 ;;      Locals:         1       0       0       0       0
  6114 ;;      Temps:          1       0       0       0       0
  6115 ;;      Totals:         6       0       0       0       0
  6116 ;;Total ram usage:        6 bytes
  6117 ;; Hardware stack levels used:    1
  6118 ;; This function calls:
  6119 ;;		Nothing
  6120 ;; This function is called by:
  6121 ;;		i1_sprintf
  6122 ;; This function uses a non-reentrant model
  6123 ;;
  6124                           
  6125                           
  6126                           ;psect for function i1___lwmod
  6127  0BD8                     i1___lwmod:	
  6128                           
  6129                           ;incstack = 0
  6130                           ; Regs used in i1___lwmod: [wreg+status,2+status,0]
  6131  0BD8  0878               	movf	i1___lwmod@divisor,w
  6132  0BD9  0479               	iorwf	i1___lwmod@divisor+1,w
  6133  0BDA  1903               	btfsc	3,2
  6134  0BDB  2C05               	goto	i1l2459
  6135  0BDC  01FD               	clrf	i1___lwmod@counter
  6136  0BDD  0AFD               	incf	i1___lwmod@counter,f
  6137  0BDE                     i1l2449:	
  6138  0BDE  1BF9               	btfsc	i1___lwmod@divisor+1,7
  6139  0BDF  2BEC               	goto	i1l2451
  6140  0BE0  3001               	movlw	1
  6141  0BE1                     u283_25:	
  6142  0BE1  1003               	clrc
  6143  0BE2  0DF8               	rlf	i1___lwmod@divisor,f
  6144  0BE3  0DF9               	rlf	i1___lwmod@divisor+1,f
  6145  0BE4  3EFF               	addlw	-1
  6146  0BE5  1D03               	skipz
  6147  0BE6  2BE1               	goto	u283_25
  6148  0BE7  3001               	movlw	1
  6149  0BE8  00FC               	movwf	??i1___lwmod
  6150  0BE9  087C               	movf	??i1___lwmod,w
  6151  0BEA  07FD               	addwf	i1___lwmod@counter,f
  6152  0BEB  2BDE               	goto	i1l2449
  6153  0BEC                     i1l2451:	
  6154  0BEC  0879               	movf	i1___lwmod@divisor+1,w
  6155  0BED  027B               	subwf	i1___lwmod@dividend+1,w
  6156  0BEE  1D03               	skipz
  6157  0BEF  2BF2               	goto	u285_25
  6158  0BF0  0878               	movf	i1___lwmod@divisor,w
  6159  0BF1  027A               	subwf	i1___lwmod@dividend,w
  6160  0BF2                     u285_25:	
  6161  0BF2  1C03               	skipc
  6162  0BF3  2BFA               	goto	i1l2455
  6163  0BF4  0878               	movf	i1___lwmod@divisor,w
  6164  0BF5  02FA               	subwf	i1___lwmod@dividend,f
  6165  0BF6  0879               	movf	i1___lwmod@divisor+1,w
  6166  0BF7  1C03               	skipc
  6167  0BF8  03FB               	decf	i1___lwmod@dividend+1,f
  6168  0BF9  02FB               	subwf	i1___lwmod@dividend+1,f
  6169  0BFA                     i1l2455:	
  6170  0BFA  3001               	movlw	1
  6171  0BFB                     u286_25:	
  6172  0BFB  1003               	clrc
  6173  0BFC  0CF9               	rrf	i1___lwmod@divisor+1,f
  6174  0BFD  0CF8               	rrf	i1___lwmod@divisor,f
  6175  0BFE  3EFF               	addlw	-1
  6176  0BFF  1D03               	skipz
  6177  0C00  2BFB               	goto	u286_25
  6178  0C01  3001               	movlw	1
  6179  0C02  02FD               	subwf	i1___lwmod@counter,f
  6180  0C03  1D03               	btfss	3,2
  6181  0C04  2BEC               	goto	i1l2451
  6182  0C05                     i1l2459:	
  6183  0C05  087B               	movf	i1___lwmod@dividend+1,w
  6184  0C06  00F9               	movwf	?i1___lwmod+1
  6185  0C07  087A               	movf	i1___lwmod@dividend,w
  6186  0C08  00F8               	movwf	?i1___lwmod
  6187  0C09  0008               	return
  6188  0C0A                     __end_ofi1___lwmod:	
  6189                           
  6190                           	psect	text34
  6191  0C76                     __ptext34:	
  6192 ;; *************** function i1___lwdiv *****************
  6193 ;; Defined at:
  6194 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
  6195 ;; Parameters:    Size  Location     Type
  6196 ;;  divisor         2    0[COMMON] unsigned int 
  6197 ;;  dividend        2    2[COMMON] unsigned int 
  6198 ;; Auto vars:     Size  Location     Type
  6199 ;;  __lwdiv         2    5[COMMON] unsigned int 
  6200 ;;  __lwdiv         1    7[COMMON] unsigned char 
  6201 ;; Return value:  Size  Location     Type
  6202 ;;                  2    0[COMMON] unsigned int 
  6203 ;; Registers used:
  6204 ;;		wreg, status,2, status,0
  6205 ;; Tracked objects:
  6206 ;;		On entry : 0/0
  6207 ;;		On exit  : 0/0
  6208 ;;		Unchanged: 0/0
  6209 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6210 ;;      Params:         4       0       0       0       0
  6211 ;;      Locals:         3       0       0       0       0
  6212 ;;      Temps:          1       0       0       0       0
  6213 ;;      Totals:         8       0       0       0       0
  6214 ;;Total ram usage:        8 bytes
  6215 ;; Hardware stack levels used:    1
  6216 ;; This function calls:
  6217 ;;		Nothing
  6218 ;; This function is called by:
  6219 ;;		i1_sprintf
  6220 ;; This function uses a non-reentrant model
  6221 ;;
  6222                           
  6223                           
  6224                           ;psect for function i1___lwdiv
  6225  0C76                     i1___lwdiv:	
  6226                           
  6227                           ;incstack = 0
  6228                           ; Regs used in i1___lwdiv: [wreg+status,2+status,0]
  6229  0C76  01F5               	clrf	i1___lwdiv@quotient
  6230  0C77  01F6               	clrf	i1___lwdiv@quotient+1
  6231  0C78  0870               	movf	i1___lwdiv@divisor,w
  6232  0C79  0471               	iorwf	i1___lwdiv@divisor+1,w
  6233  0C7A  1903               	btfsc	3,2
  6234  0C7B  2CAD               	goto	i1l2437
  6235  0C7C  01F7               	clrf	i1___lwdiv@counter
  6236  0C7D  0AF7               	incf	i1___lwdiv@counter,f
  6237  0C7E                     i1l2425:	
  6238  0C7E  1BF1               	btfsc	i1___lwdiv@divisor+1,7
  6239  0C7F  2C8C               	goto	i1l2427
  6240  0C80  3001               	movlw	1
  6241  0C81                     u276_25:	
  6242  0C81  1003               	clrc
  6243  0C82  0DF0               	rlf	i1___lwdiv@divisor,f
  6244  0C83  0DF1               	rlf	i1___lwdiv@divisor+1,f
  6245  0C84  3EFF               	addlw	-1
  6246  0C85  1D03               	skipz
  6247  0C86  2C81               	goto	u276_25
  6248  0C87  3001               	movlw	1
  6249  0C88  00F4               	movwf	??i1___lwdiv
  6250  0C89  0874               	movf	??i1___lwdiv,w
  6251  0C8A  07F7               	addwf	i1___lwdiv@counter,f
  6252  0C8B  2C7E               	goto	i1l2425
  6253  0C8C                     i1l2427:	
  6254  0C8C  3001               	movlw	1
  6255  0C8D                     u278_25:	
  6256  0C8D  1003               	clrc
  6257  0C8E  0DF5               	rlf	i1___lwdiv@quotient,f
  6258  0C8F  0DF6               	rlf	i1___lwdiv@quotient+1,f
  6259  0C90  3EFF               	addlw	-1
  6260  0C91  1D03               	skipz
  6261  0C92  2C8D               	goto	u278_25
  6262  0C93  0871               	movf	i1___lwdiv@divisor+1,w
  6263  0C94  0273               	subwf	i1___lwdiv@dividend+1,w
  6264  0C95  1D03               	skipz
  6265  0C96  2C99               	goto	u279_25
  6266  0C97  0870               	movf	i1___lwdiv@divisor,w
  6267  0C98  0272               	subwf	i1___lwdiv@dividend,w
  6268  0C99                     u279_25:	
  6269  0C99  1C03               	skipc
  6270  0C9A  2CA2               	goto	i1l2433
  6271  0C9B  0870               	movf	i1___lwdiv@divisor,w
  6272  0C9C  02F2               	subwf	i1___lwdiv@dividend,f
  6273  0C9D  0871               	movf	i1___lwdiv@divisor+1,w
  6274  0C9E  1C03               	skipc
  6275  0C9F  03F3               	decf	i1___lwdiv@dividend+1,f
  6276  0CA0  02F3               	subwf	i1___lwdiv@dividend+1,f
  6277  0CA1  1475               	bsf	i1___lwdiv@quotient,0
  6278  0CA2                     i1l2433:	
  6279  0CA2  3001               	movlw	1
  6280  0CA3                     u280_25:	
  6281  0CA3  1003               	clrc
  6282  0CA4  0CF1               	rrf	i1___lwdiv@divisor+1,f
  6283  0CA5  0CF0               	rrf	i1___lwdiv@divisor,f
  6284  0CA6  3EFF               	addlw	-1
  6285  0CA7  1D03               	skipz
  6286  0CA8  2CA3               	goto	u280_25
  6287  0CA9  3001               	movlw	1
  6288  0CAA  02F7               	subwf	i1___lwdiv@counter,f
  6289  0CAB  1D03               	btfss	3,2
  6290  0CAC  2C8C               	goto	i1l2427
  6291  0CAD                     i1l2437:	
  6292  0CAD  0876               	movf	i1___lwdiv@quotient+1,w
  6293  0CAE  00F1               	movwf	?i1___lwdiv+1
  6294  0CAF  0875               	movf	i1___lwdiv@quotient,w
  6295  0CB0  00F0               	movwf	?i1___lwdiv
  6296  0CB1  0008               	return
  6297  0CB2                     __end_ofi1___lwdiv:	
  6298                           
  6299                           	psect	text35
  6300  05D8                     __ptext35:	
  6301 ;; *************** function _vw_isr_tmr0 *****************
  6302 ;; Defined at:
  6303 ;;		line 388 in file "virtualwire.c"
  6304 ;; Parameters:    Size  Location     Type
  6305 ;;		None
  6306 ;; Auto vars:     Size  Location     Type
  6307 ;;		None
  6308 ;; Return value:  Size  Location     Type
  6309 ;;                  1    wreg      void 
  6310 ;; Registers used:
  6311 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6312 ;; Tracked objects:
  6313 ;;		On entry : 0/0
  6314 ;;		On exit  : 0/0
  6315 ;;		Unchanged: 0/0
  6316 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6317 ;;      Params:         0       0       0       0       0
  6318 ;;      Locals:         0       0       0       0       0
  6319 ;;      Temps:          2       0       0       0       0
  6320 ;;      Totals:         2       0       0       0       0
  6321 ;;Total ram usage:        2 bytes
  6322 ;; Hardware stack levels used:    1
  6323 ;; Hardware stack levels required when called:    3
  6324 ;; This function calls:
  6325 ;;		_vw_pll
  6326 ;;		_vw_tx_stop
  6327 ;; This function is called by:
  6328 ;;		_global_isr
  6329 ;; This function uses a non-reentrant model
  6330 ;;
  6331                           
  6332                           
  6333                           ;psect for function _vw_isr_tmr0
  6334  05D8                     _vw_isr_tmr0:	
  6335                           
  6336                           ;virtualwire.c: 390: TMR0 += -vw_tmr0_value + 4;
  6337                           
  6338                           ;incstack = 0
  6339 ;; hardware stack exceeded
  6340                           ; Regs used in _vw_isr_tmr0: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6341  05D8  1683               	bsf	3,5	;RP0=1, select bank1
  6342  05D9  1303               	bcf	3,6	;RP1=0, select bank1
  6343  05DA  036D               	decf	_vw_tmr0_value^(0+128),w
  6344  05DB  3AFF               	xorlw	255
  6345  05DC  3E04               	addlw	4
  6346  05DD  00FB               	movwf	??_vw_isr_tmr0
  6347  05DE  087B               	movf	??_vw_isr_tmr0,w
  6348  05DF  1283               	bcf	3,5	;RP0=0, select bank0
  6349  05E0  1303               	bcf	3,6	;RP1=0, select bank0
  6350  05E1  0781               	addwf	1,f	;volatile
  6351                           
  6352                           ;virtualwire.c: 391: TMR0IF = 0;
  6353  05E2  110B               	bcf	11,2	;volatile
  6354                           
  6355                           ;virtualwire.c: 393: if (vw_rx_enabled && !vw_tx_enabled)
  6356  05E3  084D               	movf	_vw_rx_enabled,w
  6357  05E4  1903               	btfsc	3,2
  6358  05E5  2DF8               	goto	i1l2567
  6359  05E6  0856               	movf	_vw_tx_enabled,w
  6360  05E7  1D03               	btfss	3,2
  6361  05E8  2DF8               	goto	i1l2567
  6362                           
  6363                           ;virtualwire.c: 395: if(vw_rx_inverted){
  6364  05E9  0850               	movf	_vw_rx_inverted,w
  6365  05EA  1903               	btfsc	3,2
  6366  05EB  2DF4               	goto	i1l2565
  6367                           
  6368                           ;virtualwire.c: 396: vw_rx_sample = (RA1)? 0 : 1;
  6369  05EC  1003               	clrc
  6370  05ED  1C85               	btfss	5,1	;volatile
  6371  05EE  1403               	setc
  6372  05EF  3000               	movlw	0
  6373  05F0  1803               	btfsc	3,0
  6374  05F1  3001               	movlw	1
  6375  05F2  00D4               	movwf	_vw_rx_sample
  6376                           
  6377                           ;virtualwire.c: 397: }
  6378  05F3  2DF8               	goto	i1l2567
  6379  05F4                     i1l2565:	
  6380                           
  6381                           ;virtualwire.c: 398: else{
  6382                           ;virtualwire.c: 399: vw_rx_sample = RA1;
  6383  05F4  3000               	movlw	0
  6384  05F5  1885               	btfsc	5,1	;volatile
  6385  05F6  3001               	movlw	1
  6386  05F7  00D4               	movwf	_vw_rx_sample
  6387  05F8                     i1l2567:	
  6388                           
  6389                           ;virtualwire.c: 400: }
  6390                           ;virtualwire.c: 404: if (vw_tx_enabled && vw_tx_sample++ == 0)
  6391  05F8  0856               	movf	_vw_tx_enabled,w
  6392  05F9  1903               	btfsc	3,2
  6393  05FA  2E6B               	goto	i1l2603
  6394  05FB  3001               	movlw	1
  6395  05FC  00FB               	movwf	??_vw_isr_tmr0
  6396  05FD  087B               	movf	??_vw_isr_tmr0,w
  6397  05FE  07DA               	addwf	_vw_tx_sample,f
  6398  05FF  035A               	decf	_vw_tx_sample,w
  6399  0600  1D03               	btfss	3,2
  6400  0601  2E6B               	goto	i1l2603
  6401                           
  6402                           ;virtualwire.c: 405: {
  6403                           ;virtualwire.c: 406: if (vw_tx_header)
  6404  0602  0857               	movf	_vw_tx_header,w
  6405  0603  1903               	btfsc	3,2
  6406  0604  2E36               	goto	i1l2587
  6407                           
  6408                           ;virtualwire.c: 407: {
  6409                           ;virtualwire.c: 408: RA2 = (vw_tx_buf_header[vw_tx_index] & (1 << vw_tx_bit++)) ? 1 : 0;
  6410  0605  0858               	movf	_vw_tx_index,w
  6411  0606  3E2D               	addlw	low ((_vw_tx_buf_header-__stringbase)| (0+32768))
  6412  0607  0084               	movwf	4
  6413  0608  120A  118A  2723  120A  118A  	fcall	stringdir
  6414  060D  00FB               	movwf	??_vw_isr_tmr0
  6415  060E  3001               	movlw	1
  6416  060F  00FC               	movwf	??_vw_isr_tmr0+1
  6417  0610  0A55               	incf	_vw_tx_bit,w
  6418  0611  2E14               	goto	u304_24
  6419  0612                     u304_25:	
  6420  0612  1003               	clrc
  6421  0613  0DFC               	rlf	??_vw_isr_tmr0+1,f
  6422  0614                     u304_24:	
  6423  0614  3EFF               	addlw	-1
  6424  0615  1D03               	skipz
  6425  0616  2E12               	goto	u304_25
  6426  0617  087C               	movf	??_vw_isr_tmr0+1,w
  6427  0618  057B               	andwf	??_vw_isr_tmr0,w
  6428  0619  1903               	btfsc	3,2
  6429  061A  2E1F               	goto	u305_20
  6430  061B  1283               	bcf	3,5	;RP0=0, select bank0
  6431  061C  1303               	bcf	3,6	;RP1=0, select bank0
  6432  061D  1505               	bsf	5,2	;volatile
  6433  061E  2E22               	goto	i1l2575
  6434  061F                     u305_20:	
  6435  061F  1283               	bcf	3,5	;RP0=0, select bank0
  6436  0620  1303               	bcf	3,6	;RP1=0, select bank0
  6437  0621  1105               	bcf	5,2	;volatile
  6438  0622                     i1l2575:	
  6439  0622  3001               	movlw	1
  6440  0623  00FB               	movwf	??_vw_isr_tmr0
  6441  0624  087B               	movf	??_vw_isr_tmr0,w
  6442  0625  07D5               	addwf	_vw_tx_bit,f
  6443                           
  6444                           ;virtualwire.c: 409: if (vw_tx_bit >= 6)
  6445  0626  3006               	movlw	6
  6446  0627  0255               	subwf	_vw_tx_bit,w
  6447  0628  1C03               	skipc
  6448  0629  2E2F               	goto	i1l2583
  6449                           
  6450                           ;virtualwire.c: 410: {
  6451                           ;virtualwire.c: 411: vw_tx_bit = 0;
  6452  062A  01D5               	clrf	_vw_tx_bit
  6453                           
  6454                           ;virtualwire.c: 412: vw_tx_index++;
  6455  062B  3001               	movlw	1
  6456  062C  00FB               	movwf	??_vw_isr_tmr0
  6457  062D  087B               	movf	??_vw_isr_tmr0,w
  6458  062E  07D8               	addwf	_vw_tx_index,f
  6459  062F                     i1l2583:	
  6460                           
  6461                           ;virtualwire.c: 413: }
  6462                           ;virtualwire.c: 415: if (vw_tx_index >= 8)
  6463  062F  3008               	movlw	8
  6464  0630  0258               	subwf	_vw_tx_index,w
  6465  0631  1C03               	skipc
  6466  0632  2E6B               	goto	i1l2603
  6467                           
  6468                           ;virtualwire.c: 416: {
  6469                           ;virtualwire.c: 418: vw_tx_header = 0;
  6470  0633  01D7               	clrf	_vw_tx_header
  6471                           
  6472                           ;virtualwire.c: 419: vw_tx_index = 0;
  6473  0634  01D8               	clrf	_vw_tx_index
  6474                           
  6475                           ;virtualwire.c: 420: }
  6476                           ;virtualwire.c: 421: }
  6477  0635  2E6B               	goto	i1l2603
  6478  0636                     i1l2587:	
  6479                           
  6480                           ;virtualwire.c: 422: else
  6481                           ;virtualwire.c: 423: {
  6482                           ;virtualwire.c: 428: if (vw_tx_index >= vw_tx_len)
  6483  0636  0859               	movf	_vw_tx_len,w
  6484  0637  0258               	subwf	_vw_tx_index,w
  6485  0638  1C03               	skipc
  6486  0639  2E46               	goto	i1l2593
  6487                           
  6488                           ;virtualwire.c: 429: {
  6489                           ;virtualwire.c: 430: vw_tx_stop();
  6490  063A  120A  158A  21B7  120A  118A  	fcall	_vw_tx_stop
  6491                           
  6492                           ;virtualwire.c: 431: vw_rx_enabled = vw_rx_enabled_last;
  6493  063F  1283               	bcf	3,5	;RP0=0, select bank0
  6494  0640  1303               	bcf	3,6	;RP1=0, select bank0
  6495  0641  084E               	movf	_vw_rx_enabled_last,w
  6496  0642  00FB               	movwf	??_vw_isr_tmr0
  6497  0643  087B               	movf	??_vw_isr_tmr0,w
  6498  0644  00CD               	movwf	_vw_rx_enabled
  6499                           
  6500                           ;virtualwire.c: 432: }
  6501  0645  2E6B               	goto	i1l2603
  6502  0646                     i1l2593:	
  6503                           
  6504                           ;virtualwire.c: 433: else
  6505                           ;virtualwire.c: 434: {
  6506                           ;virtualwire.c: 435: RA2 = (vw_tx_buf[vw_tx_index] & (1 << vw_tx_bit++)) ? 1 : 0;
  6507  0646  0858               	movf	_vw_tx_index,w
  6508  0647  3EB8               	addlw	(low (_vw_tx_buf| (0+256)))& (0+255)
  6509  0648  0084               	movwf	4
  6510  0649  3001               	movlw	1
  6511  064A  00FB               	movwf	??_vw_isr_tmr0
  6512  064B  0A55               	incf	_vw_tx_bit,w
  6513  064C  2E4F               	goto	u310_24
  6514  064D                     u310_25:	
  6515  064D  1003               	clrc
  6516  064E  0DFB               	rlf	??_vw_isr_tmr0,f
  6517  064F                     u310_24:	
  6518  064F  3EFF               	addlw	-1
  6519  0650  1D03               	skipz
  6520  0651  2E4D               	goto	u310_25
  6521  0652  087B               	movf	??_vw_isr_tmr0,w
  6522  0653  1783               	bsf	3,7	;select IRP bank3
  6523  0654  0500               	andwf	0,w
  6524  0655  1903               	btfsc	3,2
  6525  0656  2E5B               	goto	u311_20
  6526  0657  1283               	bcf	3,5	;RP0=0, select bank0
  6527  0658  1303               	bcf	3,6	;RP1=0, select bank0
  6528  0659  1505               	bsf	5,2	;volatile
  6529  065A  2E5E               	goto	i1l2595
  6530  065B                     u311_20:	
  6531  065B  1283               	bcf	3,5	;RP0=0, select bank0
  6532  065C  1303               	bcf	3,6	;RP1=0, select bank0
  6533  065D  1105               	bcf	5,2	;volatile
  6534  065E                     i1l2595:	
  6535  065E  3001               	movlw	1
  6536  065F  00FB               	movwf	??_vw_isr_tmr0
  6537  0660  087B               	movf	??_vw_isr_tmr0,w
  6538  0661  07D5               	addwf	_vw_tx_bit,f
  6539                           
  6540                           ;virtualwire.c: 436: if (vw_tx_bit >= 6)
  6541  0662  3006               	movlw	6
  6542  0663  0255               	subwf	_vw_tx_bit,w
  6543  0664  1C03               	skipc
  6544  0665  2E6B               	goto	i1l2603
  6545                           
  6546                           ;virtualwire.c: 437: {
  6547                           ;virtualwire.c: 438: vw_tx_bit = 0;
  6548  0666  01D5               	clrf	_vw_tx_bit
  6549                           
  6550                           ;virtualwire.c: 439: vw_tx_index++;
  6551  0667  3001               	movlw	1
  6552  0668  00FB               	movwf	??_vw_isr_tmr0
  6553  0669  087B               	movf	??_vw_isr_tmr0,w
  6554  066A  07D8               	addwf	_vw_tx_index,f
  6555  066B                     i1l2603:	
  6556                           
  6557                           ;virtualwire.c: 440: }
  6558                           ;virtualwire.c: 441: }
  6559                           ;virtualwire.c: 442: }
  6560                           ;virtualwire.c: 444: }
  6561                           ;virtualwire.c: 446: if (vw_tx_sample > 7)
  6562  066B  3008               	movlw	8
  6563  066C  025A               	subwf	_vw_tx_sample,w
  6564  066D  1803               	btfsc	3,0
  6565                           
  6566                           ;virtualwire.c: 447: vw_tx_sample = 0;
  6567  066E  01DA               	clrf	_vw_tx_sample
  6568                           
  6569                           ;virtualwire.c: 451: if (vw_rx_enabled && !vw_tx_enabled)
  6570  066F  084D               	movf	_vw_rx_enabled,w
  6571  0670  1903               	btfsc	3,2
  6572  0671  0008               	return
  6573  0672  0856               	movf	_vw_tx_enabled,w
  6574  0673  1D03               	btfss	3,2
  6575  0674  0008               	return
  6576                           
  6577                           ;virtualwire.c: 452: vw_pll();
  6578  0675  120A  118A  2679   	fcall	_vw_pll
  6579  0678  0008               	return
  6580  0679                     __end_of_vw_isr_tmr0:	
  6581                           
  6582                           	psect	text36
  6583  09B7                     __ptext36:	
  6584 ;; *************** function _vw_tx_stop *****************
  6585 ;; Defined at:
  6586 ;;		line 162 in file "virtualwire.c"
  6587 ;; Parameters:    Size  Location     Type
  6588 ;;		None
  6589 ;; Auto vars:     Size  Location     Type
  6590 ;;		None
  6591 ;; Return value:  Size  Location     Type
  6592 ;;                  1    wreg      void 
  6593 ;; Registers used:
  6594 ;;		status,2
  6595 ;; Tracked objects:
  6596 ;;		On entry : 0/0
  6597 ;;		On exit  : 0/0
  6598 ;;		Unchanged: 0/0
  6599 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6600 ;;      Params:         0       0       0       0       0
  6601 ;;      Locals:         0       0       0       0       0
  6602 ;;      Temps:          0       0       0       0       0
  6603 ;;      Totals:         0       0       0       0       0
  6604 ;;Total ram usage:        0 bytes
  6605 ;; Hardware stack levels used:    1
  6606 ;; This function calls:
  6607 ;;		Nothing
  6608 ;; This function is called by:
  6609 ;;		_vw_isr_tmr0
  6610 ;; This function uses a non-reentrant model
  6611 ;;
  6612                           
  6613                           
  6614                           ;psect for function _vw_tx_stop
  6615  09B7                     _vw_tx_stop:	
  6616                           
  6617                           ;virtualwire.c: 164: RA2 = 0;
  6618                           
  6619                           ;incstack = 0
  6620                           ; Regs used in _vw_tx_stop: [status,2]
  6621  09B7  1283               	bcf	3,5	;RP0=0, select bank0
  6622  09B8  1303               	bcf	3,6	;RP1=0, select bank0
  6623  09B9  1105               	bcf	5,2	;volatile
  6624                           
  6625                           ;virtualwire.c: 165: vw_tx_enabled = 0;
  6626  09BA  01D6               	clrf	_vw_tx_enabled
  6627  09BB  0008               	return
  6628  09BC                     __end_of_vw_tx_stop:	
  6629                           
  6630                           	psect	text37
  6631  0679                     __ptext37:	
  6632 ;; *************** function _vw_pll *****************
  6633 ;; Defined at:
  6634 ;;		line 262 in file "virtualwire.c"
  6635 ;; Parameters:    Size  Location     Type
  6636 ;;		None
  6637 ;; Auto vars:     Size  Location     Type
  6638 ;;  this_byte       1   10[COMMON] unsigned char 
  6639 ;; Return value:  Size  Location     Type
  6640 ;;                  1    wreg      void 
  6641 ;; Registers used:
  6642 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6643 ;; Tracked objects:
  6644 ;;		On entry : 0/0
  6645 ;;		On exit  : 0/0
  6646 ;;		Unchanged: 0/0
  6647 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6648 ;;      Params:         0       0       0       0       0
  6649 ;;      Locals:         3       0       0       0       0
  6650 ;;      Temps:          5       0       0       0       0
  6651 ;;      Totals:         8       0       0       0       0
  6652 ;;Total ram usage:        8 bytes
  6653 ;; Hardware stack levels used:    1
  6654 ;; Hardware stack levels required when called:    2
  6655 ;; This function calls:
  6656 ;;		_vw_symbol_6to4
  6657 ;; This function is called by:
  6658 ;;		_vw_isr_tmr0
  6659 ;; This function uses a non-reentrant model
  6660 ;;
  6661                           
  6662                           
  6663                           ;psect for function _vw_pll
  6664  0679                     _vw_pll:	
  6665                           
  6666                           ;virtualwire.c: 265: if (vw_rx_sample)
  6667                           
  6668                           ;incstack = 0
  6669 ;; hardware stack exceeded
  6670                           ; Regs used in _vw_pll: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6671  0679  1283               	bcf	3,5	;RP0=0, select bank0
  6672  067A  1303               	bcf	3,6	;RP1=0, select bank0
  6673  067B  0854               	movf	_vw_rx_sample,w
  6674  067C  1903               	btfsc	3,2
  6675  067D  2E82               	goto	i1l2269
  6676                           
  6677                           ;virtualwire.c: 266: vw_rx_integrator++;
  6678  067E  3001               	movlw	1
  6679  067F  00F3               	movwf	??_vw_pll
  6680  0680  0873               	movf	??_vw_pll,w
  6681  0681  07CF               	addwf	_vw_rx_integrator,f
  6682  0682                     i1l2269:	
  6683                           
  6684                           ;virtualwire.c: 268: if (vw_rx_sample != vw_rx_last_sample)
  6685  0682  0854               	movf	_vw_rx_sample,w
  6686  0683  0651               	xorwf	_vw_rx_last_sample,w
  6687  0684  1903               	skipnz
  6688  0685  2E99               	goto	i1l2281
  6689                           
  6690                           ;virtualwire.c: 269: {
  6691                           ;virtualwire.c: 271: vw_rx_pll_ramp += ((vw_rx_pll_ramp < 160/2)
  6692                           ;virtualwire.c: 272: ? ((160/8)-9)
  6693                           ;virtualwire.c: 273: : ((160/8)+9));
  6694  0686  3050               	movlw	80
  6695  0687  0253               	subwf	_vw_rx_pll_ramp,w
  6696  0688  1C03               	skipc
  6697  0689  2E8C               	goto	i1l2275
  6698  068A  301D               	movlw	29
  6699  068B  2E8D               	goto	L10
  6700  068C                     i1l2275:	
  6701  068C  300B               	movlw	11
  6702  068D                     L10:	
  6703  068D  00F8               	movwf	_vw_pll$266
  6704  068E  3000               	movlw	0
  6705  068F  00F9               	movwf	_vw_pll$266+1
  6706  0690  0878               	movf	_vw_pll$266,w
  6707  0691  00F3               	movwf	??_vw_pll
  6708  0692  0873               	movf	??_vw_pll,w
  6709  0693  07D3               	addwf	_vw_rx_pll_ramp,f
  6710                           
  6711                           ;virtualwire.c: 274: vw_rx_last_sample = vw_rx_sample;
  6712  0694  0854               	movf	_vw_rx_sample,w
  6713  0695  00F3               	movwf	??_vw_pll
  6714  0696  0873               	movf	??_vw_pll,w
  6715  0697  00D1               	movwf	_vw_rx_last_sample
  6716                           
  6717                           ;virtualwire.c: 275: }
  6718  0698  2E9D               	goto	i1l2283
  6719  0699                     i1l2281:	
  6720                           
  6721                           ;virtualwire.c: 276: else
  6722                           ;virtualwire.c: 277: {
  6723                           ;virtualwire.c: 280: vw_rx_pll_ramp += (160/8);
  6724  0699  3014               	movlw	20
  6725  069A  00F3               	movwf	??_vw_pll
  6726  069B  0873               	movf	??_vw_pll,w
  6727  069C  07D3               	addwf	_vw_rx_pll_ramp,f
  6728  069D                     i1l2283:	
  6729                           
  6730                           ;virtualwire.c: 281: }
  6731                           ;virtualwire.c: 282: if (vw_rx_pll_ramp >= 160)
  6732  069D  30A0               	movlw	160
  6733  069E  0253               	subwf	_vw_rx_pll_ramp,w
  6734  069F  1C03               	skipc
  6735  06A0  0008               	return
  6736                           
  6737                           ;virtualwire.c: 283: {
  6738                           ;virtualwire.c: 286: vw_rx_bits >>= 1;
  6739  06A1  3001               	movlw	1
  6740  06A2                     u243_25:	
  6741  06A2  1003               	clrc
  6742  06A3  0CC4               	rrf	_vw_rx_bits+1,f
  6743  06A4  0CC3               	rrf	_vw_rx_bits,f
  6744  06A5  3EFF               	addlw	-1
  6745  06A6  1D03               	skipz
  6746  06A7  2EA2               	goto	u243_25
  6747                           
  6748                           ;virtualwire.c: 290: if (vw_rx_integrator >= 5)
  6749  06A8  3005               	movlw	5
  6750  06A9  024F               	subwf	_vw_rx_integrator,w
  6751  06AA  1803               	btfsc	3,0
  6752                           
  6753                           ;virtualwire.c: 291: vw_rx_bits |= 0x800;
  6754  06AB  15C4               	bsf	_vw_rx_bits+1,3
  6755                           
  6756                           ;virtualwire.c: 293: vw_rx_pll_ramp -= 160;
  6757  06AC  30A0               	movlw	160
  6758  06AD  02D3               	subwf	_vw_rx_pll_ramp,f
  6759                           
  6760                           ;virtualwire.c: 294: vw_rx_integrator = 0;
  6761  06AE  01CF               	clrf	_vw_rx_integrator
  6762                           
  6763                           ;virtualwire.c: 296: if (vw_rx_active)
  6764  06AF  0849               	movf	_vw_rx_active,w
  6765  06B0  1903               	btfsc	3,2
  6766  06B1  2F0C               	goto	i1l2323
  6767                           
  6768                           ;virtualwire.c: 297: {
  6769                           ;virtualwire.c: 300: if (++vw_rx_bit_count >= 12)
  6770  06B2  3001               	movlw	1
  6771  06B3  00F3               	movwf	??_vw_pll
  6772  06B4  0873               	movf	??_vw_pll,w
  6773  06B5  07CA               	addwf	_vw_rx_bit_count,f
  6774  06B6  300C               	movlw	12
  6775  06B7  024A               	subwf	_vw_rx_bit_count,w
  6776  06B8  1C03               	skipc
  6777  06B9  0008               	return
  6778                           
  6779                           ;virtualwire.c: 301: {
  6780                           ;virtualwire.c: 305: uint8_t this_byte =
  6781                           ;virtualwire.c: 306: (vw_symbol_6to4(vw_rx_bits & 0x3f)) << 4
  6782                           ;virtualwire.c: 307: | vw_symbol_6to4(vw_rx_bits >> 6);
  6783  06BA  0844               	movf	_vw_rx_bits+1,w
  6784  06BB  00F4               	movwf	??_vw_pll+1
  6785  06BC  0843               	movf	_vw_rx_bits,w
  6786  06BD  00F3               	movwf	??_vw_pll
  6787  06BE  3006               	movlw	6
  6788  06BF                     u247_25:	
  6789  06BF  1003               	clrc
  6790  06C0  0CF4               	rrf	??_vw_pll+1,f
  6791  06C1  0CF3               	rrf	??_vw_pll,f
  6792  06C2  3EFF               	addlw	-1
  6793  06C3  1D03               	skipz
  6794  06C4  2EBF               	goto	u247_25
  6795  06C5  0873               	movf	??_vw_pll,w
  6796  06C6  120A  158A  2209  120A  118A  	fcall	_vw_symbol_6to4
  6797  06CB  00F5               	movwf	??_vw_pll+2
  6798  06CC  1283               	bcf	3,5	;RP0=0, select bank0
  6799  06CD  1303               	bcf	3,6	;RP1=0, select bank0
  6800  06CE  0843               	movf	_vw_rx_bits,w
  6801  06CF  393F               	andlw	63
  6802  06D0  120A  158A  2209  120A  118A  	fcall	_vw_symbol_6to4
  6803  06D5  00F6               	movwf	??_vw_pll+3
  6804  06D6  3003               	movlw	3
  6805  06D7                     u248_25:	
  6806  06D7  1003               	clrc
  6807  06D8  0DF6               	rlf	??_vw_pll+3,f
  6808  06D9  3EFF               	addlw	-1
  6809  06DA  1D03               	skipz
  6810  06DB  2ED7               	goto	u248_25
  6811  06DC  1003               	clrc
  6812  06DD  0D76               	rlf	??_vw_pll+3,w
  6813  06DE  0475               	iorwf	??_vw_pll+2,w
  6814  06DF  00F7               	movwf	??_vw_pll+4
  6815  06E0  0877               	movf	??_vw_pll+4,w
  6816  06E1  00FA               	movwf	vw_pll@this_byte
  6817                           
  6818                           ;virtualwire.c: 312: if (vw_rx_len == 0)
  6819  06E2  1283               	bcf	3,5	;RP0=0, select bank0
  6820  06E3  1303               	bcf	3,6	;RP1=0, select bank0
  6821  06E4  0852               	movf	_vw_rx_len,w
  6822  06E5  1D03               	btfss	3,2
  6823  06E6  2EF5               	goto	i1l2311
  6824                           
  6825                           ;virtualwire.c: 313: {
  6826                           ;virtualwire.c: 317: vw_rx_count = this_byte;
  6827  06E7  087A               	movf	vw_pll@this_byte,w
  6828  06E8  00F3               	movwf	??_vw_pll
  6829  06E9  0873               	movf	??_vw_pll,w
  6830  06EA  00CB               	movwf	_vw_rx_count
  6831                           
  6832                           ;virtualwire.c: 318: if (vw_rx_count < 4 || vw_rx_count > 10)
  6833  06EB  3004               	movlw	4
  6834  06EC  024B               	subwf	_vw_rx_count,w
  6835  06ED  1C03               	skipc
  6836  06EE  2EF3               	goto	i1l2307
  6837  06EF  300B               	movlw	11
  6838  06F0  024B               	subwf	_vw_rx_count,w
  6839  06F1  1C03               	skipc
  6840  06F2  2EF5               	goto	i1l2311
  6841  06F3                     i1l2307:	
  6842                           
  6843                           ;virtualwire.c: 319: {
  6844                           ;virtualwire.c: 321: vw_rx_active = 0;
  6845  06F3  01C9               	clrf	_vw_rx_active
  6846                           
  6847                           ;virtualwire.c: 322: return;
  6848  06F4  0008               	return
  6849  06F5                     i1l2311:	
  6850                           
  6851                           ;virtualwire.c: 323: }
  6852                           ;virtualwire.c: 324: }
  6853                           ;virtualwire.c: 325: vw_tx_buf[vw_rx_len++] = this_byte;
  6854  06F5  087A               	movf	vw_pll@this_byte,w
  6855  06F6  00F3               	movwf	??_vw_pll
  6856  06F7  0852               	movf	_vw_rx_len,w
  6857  06F8  3EB8               	addlw	(low (_vw_tx_buf| (0+256)))& (0+255)
  6858  06F9  0084               	movwf	4
  6859  06FA  0873               	movf	??_vw_pll,w
  6860  06FB  1783               	bsf	3,7	;select IRP bank3
  6861  06FC  0080               	movwf	0
  6862  06FD  3001               	movlw	1
  6863  06FE  00F3               	movwf	??_vw_pll
  6864  06FF  0873               	movf	??_vw_pll,w
  6865  0700  07D2               	addwf	_vw_rx_len,f
  6866                           
  6867                           ;virtualwire.c: 327: if (vw_rx_len >= vw_rx_count)
  6868  0701  084B               	movf	_vw_rx_count,w
  6869  0702  0252               	subwf	_vw_rx_len,w
  6870  0703  1C03               	skipc
  6871  0704  2F0A               	goto	i1l2321
  6872                           
  6873                           ;virtualwire.c: 328: {
  6874                           ;virtualwire.c: 330: vw_rx_active = 0;
  6875  0705  01C9               	clrf	_vw_rx_active
  6876                           
  6877                           ;virtualwire.c: 331: vw_rx_done = 1;
  6878  0706  3001               	movlw	1
  6879  0707  00F3               	movwf	??_vw_pll
  6880  0708  0873               	movf	??_vw_pll,w
  6881  0709  00CC               	movwf	_vw_rx_done	;volatile
  6882  070A                     i1l2321:	
  6883                           
  6884                           ;virtualwire.c: 332: }
  6885                           ;virtualwire.c: 333: vw_rx_bit_count = 0;
  6886  070A  01CA               	clrf	_vw_rx_bit_count
  6887                           
  6888                           ;virtualwire.c: 334: }
  6889                           ;virtualwire.c: 335: }
  6890  070B  0008               	return
  6891  070C                     i1l2323:	
  6892                           
  6893                           ;virtualwire.c: 337: else if (vw_rx_bits == 0xb38)
  6894  070C  3038               	movlw	56
  6895  070D  0643               	xorwf	_vw_rx_bits,w
  6896  070E  300B               	movlw	11
  6897  070F  1903               	skipnz
  6898  0710  0644               	xorwf	_vw_rx_bits+1,w
  6899  0711  1D03               	btfss	3,2
  6900  0712  0008               	return
  6901                           
  6902                           ;virtualwire.c: 338: {
  6903                           ;virtualwire.c: 340: vw_rx_active = 1;
  6904  0713  01C9               	clrf	_vw_rx_active
  6905  0714  0AC9               	incf	_vw_rx_active,f
  6906                           
  6907                           ;virtualwire.c: 341: vw_rx_bit_count = 0;
  6908  0715  01CA               	clrf	_vw_rx_bit_count
  6909                           
  6910                           ;virtualwire.c: 342: vw_rx_len = 0;
  6911  0716  01D2               	clrf	_vw_rx_len
  6912                           
  6913                           ;virtualwire.c: 343: vw_rx_done = 0;
  6914  0717  01CC               	clrf	_vw_rx_done	;volatile
  6915  0718  0008               	return
  6916  0719                     __end_of_vw_pll:	
  6917                           
  6918                           	psect	text38
  6919  0A09                     __ptext38:	
  6920 ;; *************** function _vw_symbol_6to4 *****************
  6921 ;; Defined at:
  6922 ;;		line 245 in file "virtualwire.c"
  6923 ;; Parameters:    Size  Location     Type
  6924 ;;  symbol          1    wreg     unsigned char 
  6925 ;; Auto vars:     Size  Location     Type
  6926 ;;  symbol          1    1[COMMON] unsigned char 
  6927 ;;  i               1    2[COMMON] unsigned char 
  6928 ;; Return value:  Size  Location     Type
  6929 ;;                  1    wreg      unsigned char 
  6930 ;; Registers used:
  6931 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  6932 ;; Tracked objects:
  6933 ;;		On entry : 0/0
  6934 ;;		On exit  : 0/0
  6935 ;;		Unchanged: 0/0
  6936 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6937 ;;      Params:         0       0       0       0       0
  6938 ;;      Locals:         2       0       0       0       0
  6939 ;;      Temps:          1       0       0       0       0
  6940 ;;      Totals:         3       0       0       0       0
  6941 ;;Total ram usage:        3 bytes
  6942 ;; Hardware stack levels used:    2
  6943 ;; This function calls:
  6944 ;;		Nothing
  6945 ;; This function is called by:
  6946 ;;		_vw_pll
  6947 ;; This function uses a non-reentrant model
  6948 ;;
  6949                           
  6950                           
  6951                           ;psect for function _vw_symbol_6to4
  6952  0A09                     _vw_symbol_6to4:	
  6953                           
  6954                           ;incstack = 0
  6955 ;; hardware stack exceeded
  6956                           ; Regs used in _vw_symbol_6to4: [wreg-fsr0h+status,2+status,0+pclath]
  6957                           ;vw_symbol_6to4@symbol stored from wreg
  6958  0A09  00F1               	movwf	vw_symbol_6to4@symbol
  6959                           
  6960                           ;virtualwire.c: 247: uint8_t i;
  6961                           ;virtualwire.c: 250: for (i = 0; i < 16; i++)
  6962  0A0A  01F2               	clrf	vw_symbol_6to4@i
  6963  0A0B  3010               	movlw	16
  6964  0A0C  0272               	subwf	vw_symbol_6to4@i,w
  6965  0A0D  1803               	btfsc	3,0
  6966  0A0E  2A24               	goto	i1l2079
  6967  0A0F                     i1l2069:	
  6968                           
  6969                           ;virtualwire.c: 251: if (symbol == symbols[i])
  6970  0A0F  0872               	movf	vw_symbol_6to4@i,w
  6971  0A10  3E13               	addlw	low ((_symbols-__stringbase)| (0+32768))
  6972  0A11  0084               	movwf	4
  6973  0A12  120A  118A  2723  120A  158A  	fcall	stringdir
  6974  0A17  0671               	xorwf	vw_symbol_6to4@symbol,w
  6975  0A18  1D03               	skipz
  6976  0A19  2A1C               	goto	i1l2075
  6977                           
  6978                           ;virtualwire.c: 252: return i;
  6979  0A1A  0872               	movf	vw_symbol_6to4@i,w
  6980  0A1B  0008               	return
  6981  0A1C                     i1l2075:	
  6982  0A1C  3001               	movlw	1
  6983  0A1D  00F0               	movwf	??_vw_symbol_6to4
  6984  0A1E  0870               	movf	??_vw_symbol_6to4,w
  6985  0A1F  07F2               	addwf	vw_symbol_6to4@i,f
  6986  0A20  3010               	movlw	16
  6987  0A21  0272               	subwf	vw_symbol_6to4@i,w
  6988  0A22  1C03               	skipc
  6989  0A23  2A0F               	goto	i1l2069
  6990  0A24                     i1l2079:	
  6991                           
  6992                           ;virtualwire.c: 254: return 0;
  6993  0A24  3000               	movlw	0
  6994  0A25  0008               	return
  6995  0A26                     __end_of_vw_symbol_6to4:	
  6996  007E                     btemp	set	126	;btemp
  6997  007E                     wtemp0	set	126


Data Sizes:
    Strings     75
    Constant    52
    Data        0
    BSS         111
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     35      60
    BANK1            80     52      78
    BANK3            96      0      60
    BANK2            96      0       0

Pointer List with Targets:

    strchr@ptr	PTR const unsigned char  size(1) Largest target is 2
		 -> STR_2(CODE[2]), STR_1(CODE[2]), 

    strspn@s2	PTR const unsigned char  size(1) Largest target is 2
		 -> STR_2(CODE[2]), STR_1(CODE[2]), 

    strspn@s1	PTR const unsigned char  size(1) Largest target is 10
		 -> text(BANK1[10]), NULL(NULL[0]), 

    sp__strchr	PTR unsigned char  size(1) Largest target is 2
		 -> STR_2(CODE[2]), NULL(NULL[0]), STR_1(CODE[2]), 

    strcspn@s2	PTR const unsigned char  size(1) Largest target is 2
		 -> STR_2(CODE[2]), STR_1(CODE[2]), 

    strcspn@s1	PTR const unsigned char  size(1) Largest target is 10
		 -> text(BANK1[10]), NULL(NULL[0]), 

    strtok@s2	PTR const unsigned char  size(1) Largest target is 2
		 -> STR_2(CODE[2]), STR_1(CODE[2]), 

    strtok@sp	PTR unsigned char  size(1) Largest target is 10
		 -> text(BANK1[10]), NULL(NULL[0]), 

    strtok@s1	PTR unsigned char  size(1) Largest target is 10
		 -> text(BANK1[10]), NULL(NULL[0]), 

    atoi@s	PTR const unsigned char  size(1) Largest target is 10
		 -> text(BANK1[10]), NULL(NULL[0]), 

    sprintf@cp	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_7(CODE[7]), sprintf@c(BANK1[1]), text(BANK1[10]), NULL(NULL[0]), 

    sprintf@f	PTR const unsigned char  size(1) Largest target is 19
		 -> STR_5(CODE[15]), STR_4(CODE[13]), STR_3(CODE[19]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 20
		 -> adcBuffer_1(BANK3[20]), adcBuffer_0(BANK3[20]), clockBuffer(BANK1[15]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?i1_sprintf(BANK0[2]), ?_sprintf(BANK1[2]), 

    vw_recv@buf	PTR unsigned char  size(1) Largest target is 10
		 -> text(BANK1[10]), 

    vw_recv@len	PTR unsigned char  size(1) Largest target is 1
		 -> main@len(BANK1[1]), 

    vw_crc@ptr	PTR unsigned char  size(1) Largest target is 20
		 -> vw_tx_buf(BANK3[20]), 

    _calc_timer0_prescaler@prescaler_bits	PTR unsigned char  size(1) Largest target is 1
		 -> vw_setup@prescaler_bits(BANK1[1]), 

    _calc_timer0_prescaler@k_tmr0	PTR unsigned char  size(1) Largest target is 1
		 -> vw_tmr0_value(BANK1[1]), 

    _calc_timer0_prescaler@prescaler_value	PTR unsigned int  size(1) Largest target is 2
		 -> vw_setup@prescaler_value(BANK1[2]), 

    sp__memcpy	PTR unsigned char  size(1) Largest target is 10
		 -> text(BANK1[10]), 

    memcpy@src	PTR unsigned char  size(1) Largest target is 20
		 -> vw_tx_buf(BANK3[20]), 

    memcpy@dest	PTR unsigned char  size(1) Largest target is 10
		 -> text(BANK1[10]), 

    main@value	PTR unsigned char  size(1) Largest target is 10
		 -> text(BANK1[10]), NULL(NULL[0]), 

    main@id	PTR unsigned char  size(1) Largest target is 10
		 -> text(BANK1[10]), NULL(NULL[0]), 

    parse_id_value@value	PTR PTR unsigned char  size(1) Largest target is 1
		 -> main@value(BANK1[1]), 

    sp__strtok	PTR unsigned char  size(1) Largest target is 10
		 -> text(BANK1[10]), NULL(NULL[0]), 

    parse_id_value@str	PTR unsigned char  size(1) Largest target is 10
		 -> text(BANK1[10]), 

    parse_id_value@id	PTR PTR unsigned char  size(1) Largest target is 1
		 -> main@id(BANK1[1]), 

    LCD_write_string@str	PTR unsigned char  size(2) Largest target is 20
		 -> STR_6(CODE[19]), adcBuffer_1(BANK3[20]), adcBuffer_0(BANK3[20]), clockBuffer(BANK1[15]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _global_isr in COMMON

    i1_sprintf->i1___lwmod
    i1___lwmod->i1___lwdiv
    _vw_isr_tmr0->_vw_pll
    _vw_pll->_vw_symbol_6to4

Critical Paths under _main in BANK0

    None.

Critical Paths under _global_isr in BANK0

    _global_isr->i1_sprintf

Critical Paths under _main in BANK1

    _main->_vw_setup
    _vw_setup->__calc_timer0_prescaler
    __calc_timer0_prescaler->___aldiv
    ___aldiv->___wmul
    _vw_recv->_vw_crc
    _vw_crc->__crc_ccitt_update
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _parse_id_value->_strtok
    _strtok->_strcspn
    _strtok->_strspn
    _strspn->_strchr
    _strcspn->_strchr
    _atoi->___wmul
    _LCD_write_string->_LCD_write_char
    _LCD_write_char->_LCD_set_port
    _LCD_set_cursor->_LCD_command
    _LCD_Init->_LCD_command
    _LCD_command->_LCD_set_port

Critical Paths under _global_isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _global_isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _global_isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 7     7      0   11136
                                             45 BANK1      7     7      0
                           _LCD_Init
                     _LCD_set_cursor
                   _LCD_write_string
                          _SYST_Init
                          _TMR1_Init
                               _atoi
                     _parse_id_value
                            _sprintf
                    _vw_have_message
                            _vw_recv
                        _vw_rx_start
                           _vw_setup
 ---------------------------------------------------------------------------------
 (1) _vw_setup                                             8     6      2    1977
                                             37 BANK1      8     6      2
             __calc_timer0_prescaler
 ---------------------------------------------------------------------------------
 (2) __calc_timer0_prescaler                              16    11      5    1742
                                             21 BANK1     16    11      5
                            ___aldiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___aldiv                                             15     7      8     575
                                              6 BANK1     15     7      8
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _vw_rx_start                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _vw_recv                                              6     5      1    1416
                                             22 BANK1      6     5      1
                             _memcpy
                             _vw_crc
 ---------------------------------------------------------------------------------
 (2) _vw_crc                                               6     4      2     810
                                             16 BANK1      6     4      2
                  __crc_ccitt_update
 ---------------------------------------------------------------------------------
 (3) __crc_ccitt_update                                   16    13      3     582
                                              0 BANK1     16    13      3
 ---------------------------------------------------------------------------------
 (2) _memcpy                                               7     4      3     322
                                              0 BANK1      7     4      3
 ---------------------------------------------------------------------------------
 (1) _vw_have_message                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             23    19      4    3131
                                             14 BANK1     19    15      4
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     362
                                              8 BANK1      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     371
                                              0 BANK1      8     4      4
 ---------------------------------------------------------------------------------
 (1) _parse_id_value                                       5     3      2    1812
                                             14 BANK1      5     3      2
                             _strtok
 ---------------------------------------------------------------------------------
 (2) _strtok                                               4     3      1    1559
                                             10 BANK1      4     3      1
                            _strcspn
                             _strspn
 ---------------------------------------------------------------------------------
 (3) _strspn                                               7     5      2     542
                                              3 BANK1      7     5      2
                             _strchr
 ---------------------------------------------------------------------------------
 (3) _strcspn                                              7     5      2     542
                                              3 BANK1      7     5      2
                             _strchr
 ---------------------------------------------------------------------------------
 (4) _strchr                                               3     1      2     314
                                              0 BANK1      3     1      2
 ---------------------------------------------------------------------------------
 (1) _atoi                                                 8     6      2     989
                                              6 BANK1      8     6      2
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              2     2      0      99
                                              0 BANK1      2     2      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     526
                                              0 BANK1      6     2      4
 ---------------------------------------------------------------------------------
 (1) _TMR1_Init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYST_Init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LCD_write_string                                     4     2      2     576
                                              3 BANK1      4     2      2
                     _LCD_write_char
 ---------------------------------------------------------------------------------
 (2) _LCD_write_char                                       2     2      0     186
                                              1 BANK1      2     2      0
                       _LCD_set_port
 ---------------------------------------------------------------------------------
 (1) _LCD_set_cursor                                       4     3      1     802
                                              4 BANK1      4     3      1
                        _LCD_command
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             2     2      0     155
                                              4 BANK1      2     2      0
                        _LCD_command
 ---------------------------------------------------------------------------------
 (2) _LCD_command                                          3     3      0     155
                                              1 BANK1      3     3      0
                       _LCD_set_port
 ---------------------------------------------------------------------------------
 (3) _LCD_set_port                                         1     1      0     124
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _global_isr                                          11    11      0    1871
                                             24 BANK0     11    11      0
                        _vw_isr_tmr0
                          i1_sprintf
 ---------------------------------------------------------------------------------
 (6) i1_sprintf                                           28    19      9    1690
                                              0 BANK0     24    15      9
                          i1___lwdiv
                          i1___lwmod
                           i1___wmul
                          i1_isdigit
 ---------------------------------------------------------------------------------
 (7) i1_isdigit                                            2     2      0      68
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (7) i1___wmul                                             6     2      4     144
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (7) i1___lwmod                                            6     2      4     211
                                              8 COMMON     6     2      4
                          i1___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (7) i1___lwdiv                                            8     4      4     214
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (6) _vw_isr_tmr0                                          2     2      0     181
                                             11 COMMON     2     2      0
                             _vw_pll
                         _vw_tx_stop
 ---------------------------------------------------------------------------------
 (7) _vw_tx_stop                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _vw_pll                                               8     8      0     181
                                              3 COMMON     8     8      0
                     _vw_symbol_6to4
 ---------------------------------------------------------------------------------
 (9) _vw_symbol_6to4                                       3     3      0     112
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_Init
     _LCD_command
       _LCD_set_port
   _LCD_set_cursor
     _LCD_command
       _LCD_set_port
   _LCD_write_string
     _LCD_write_char
       _LCD_set_port
   _SYST_Init
   _TMR1_Init
   _atoi
     ___wmul
     _isdigit
   _parse_id_value
     _strtok
       _strcspn
         _strchr
       _strspn
         _strchr
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
   _vw_have_message
   _vw_recv
     _memcpy
     _vw_crc
       __crc_ccitt_update
   _vw_rx_start
   _vw_setup
     __calc_timer0_prescaler
       ___aldiv
         ___wmul (ARG)
       ___wmul

 _global_isr (ROOT)
   _vw_isr_tmr0
     _vw_pll
       _vw_symbol_6to4
     _vw_tx_stop
   i1_sprintf
     i1___lwdiv
     i1___lwmod
       i1___lwdiv (ARG)
     i1___wmul
     i1_isdigit

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      D4       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     23      3C       5       75.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50     34      4E       7       97.5%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0      3C       9       62.5%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      D4      12        0.0%


Microchip Technology PIC Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Sun May 06 20:44:48 2018

                            parse_id_value@value 00AF                                                pc 0002  
                                    __CFG_CP$OFF 0000                          ?__calc_timer0_prescaler 00B5  
                                             l60 0B24                                               l61 0B2C  
                                             l62 0B2F                                               l63 0B37  
                                             l64 0B3A                                               l65 0B42  
                                             l59 0B21                                               _HH 0045  
                                             _MM 0046                                               _SS 0047  
                                             fsr 0004                              ___wmul@multiplicand 00A2  
                               i1___wmul@product 0074                                              l365 005B  
                                            l548 0F83                                              l493 0AAF  
                                            l904 0A29                                              _GIE 005F  
                                            _RA1 0029                                              _RA2 002A  
                                            _RB2 0032                                              _RB3 0033  
                                            _RB4 0034                                              _RB5 0035  
                                            _RB6 0036                                              _RB7 0037  
                         __end_of_parse_id_value 0AEC                                     __CFG_CPD$OFF 0000  
                                            fsr0 0004                                              indf 0000  
                      __end_of__crc_ccitt_update 0DBB                                     __CFG_FOSC$HS 0000  
                                   __CFG_LVP$OFF 0000                                             l3123 0AA7  
                                           l3321 0CBC                                             l3153 0FA4  
                                           l3145 0F94                                             l3307 09F6  
                                           l3251 0E10                                             l3243 0DE9  
                                           l3235 0DCE                                             l3323 0CCA  
                                           l3171 0FF7                                             l3163 0FDC  
                                           l3155 0FB4                                             l3253 0E11  
                                           l3229 0DC9                                             l3333 0CEB  
                                           l3261 0A66                                             l3191 0B88  
                                           l3183 0BD1                                             l3351 0C2E  
                                           l3511 0134                                             l3503 00FC  
                                           l3167 0FE9                                             l3177 0BAD  
                                           l3329 0CE0                                             l3345 0C12  
                                           l3513 0141                                             l3505 0113  
                                           l3521 014F                                             l3427 0B49  
                                           l3099 0A35                                             l3195 0BA0  
                                           l3179 0BB9                                             l3347 0C20  
                                           l3355 0C39                                             l3523 0166  
                                           l3283 0F6C                                             l3373 0D4B  
                                           l3381 0D5B                                             l3189 0B7C  
                                           l3533 0178                                             l3517 014A  
                                           l3293 0AF3                                             l3613 07C6  
                                           l3623 0E82                                             l3543 01B8  
                                           l3471 007D                                             l3295 0B13  
                                           l3607 07B2                                             l3377 0D52  
                                           l3369 0D44                                             l3641 0EA1  
                                           l3625 0E7B                                             l3545 01BC  
                                           l3465 0060                                             l3651 0EE4  
                                           l3643 0EA5                                             l3635 0E9B  
                                           l3627 0E87                                             l3571 01F1  
                                           l3563 01ED                                             l3555 01D4  
                                           l3539 0199                                             l3491 00CF  
                                           l3467 006B                                             l3459 0057  
                                           l3645 0ED3                                             l3557 01D8  
                                           l3493 00E9                                             l3573 0037  
                                           l3487 00CD                                             l3479 00B8  
                                           l3575 0234                                             l3497 00FA  
                                           l3587 0D1F                                             l3683 04B2  
                                           l3667 0458                                             l3679 049B  
                                           STR_1 07A6                                             STR_2 07A6  
                                           STR_3 0770                                             STR_4 0792  
                                           STR_5 0783                                             STR_6 075D  
                                           STR_7 079F                                     ?_LCD_command 0070  
                                           _T0CS 040D                                             u4025 0FA8  
                                           u4045 0FB6                                             u5007 0583  
                                           u4135 0C49                                             u4055 0FCB  
                                           u5017 059A                                             u4305 0CD7  
                                           u4065 0FDD                                             u5027 05B1  
                                           u4315 0CE1                                             u5037 05C8  
                                           u5047 0A5B                                             u4345 0C15  
                                           u4275 0CBF                                             _PEIE 005E  
                                           u4365 0C26                                             u4605 01A8  
                                           u4470 0A07                                             u4710 07FC  
                                           u4455 0D5E                                             u4295 0CCB  
                                           u4375 0C2F                                             u4545 00F1  
                                           u4750 07F3                                             u3935 0D7A  
                                           u4585 018F                                             u3945 0D93  
                                           u4690 0D2D                                             u3965 0AB0  
                                           u4927 0C5B                                             u3975 0AB7  
                                           u4937 0C70                                             u4947 0511  
                                           u4957 0522                                             u4967 0533  
                                           u4977 0544                                             u4987 0555  
                                           u4997 056C                                             _TMR0 0001  
                                   __CFG_WRT$OFF 0000                                             _atoi 0E78  
                                           _main 0439                                             _text 00E3  
                                           btemp 007E                                    __CFG_BOREN$ON 0000  
                                           start 0012                   __end_of__calc_timer0_prescaler 0F71  
                               __end_of_LCD_Init 05D8                                      _vw_isr_tmr0 05D8  
                                __end_of___aldiv 1000                                            ?_atoi 00A6  
                                          ?_main 0070                                    __CFG_WDTE$OFF 0000  
                                __end_of___lwdiv 0CF0                                            i1l132 0E1D  
                                          i1l139 0E6B                                  __end_of___lwmod 0C3E  
                                          i1l365 0267                                  ?_parse_id_value 00AE  
                                          i1l493 0A8C                                            _PORTA 0005  
                                          _PORTB 0006                                            _TRISA 0085  
                                          _TRISB 0086                           __crc_ccitt_update@data 00A2  
                                     i1isdigit@c 0071                                      _vw_rx_count 004B  
                                    _vw_rx_start 09BC                          __end_of_vw_have_message 07FE  
                                    _vw_tx_index 0058                               i1___lwmod@dividend 007A  
                             __size_of_TMR1_Init 000F                                  __end_of_dpowers 0755  
                                __end_of_isdigit 09F8                          LCD_set_port@value_4_bit 00A0  
                                          atoi@a 00AB                                            atoi@s 00AD  
                                          pclath 000A                                 __end_ofi1___wmul 0AA3  
                                  ?_LCD_set_port 0070                                            status 0003  
                            i1___wmul@multiplier 0070                                            wtemp0 007E  
                                __end_of_sprintf 023D                                  __end_of_strcspn 0BA7  
                                __end_of_vw_recv 07F5                                  __end_of_symbols 074B  
                             __size_ofi1___lwdiv 003C                               __size_ofi1___lwmod 0032  
                        __size_of_LCD_set_cursor 0042                                  __initialization 0015  
                                   __end_of_atoi 0EE9                                     __end_of_main 050B  
                               _vw_rx_integrator 004F                               __size_ofi1_isdigit 000E  
                             __size_of_SYST_Init 0011                                       i1sprintf@c 0037  
                                     i1sprintf@f 0022                  __calc_timer0_prescaler@aux_tmr0 00C2  
                              ?_LCD_write_string 00A3                                           ??_atoi 00A8  
                                         ??_main 00CD                               __size_ofi1_sprintf 01FC  
                             ??_LCD_write_string 00A5                           vw_setup@prescaler_bits 00CA  
                     __size_of__crc_ccitt_update 004A                                           _ADCON1 009F  
                                 ??_LCD_set_port 00A0                                           i1l2311 06F5  
                                         i1l2321 070A                                           i1l2075 0A1C  
                                         i1l2307 06F3                                           i1l2323 070C  
                                         i1l2411 09D7                                           i1l2069 0A0F  
                                         i1l2079 0A24                                           i1l2281 0699  
                                         i1l2433 0CA2                                           i1l2425 0C7E  
                                         i1l2283 069D                                           i1l2275 068C  
                                         i1l2603 066B                                           i1l2427 0C8C  
                                         i1l2451 0BEC                                           i1l2269 0682  
                                         i1l2437 0CAD                                           i1l2455 0BFA  
                                         i1l2391 0A84                                           i1l2449 0BDE  
                                         i1l2459 0C05                                           i1l2565 05F4  
                                         i1l2583 062F                                           i1l2575 0622  
                                         i1l2567 05F8                                           i1l2593 0646  
                                         i1l2921 03BA                                           i1l2841 026C  
                                         i1l2595 065E                                           i1l2587 0636  
                                         i1l2931 03D2                                           i1l2915 0397  
                                         i1l2843 0277                                           i1l2835 0263  
                                         i1l2933 03D6                                           i1l2909 0376  
                                         i1l2919 03B6                                           i1l2863 02D9  
                                         i1l2855 02C4                                           i1l2951 0430  
                                         i1l2847 0289                                           i1l2881 0319  
                                         i1l2873 0300                                           i1l2947 03EF  
                                         i1l2939 03EB                                           i1l2867 02DB  
                                         i1l2893 0348                                           i1l2869 02F1  
                                         i1l2949 0243                                           i1l2887 0332  
                                         i1l2879 0302                                           i1l2983 0E3C  
                                         i1l2889 033F                                           i1l2897 034D  
                                         i1l2899 0364                                           i1l2989 0E45  
                                         u310_24 064F                                           u310_25 064D  
                                         u311_20 065B                                           u304_24 0614  
                                         u304_25 0612                                           u305_20 061F  
                                         u243_25 06A2                                           u270_25 0A8D  
                                         u247_25 06BF                                           u271_25 0A94  
                                         u248_25 06D7                                           u280_25 0CA3  
                                         u361_25 038D                                           u283_25 0BE1  
                                         u363_25 03A6                                           u276_25 0C81  
                                         u285_25 0BF2                                           u357_25 02F7  
                                         u278_25 0C8D                                           u286_25 0BFB  
                                         u279_25 0C99                                           _TMR0IE 005D  
                                         _TMR0IF 005A                                           _TMR1IE 0460  
                                         _TMR1IF 0060                                           _TMR1CS 0081  
                                         _TMR1ON 0080                                           _TRISA1 0429  
                                         _TRISA2 042A                                    i1sprintf@flag 002C  
                                   _vw_rx_active 0049                                    i1sprintf@prec 002F  
                                 __CFG_PWRTE$OFF 0000                                     _vw_rx_sample 0054  
                                   _vw_tx_header 0057                                __end_of_TMR1_Init 09E8  
                                      ??___aldiv 00AE                                           ___wmul 0AA3  
                                   _vw_tx_sample 005A                                 _vw_tx_buf_header 0755  
                                      ??___lwdiv 00A4                                        ??___lwmod 00AC  
                        __size_of_LCD_write_char 0038                                           _memcpy 0A63  
                                         main@id 00D2                                           _vw_crc 0AEC  
                                         _strchr 0A26                                           _vw_pll 0679  
                               ??_vw_symbol_6to4 0070                                           _strtok 0DBB  
                                         _strspn 0BA7                                __end_ofi1___lwdiv 0CB2  
                              __end_ofi1___lwmod 0C0A                                        ??_isdigit 00A0  
                                         saved_w 007E                                 ?_vw_have_message 0070  
                                      ??_sprintf 00B2                                        ??_strcspn 00A5  
                                      ??_vw_recv 00B7                                _vw_rx_last_sample 0051  
                              __end_ofi1_isdigit 09D9                                __end_of_SYST_Init 0A09  
                               __end_of_vw_setup 0D2F                               _vw_rx_enabled_last 004E  
                        __end_of__initialization 002D                                        ?_LCD_Init 0070  
                           __size_of_LCD_command 001F                                __end_ofi1_sprintf 0439  
                                 __pcstackCOMMON 0070                                        ?i1___wmul 0070  
                                    i1sprintf@ap 0030                                      i1sprintf@cp 0031  
                                    i1sprintf@sp 0020                                     sprintf@width 00BE  
                                     __pbssBANK0 0043                                       __pbssBANK1 00D4  
                                     __pbssBANK3 0190                                       ??_LCD_Init 00A4  
                        vw_setup@prescaler_value 00CB                                   _LCD_set_cursor 0D2F  
                                     __pmaintext 0439                                    _vw_tmr0_value 00ED  
                                        ?___wmul 00A0                                       __pintentry 0004  
                               ??_parse_id_value 00B0                                          ?_memcpy 00A0  
                                   ?_vw_isr_tmr0 0070                             __end_of_LCD_set_port 0B46  
                                     ??i1___wmul 0074                                          ?_vw_crc 00B0  
                                        ?_strchr 00A0                                          ?_vw_pll 0070  
                                        ?_strtok 00AA                                          ?_strspn 00A3  
                                  i1_isdigit$506 0070                                     ?_vw_rx_start 0070  
                                     __stringtab 0719                                       _global_isr 0E15  
                                 i1sprintf@width 0035                                    _vw_rx_enabled 004D  
                         __end_of_LCD_set_cursor 0D71                     __calc_timer0_prescaler@brate 00B5  
                                  _vw_tx_enabled 0056                                          ___aldiv 0F71  
                                __size_of___wmul 0023                                   _LCD_write_char 0C3E  
                                        ___lwdiv 0CB2                                          ___lwmod 0C0A  
                                __size_of_memcpy 001F                                          __ptext1 0CF0  
                                        __ptext2 0EE9                                          __ptext3 0F71  
                                        __ptext4 09BC                                          __ptext5 07A8  
                                        __ptext6 0AEC                                          __ptext7 0D71  
                                        __ptext8 0A63                                          __ptext9 07F5  
                                      ?_vw_setup 00C5                                  __size_of_vw_crc 002C  
                                __size_of_strchr 001E                                  __size_of_vw_pll 00A0  
                                      _T1CONbits 0010                                  __size_of_strtok 005A  
                                __size_of_strspn 0031                                          _dpowers 074B  
                              i1___lwdiv@divisor 0070                                          _isdigit 09E8  
                              i1___lwdiv@counter 0077                                 ___aldiv@dividend 00AA  
                                        main@len 00D1                                          _sprintf 0031  
                                        clrloop0 09C4                         __end_of_vw_tx_buf_header 075D  
                                        _strcspn 0B76                                          _vw_recv 07A8  
                                        _symbols 073B                             end_of_initialization 002D  
                                   vw_recv@rxlen 00BB                        __size_of_LCD_write_string 0030  
                                        memcpy@n 00A1                                  vw_symbol_6to4@i 0072  
                                ?_LCD_set_cursor 00A4                           __end_of_LCD_write_char 0C76  
                               ___aldiv@quotient 00B1                            i1___wmul@multiplicand 0072  
                                      _TMR1_Init 09D9                                          strspn@i 00A7  
                                     ??_vw_setup 00C7                                      _adcBuffer_0 0190  
                                    _adcBuffer_1 01A4                                        i1___lwdiv 0C76  
                                      i1___lwmod 0BD8                             vw_symbol_6to4@symbol 0071  
                                    ?_global_isr 0070                         ??__calc_timer0_prescaler 00BA  
                                      i1_isdigit 09CB                                       main@int_id 00CF  
                                      _SYST_Init 09F8                                  _vw_rx_bit_count 004A  
                                     _vw_pll$266 0078                                __size_of_LCD_Init 00CD  
                          __size_of_LCD_set_port 002E                                  ?_LCD_write_char 0070  
                                      i1_sprintf 023D                                   __end_of___wmul 0AC6  
                          __crc_ccitt_update@crc 00A0                                       _vw_rx_bits 0043  
                                     _vw_rx_done 004C                                       ?_TMR1_Init 0070  
                              i1___lwmod@divisor 0078                                       _vw_tx_stop 09B7  
                                 __end_of_memcpy 0A82                                i1___lwmod@counter 007D  
                           __size_of_vw_isr_tmr0 00A1                                  vw_pll@this_byte 007A  
                                 __end_of_vw_crc 0B18                                   __end_of_strchr 0A44  
                                 __end_of_vw_pll 0719                                   __end_of_strtok 0E15  
                                 __end_of_strspn 0BD8  __end_of__calc_timer0_prescaler@prescaler_factor 073B  
        __calc_timer0_prescaler@prescaler_factor 0729                              start_initialization 0015  
                              __size_ofi1___wmul 0021                                       ?i1___lwdiv 0070  
                                     ?i1___lwmod 0078                                    ??_LCD_command 00A1  
                           __size_of_vw_rx_start 0007                                LCD_set_cursor@row 00A7  
                                   _LCD_set_port 0B18                         __size_of_vw_have_message 0009  
                                     ?i1_isdigit 0070                                       ?_SYST_Init 0070  
                    LCD_set_cursor@ddram_address 00A6                                     i1sprintf@len 0033  
                                   i1sprintf@val 002D            __calc_timer0_prescaler@prescaler_bits 00B8  
                                     memcpy@dest 00A6                                       ?i1_sprintf 0020  
                                       ??___wmul 00A4                             LCD_set_cursor@column 00A4  
                                       ??_memcpy 00A3                              __size_of_global_isr 0063  
                                       ??_vw_crc 00B2                                         ??_strchr 00A2  
                                       ??_vw_pll 0073                                         ??_strtok 00AB  
                                       ??_strspn 00A5                                        ___latbits 0002  
                                  __pcstackBANK0 0020                                    __pcstackBANK1 00A0  
                        __size_of_vw_symbol_6to4 001D                              LCD_write_string@str 00A3  
                               _LCD_write_string 0B46                                      sprintf@flag 00B5  
                                    sprintf@prec 00B8                  __size_of__calc_timer0_prescaler 0088  
                            __end_of_LCD_command 0A63                                 ___lwdiv@dividend 00A2  
                                    vw_crc@count 00B0                                         ?___aldiv 00A6  
                                       ?___lwdiv 00A0                                         ?___lwmod 00A8  
                                    ??_TMR1_Init 00A0                                        __pstrings 0719  
                                    ?_vw_tx_stop 0070                                      _clockBuffer 00D4  
                                       ?_isdigit 0070                                __size_of_vw_setup 003F  
                               ___lwdiv@quotient 00A6                                      ??i1___lwdiv 0074  
                                    ??i1___lwmod 007C                                 ??_LCD_set_cursor 00A5  
                                       ?_sprintf 00AE                                         ?_strcspn 00A3  
                                       ?_vw_recv 00B6                                  LCD_write_char@c 00A2  
                                ___aldiv@divisor 00A6                                interrupt_function 0004  
                                ___aldiv@counter 00AF                                         _LCD_Init 050B  
                                 ___wmul@product 00A4                                      ??i1_isdigit 0070  
                                      clear_ram0 09C3                                      ??_SYST_Init 00A0  
                                    ??i1_sprintf 0029                                ??_vw_have_message 00A0  
                              parse_id_value@str 00B2                                      __stringbase 0728  
                              ___wmul@multiplier 00A0                                         i1___wmul 0A82  
                         __calc_timer0_prescaler 0EE9                                        main@value 00D3  
                        __size_of_parse_id_value 0026                                        _vw_rx_len 0052  
                                      _vw_tx_bit 0055                                        _vw_tx_buf 01B8  
                                      _vw_tx_len 0059                                      _LCD_command 0A44  
                                   ??_global_isr 0038           __calc_timer0_prescaler@prescaler_value 00B7  
                  __calc_timer0_prescaler@k_tmr0 00B9                                 ??_LCD_write_char 00A1  
                                 _vw_rx_inverted 0050                              __size_of_vw_tx_stop 0005  
                  __calc_timer0_prescaler@pindex 00C4                                   _vw_rx_pll_ramp 0053  
                                      memcpy@src 00A0                                 __size_of___aldiv 008F  
                               __size_of___lwdiv 003E                                 __size_of___lwmod 0034  
                             __end_of__stringtab 0729                                      _isdigit$506 00A0  
                             __end_of_global_isr 0E78                                       sprintf@len 00BC  
                                     sprintf@val 00B6                                 __size_of_isdigit 0010  
                                ___lwdiv@divisor 00A0                                  ___lwdiv@counter 00A5  
                                       __ptext10 0031                                         __ptext11 0C0A  
                                       __ptext20 0AA3                                         __ptext12 0CB2  
                                       __ptext21 09D9                                         __ptext13 0AC6  
                                       __ptext30 023D                                         __ptext22 09F8  
                                       __ptext14 0DBB                                         __ptext31 09CB  
                                       __ptext23 0B46                                         __ptext15 0BA7  
                                       __ptext32 0A82                                         __ptext24 0C3E  
                                       __ptext16 0B76                                         __ptext33 0BD8  
                                       __ptext25 0D2F                                         __ptext17 0A26  
                                       __ptext34 0C76                                         __ptext26 050B  
                                       __ptext18 0E78                                         __ptext35 05D8  
                                       __ptext27 0A44                                         __ptext19 09E8  
                                       __ptext36 09B7                                         __ptext28 0B18  
                                       __ptext37 0679                                         __ptext29 0E15  
                                       __ptext38 0A09                                   _vw_symbol_6to4 0A09  
                               __size_of_sprintf 020C                                 __size_of_strcspn 0031  
                               __size_of_vw_recv 004D                               i1___lwdiv@dividend 0072  
                                  __size_of_atoi 0071                                    __size_of_main 00D2  
                                     vw_recv@buf 00BA                                       vw_recv@len 00B6  
                                       atoi@sign 00AA                                 parse_id_value@id 00AE  
                                  ??_vw_isr_tmr0 007B                         __end_of_LCD_write_string 0B76  
                                       _vw_setup 0CF0                               i1___lwdiv@quotient 0075  
                                  ??_vw_rx_start 00A0                           __end_of_vw_symbol_6to4 0A26  
                                       isdigit@c 00A1                               LCD_command@command 00A3  
                              LCD_write_string@j 00A6                                         intlevel1 0000  
                                      sprintf@ap 00B9                                        sprintf@cp 00BA  
                                      sprintf@sp 00AE                                        vw_crc@crc 00B4  
                                      strchr@chr 00A0                                        vw_crc@ptr 00B3  
                                   _timerCounter 0048                                 ___lwmod@dividend 00AA  
                                      strchr@ptr 00A2                                        strcspn@s1 00A9  
                                      strcspn@s2 00A3                                        stringcode 0723  
                                   ??_vw_tx_stop 0070                                       _OPTION_REG 0081  
                                       sprintf@c 00C0                                         sprintf@f 00B0  
                                ___lwmod@divisor 00A8                                  ___lwmod@counter 00AD  
                                       strcspn@i 00A7                              __end_of_vw_isr_tmr0 0679  
                                 _parse_id_value 0AC6                                         stringdir 0723  
                                       stringtab 0719                                     ___aldiv@sign 00B0  
                                       strtok@s1 00AD                                         strtok@s2 00AA  
                                       strspn@s1 00A9                                         strspn@s2 00A3  
                                       strtok@sp 005B                                  ?_vw_symbol_6to4 0070  
                              __crc_ccitt_update 0D71                               ?__crc_ccitt_update 00A0  
                            __end_of_vw_rx_start 09C3                                  _vw_have_message 07F5  
                             __end_of_vw_tx_stop 09BC                              ??__crc_ccitt_update 00A3  
                                  vw_setup@brate 00C5  
