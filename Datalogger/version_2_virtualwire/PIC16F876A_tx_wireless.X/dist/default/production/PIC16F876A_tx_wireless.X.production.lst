

Microchip Technology PIC LITE Macro Assembler V1.40 build -251452761 
                                                                                               Sun May 06 18:43:48 2018

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	16F876A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	maintext,global,class=CODE,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,delta=2
    15                           	psect	text2,local,class=CODE,merge=1,delta=2
    16                           	psect	text3,local,class=CODE,merge=1,delta=2
    17                           	psect	text4,local,class=CODE,merge=1,delta=2
    18                           	psect	text5,local,class=CODE,merge=1,delta=2
    19                           	psect	text6,local,class=CODE,merge=1,delta=2
    20                           	psect	text7,local,class=CODE,merge=1,delta=2
    21                           	psect	text8,local,class=CODE,merge=1,delta=2
    22                           	psect	text9,local,class=CODE,merge=1,delta=2
    23                           	psect	text10,local,class=CODE,merge=1,delta=2
    24                           	psect	text11,local,class=CODE,merge=1,delta=2
    25                           	psect	text12,local,class=CODE,merge=1,delta=2
    26                           	psect	text13,local,class=CODE,merge=1,delta=2
    27                           	psect	text14,local,class=CODE,merge=1,delta=2
    28                           	psect	text15,local,class=CODE,merge=1,delta=2
    29                           	psect	intentry,global,class=CODE,delta=2
    30                           	psect	text16,local,class=CODE,merge=1,delta=2
    31                           	psect	text17,local,class=CODE,merge=1,delta=2
    32                           	psect	text18,local,class=CODE,merge=1,delta=2
    33                           	psect	text19,local,class=CODE,merge=1,delta=2
    34                           	dabs	1,0x7E,2
    35  0000                     
    36                           ; Version 1.40
    37                           ; Generated 01/12/2016 GMT
    38                           ; 
    39                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    40                           ; All rights reserved.
    41                           ; 
    42                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    43                           ; 
    44                           ; Redistribution and use in source and binary forms, with or without modification, are
    45                           ; permitted provided that the following conditions are met:
    46                           ; 
    47                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    48                           ;        conditions and the following disclaimer.
    49                           ; 
    50                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    51                           ;        of conditions and the following disclaimer in the documentation and/or other
    52                           ;        materials provided with the distribution.
    53                           ; 
    54                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    55                           ;        software without specific prior written permission.
    56                           ; 
    57                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    58                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    59                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    60                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    61                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    62                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    63                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    64                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    65                           ; 
    66                           ; 
    67                           ; Code-generator required, PIC16F876A Definitions
    68                           ; 
    69                           ; SFR Addresses
    70  0000                     	;# 
    71  0001                     	;# 
    72  0002                     	;# 
    73  0003                     	;# 
    74  0004                     	;# 
    75  0005                     	;# 
    76  0006                     	;# 
    77  0007                     	;# 
    78  000A                     	;# 
    79  000B                     	;# 
    80  000C                     	;# 
    81  000D                     	;# 
    82  000E                     	;# 
    83  000E                     	;# 
    84  000F                     	;# 
    85  0010                     	;# 
    86  0011                     	;# 
    87  0012                     	;# 
    88  0013                     	;# 
    89  0014                     	;# 
    90  0015                     	;# 
    91  0015                     	;# 
    92  0016                     	;# 
    93  0017                     	;# 
    94  0018                     	;# 
    95  0019                     	;# 
    96  001A                     	;# 
    97  001B                     	;# 
    98  001B                     	;# 
    99  001C                     	;# 
   100  001D                     	;# 
   101  001E                     	;# 
   102  001F                     	;# 
   103  0081                     	;# 
   104  0085                     	;# 
   105  0086                     	;# 
   106  0087                     	;# 
   107  008C                     	;# 
   108  008D                     	;# 
   109  008E                     	;# 
   110  0091                     	;# 
   111  0092                     	;# 
   112  0093                     	;# 
   113  0094                     	;# 
   114  0098                     	;# 
   115  0099                     	;# 
   116  009C                     	;# 
   117  009D                     	;# 
   118  009E                     	;# 
   119  009F                     	;# 
   120  010C                     	;# 
   121  010D                     	;# 
   122  010E                     	;# 
   123  010F                     	;# 
   124  018C                     	;# 
   125  018D                     	;# 
   126  0000                     	;# 
   127  0001                     	;# 
   128  0002                     	;# 
   129  0003                     	;# 
   130  0004                     	;# 
   131  0005                     	;# 
   132  0006                     	;# 
   133  0007                     	;# 
   134  000A                     	;# 
   135  000B                     	;# 
   136  000C                     	;# 
   137  000D                     	;# 
   138  000E                     	;# 
   139  000E                     	;# 
   140  000F                     	;# 
   141  0010                     	;# 
   142  0011                     	;# 
   143  0012                     	;# 
   144  0013                     	;# 
   145  0014                     	;# 
   146  0015                     	;# 
   147  0015                     	;# 
   148  0016                     	;# 
   149  0017                     	;# 
   150  0018                     	;# 
   151  0019                     	;# 
   152  001A                     	;# 
   153  001B                     	;# 
   154  001B                     	;# 
   155  001C                     	;# 
   156  001D                     	;# 
   157  001E                     	;# 
   158  001F                     	;# 
   159  0081                     	;# 
   160  0085                     	;# 
   161  0086                     	;# 
   162  0087                     	;# 
   163  008C                     	;# 
   164  008D                     	;# 
   165  008E                     	;# 
   166  0091                     	;# 
   167  0092                     	;# 
   168  0093                     	;# 
   169  0094                     	;# 
   170  0098                     	;# 
   171  0099                     	;# 
   172  009C                     	;# 
   173  009D                     	;# 
   174  009E                     	;# 
   175  009F                     	;# 
   176  010C                     	;# 
   177  010D                     	;# 
   178  010E                     	;# 
   179  010F                     	;# 
   180  018C                     	;# 
   181  018D                     	;# 
   182                           
   183                           	psect	strings
   184  0678                     __pstrings:	
   185  0678                     stringtab:	
   186  0678                     __stringtab:	
   187  0678                     stringcode:	
   188                           ;	String table - string pointers are 1 byte each
   189                           
   190  0678                     stringdir:	
   191  0678  3006               	movlw	high stringdir
   192  0679  008A               	movwf	10
   193  067A  0804               	movf	4,w
   194  067B  0A84               	incf	4,f
   195  067C  0782               	addwf	2,f
   196  067D                     __stringbase:	
   197  067D  3400               	retlw	0
   198  067E                     __end_of__stringtab:	
   199  067E                     _dpowers:	
   200  067E  3401               	retlw	1
   201  067F  3400               	retlw	0
   202  0680  3400               	retlw	0
   203  0681  3400               	retlw	0
   204  0682  340A               	retlw	10
   205  0683  3400               	retlw	0
   206  0684  3400               	retlw	0
   207  0685  3400               	retlw	0
   208  0686  3464               	retlw	100
   209  0687  3400               	retlw	0
   210  0688  3400               	retlw	0
   211  0689  3400               	retlw	0
   212  068A  34E8               	retlw	232
   213  068B  3403               	retlw	3
   214  068C  3400               	retlw	0
   215  068D  3400               	retlw	0
   216  068E  3410               	retlw	16
   217  068F  3427               	retlw	39
   218  0690  3400               	retlw	0
   219  0691  3400               	retlw	0
   220  0692  34A0               	retlw	160
   221  0693  3486               	retlw	134
   222  0694  3401               	retlw	1
   223  0695  3400               	retlw	0
   224  0696  3440               	retlw	64
   225  0697  3442               	retlw	66
   226  0698  340F               	retlw	15
   227  0699  3400               	retlw	0
   228  069A  3480               	retlw	128
   229  069B  3496               	retlw	150
   230  069C  3498               	retlw	152
   231  069D  3400               	retlw	0
   232  069E  3400               	retlw	0
   233  069F  34E1               	retlw	225
   234  06A0  34F5               	retlw	245
   235  06A1  3405               	retlw	5
   236  06A2  3400               	retlw	0
   237  06A3  34CA               	retlw	202
   238  06A4  349A               	retlw	154
   239  06A5  343B               	retlw	59
   240  06A6                     __end_of_dpowers:	
   241  06A6                     __calc_timer0_prescaler@prescaler_factor:	
   242  06A6  3401               	retlw	1
   243  06A7  3400               	retlw	0
   244  06A8  3402               	retlw	2
   245  06A9  3400               	retlw	0
   246  06AA  3404               	retlw	4
   247  06AB  3400               	retlw	0
   248  06AC  3408               	retlw	8
   249  06AD  3400               	retlw	0
   250  06AE  3410               	retlw	16
   251  06AF  3400               	retlw	0
   252  06B0  3420               	retlw	32
   253  06B1  3400               	retlw	0
   254  06B2  3440               	retlw	64
   255  06B3  3400               	retlw	0
   256  06B4  3480               	retlw	128
   257  06B5  3400               	retlw	0
   258  06B6  3400               	retlw	0
   259  06B7  3401               	retlw	1
   260  06B8                     __end_of__calc_timer0_prescaler@prescaler_factor:	
   261  06B8                     _symbols:	
   262  06B8  340D               	retlw	13
   263  06B9  340E               	retlw	14
   264  06BA  3413               	retlw	19
   265  06BB  3415               	retlw	21
   266  06BC  3416               	retlw	22
   267  06BD  3419               	retlw	25
   268  06BE  341A               	retlw	26
   269  06BF  341C               	retlw	28
   270  06C0  3423               	retlw	35
   271  06C1  3425               	retlw	37
   272  06C2  3426               	retlw	38
   273  06C3  3429               	retlw	41
   274  06C4  342A               	retlw	42
   275  06C5  342C               	retlw	44
   276  06C6  3432               	retlw	50
   277  06C7  3434               	retlw	52
   278  06C8                     __end_of_symbols:	
   279  06C8                     _vw_tx_buf_header:	
   280  06C8  342A               	retlw	42
   281  06C9  342A               	retlw	42
   282  06CA  342A               	retlw	42
   283  06CB  342A               	retlw	42
   284  06CC  342A               	retlw	42
   285  06CD  342A               	retlw	42
   286  06CE  3438               	retlw	56
   287  06CF  342C               	retlw	44
   288  06D0                     __end_of_vw_tx_buf_header:	
   289  001F                     _ADCON0bits	set	31
   290  001E                     _ADRESH	set	30
   291  0001                     _TMR0	set	1
   292  00FE                     _ADCS0	set	254
   293  00FF                     _ADCS1	set	255
   294  00F8                     _ADON	set	248
   295  005F                     _GIE	set	95
   296  00FA                     _GO_nDONE	set	250
   297  005E                     _PEIE	set	94
   298  0030                     _RB0	set	48
   299  0031                     _RB1	set	49
   300  005D                     _TMR0IE	set	93
   301  005A                     _TMR0IF	set	90
   302  009E                     _ADRESL	set	158
   303  0081                     _OPTION_REG	set	129
   304  04FF                     _ADFM	set	1279
   305  04F8                     _PCFG0	set	1272
   306  04F9                     _PCFG1	set	1273
   307  04FA                     _PCFG2	set	1274
   308  04FB                     _PCFG3	set	1275
   309  040D                     _T0CS	set	1037
   310  0428                     _TRISA0	set	1064
   311  0429                     _TRISA1	set	1065
   312  0430                     _TRISB0	set	1072
   313  0431                     _TRISB1	set	1073
   314  06D0                     STR_1:	
   315  06D0  3425               	retlw	37	;'%'
   316  06D1  3475               	retlw	117	;'u'
   317  06D2  342C               	retlw	44	;','
   318  06D3  3425               	retlw	37	;'%'
   319  06D4  346C               	retlw	108	;'l'
   320  06D5  3475               	retlw	117	;'u'
   321  06D6  3400               	retlw	0
   322  06D0                     
   323                           ; #config settings
   324  0000                     
   325                           	psect	cinit
   326  0015                     start_initialization:	
   327  0015                     __initialization:	
   328                           
   329                           ; Clear objects allocated to COMMON
   330  0015  01FD               	clrf	__pbssCOMMON& (0+127)
   331                           
   332                           ; Clear objects allocated to BANK0
   333  0016  1283               	bcf	3,5	;RP0=0, select bank0
   334  0017  1303               	bcf	3,6	;RP1=0, select bank0
   335  0018  01DA               	clrf	__pbssBANK0& (0+127)
   336  0019  01DB               	clrf	(__pbssBANK0+1)& (0+127)
   337  001A  01DC               	clrf	(__pbssBANK0+2)& (0+127)
   338  001B  01DD               	clrf	(__pbssBANK0+3)& (0+127)
   339  001C  01DE               	clrf	(__pbssBANK0+4)& (0+127)
   340  001D  01DF               	clrf	(__pbssBANK0+5)& (0+127)
   341  001E  01E0               	clrf	(__pbssBANK0+6)& (0+127)
   342                           
   343                           ; Clear objects allocated to BANK1
   344  001F  1383               	bcf	3,7	;select IRP bank0
   345  0020  30A0               	movlw	low __pbssBANK1
   346  0021  0084               	movwf	4
   347  0022  30DC               	movlw	low (__pbssBANK1+60)
   348  0023  120A  158A  2746   	fcall	clear_ram0
   349  0026                     end_of_initialization:	
   350                           ;End of C runtime variable initialization code
   351                           
   352  0026                     __end_of__initialization:	
   353  0026  0183               	clrf	3
   354  0027  120A  118A  2960   	ljmp	_main	;jump to C main() function
   355                           
   356                           	psect	bssCOMMON
   357  007D                     __pbssCOMMON:	
   358  007D                     _vw_rx_len:	
   359  007D                     	ds	1
   360                           
   361                           	psect	bssBANK0
   362  005A                     __pbssBANK0:	
   363  005A                     _vw_rx_count:	
   364  005A                     	ds	1
   365  005B                     _vw_rx_sample:	
   366  005B                     	ds	1
   367  005C                     _vw_tx_bit:	
   368  005C                     	ds	1
   369  005D                     _vw_tx_enabled:	
   370  005D                     	ds	1
   371  005E                     _vw_tx_index:	
   372  005E                     	ds	1
   373  005F                     _vw_tx_sample:	
   374  005F                     	ds	1
   375  0060                     _vw_tmr0_value:	
   376  0060                     	ds	1
   377                           
   378                           	psect	bssBANK1
   379  00A0                     __pbssBANK1:	
   380  00A0                     _vw_rx_bits:	
   381  00A0                     	ds	2
   382  00A2                     _vw_rx_active:	
   383  00A2                     	ds	1
   384  00A3                     _vw_rx_bit_count:	
   385  00A3                     	ds	1
   386  00A4                     _vw_rx_done:	
   387  00A4                     	ds	1
   388  00A5                     _vw_rx_enabled:	
   389  00A5                     	ds	1
   390  00A6                     _vw_rx_enabled_last:	
   391  00A6                     	ds	1
   392  00A7                     _vw_rx_integrator:	
   393  00A7                     	ds	1
   394  00A8                     _vw_rx_last_sample:	
   395  00A8                     	ds	1
   396  00A9                     _vw_rx_pll_ramp:	
   397  00A9                     	ds	1
   398  00AA                     _vw_tx_header:	
   399  00AA                     	ds	1
   400  00AB                     _vw_tx_len:	
   401  00AB                     	ds	1
   402  00AC                     _vw_tx_buf:	
   403  00AC                     	ds	48
   404                           
   405                           	psect	clrtext
   406  0F46                     clear_ram0:	
   407                           ;	Called with FSR containing the base address, and
   408                           ;	W with the last address+1
   409                           
   410  0F46  0064               	clrwdt	;clear the watchdog before getting into this loop
   411  0F47                     clrloop0:	
   412  0F47  0180               	clrf	0	;clear RAM location pointed to by FSR
   413  0F48  0A84               	incf	4,f	;increment pointer
   414  0F49  0604               	xorwf	4,w	;XOR with final address
   415  0F4A  1903               	btfsc	3,2	;have we reached the end yet?
   416  0F4B  3400               	retlw	0	;all done for this memory range, return
   417  0F4C  0604               	xorwf	4,w	;XOR again to restore value
   418  0F4D  2F47               	goto	clrloop0	;do the next byte
   419                           
   420                           	psect	cstackBANK1
   421  00DC                     __pcstackBANK1:	
   422  00DC                     main@adcBuffer:	
   423                           
   424                           ; 7 bytes @ 0x0
   425  00DC                     	ds	7
   426  00E3                     main@adcValue_0:	
   427                           
   428                           ; 4 bytes @ 0x7
   429  00E3                     	ds	4
   430  00E7                     main@adcValue_1:	
   431                           
   432                           ; 4 bytes @ 0xB
   433  00E7                     	ds	4
   434                           
   435                           	psect	cstackCOMMON
   436  0070                     __pcstackCOMMON:	
   437  0070                     ?_vw_isr_tmr0:	
   438  0070                     ?_ADC_Init:	
   439                           ; 1 bytes @ 0x0
   440                           
   441  0070                     ?_global_isr:	
   442                           ; 1 bytes @ 0x0
   443                           
   444  0070                     ?_main:	
   445                           ; 1 bytes @ 0x0
   446                           
   447  0070                     ?_vw_wait_tx:	
   448                           ; 1 bytes @ 0x0
   449                           
   450  0070                     ?_vw_tx_stop:	
   451                           ; 1 bytes @ 0x0
   452                           
   453  0070                     ??_vw_tx_stop:	
   454                           ; 1 bytes @ 0x0
   455                           
   456  0070                     ?_vw_tx_start:	
   457                           ; 1 bytes @ 0x0
   458                           
   459  0070                     ?_vw_symbol_6to4:	
   460                           ; 1 bytes @ 0x0
   461                           
   462  0070                     ??_vw_symbol_6to4:	
   463                           ; 1 bytes @ 0x0
   464                           
   465  0070                     ?_vw_pll:	
   466                           ; 1 bytes @ 0x0
   467                           
   468                           
   469                           ; 1 bytes @ 0x0
   470  0070                     	ds	1
   471  0071                     vw_symbol_6to4@symbol:	
   472                           
   473                           ; 1 bytes @ 0x1
   474  0071                     	ds	1
   475  0072                     vw_symbol_6to4@i:	
   476                           
   477                           ; 1 bytes @ 0x2
   478  0072                     	ds	1
   479  0073                     ??_vw_pll:	
   480                           
   481                           ; 1 bytes @ 0x3
   482  0073                     	ds	5
   483  0078                     _vw_pll$212:	
   484                           
   485                           ; 2 bytes @ 0x8
   486  0078                     	ds	2
   487  007A                     vw_pll@this_byte:	
   488                           
   489                           ; 1 bytes @ 0xA
   490  007A                     	ds	1
   491  007B                     ??_vw_isr_tmr0:	
   492                           
   493                           ; 1 bytes @ 0xB
   494  007B                     	ds	2
   495                           
   496                           	psect	cstackBANK0
   497  0020                     __pcstackBANK0:	
   498  0020                     ??_global_isr:	
   499                           
   500                           ; 1 bytes @ 0x0
   501  0020                     	ds	4
   502  0024                     ??_ADC_Init:	
   503  0024                     ??_vw_wait_tx:	
   504                           ; 1 bytes @ 0x4
   505                           
   506  0024                     ??_vw_tx_start:	
   507                           ; 1 bytes @ 0x4
   508                           
   509  0024                     ?_ADC_Read:	
   510                           ; 1 bytes @ 0x4
   511                           
   512  0024                     ?__crc_ccitt_update:	
   513                           ; 2 bytes @ 0x4
   514                           
   515  0024                     ?___wmul:	
   516                           ; 2 bytes @ 0x4
   517                           
   518  0024                     ?___lldiv:	
   519                           ; 2 bytes @ 0x4
   520                           
   521  0024                     __crc_ccitt_update@crc:	
   522                           ; 4 bytes @ 0x4
   523                           
   524  0024                     ___wmul@multiplier:	
   525                           ; 2 bytes @ 0x4
   526                           
   527  0024                     ___lldiv@divisor:	
   528                           ; 2 bytes @ 0x4
   529                           
   530                           
   531                           ; 4 bytes @ 0x4
   532  0024                     	ds	2
   533  0026                     ??_ADC_Read:	
   534  0026                     __crc_ccitt_update@data:	
   535                           ; 1 bytes @ 0x6
   536                           
   537  0026                     ___wmul@multiplicand:	
   538                           ; 1 bytes @ 0x6
   539                           
   540                           
   541                           ; 2 bytes @ 0x6
   542  0026                     	ds	1
   543  0027                     ??__crc_ccitt_update:	
   544                           
   545                           ; 1 bytes @ 0x7
   546  0027                     	ds	1
   547  0028                     ??___wmul:	
   548  0028                     ADC_Read@channel:	
   549                           ; 1 bytes @ 0x8
   550                           
   551  0028                     ___wmul@product:	
   552                           ; 1 bytes @ 0x8
   553                           
   554  0028                     ___lldiv@dividend:	
   555                           ; 2 bytes @ 0x8
   556                           
   557                           
   558                           ; 4 bytes @ 0x8
   559  0028                     	ds	1
   560  0029                     ?___lmul:	
   561  0029                     ___lmul@multiplier:	
   562                           ; 4 bytes @ 0x9
   563                           
   564                           
   565                           ; 4 bytes @ 0x9
   566  0029                     	ds	1
   567  002A                     ?___aldiv:	
   568  002A                     ___aldiv@divisor:	
   569                           ; 4 bytes @ 0xA
   570                           
   571                           
   572                           ; 4 bytes @ 0xA
   573  002A                     	ds	2
   574  002C                     ??___lldiv:	
   575                           
   576                           ; 1 bytes @ 0xC
   577  002C                     	ds	1
   578  002D                     ___lmul@multiplicand:	
   579  002D                     ___lldiv@quotient:	
   580                           ; 4 bytes @ 0xD
   581                           
   582                           
   583                           ; 4 bytes @ 0xD
   584  002D                     	ds	1
   585  002E                     ___aldiv@dividend:	
   586                           
   587                           ; 4 bytes @ 0xE
   588  002E                     	ds	3
   589  0031                     ??___lmul:	
   590  0031                     ___lldiv@counter:	
   591                           ; 1 bytes @ 0x11
   592                           
   593                           
   594                           ; 1 bytes @ 0x11
   595  0031                     	ds	1
   596  0032                     ??___aldiv:	
   597  0032                     ?___llmod:	
   598                           ; 1 bytes @ 0x12
   599                           
   600  0032                     ___lmul@product:	
   601                           ; 4 bytes @ 0x12
   602                           
   603  0032                     ___llmod@divisor:	
   604                           ; 4 bytes @ 0x12
   605                           
   606                           
   607                           ; 4 bytes @ 0x12
   608  0032                     	ds	1
   609  0033                     ___aldiv@counter:	
   610                           
   611                           ; 1 bytes @ 0x13
   612  0033                     	ds	1
   613  0034                     ?_vw_send:	
   614  0034                     vw_send@len:	
   615                           ; 1 bytes @ 0x14
   616                           
   617  0034                     ___aldiv@sign:	
   618                           ; 1 bytes @ 0x14
   619                           
   620                           
   621                           ; 1 bytes @ 0x14
   622  0034                     	ds	1
   623  0035                     ??_vw_send:	
   624  0035                     ___aldiv@quotient:	
   625                           ; 1 bytes @ 0x15
   626                           
   627                           
   628                           ; 4 bytes @ 0x15
   629  0035                     	ds	1
   630  0036                     ___llmod@dividend:	
   631                           
   632                           ; 4 bytes @ 0x16
   633  0036                     	ds	3
   634  0039                     ?__calc_timer0_prescaler:	
   635  0039                     vw_send@count:	
   636                           ; 1 bytes @ 0x19
   637                           
   638  0039                     __calc_timer0_prescaler@brate:	
   639                           ; 1 bytes @ 0x19
   640                           
   641                           
   642                           ; 2 bytes @ 0x19
   643  0039                     	ds	1
   644  003A                     ??___llmod:	
   645  003A                     vw_send@buf:	
   646                           ; 1 bytes @ 0x1A
   647                           
   648                           
   649                           ; 1 bytes @ 0x1A
   650  003A                     	ds	1
   651  003B                     __calc_timer0_prescaler@prescaler_value:	
   652  003B                     vw_send@i:	
   653                           ; 1 bytes @ 0x1B
   654                           
   655  003B                     ___llmod@counter:	
   656                           ; 1 bytes @ 0x1B
   657                           
   658                           
   659                           ; 1 bytes @ 0x1B
   660  003B                     	ds	1
   661  003C                     ?_sprintf:	
   662  003C                     __calc_timer0_prescaler@prescaler_bits:	
   663                           ; 2 bytes @ 0x1C
   664                           
   665  003C                     sprintf@f:	
   666                           ; 1 bytes @ 0x1C
   667                           
   668  003C                     vw_send@crc:	
   669                           ; 1 bytes @ 0x1C
   670                           
   671                           
   672                           ; 2 bytes @ 0x1C
   673  003C                     	ds	1
   674  003D                     __calc_timer0_prescaler@k_tmr0:	
   675                           
   676                           ; 1 bytes @ 0x1D
   677  003D                     	ds	1
   678  003E                     ??__calc_timer0_prescaler:	
   679  003E                     vw_send@p:	
   680                           ; 1 bytes @ 0x1E
   681                           
   682                           
   683                           ; 1 bytes @ 0x1E
   684  003E                     	ds	1
   685  003F                     vw_send@index:	
   686                           
   687                           ; 1 bytes @ 0x1F
   688  003F                     	ds	4
   689  0043                     ??_sprintf:	
   690                           
   691                           ; 1 bytes @ 0x23
   692  0043                     	ds	3
   693  0046                     __calc_timer0_prescaler@aux_tmr0:	
   694                           
   695                           ; 2 bytes @ 0x26
   696  0046                     	ds	2
   697  0048                     __calc_timer0_prescaler@pindex:	
   698  0048                     sprintf@flag:	
   699                           ; 1 bytes @ 0x28
   700                           
   701                           
   702                           ; 1 bytes @ 0x28
   703  0048                     	ds	1
   704  0049                     ?_vw_setup:	
   705  0049                     vw_setup@brate:	
   706                           ; 1 bytes @ 0x29
   707                           
   708  0049                     sprintf@prec:	
   709                           ; 2 bytes @ 0x29
   710                           
   711                           
   712                           ; 2 bytes @ 0x29
   713  0049                     	ds	2
   714  004B                     ??_vw_setup:	
   715  004B                     sprintf@val:	
   716                           ; 1 bytes @ 0x2B
   717                           
   718                           
   719                           ; 4 bytes @ 0x2B
   720  004B                     	ds	3
   721  004E                     vw_setup@prescaler_bits:	
   722                           
   723                           ; 1 bytes @ 0x2E
   724  004E                     	ds	1
   725  004F                     sprintf@ap:	
   726  004F                     vw_setup@prescaler_value:	
   727                           ; 1 bytes @ 0x2F
   728                           
   729                           
   730                           ; 2 bytes @ 0x2F
   731  004F                     	ds	1
   732  0050                     sprintf@sp:	
   733                           
   734                           ; 1 bytes @ 0x30
   735  0050                     	ds	1
   736  0051                     sprintf@c:	
   737                           
   738                           ; 1 bytes @ 0x31
   739  0051                     	ds	1
   740  0052                     ??_main:	
   741                           
   742                           ; 1 bytes @ 0x32
   743  0052                     	ds	8
   744                           
   745                           	psect	maintext
   746  0160                     __pmaintext:	
   747 ;;
   748 ;;Main: autosize = 0, tempsize = 8, incstack = 0, save=0
   749 ;;
   750 ;; *************** function _main *****************
   751 ;; Defined at:
   752 ;;		line 23 in file "main.c"
   753 ;; Parameters:    Size  Location     Type
   754 ;;		None
   755 ;; Auto vars:     Size  Location     Type
   756 ;;  adcValue_1      4   11[BANK1 ] unsigned long 
   757 ;;  adcValue_0      4    7[BANK1 ] unsigned long 
   758 ;;  adcBuffer       7    0[BANK1 ] unsigned char [7]
   759 ;; Return value:  Size  Location     Type
   760 ;;                  1    wreg      void 
   761 ;; Registers used:
   762 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   763 ;; Tracked objects:
   764 ;;		On entry : B00/0
   765 ;;		On exit  : 0/0
   766 ;;		Unchanged: 0/0
   767 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   768 ;;      Params:         0       0       0       0       0
   769 ;;      Locals:         0       0      15       0       0
   770 ;;      Temps:          0       8       0       0       0
   771 ;;      Totals:         0       8      15       0       0
   772 ;;Total ram usage:       23 bytes
   773 ;; Hardware stack levels required when called:    8
   774 ;; This function calls:
   775 ;;		_ADC_Init
   776 ;;		_ADC_Read
   777 ;;		___lmul
   778 ;;		_sprintf
   779 ;;		_vw_send
   780 ;;		_vw_setup
   781 ;; This function is called by:
   782 ;;		Startup code after reset
   783 ;; This function uses a non-reentrant model
   784 ;;
   785                           
   786                           
   787                           ;psect for function _main
   788  0160                     _main:	
   789                           
   790                           ;main.c: 25: ADC_Init();
   791                           
   792                           ;incstack = 0
   793                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   794  0160  120A  158A  275C  120A  118A  	fcall	_ADC_Init
   795                           
   796                           ;main.c: 26: vw_setup(200);
   797  0165  30C8               	movlw	200
   798  0166  1283               	bcf	3,5	;RP0=0, select bank0
   799  0167  1303               	bcf	3,6	;RP1=0, select bank0
   800  0168  00C9               	movwf	vw_setup@brate
   801  0169  3000               	movlw	0
   802  016A  00CA               	movwf	vw_setup@brate+1
   803  016B  120A  118A  276F  120A  118A  	fcall	_vw_setup
   804  0170                     l2127:	
   805                           ;main.c: 29: char adcBuffer[7];
   806                           ;main.c: 31: while(1)
   807                           
   808                           
   809                           ;main.c: 32: {
   810                           ;main.c: 33: unsigned long adcValue_0 = (unsigned long) ADC_Read(0) * 100 / 1024;
   811  0170  3000               	movlw	0
   812  0171  120A  118A  27B4  120A  118A  	fcall	_ADC_Read
   813  0176  1283               	bcf	3,5	;RP0=0, select bank0
   814  0177  1303               	bcf	3,6	;RP1=0, select bank0
   815  0178  0824               	movf	?_ADC_Read,w
   816  0179  00D2               	movwf	??_main
   817  017A  0825               	movf	?_ADC_Read+1,w
   818  017B  00D3               	movwf	??_main+1
   819  017C  01D4               	clrf	??_main+2
   820  017D  01D5               	clrf	??_main+3
   821  017E  0855               	movf	??_main+3,w
   822  017F  00AC               	movwf	___lmul@multiplier+3
   823  0180  0854               	movf	??_main+2,w
   824  0181  00AB               	movwf	___lmul@multiplier+2
   825  0182  0853               	movf	??_main+1,w
   826  0183  00AA               	movwf	___lmul@multiplier+1
   827  0184  0852               	movf	??_main,w
   828  0185  00A9               	movwf	___lmul@multiplier
   829  0186  3000               	movlw	0
   830  0187  00B0               	movwf	___lmul@multiplicand+3
   831  0188  3000               	movlw	0
   832  0189  00AF               	movwf	___lmul@multiplicand+2
   833  018A  3000               	movlw	0
   834  018B  00AE               	movwf	___lmul@multiplicand+1
   835  018C  3064               	movlw	100
   836  018D  00AD               	movwf	___lmul@multiplicand
   837  018E  120A  158A  27BF  120A  118A  	fcall	___lmul
   838  0193  1283               	bcf	3,5	;RP0=0, select bank0
   839  0194  1303               	bcf	3,6	;RP1=0, select bank0
   840  0195  0829               	movf	?___lmul,w
   841  0196  00D6               	movwf	??_main+4
   842  0197  082A               	movf	?___lmul+1,w
   843  0198  00D7               	movwf	??_main+5
   844  0199  082B               	movf	?___lmul+2,w
   845  019A  00D8               	movwf	??_main+6
   846  019B  082C               	movf	?___lmul+3,w
   847  019C  00D9               	movwf	??_main+7
   848  019D  300A               	movlw	10
   849  019E                     u2705:	
   850  019E  1003               	clrc
   851  019F  0CD9               	rrf	??_main+7,f
   852  01A0  0CD8               	rrf	??_main+6,f
   853  01A1  0CD7               	rrf	??_main+5,f
   854  01A2  0CD6               	rrf	??_main+4,f
   855  01A3  3EFF               	addlw	-1
   856  01A4  1D03               	skipz
   857  01A5  299E               	goto	u2705
   858  01A6  0859               	movf	??_main+7,w
   859  01A7  1683               	bsf	3,5	;RP0=1, select bank1
   860  01A8  1303               	bcf	3,6	;RP1=0, select bank1
   861  01A9  00E6               	movwf	(main@adcValue_0+3)^(0+128)
   862  01AA  1283               	bcf	3,5	;RP0=0, select bank0
   863  01AB  1303               	bcf	3,6	;RP1=0, select bank0
   864  01AC  0858               	movf	??_main+6,w
   865  01AD  1683               	bsf	3,5	;RP0=1, select bank1
   866  01AE  1303               	bcf	3,6	;RP1=0, select bank1
   867  01AF  00E5               	movwf	(main@adcValue_0+2)^(0+128)
   868  01B0  1283               	bcf	3,5	;RP0=0, select bank0
   869  01B1  1303               	bcf	3,6	;RP1=0, select bank0
   870  01B2  0857               	movf	??_main+5,w
   871  01B3  1683               	bsf	3,5	;RP0=1, select bank1
   872  01B4  1303               	bcf	3,6	;RP1=0, select bank1
   873  01B5  00E4               	movwf	(main@adcValue_0+1)^(0+128)
   874  01B6  1283               	bcf	3,5	;RP0=0, select bank0
   875  01B7  1303               	bcf	3,6	;RP1=0, select bank0
   876  01B8  0856               	movf	??_main+4,w
   877  01B9  1683               	bsf	3,5	;RP0=1, select bank1
   878  01BA  1303               	bcf	3,6	;RP1=0, select bank1
   879  01BB  00E3               	movwf	main@adcValue_0^(0+128)
   880                           
   881                           ;main.c: 34: unsigned long adcValue_1 = (unsigned long) ADC_Read(1) * 100 / 1024;
   882  01BC  3001               	movlw	1
   883  01BD  120A  118A  27B4  120A  118A  	fcall	_ADC_Read
   884  01C2  1283               	bcf	3,5	;RP0=0, select bank0
   885  01C3  1303               	bcf	3,6	;RP1=0, select bank0
   886  01C4  0824               	movf	?_ADC_Read,w
   887  01C5  00D2               	movwf	??_main
   888  01C6  0825               	movf	?_ADC_Read+1,w
   889  01C7  00D3               	movwf	??_main+1
   890  01C8  01D4               	clrf	??_main+2
   891  01C9  01D5               	clrf	??_main+3
   892  01CA  0855               	movf	??_main+3,w
   893  01CB  00AC               	movwf	___lmul@multiplier+3
   894  01CC  0854               	movf	??_main+2,w
   895  01CD  00AB               	movwf	___lmul@multiplier+2
   896  01CE  0853               	movf	??_main+1,w
   897  01CF  00AA               	movwf	___lmul@multiplier+1
   898  01D0  0852               	movf	??_main,w
   899  01D1  00A9               	movwf	___lmul@multiplier
   900  01D2  3000               	movlw	0
   901  01D3  00B0               	movwf	___lmul@multiplicand+3
   902  01D4  3000               	movlw	0
   903  01D5  00AF               	movwf	___lmul@multiplicand+2
   904  01D6  3000               	movlw	0
   905  01D7  00AE               	movwf	___lmul@multiplicand+1
   906  01D8  3064               	movlw	100
   907  01D9  00AD               	movwf	___lmul@multiplicand
   908  01DA  120A  158A  27BF  120A  118A  	fcall	___lmul
   909  01DF  1283               	bcf	3,5	;RP0=0, select bank0
   910  01E0  1303               	bcf	3,6	;RP1=0, select bank0
   911  01E1  0829               	movf	?___lmul,w
   912  01E2  00D6               	movwf	??_main+4
   913  01E3  082A               	movf	?___lmul+1,w
   914  01E4  00D7               	movwf	??_main+5
   915  01E5  082B               	movf	?___lmul+2,w
   916  01E6  00D8               	movwf	??_main+6
   917  01E7  082C               	movf	?___lmul+3,w
   918  01E8  00D9               	movwf	??_main+7
   919  01E9  300A               	movlw	10
   920  01EA                     u2715:	
   921  01EA  1003               	clrc
   922  01EB  0CD9               	rrf	??_main+7,f
   923  01EC  0CD8               	rrf	??_main+6,f
   924  01ED  0CD7               	rrf	??_main+5,f
   925  01EE  0CD6               	rrf	??_main+4,f
   926  01EF  3EFF               	addlw	-1
   927  01F0  1D03               	skipz
   928  01F1  29EA               	goto	u2715
   929  01F2  0859               	movf	??_main+7,w
   930  01F3  1683               	bsf	3,5	;RP0=1, select bank1
   931  01F4  1303               	bcf	3,6	;RP1=0, select bank1
   932  01F5  00EA               	movwf	(main@adcValue_1+3)^(0+128)
   933  01F6  1283               	bcf	3,5	;RP0=0, select bank0
   934  01F7  1303               	bcf	3,6	;RP1=0, select bank0
   935  01F8  0858               	movf	??_main+6,w
   936  01F9  1683               	bsf	3,5	;RP0=1, select bank1
   937  01FA  1303               	bcf	3,6	;RP1=0, select bank1
   938  01FB  00E9               	movwf	(main@adcValue_1+2)^(0+128)
   939  01FC  1283               	bcf	3,5	;RP0=0, select bank0
   940  01FD  1303               	bcf	3,6	;RP1=0, select bank0
   941  01FE  0857               	movf	??_main+5,w
   942  01FF  1683               	bsf	3,5	;RP0=1, select bank1
   943  0200  1303               	bcf	3,6	;RP1=0, select bank1
   944  0201  00E8               	movwf	(main@adcValue_1+1)^(0+128)
   945  0202  1283               	bcf	3,5	;RP0=0, select bank0
   946  0203  1303               	bcf	3,6	;RP1=0, select bank0
   947  0204  0856               	movf	??_main+4,w
   948  0205  1683               	bsf	3,5	;RP0=1, select bank1
   949  0206  1303               	bcf	3,6	;RP1=0, select bank1
   950  0207  00E7               	movwf	main@adcValue_1^(0+128)
   951                           
   952                           ;main.c: 36: sprintf(adcBuffer, "%u,%lu", 0, adcValue_0);
   953  0208  3053               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   954  0209  1283               	bcf	3,5	;RP0=0, select bank0
   955  020A  1303               	bcf	3,6	;RP1=0, select bank0
   956  020B  00D2               	movwf	??_main
   957  020C  0852               	movf	??_main,w
   958  020D  00BC               	movwf	sprintf@f
   959  020E  3000               	movlw	0
   960  020F  00BD               	movwf	?_sprintf+1
   961  0210  00BE               	movwf	?_sprintf+2
   962  0211  1683               	bsf	3,5	;RP0=1, select bank1
   963  0212  1303               	bcf	3,6	;RP1=0, select bank1
   964  0213  0866               	movf	(main@adcValue_0+3)^(0+128),w
   965  0214  1283               	bcf	3,5	;RP0=0, select bank0
   966  0215  1303               	bcf	3,6	;RP1=0, select bank0
   967  0216  00C2               	movwf	?_sprintf+6
   968  0217  1683               	bsf	3,5	;RP0=1, select bank1
   969  0218  1303               	bcf	3,6	;RP1=0, select bank1
   970  0219  0865               	movf	(main@adcValue_0+2)^(0+128),w
   971  021A  1283               	bcf	3,5	;RP0=0, select bank0
   972  021B  1303               	bcf	3,6	;RP1=0, select bank0
   973  021C  00C1               	movwf	?_sprintf+5
   974  021D  1683               	bsf	3,5	;RP0=1, select bank1
   975  021E  1303               	bcf	3,6	;RP1=0, select bank1
   976  021F  0864               	movf	(main@adcValue_0+1)^(0+128),w
   977  0220  1283               	bcf	3,5	;RP0=0, select bank0
   978  0221  1303               	bcf	3,6	;RP1=0, select bank0
   979  0222  00C0               	movwf	?_sprintf+4
   980  0223  1683               	bsf	3,5	;RP0=1, select bank1
   981  0224  1303               	bcf	3,6	;RP1=0, select bank1
   982  0225  0863               	movf	main@adcValue_0^(0+128),w
   983  0226  1283               	bcf	3,5	;RP0=0, select bank0
   984  0227  1303               	bcf	3,6	;RP1=0, select bank0
   985  0228  00BF               	movwf	?_sprintf+3
   986  0229  30DC               	movlw	(low (main@adcBuffer| 0))& (0+255)
   987  022A  120A  118A  228A  120A  118A  	fcall	_sprintf
   988                           
   989                           ;main.c: 37: vw_send(adcBuffer, sizeof(adcBuffer) - 1);
   990  022F  3006               	movlw	6
   991  0230  1283               	bcf	3,5	;RP0=0, select bank0
   992  0231  1303               	bcf	3,6	;RP1=0, select bank0
   993  0232  00D2               	movwf	??_main
   994  0233  0852               	movf	??_main,w
   995  0234  00B4               	movwf	vw_send@len
   996  0235  30DC               	movlw	(low (main@adcBuffer| 0))& (0+255)
   997  0236  120A  118A  202A  120A  118A  	fcall	_vw_send
   998                           
   999                           ;main.c: 39: _delay((unsigned long)((10)*(8000000/4000.0)));
  1000  023B  301A               	movlw	26
  1001  023C  1283               	bcf	3,5	;RP0=0, select bank0
  1002  023D  1303               	bcf	3,6	;RP1=0, select bank0
  1003  023E  00D3               	movwf	??_main+1
  1004  023F  30F7               	movlw	247
  1005  0240  00D2               	movwf	??_main
  1006  0241                     u2737:	
  1007  0241  0BD2               	decfsz	??_main,f
  1008  0242  2A41               	goto	u2737
  1009  0243  0BD3               	decfsz	??_main+1,f
  1010  0244  2A41               	goto	u2737
  1011  0245  2A46               	nop2
  1012                           
  1013                           ;main.c: 41: sprintf(adcBuffer, "%u,%lu", 1, adcValue_1);
  1014  0246  3053               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1015  0247  1283               	bcf	3,5	;RP0=0, select bank0
  1016  0248  1303               	bcf	3,6	;RP1=0, select bank0
  1017  0249  00D2               	movwf	??_main
  1018  024A  0852               	movf	??_main,w
  1019  024B  00BC               	movwf	sprintf@f
  1020  024C  3001               	movlw	1
  1021  024D  00BD               	movwf	?_sprintf+1
  1022  024E  3000               	movlw	0
  1023  024F  00BE               	movwf	?_sprintf+2
  1024  0250  1683               	bsf	3,5	;RP0=1, select bank1
  1025  0251  1303               	bcf	3,6	;RP1=0, select bank1
  1026  0252  086A               	movf	(main@adcValue_1+3)^(0+128),w
  1027  0253  1283               	bcf	3,5	;RP0=0, select bank0
  1028  0254  1303               	bcf	3,6	;RP1=0, select bank0
  1029  0255  00C2               	movwf	?_sprintf+6
  1030  0256  1683               	bsf	3,5	;RP0=1, select bank1
  1031  0257  1303               	bcf	3,6	;RP1=0, select bank1
  1032  0258  0869               	movf	(main@adcValue_1+2)^(0+128),w
  1033  0259  1283               	bcf	3,5	;RP0=0, select bank0
  1034  025A  1303               	bcf	3,6	;RP1=0, select bank0
  1035  025B  00C1               	movwf	?_sprintf+5
  1036  025C  1683               	bsf	3,5	;RP0=1, select bank1
  1037  025D  1303               	bcf	3,6	;RP1=0, select bank1
  1038  025E  0868               	movf	(main@adcValue_1+1)^(0+128),w
  1039  025F  1283               	bcf	3,5	;RP0=0, select bank0
  1040  0260  1303               	bcf	3,6	;RP1=0, select bank0
  1041  0261  00C0               	movwf	?_sprintf+4
  1042  0262  1683               	bsf	3,5	;RP0=1, select bank1
  1043  0263  1303               	bcf	3,6	;RP1=0, select bank1
  1044  0264  0867               	movf	main@adcValue_1^(0+128),w
  1045  0265  1283               	bcf	3,5	;RP0=0, select bank0
  1046  0266  1303               	bcf	3,6	;RP1=0, select bank0
  1047  0267  00BF               	movwf	?_sprintf+3
  1048  0268  30DC               	movlw	(low (main@adcBuffer| 0))& (0+255)
  1049  0269  120A  118A  228A  120A  118A  	fcall	_sprintf
  1050                           
  1051                           ;main.c: 42: vw_send(adcBuffer, sizeof(adcBuffer) -1);
  1052  026E  3006               	movlw	6
  1053  026F  1283               	bcf	3,5	;RP0=0, select bank0
  1054  0270  1303               	bcf	3,6	;RP1=0, select bank0
  1055  0271  00D2               	movwf	??_main
  1056  0272  0852               	movf	??_main,w
  1057  0273  00B4               	movwf	vw_send@len
  1058  0274  30DC               	movlw	(low (main@adcBuffer| 0))& (0+255)
  1059  0275  120A  118A  202A  120A  118A  	fcall	_vw_send
  1060                           
  1061                           ;main.c: 45: _delay((unsigned long)((2000)*(8000000/4000.0)));
  1062  027A  3015               	movlw	21
  1063  027B  1283               	bcf	3,5	;RP0=0, select bank0
  1064  027C  1303               	bcf	3,6	;RP1=0, select bank0
  1065  027D  00D4               	movwf	??_main+2
  1066  027E  304B               	movlw	75
  1067  027F  00D3               	movwf	??_main+1
  1068  0280  30BD               	movlw	189
  1069  0281  00D2               	movwf	??_main
  1070  0282                     u2747:	
  1071  0282  0BD2               	decfsz	??_main,f
  1072  0283  2A82               	goto	u2747
  1073  0284  0BD3               	decfsz	??_main+1,f
  1074  0285  2A82               	goto	u2747
  1075  0286  0BD4               	decfsz	??_main+2,f
  1076  0287  2A82               	goto	u2747
  1077  0288  2A89               	nop2
  1078  0289  2970               	goto	l2127
  1079  028A                     __end_of_main:	
  1080                           
  1081                           	psect	text1
  1082  076F                     __ptext1:	
  1083 ;; *************** function _vw_setup *****************
  1084 ;; Defined at:
  1085 ;;		line 123 in file "virtualwire.c"
  1086 ;; Parameters:    Size  Location     Type
  1087 ;;  brate           2   41[BANK0 ] unsigned int 
  1088 ;; Auto vars:     Size  Location     Type
  1089 ;;  prescaler_va    2   47[BANK0 ] unsigned int 
  1090 ;;  prescaler_bi    1   46[BANK0 ] unsigned char 
  1091 ;; Return value:  Size  Location     Type
  1092 ;;                  1    wreg      void 
  1093 ;; Registers used:
  1094 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1095 ;; Tracked objects:
  1096 ;;		On entry : 0/0
  1097 ;;		On exit  : 0/0
  1098 ;;		Unchanged: 0/0
  1099 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1100 ;;      Params:         0       2       0       0       0
  1101 ;;      Locals:         0       3       0       0       0
  1102 ;;      Temps:          0       3       0       0       0
  1103 ;;      Totals:         0       8       0       0       0
  1104 ;;Total ram usage:        8 bytes
  1105 ;; Hardware stack levels used:    1
  1106 ;; Hardware stack levels required when called:    7
  1107 ;; This function calls:
  1108 ;;		__calc_timer0_prescaler
  1109 ;; This function is called by:
  1110 ;;		_main
  1111 ;; This function uses a non-reentrant model
  1112 ;;
  1113                           
  1114                           
  1115                           ;psect for function _vw_setup
  1116  076F                     _vw_setup:	
  1117                           
  1118                           ;virtualwire.c: 125: uint16_t prescaler_value;
  1119                           ;virtualwire.c: 126: uint8_t prescaler_bits;
  1120                           ;virtualwire.c: 129: TRISB1 = 1;
  1121                           
  1122                           ;incstack = 0
  1123                           ; Regs used in _vw_setup: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1124  076F  1683               	bsf	3,5	;RP0=1, select bank1
  1125  0770  1303               	bcf	3,6	;RP1=0, select bank1
  1126  0771  1486               	bsf	6,1	;volatile
  1127                           
  1128                           ;virtualwire.c: 130: TRISB0 = 0;
  1129  0772  1006               	bcf	6,0	;volatile
  1130                           
  1131                           ;virtualwire.c: 133: RB0 = 0;
  1132  0773  1283               	bcf	3,5	;RP0=0, select bank0
  1133  0774  1303               	bcf	3,6	;RP1=0, select bank0
  1134  0775  1006               	bcf	6,0	;volatile
  1135                           
  1136                           ;virtualwire.c: 136: _calc_timer0_prescaler(brate, &prescaler_value, &prescaler_bits, &v
      +                          w_tmr0_value);
  1137  0776  084A               	movf	vw_setup@brate+1,w
  1138  0777  00BA               	movwf	__calc_timer0_prescaler@brate+1
  1139  0778  0849               	movf	vw_setup@brate,w
  1140  0779  00B9               	movwf	__calc_timer0_prescaler@brate
  1141  077A  304F               	movlw	(low (vw_setup@prescaler_value| 0))& (0+255)
  1142  077B  00CB               	movwf	??_vw_setup
  1143  077C  084B               	movf	??_vw_setup,w
  1144  077D  00BB               	movwf	__calc_timer0_prescaler@prescaler_value
  1145  077E  304E               	movlw	(low (vw_setup@prescaler_bits| 0))& (0+255)
  1146  077F  00CC               	movwf	??_vw_setup+1
  1147  0780  084C               	movf	??_vw_setup+1,w
  1148  0781  00BC               	movwf	__calc_timer0_prescaler@prescaler_bits
  1149  0782  3060               	movlw	(low (_vw_tmr0_value| 0))& (0+255)
  1150  0783  00CD               	movwf	??_vw_setup+2
  1151  0784  084D               	movf	??_vw_setup+2,w
  1152  0785  00BD               	movwf	__calc_timer0_prescaler@k_tmr0
  1153  0786  120A  118A  2590  120A  118A  	fcall	__calc_timer0_prescaler
  1154                           
  1155                           ;virtualwire.c: 138: if (prescaler_value > 1)
  1156  078B  3000               	movlw	0
  1157  078C  1283               	bcf	3,5	;RP0=0, select bank0
  1158  078D  1303               	bcf	3,6	;RP1=0, select bank0
  1159  078E  0250               	subwf	vw_setup@prescaler_value+1,w
  1160  078F  3002               	movlw	2
  1161  0790  1903               	skipnz
  1162  0791  024F               	subwf	vw_setup@prescaler_value,w
  1163  0792  1C03               	skipc
  1164  0793  2FA2               	goto	l1977
  1165                           
  1166                           ;virtualwire.c: 139: {
  1167                           ;virtualwire.c: 141: OPTION_REG &= 0xF0;
  1168  0794  30F0               	movlw	240
  1169  0795  00CB               	movwf	??_vw_setup
  1170  0796  084B               	movf	??_vw_setup,w
  1171  0797  1683               	bsf	3,5	;RP0=1, select bank1
  1172  0798  1303               	bcf	3,6	;RP1=0, select bank1
  1173  0799  0581               	andwf	1,f	;volatile
  1174                           
  1175                           ;virtualwire.c: 142: OPTION_REG |= prescaler_bits;
  1176  079A  1283               	bcf	3,5	;RP0=0, select bank0
  1177  079B  1303               	bcf	3,6	;RP1=0, select bank0
  1178  079C  084E               	movf	vw_setup@prescaler_bits,w
  1179  079D  00CB               	movwf	??_vw_setup
  1180  079E  084B               	movf	??_vw_setup,w
  1181  079F  1683               	bsf	3,5	;RP0=1, select bank1
  1182  07A0  1303               	bcf	3,6	;RP1=0, select bank1
  1183  07A1  0481               	iorwf	1,f	;volatile
  1184  07A2                     l1977:	
  1185                           
  1186                           ;virtualwire.c: 143: }
  1187                           ;virtualwire.c: 145: T0CS = 0;
  1188  07A2  1683               	bsf	3,5	;RP0=1, select bank1
  1189  07A3  1303               	bcf	3,6	;RP1=0, select bank1
  1190  07A4  1281               	bcf	1,5	;volatile
  1191                           
  1192                           ;virtualwire.c: 146: TMR0 = (2 - vw_tmr0_value);
  1193  07A5  1283               	bcf	3,5	;RP0=0, select bank0
  1194  07A6  1303               	bcf	3,6	;RP1=0, select bank0
  1195  07A7  0360               	decf	_vw_tmr0_value,w
  1196  07A8  3AFF               	xorlw	255
  1197  07A9  3E02               	addlw	2
  1198  07AA  0081               	movwf	1	;volatile
  1199                           
  1200                           ;virtualwire.c: 148: TMR0IF = 0;
  1201  07AB  110B               	bcf	11,2	;volatile
  1202                           
  1203                           ;virtualwire.c: 149: TMR0IE = 1;
  1204  07AC  168B               	bsf	11,5	;volatile
  1205                           
  1206                           ;virtualwire.c: 150: GIE = PEIE = 1;
  1207  07AD  170B               	bsf	11,6	;volatile
  1208  07AE  1F0B               	btfss	11,6	;volatile
  1209  07AF  2FB2               	goto	u2480
  1210  07B0  178B               	bsf	11,7	;volatile
  1211  07B1  0008               	return
  1212  07B2                     u2480:	
  1213  07B2  138B               	bcf	11,7	;volatile
  1214  07B3  0008               	return
  1215  07B4                     __end_of_vw_setup:	
  1216                           
  1217                           	psect	text2
  1218  0590                     __ptext2:	
  1219 ;; *************** function __calc_timer0_prescaler *****************
  1220 ;; Defined at:
  1221 ;;		line 97 in file "virtualwire.c"
  1222 ;; Parameters:    Size  Location     Type
  1223 ;;  brate           2   25[BANK0 ] unsigned int 
  1224 ;;  prescaler_va    1   27[BANK0 ] PTR unsigned int 
  1225 ;;		 -> vw_setup@prescaler_value(2), 
  1226 ;;  prescaler_bi    1   28[BANK0 ] PTR unsigned char 
  1227 ;;		 -> vw_setup@prescaler_bits(1), 
  1228 ;;  k_tmr0          1   29[BANK0 ] PTR unsigned char 
  1229 ;;		 -> vw_tmr0_value(1), 
  1230 ;; Auto vars:     Size  Location     Type
  1231 ;;  aux_tmr0        2   38[BANK0 ] unsigned int 
  1232 ;;  pindex          1   40[BANK0 ] unsigned char 
  1233 ;; Return value:  Size  Location     Type
  1234 ;;                  1    wreg      unsigned char 
  1235 ;; Registers used:
  1236 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1237 ;; Tracked objects:
  1238 ;;		On entry : 0/0
  1239 ;;		On exit  : 0/0
  1240 ;;		Unchanged: 0/0
  1241 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1242 ;;      Params:         0       5       0       0       0
  1243 ;;      Locals:         0       3       0       0       0
  1244 ;;      Temps:          0       8       0       0       0
  1245 ;;      Totals:         0      16       0       0       0
  1246 ;;Total ram usage:       16 bytes
  1247 ;; Hardware stack levels used:    1
  1248 ;; Hardware stack levels required when called:    6
  1249 ;; This function calls:
  1250 ;;		___aldiv
  1251 ;;		___wmul
  1252 ;; This function is called by:
  1253 ;;		_vw_setup
  1254 ;; This function uses a non-reentrant model
  1255 ;;
  1256                           
  1257                           
  1258                           ;psect for function __calc_timer0_prescaler
  1259  0590                     __calc_timer0_prescaler:	
  1260                           
  1261                           ;virtualwire.c: 99: const uint16_t prescaler_factor[] = {1, 2, 4, 8, 16, 32, 64, 128, 25
      +                          6};
  1262                           ;virtualwire.c: 100: uint8_t pindex;
  1263                           ;virtualwire.c: 101: uint16_t aux_tmr0;
  1264                           ;virtualwire.c: 103: for (pindex = 0; pindex < 8; pindex++)
  1265                           
  1266                           ;incstack = 0
  1267 ;; using string table level
  1268                           ; Regs used in __calc_timer0_prescaler: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cst
      +                          ack]
  1269  0590  1283               	bcf	3,5	;RP0=0, select bank0
  1270  0591  1303               	bcf	3,6	;RP1=0, select bank0
  1271  0592  01C8               	clrf	__calc_timer0_prescaler@pindex
  1272  0593                     L1:	
  1273  0593  3008               	movlw	8
  1274  0594  0248               	subwf	__calc_timer0_prescaler@pindex,w
  1275  0595  1803               	btfsc	3,0
  1276  0596  0008               	return
  1277                           
  1278                           ;virtualwire.c: 104: {
  1279                           ;virtualwire.c: 105: *prescaler_value = prescaler_factor[pindex];
  1280  0597  0848               	movf	__calc_timer0_prescaler@pindex,w
  1281  0598  00BE               	movwf	??__calc_timer0_prescaler
  1282  0599  073E               	addwf	??__calc_timer0_prescaler,w
  1283  059A  3E29               	addlw	low ((__calc_timer0_prescaler@prescaler_factor-__stringbase)| (0+32768))
  1284  059B  0084               	movwf	4
  1285  059C  120A  118A  2678  120A  118A  	fcall	stringdir
  1286  05A1  00BF               	movwf	??__calc_timer0_prescaler+1
  1287  05A2  120A  118A  2678  120A  118A  	fcall	stringdir
  1288  05A7  00C0               	movwf	??__calc_timer0_prescaler+2
  1289  05A8  083B               	movf	__calc_timer0_prescaler@prescaler_value,w
  1290  05A9  0084               	movwf	4
  1291  05AA  083F               	movf	??__calc_timer0_prescaler+1,w
  1292  05AB  1383               	bcf	3,7	;select IRP bank0
  1293  05AC  0080               	movwf	0
  1294  05AD  0A84               	incf	4,f
  1295  05AE  0840               	movf	??__calc_timer0_prescaler+2,w
  1296  05AF  0080               	movwf	0
  1297                           
  1298                           ;virtualwire.c: 106: aux_tmr0 = 8000000 / (4 * (*prescaler_value) * brate * 8);
  1299  05B0  083A               	movf	__calc_timer0_prescaler@brate+1,w
  1300  05B1  00A7               	movwf	___wmul@multiplicand+1
  1301  05B2  0839               	movf	__calc_timer0_prescaler@brate,w
  1302  05B3  00A6               	movwf	___wmul@multiplicand
  1303  05B4  083B               	movf	__calc_timer0_prescaler@prescaler_value,w
  1304  05B5  0084               	movwf	4
  1305  05B6  0800               	movf	0,w
  1306  05B7  00BE               	movwf	??__calc_timer0_prescaler
  1307  05B8  0A84               	incf	4,f
  1308  05B9  0800               	movf	0,w
  1309  05BA  00BF               	movwf	??__calc_timer0_prescaler+1
  1310  05BB  1003               	clrc
  1311  05BC  0DBE               	rlf	??__calc_timer0_prescaler,f
  1312  05BD  0DBF               	rlf	??__calc_timer0_prescaler+1,f
  1313  05BE  1003               	clrc
  1314  05BF  0DBE               	rlf	??__calc_timer0_prescaler,f
  1315  05C0  0DBF               	rlf	??__calc_timer0_prescaler+1,f
  1316  05C1  083E               	movf	??__calc_timer0_prescaler,w
  1317  05C2  00A4               	movwf	___wmul@multiplier
  1318  05C3  083F               	movf	??__calc_timer0_prescaler+1,w
  1319  05C4  00A5               	movwf	___wmul@multiplier+1
  1320  05C5  120A  158A  279C  120A  118A  	fcall	___wmul
  1321  05CA  1283               	bcf	3,5	;RP0=0, select bank0
  1322  05CB  1303               	bcf	3,6	;RP1=0, select bank0
  1323  05CC  0824               	movf	?___wmul,w
  1324  05CD  00C0               	movwf	??__calc_timer0_prescaler+2
  1325  05CE  0825               	movf	?___wmul+1,w
  1326  05CF  00C1               	movwf	??__calc_timer0_prescaler+3
  1327  05D0  1003               	clrc
  1328  05D1  0DC0               	rlf	??__calc_timer0_prescaler+2,f
  1329  05D2  0DC1               	rlf	??__calc_timer0_prescaler+3,f
  1330  05D3  1003               	clrc
  1331  05D4  0DC0               	rlf	??__calc_timer0_prescaler+2,f
  1332  05D5  0DC1               	rlf	??__calc_timer0_prescaler+3,f
  1333  05D6  1003               	clrc
  1334  05D7  0DC0               	rlf	??__calc_timer0_prescaler+2,f
  1335  05D8  0DC1               	rlf	??__calc_timer0_prescaler+3,f
  1336  05D9  0840               	movf	??__calc_timer0_prescaler+2,w
  1337  05DA  00C2               	movwf	??__calc_timer0_prescaler+4
  1338  05DB  0841               	movf	??__calc_timer0_prescaler+3,w
  1339  05DC  00C3               	movwf	??__calc_timer0_prescaler+5
  1340  05DD  01C4               	clrf	??__calc_timer0_prescaler+6
  1341  05DE  01C5               	clrf	??__calc_timer0_prescaler+7
  1342  05DF  0845               	movf	??__calc_timer0_prescaler+7,w
  1343  05E0  00AD               	movwf	___aldiv@divisor+3
  1344  05E1  0844               	movf	??__calc_timer0_prescaler+6,w
  1345  05E2  00AC               	movwf	___aldiv@divisor+2
  1346  05E3  0843               	movf	??__calc_timer0_prescaler+5,w
  1347  05E4  00AB               	movwf	___aldiv@divisor+1
  1348  05E5  0842               	movf	??__calc_timer0_prescaler+4,w
  1349  05E6  00AA               	movwf	___aldiv@divisor
  1350  05E7  3000               	movlw	0
  1351  05E8  00B1               	movwf	___aldiv@dividend+3
  1352  05E9  307A               	movlw	122
  1353  05EA  00B0               	movwf	___aldiv@dividend+2
  1354  05EB  3012               	movlw	18
  1355  05EC  00AF               	movwf	___aldiv@dividend+1
  1356  05ED  3000               	movlw	0
  1357  05EE  00AE               	movwf	___aldiv@dividend
  1358  05EF  120A  118A  2501  120A  118A  	fcall	___aldiv
  1359  05F4  1283               	bcf	3,5	;RP0=0, select bank0
  1360  05F5  1303               	bcf	3,6	;RP1=0, select bank0
  1361  05F6  082B               	movf	?___aldiv+1,w
  1362  05F7  00C7               	movwf	__calc_timer0_prescaler@aux_tmr0+1
  1363  05F8  082A               	movf	?___aldiv,w
  1364  05F9  00C6               	movwf	__calc_timer0_prescaler@aux_tmr0
  1365                           
  1366                           ;virtualwire.c: 108: if (aux_tmr0 < 256)
  1367  05FA  3001               	movlw	1
  1368  05FB  0247               	subwf	__calc_timer0_prescaler@aux_tmr0+1,w
  1369  05FC  3000               	movlw	0
  1370  05FD  1903               	skipnz
  1371  05FE  0246               	subwf	__calc_timer0_prescaler@aux_tmr0,w
  1372  05FF  1803               	skipnc
  1373  0600  2E13               	goto	l1887
  1374                           
  1375                           ;virtualwire.c: 109: {
  1376                           ;virtualwire.c: 110: *k_tmr0 = aux_tmr0;
  1377  0601  0846               	movf	__calc_timer0_prescaler@aux_tmr0,w
  1378  0602  00BE               	movwf	??__calc_timer0_prescaler
  1379  0603  083D               	movf	__calc_timer0_prescaler@k_tmr0,w
  1380  0604  0084               	movwf	4
  1381  0605  083E               	movf	??__calc_timer0_prescaler,w
  1382  0606  1383               	bcf	3,7	;select IRP bank0
  1383  0607  0080               	movwf	0
  1384                           
  1385                           ;virtualwire.c: 111: if (pindex > 0)
  1386  0608  0848               	movf	__calc_timer0_prescaler@pindex,w
  1387  0609  1903               	btfsc	3,2
  1388  060A  0008               	return
  1389                           
  1390                           ;virtualwire.c: 112: {
  1391                           ;virtualwire.c: 113: *prescaler_bits = pindex - 1;
  1392  060B  0848               	movf	__calc_timer0_prescaler@pindex,w
  1393  060C  3EFF               	addlw	255
  1394  060D  00BE               	movwf	??__calc_timer0_prescaler
  1395  060E  083C               	movf	__calc_timer0_prescaler@prescaler_bits,w
  1396  060F  0084               	movwf	4
  1397  0610  083E               	movf	??__calc_timer0_prescaler,w
  1398  0611  0080               	movwf	0
  1399                           
  1400                           ;virtualwire.c: 114: }
  1401                           ;virtualwire.c: 115: return 1;
  1402                           ;	Return value of __calc_timer0_prescaler is never used
  1403  0612  0008               	return
  1404  0613                     l1887:	
  1405  0613  3001               	movlw	1
  1406  0614  00BE               	movwf	??__calc_timer0_prescaler
  1407  0615  083E               	movf	??__calc_timer0_prescaler,w
  1408  0616  07C8               	addwf	__calc_timer0_prescaler@pindex,f
  1409  0617  2D93               	goto	L1
  1410  0618                     __end_of__calc_timer0_prescaler:	
  1411                           ;virtualwire.c: 116: }
  1412                           ;virtualwire.c: 117: }
  1413                           ;virtualwire.c: 120: return 0;
  1414                           ;	Return value of __calc_timer0_prescaler is never used
  1415                           
  1416                           
  1417                           	psect	text3
  1418  0F9C                     __ptext3:	
  1419 ;; *************** function ___wmul *****************
  1420 ;; Defined at:
  1421 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  1422 ;; Parameters:    Size  Location     Type
  1423 ;;  multiplier      2    4[BANK0 ] unsigned int 
  1424 ;;  multiplicand    2    6[BANK0 ] unsigned int 
  1425 ;; Auto vars:     Size  Location     Type
  1426 ;;  product         2    8[BANK0 ] unsigned int 
  1427 ;; Return value:  Size  Location     Type
  1428 ;;                  2    4[BANK0 ] unsigned int 
  1429 ;; Registers used:
  1430 ;;		wreg, status,2, status,0
  1431 ;; Tracked objects:
  1432 ;;		On entry : 0/0
  1433 ;;		On exit  : 0/0
  1434 ;;		Unchanged: 0/0
  1435 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1436 ;;      Params:         0       4       0       0       0
  1437 ;;      Locals:         0       2       0       0       0
  1438 ;;      Temps:          0       0       0       0       0
  1439 ;;      Totals:         0       6       0       0       0
  1440 ;;Total ram usage:        6 bytes
  1441 ;; Hardware stack levels used:    1
  1442 ;; Hardware stack levels required when called:    5
  1443 ;; This function calls:
  1444 ;;		Nothing
  1445 ;; This function is called by:
  1446 ;;		__calc_timer0_prescaler
  1447 ;; This function uses a non-reentrant model
  1448 ;;
  1449                           
  1450                           
  1451                           ;psect for function ___wmul
  1452  0F9C                     ___wmul:	
  1453                           
  1454                           ;incstack = 0
  1455                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  1456  0F9C  1283               	bcf	3,5	;RP0=0, select bank0
  1457  0F9D  1303               	bcf	3,6	;RP1=0, select bank0
  1458  0F9E  01A8               	clrf	___wmul@product
  1459  0F9F  01A9               	clrf	___wmul@product+1
  1460  0FA0                     l1809:	
  1461  0FA0  1C24               	btfss	___wmul@multiplier,0
  1462  0FA1  2FA8               	goto	l367
  1463  0FA2  0826               	movf	___wmul@multiplicand,w
  1464  0FA3  07A8               	addwf	___wmul@product,f
  1465  0FA4  1803               	skipnc
  1466  0FA5  0AA9               	incf	___wmul@product+1,f
  1467  0FA6  0827               	movf	___wmul@multiplicand+1,w
  1468  0FA7  07A9               	addwf	___wmul@product+1,f
  1469  0FA8                     l367:	
  1470  0FA8  3001               	movlw	1
  1471  0FA9                     u2125:	
  1472  0FA9  1003               	clrc
  1473  0FAA  0DA6               	rlf	___wmul@multiplicand,f
  1474  0FAB  0DA7               	rlf	___wmul@multiplicand+1,f
  1475  0FAC  3EFF               	addlw	-1
  1476  0FAD  1D03               	skipz
  1477  0FAE  2FA9               	goto	u2125
  1478  0FAF  3001               	movlw	1
  1479  0FB0                     u2135:	
  1480  0FB0  1003               	clrc
  1481  0FB1  0CA5               	rrf	___wmul@multiplier+1,f
  1482  0FB2  0CA4               	rrf	___wmul@multiplier,f
  1483  0FB3  3EFF               	addlw	-1
  1484  0FB4  1D03               	skipz
  1485  0FB5  2FB0               	goto	u2135
  1486  0FB6  0824               	movf	___wmul@multiplier,w
  1487  0FB7  0425               	iorwf	___wmul@multiplier+1,w
  1488  0FB8  1D03               	btfss	3,2
  1489  0FB9  2FA0               	goto	l1809
  1490  0FBA  0829               	movf	___wmul@product+1,w
  1491  0FBB  00A5               	movwf	?___wmul+1
  1492  0FBC  0828               	movf	___wmul@product,w
  1493  0FBD  00A4               	movwf	?___wmul
  1494  0FBE  0008               	return
  1495  0FBF                     __end_of___wmul:	
  1496                           
  1497                           	psect	text4
  1498  0501                     __ptext4:	
  1499 ;; *************** function ___aldiv *****************
  1500 ;; Defined at:
  1501 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\aldiv.c"
  1502 ;; Parameters:    Size  Location     Type
  1503 ;;  divisor         4   10[BANK0 ] long 
  1504 ;;  dividend        4   14[BANK0 ] long 
  1505 ;; Auto vars:     Size  Location     Type
  1506 ;;  quotient        4   21[BANK0 ] long 
  1507 ;;  sign            1   20[BANK0 ] unsigned char 
  1508 ;;  counter         1   19[BANK0 ] unsigned char 
  1509 ;; Return value:  Size  Location     Type
  1510 ;;                  4   10[BANK0 ] long 
  1511 ;; Registers used:
  1512 ;;		wreg, status,2, status,0
  1513 ;; Tracked objects:
  1514 ;;		On entry : 0/0
  1515 ;;		On exit  : 0/0
  1516 ;;		Unchanged: 0/0
  1517 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1518 ;;      Params:         0       8       0       0       0
  1519 ;;      Locals:         0       6       0       0       0
  1520 ;;      Temps:          0       1       0       0       0
  1521 ;;      Totals:         0      15       0       0       0
  1522 ;;Total ram usage:       15 bytes
  1523 ;; Hardware stack levels used:    1
  1524 ;; Hardware stack levels required when called:    5
  1525 ;; This function calls:
  1526 ;;		Nothing
  1527 ;; This function is called by:
  1528 ;;		__calc_timer0_prescaler
  1529 ;; This function uses a non-reentrant model
  1530 ;;
  1531                           
  1532                           
  1533                           ;psect for function ___aldiv
  1534  0501                     ___aldiv:	
  1535                           
  1536                           ;incstack = 0
  1537                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  1538  0501  1283               	bcf	3,5	;RP0=0, select bank0
  1539  0502  1303               	bcf	3,6	;RP1=0, select bank0
  1540  0503  01B4               	clrf	___aldiv@sign
  1541  0504  1FAD               	btfss	___aldiv@divisor+3,7
  1542  0505  2D13               	goto	l422
  1543  0506  09AA               	comf	___aldiv@divisor,f
  1544  0507  09AB               	comf	___aldiv@divisor+1,f
  1545  0508  09AC               	comf	___aldiv@divisor+2,f
  1546  0509  09AD               	comf	___aldiv@divisor+3,f
  1547  050A  0AAA               	incf	___aldiv@divisor,f
  1548  050B  1903               	skipnz
  1549  050C  0AAB               	incf	___aldiv@divisor+1,f
  1550  050D  1903               	skipnz
  1551  050E  0AAC               	incf	___aldiv@divisor+2,f
  1552  050F  1903               	skipnz
  1553  0510  0AAD               	incf	___aldiv@divisor+3,f
  1554  0511  01B4               	clrf	___aldiv@sign
  1555  0512  0AB4               	incf	___aldiv@sign,f
  1556  0513                     l422:	
  1557  0513  1FB1               	btfss	___aldiv@dividend+3,7
  1558  0514  2D24               	goto	l1831
  1559  0515  09AE               	comf	___aldiv@dividend,f
  1560  0516  09AF               	comf	___aldiv@dividend+1,f
  1561  0517  09B0               	comf	___aldiv@dividend+2,f
  1562  0518  09B1               	comf	___aldiv@dividend+3,f
  1563  0519  0AAE               	incf	___aldiv@dividend,f
  1564  051A  1903               	skipnz
  1565  051B  0AAF               	incf	___aldiv@dividend+1,f
  1566  051C  1903               	skipnz
  1567  051D  0AB0               	incf	___aldiv@dividend+2,f
  1568  051E  1903               	skipnz
  1569  051F  0AB1               	incf	___aldiv@dividend+3,f
  1570  0520  3001               	movlw	1
  1571  0521  00B2               	movwf	??___aldiv
  1572  0522  0832               	movf	??___aldiv,w
  1573  0523  06B4               	xorwf	___aldiv@sign,f
  1574  0524                     l1831:	
  1575  0524  3000               	movlw	0
  1576  0525  00B8               	movwf	___aldiv@quotient+3
  1577  0526  3000               	movlw	0
  1578  0527  00B7               	movwf	___aldiv@quotient+2
  1579  0528  3000               	movlw	0
  1580  0529  00B6               	movwf	___aldiv@quotient+1
  1581  052A  3000               	movlw	0
  1582  052B  00B5               	movwf	___aldiv@quotient
  1583  052C  082D               	movf	___aldiv@divisor+3,w
  1584  052D  042C               	iorwf	___aldiv@divisor+2,w
  1585  052E  042B               	iorwf	___aldiv@divisor+1,w
  1586  052F  042A               	iorwf	___aldiv@divisor,w
  1587  0530  1903               	skipnz
  1588  0531  2D79               	goto	l1853
  1589  0532  01B3               	clrf	___aldiv@counter
  1590  0533  0AB3               	incf	___aldiv@counter,f
  1591  0534                     l1839:	
  1592  0534  1BAD               	btfsc	___aldiv@divisor+3,7
  1593  0535  2D44               	goto	l1841
  1594  0536  3001               	movlw	1
  1595  0537  00B2               	movwf	??___aldiv
  1596  0538                     u2185:	
  1597  0538  1003               	clrc
  1598  0539  0DAA               	rlf	___aldiv@divisor,f
  1599  053A  0DAB               	rlf	___aldiv@divisor+1,f
  1600  053B  0DAC               	rlf	___aldiv@divisor+2,f
  1601  053C  0DAD               	rlf	___aldiv@divisor+3,f
  1602  053D  0BB2               	decfsz	??___aldiv,f
  1603  053E  2D38               	goto	u2185
  1604  053F  3001               	movlw	1
  1605  0540  00B2               	movwf	??___aldiv
  1606  0541  0832               	movf	??___aldiv,w
  1607  0542  07B3               	addwf	___aldiv@counter,f
  1608  0543  2D34               	goto	l1839
  1609  0544                     l1841:	
  1610  0544  3001               	movlw	1
  1611  0545  00B2               	movwf	??___aldiv
  1612  0546                     u2205:	
  1613  0546  1003               	clrc
  1614  0547  0DB5               	rlf	___aldiv@quotient,f
  1615  0548  0DB6               	rlf	___aldiv@quotient+1,f
  1616  0549  0DB7               	rlf	___aldiv@quotient+2,f
  1617  054A  0DB8               	rlf	___aldiv@quotient+3,f
  1618  054B  0BB2               	decfsz	??___aldiv,f
  1619  054C  2D46               	goto	u2205
  1620  054D  082D               	movf	___aldiv@divisor+3,w
  1621  054E  0231               	subwf	___aldiv@dividend+3,w
  1622  054F  1D03               	skipz
  1623  0550  2D5B               	goto	u2215
  1624  0551  082C               	movf	___aldiv@divisor+2,w
  1625  0552  0230               	subwf	___aldiv@dividend+2,w
  1626  0553  1D03               	skipz
  1627  0554  2D5B               	goto	u2215
  1628  0555  082B               	movf	___aldiv@divisor+1,w
  1629  0556  022F               	subwf	___aldiv@dividend+1,w
  1630  0557  1D03               	skipz
  1631  0558  2D5B               	goto	u2215
  1632  0559  082A               	movf	___aldiv@divisor,w
  1633  055A  022E               	subwf	___aldiv@dividend,w
  1634  055B                     u2215:	
  1635  055B  1C03               	skipc
  1636  055C  2D6C               	goto	l1849
  1637  055D  082A               	movf	___aldiv@divisor,w
  1638  055E  02AE               	subwf	___aldiv@dividend,f
  1639  055F  082B               	movf	___aldiv@divisor+1,w
  1640  0560  1C03               	skipc
  1641  0561  0F2B               	incfsz	___aldiv@divisor+1,w
  1642  0562  02AF               	subwf	___aldiv@dividend+1,f
  1643  0563  082C               	movf	___aldiv@divisor+2,w
  1644  0564  1C03               	skipc
  1645  0565  0F2C               	incfsz	___aldiv@divisor+2,w
  1646  0566  02B0               	subwf	___aldiv@dividend+2,f
  1647  0567  082D               	movf	___aldiv@divisor+3,w
  1648  0568  1C03               	skipc
  1649  0569  0F2D               	incfsz	___aldiv@divisor+3,w
  1650  056A  02B1               	subwf	___aldiv@dividend+3,f
  1651  056B  1435               	bsf	___aldiv@quotient,0
  1652  056C                     l1849:	
  1653  056C  3001               	movlw	1
  1654  056D                     u2225:	
  1655  056D  1003               	clrc
  1656  056E  0CAD               	rrf	___aldiv@divisor+3,f
  1657  056F  0CAC               	rrf	___aldiv@divisor+2,f
  1658  0570  0CAB               	rrf	___aldiv@divisor+1,f
  1659  0571  0CAA               	rrf	___aldiv@divisor,f
  1660  0572  3EFF               	addlw	-1
  1661  0573  1D03               	skipz
  1662  0574  2D6D               	goto	u2225
  1663  0575  3001               	movlw	1
  1664  0576  02B3               	subwf	___aldiv@counter,f
  1665  0577  1D03               	btfss	3,2
  1666  0578  2D44               	goto	l1841
  1667  0579                     l1853:	
  1668  0579  0834               	movf	___aldiv@sign,w
  1669  057A  1903               	btfsc	3,2
  1670  057B  2D87               	goto	l1857
  1671  057C  09B5               	comf	___aldiv@quotient,f
  1672  057D  09B6               	comf	___aldiv@quotient+1,f
  1673  057E  09B7               	comf	___aldiv@quotient+2,f
  1674  057F  09B8               	comf	___aldiv@quotient+3,f
  1675  0580  0AB5               	incf	___aldiv@quotient,f
  1676  0581  1903               	skipnz
  1677  0582  0AB6               	incf	___aldiv@quotient+1,f
  1678  0583  1903               	skipnz
  1679  0584  0AB7               	incf	___aldiv@quotient+2,f
  1680  0585  1903               	skipnz
  1681  0586  0AB8               	incf	___aldiv@quotient+3,f
  1682  0587                     l1857:	
  1683  0587  0838               	movf	___aldiv@quotient+3,w
  1684  0588  00AD               	movwf	?___aldiv+3
  1685  0589  0837               	movf	___aldiv@quotient+2,w
  1686  058A  00AC               	movwf	?___aldiv+2
  1687  058B  0836               	movf	___aldiv@quotient+1,w
  1688  058C  00AB               	movwf	?___aldiv+1
  1689  058D  0835               	movf	___aldiv@quotient,w
  1690  058E  00AA               	movwf	?___aldiv
  1691  058F  0008               	return
  1692  0590                     __end_of___aldiv:	
  1693                           
  1694                           	psect	text5
  1695  002A                     __ptext5:	
  1696 ;; *************** function _vw_send *****************
  1697 ;; Defined at:
  1698 ;;		line 180 in file "virtualwire.c"
  1699 ;; Parameters:    Size  Location     Type
  1700 ;;  buf             1    wreg     PTR const unsigned char 
  1701 ;;		 -> main@adcBuffer(7), 
  1702 ;;  len             1   20[BANK0 ] unsigned char 
  1703 ;; Auto vars:     Size  Location     Type
  1704 ;;  buf             1   26[BANK0 ] PTR const unsigned char 
  1705 ;;		 -> main@adcBuffer(7), 
  1706 ;;  crc             2   28[BANK0 ] unsigned int 
  1707 ;;  index           1   31[BANK0 ] unsigned char 
  1708 ;;  p               1   30[BANK0 ] PTR unsigned char 
  1709 ;;		 -> vw_tx_buf(48), 
  1710 ;;  i               1   27[BANK0 ] unsigned char 
  1711 ;;  count           1   25[BANK0 ] unsigned char 
  1712 ;; Return value:  Size  Location     Type
  1713 ;;                  1    wreg      unsigned char 
  1714 ;; Registers used:
  1715 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1716 ;; Tracked objects:
  1717 ;;		On entry : 0/0
  1718 ;;		On exit  : 0/0
  1719 ;;		Unchanged: 0/0
  1720 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1721 ;;      Params:         0       1       0       0       0
  1722 ;;      Locals:         0       7       0       0       0
  1723 ;;      Temps:          0       4       0       0       0
  1724 ;;      Totals:         0      12       0       0       0
  1725 ;;Total ram usage:       12 bytes
  1726 ;; Hardware stack levels used:    1
  1727 ;; Hardware stack levels required when called:    6
  1728 ;; This function calls:
  1729 ;;		__crc_ccitt_update
  1730 ;;		_vw_tx_start
  1731 ;;		_vw_wait_tx
  1732 ;; This function is called by:
  1733 ;;		_main
  1734 ;; This function uses a non-reentrant model
  1735 ;;
  1736                           
  1737                           
  1738                           ;psect for function _vw_send
  1739  002A                     _vw_send:	
  1740                           
  1741                           ;incstack = 0
  1742                           ; Regs used in _vw_send: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1743                           ;vw_send@buf stored from wreg
  1744  002A  1283               	bcf	3,5	;RP0=0, select bank0
  1745  002B  1303               	bcf	3,6	;RP1=0, select bank0
  1746  002C  00BA               	movwf	vw_send@buf
  1747                           
  1748                           ;virtualwire.c: 182: uint8_t i;
  1749                           ;virtualwire.c: 183: uint8_t index = 0;
  1750  002D  01BF               	clrf	vw_send@index
  1751                           
  1752                           ;virtualwire.c: 184: uint16_t crc = 0xffff;
  1753  002E  30FF               	movlw	255
  1754  002F  00BC               	movwf	vw_send@crc
  1755  0030  30FF               	movlw	255
  1756  0031  00BD               	movwf	vw_send@crc+1
  1757                           
  1758                           ;virtualwire.c: 185: uint8_t *p = vw_tx_buf;
  1759  0032  30AC               	movlw	(low (_vw_tx_buf| 0))& (0+255)
  1760  0033  00B5               	movwf	??_vw_send
  1761  0034  0835               	movf	??_vw_send,w
  1762  0035  00BE               	movwf	vw_send@p
  1763                           
  1764                           ;virtualwire.c: 186: uint8_t count = len + 3;
  1765  0036  0834               	movf	vw_send@len,w
  1766  0037  3E03               	addlw	3
  1767  0038  00B5               	movwf	??_vw_send
  1768  0039  0835               	movf	??_vw_send,w
  1769  003A  00B9               	movwf	vw_send@count
  1770                           
  1771                           ;virtualwire.c: 188: if (len > 24-3)
  1772  003B  3016               	movlw	22
  1773  003C  0234               	subwf	vw_send@len,w
  1774  003D  1803               	btfsc	3,0
  1775  003E  0008               	return
  1776                           
  1777                           ;virtualwire.c: 192: vw_wait_tx();
  1778                           
  1779                           ;virtualwire.c: 189: return 0;
  1780                           ;	Return value of _vw_send is never used
  1781  003F  120A  118A  27F9  120A  118A  	fcall	_vw_wait_tx
  1782                           
  1783                           ;virtualwire.c: 193: vw_rx_enabled = 0;
  1784  0044  1683               	bsf	3,5	;RP0=1, select bank1
  1785  0045  1303               	bcf	3,6	;RP1=0, select bank1
  1786  0046  01A5               	clrf	_vw_rx_enabled^(0+128)
  1787                           
  1788                           ;virtualwire.c: 196: crc = _crc_ccitt_update(crc, count);
  1789  0047  1283               	bcf	3,5	;RP0=0, select bank0
  1790  0048  1303               	bcf	3,6	;RP1=0, select bank0
  1791  0049  083D               	movf	vw_send@crc+1,w
  1792  004A  00A5               	movwf	__crc_ccitt_update@crc+1
  1793  004B  083C               	movf	vw_send@crc,w
  1794  004C  00A4               	movwf	__crc_ccitt_update@crc
  1795  004D  0839               	movf	vw_send@count,w
  1796  004E  00B5               	movwf	??_vw_send
  1797  004F  0835               	movf	??_vw_send,w
  1798  0050  00A6               	movwf	__crc_ccitt_update@data
  1799  0051  120A  118A  2725  120A  118A  	fcall	__crc_ccitt_update
  1800  0056  1283               	bcf	3,5	;RP0=0, select bank0
  1801  0057  1303               	bcf	3,6	;RP1=0, select bank0
  1802  0058  0825               	movf	?__crc_ccitt_update+1,w
  1803  0059  00BD               	movwf	vw_send@crc+1
  1804  005A  0824               	movf	?__crc_ccitt_update,w
  1805  005B  00BC               	movwf	vw_send@crc
  1806                           
  1807                           ;virtualwire.c: 197: p[index++] = symbols[count >> 4];
  1808  005C  0839               	movf	vw_send@count,w
  1809  005D  00B5               	movwf	??_vw_send
  1810  005E  3004               	movlw	4
  1811  005F                     u2605:	
  1812  005F  1003               	clrc
  1813  0060  0CB5               	rrf	??_vw_send,f
  1814  0061  3EFF               	addlw	-1
  1815  0062  1D03               	skipz
  1816  0063  285F               	goto	u2605
  1817  0064  0835               	movf	??_vw_send,w
  1818  0065  3E3B               	addlw	low ((_symbols-__stringbase)| (0+32768))
  1819  0066  0084               	movwf	4
  1820  0067  120A  118A  2678  120A  118A  	fcall	stringdir
  1821  006C  00B6               	movwf	??_vw_send+1
  1822  006D  083F               	movf	vw_send@index,w
  1823  006E  073E               	addwf	vw_send@p,w
  1824  006F  00B7               	movwf	??_vw_send+2
  1825  0070  0837               	movf	??_vw_send+2,w
  1826  0071  0084               	movwf	4
  1827  0072  0836               	movf	??_vw_send+1,w
  1828  0073  1383               	bcf	3,7	;select IRP bank0
  1829  0074  0080               	movwf	0
  1830  0075  3001               	movlw	1
  1831  0076  00B5               	movwf	??_vw_send
  1832  0077  0835               	movf	??_vw_send,w
  1833  0078  07BF               	addwf	vw_send@index,f
  1834                           
  1835                           ;virtualwire.c: 198: p[index++] = symbols[count & 0xf];
  1836  0079  0839               	movf	vw_send@count,w
  1837  007A  390F               	andlw	15
  1838  007B  3E3B               	addlw	low ((_symbols-__stringbase)| (0+32768))
  1839  007C  0084               	movwf	4
  1840  007D  120A  118A  2678  120A  118A  	fcall	stringdir
  1841  0082  00B5               	movwf	??_vw_send
  1842  0083  083F               	movf	vw_send@index,w
  1843  0084  073E               	addwf	vw_send@p,w
  1844  0085  00B6               	movwf	??_vw_send+1
  1845  0086  0836               	movf	??_vw_send+1,w
  1846  0087  0084               	movwf	4
  1847  0088  0835               	movf	??_vw_send,w
  1848  0089  0080               	movwf	0
  1849  008A  3001               	movlw	1
  1850  008B  00B5               	movwf	??_vw_send
  1851  008C  0835               	movf	??_vw_send,w
  1852  008D  07BF               	addwf	vw_send@index,f
  1853                           
  1854                           ;virtualwire.c: 202: for (i = 0; i < len; i++)
  1855  008E  01BB               	clrf	vw_send@i
  1856  008F                     l2077:	
  1857  008F  0834               	movf	vw_send@len,w
  1858  0090  023B               	subwf	vw_send@i,w
  1859  0091  1803               	btfsc	3,0
  1860  0092  28EC               	goto	l193
  1861                           
  1862                           ;virtualwire.c: 203: {
  1863                           ;virtualwire.c: 204: crc = _crc_ccitt_update(crc, buf[i]);
  1864  0093  083D               	movf	vw_send@crc+1,w
  1865  0094  00A5               	movwf	__crc_ccitt_update@crc+1
  1866  0095  083C               	movf	vw_send@crc,w
  1867  0096  00A4               	movwf	__crc_ccitt_update@crc
  1868  0097  083B               	movf	vw_send@i,w
  1869  0098  073A               	addwf	vw_send@buf,w
  1870  0099  00B5               	movwf	??_vw_send
  1871  009A  0835               	movf	??_vw_send,w
  1872  009B  0084               	movwf	4
  1873  009C  0800               	movf	0,w
  1874  009D  00B6               	movwf	??_vw_send+1
  1875  009E  0836               	movf	??_vw_send+1,w
  1876  009F  00A6               	movwf	__crc_ccitt_update@data
  1877  00A0  120A  118A  2725  120A  118A  	fcall	__crc_ccitt_update
  1878  00A5  1283               	bcf	3,5	;RP0=0, select bank0
  1879  00A6  1303               	bcf	3,6	;RP1=0, select bank0
  1880  00A7  0825               	movf	?__crc_ccitt_update+1,w
  1881  00A8  00BD               	movwf	vw_send@crc+1
  1882  00A9  0824               	movf	?__crc_ccitt_update,w
  1883  00AA  00BC               	movwf	vw_send@crc
  1884                           
  1885                           ;virtualwire.c: 205: p[index++] = symbols[buf[i] >> 4];
  1886  00AB  083B               	movf	vw_send@i,w
  1887  00AC  073A               	addwf	vw_send@buf,w
  1888  00AD  00B5               	movwf	??_vw_send
  1889  00AE  0835               	movf	??_vw_send,w
  1890  00AF  0084               	movwf	4
  1891  00B0  1383               	bcf	3,7	;select IRP bank0
  1892  00B1  0800               	movf	0,w
  1893  00B2  00B6               	movwf	??_vw_send+1
  1894  00B3  3004               	movlw	4
  1895  00B4                     u2615:	
  1896  00B4  1003               	clrc
  1897  00B5  0CB6               	rrf	??_vw_send+1,f
  1898  00B6  3EFF               	addlw	-1
  1899  00B7  1D03               	skipz
  1900  00B8  28B4               	goto	u2615
  1901  00B9  0836               	movf	??_vw_send+1,w
  1902  00BA  3E3B               	addlw	low ((_symbols-__stringbase)| (0+32768))
  1903  00BB  0084               	movwf	4
  1904  00BC  120A  118A  2678  120A  118A  	fcall	stringdir
  1905  00C1  00B7               	movwf	??_vw_send+2
  1906  00C2  083F               	movf	vw_send@index,w
  1907  00C3  073E               	addwf	vw_send@p,w
  1908  00C4  00B8               	movwf	??_vw_send+3
  1909  00C5  0838               	movf	??_vw_send+3,w
  1910  00C6  0084               	movwf	4
  1911  00C7  0837               	movf	??_vw_send+2,w
  1912  00C8  0080               	movwf	0
  1913  00C9  3001               	movlw	1
  1914  00CA  00B5               	movwf	??_vw_send
  1915  00CB  0835               	movf	??_vw_send,w
  1916  00CC  07BF               	addwf	vw_send@index,f
  1917                           
  1918                           ;virtualwire.c: 206: p[index++] = symbols[buf[i] & 0xf];
  1919  00CD  083B               	movf	vw_send@i,w
  1920  00CE  073A               	addwf	vw_send@buf,w
  1921  00CF  00B5               	movwf	??_vw_send
  1922  00D0  0835               	movf	??_vw_send,w
  1923  00D1  0084               	movwf	4
  1924  00D2  0800               	movf	0,w
  1925  00D3  390F               	andlw	15
  1926  00D4  3E3B               	addlw	low ((_symbols-__stringbase)| (0+32768))
  1927  00D5  0084               	movwf	4
  1928  00D6  120A  118A  2678  120A  118A  	fcall	stringdir
  1929  00DB  00B6               	movwf	??_vw_send+1
  1930  00DC  083F               	movf	vw_send@index,w
  1931  00DD  073E               	addwf	vw_send@p,w
  1932  00DE  00B7               	movwf	??_vw_send+2
  1933  00DF  0837               	movf	??_vw_send+2,w
  1934  00E0  0084               	movwf	4
  1935  00E1  0836               	movf	??_vw_send+1,w
  1936  00E2  0080               	movwf	0
  1937  00E3  3001               	movlw	1
  1938  00E4  00B5               	movwf	??_vw_send
  1939  00E5  0835               	movf	??_vw_send,w
  1940  00E6  07BF               	addwf	vw_send@index,f
  1941  00E7  3001               	movlw	1
  1942  00E8  00B5               	movwf	??_vw_send
  1943  00E9  0835               	movf	??_vw_send,w
  1944  00EA  07BB               	addwf	vw_send@i,f
  1945  00EB  288F               	goto	l2077
  1946  00EC                     l193:	
  1947                           
  1948                           ;virtualwire.c: 207: }
  1949                           ;virtualwire.c: 212: crc = ~crc;
  1950  00EC  09BC               	comf	vw_send@crc,f
  1951  00ED  09BD               	comf	vw_send@crc+1,f
  1952                           
  1953                           ;virtualwire.c: 213: p[index++] = symbols[(crc >> 4) & 0xf];
  1954  00EE  083D               	movf	vw_send@crc+1,w
  1955  00EF  00B6               	movwf	??_vw_send+1
  1956  00F0  083C               	movf	vw_send@crc,w
  1957  00F1  00B5               	movwf	??_vw_send
  1958  00F2  3004               	movlw	4
  1959  00F3                     u2635:	
  1960  00F3  1003               	clrc
  1961  00F4  0CB6               	rrf	??_vw_send+1,f
  1962  00F5  0CB5               	rrf	??_vw_send,f
  1963  00F6  3EFF               	addlw	-1
  1964  00F7  1D03               	skipz
  1965  00F8  28F3               	goto	u2635
  1966  00F9  0835               	movf	??_vw_send,w
  1967  00FA  390F               	andlw	15
  1968  00FB  3E3B               	addlw	low ((_symbols-__stringbase)| (0+32768))
  1969  00FC  0084               	movwf	4
  1970  00FD  120A  118A  2678  120A  118A  	fcall	stringdir
  1971  0102  00B7               	movwf	??_vw_send+2
  1972  0103  083F               	movf	vw_send@index,w
  1973  0104  073E               	addwf	vw_send@p,w
  1974  0105  00B8               	movwf	??_vw_send+3
  1975  0106  0838               	movf	??_vw_send+3,w
  1976  0107  0084               	movwf	4
  1977  0108  0837               	movf	??_vw_send+2,w
  1978  0109  0080               	movwf	0
  1979  010A  3001               	movlw	1
  1980  010B  00B5               	movwf	??_vw_send
  1981  010C  0835               	movf	??_vw_send,w
  1982  010D  07BF               	addwf	vw_send@index,f
  1983                           
  1984                           ;virtualwire.c: 214: p[index++] = symbols[crc & 0xf];
  1985  010E  083C               	movf	vw_send@crc,w
  1986  010F  390F               	andlw	15
  1987  0110  3E3B               	addlw	low ((_symbols-__stringbase)| (0+32768))
  1988  0111  0084               	movwf	4
  1989  0112  120A  118A  2678  120A  118A  	fcall	stringdir
  1990  0117  00B5               	movwf	??_vw_send
  1991  0118  083F               	movf	vw_send@index,w
  1992  0119  073E               	addwf	vw_send@p,w
  1993  011A  00B6               	movwf	??_vw_send+1
  1994  011B  0836               	movf	??_vw_send+1,w
  1995  011C  0084               	movwf	4
  1996  011D  0835               	movf	??_vw_send,w
  1997  011E  0080               	movwf	0
  1998  011F  3001               	movlw	1
  1999  0120  00B5               	movwf	??_vw_send
  2000  0121  0835               	movf	??_vw_send,w
  2001  0122  07BF               	addwf	vw_send@index,f
  2002                           
  2003                           ;virtualwire.c: 215: p[index++] = symbols[(crc >> 12) & 0xf];
  2004  0123  083D               	movf	vw_send@crc+1,w
  2005  0124  00B6               	movwf	??_vw_send+1
  2006  0125  083C               	movf	vw_send@crc,w
  2007  0126  00B5               	movwf	??_vw_send
  2008  0127  0E36               	swapf	??_vw_send+1,w
  2009  0128  390F               	andlw	15
  2010  0129  00B5               	movwf	??_vw_send
  2011  012A  01B6               	clrf	??_vw_send+1
  2012  012B  0835               	movf	??_vw_send,w
  2013  012C  390F               	andlw	15
  2014  012D  3E3B               	addlw	low ((_symbols-__stringbase)| (0+32768))
  2015  012E  0084               	movwf	4
  2016  012F  120A  118A  2678  120A  118A  	fcall	stringdir
  2017  0134  00B7               	movwf	??_vw_send+2
  2018  0135  083F               	movf	vw_send@index,w
  2019  0136  073E               	addwf	vw_send@p,w
  2020  0137  00B8               	movwf	??_vw_send+3
  2021  0138  0838               	movf	??_vw_send+3,w
  2022  0139  0084               	movwf	4
  2023  013A  0837               	movf	??_vw_send+2,w
  2024  013B  0080               	movwf	0
  2025  013C  3001               	movlw	1
  2026  013D  00B5               	movwf	??_vw_send
  2027  013E  0835               	movf	??_vw_send,w
  2028  013F  07BF               	addwf	vw_send@index,f
  2029                           
  2030                           ;virtualwire.c: 216: p[index++] = symbols[(crc >> 8) & 0xf];
  2031  0140  083D               	movf	vw_send@crc+1,w
  2032  0141  390F               	andlw	15
  2033  0142  3E3B               	addlw	low ((_symbols-__stringbase)| (0+32768))
  2034  0143  0084               	movwf	4
  2035  0144  120A  118A  2678  120A  118A  	fcall	stringdir
  2036  0149  00B5               	movwf	??_vw_send
  2037  014A  083F               	movf	vw_send@index,w
  2038  014B  073E               	addwf	vw_send@p,w
  2039  014C  00B6               	movwf	??_vw_send+1
  2040  014D  0836               	movf	??_vw_send+1,w
  2041  014E  0084               	movwf	4
  2042  014F  0835               	movf	??_vw_send,w
  2043  0150  0080               	movwf	0
  2044  0151  3001               	movlw	1
  2045  0152  00B5               	movwf	??_vw_send
  2046  0153  0835               	movf	??_vw_send,w
  2047  0154  07BF               	addwf	vw_send@index,f
  2048                           
  2049                           ;virtualwire.c: 219: vw_tx_len = index + 8;
  2050  0155  083F               	movf	vw_send@index,w
  2051  0156  3E08               	addlw	8
  2052  0157  00B5               	movwf	??_vw_send
  2053  0158  0835               	movf	??_vw_send,w
  2054  0159  1683               	bsf	3,5	;RP0=1, select bank1
  2055  015A  1303               	bcf	3,6	;RP1=0, select bank1
  2056  015B  00AB               	movwf	_vw_tx_len^(0+128)
  2057                           
  2058                           ;virtualwire.c: 222: vw_tx_start();
  2059  015C  120A  158A  274E   	fcall	_vw_tx_start
  2060  015F  0008               	return
  2061  0160                     __end_of_vw_send:	
  2062                           ;virtualwire.c: 224: return 1;
  2063                           ;	Return value of _vw_send is never used
  2064                           
  2065                           
  2066                           	psect	text6
  2067  07F9                     __ptext6:	
  2068 ;; *************** function _vw_wait_tx *****************
  2069 ;; Defined at:
  2070 ;;		line 157 in file "virtualwire.c"
  2071 ;; Parameters:    Size  Location     Type
  2072 ;;		None
  2073 ;; Auto vars:     Size  Location     Type
  2074 ;;		None
  2075 ;; Return value:  Size  Location     Type
  2076 ;;                  1    wreg      void 
  2077 ;; Registers used:
  2078 ;;		wreg, status,2, status,0
  2079 ;; Tracked objects:
  2080 ;;		On entry : 0/0
  2081 ;;		On exit  : 0/0
  2082 ;;		Unchanged: 0/0
  2083 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2084 ;;      Params:         0       0       0       0       0
  2085 ;;      Locals:         0       0       0       0       0
  2086 ;;      Temps:          0       0       0       0       0
  2087 ;;      Totals:         0       0       0       0       0
  2088 ;;Total ram usage:        0 bytes
  2089 ;; Hardware stack levels used:    1
  2090 ;; Hardware stack levels required when called:    5
  2091 ;; This function calls:
  2092 ;;		Nothing
  2093 ;; This function is called by:
  2094 ;;		_vw_send
  2095 ;; This function uses a non-reentrant model
  2096 ;;
  2097                           
  2098                           
  2099                           ;psect for function _vw_wait_tx
  2100  07F9                     _vw_wait_tx:	
  2101  07F9                     l1893:	
  2102                           ;virtualwire.c: 159: while (vw_tx_enabled);
  2103                           
  2104                           ;incstack = 0
  2105                           ; Regs used in _vw_wait_tx: [wreg+status,2+status,0]
  2106                           
  2107  07F9  1283               	bcf	3,5	;RP0=0, select bank0
  2108  07FA  1303               	bcf	3,6	;RP1=0, select bank0
  2109  07FB  085D               	movf	_vw_tx_enabled,w
  2110  07FC  1903               	btfsc	3,2
  2111  07FD  0008               	return
  2112  07FE  2FF9               	goto	l1893
  2113  07FF                     __end_of_vw_wait_tx:	
  2114                           
  2115                           	psect	text7
  2116  0F4E                     __ptext7:	
  2117 ;; *************** function _vw_tx_start *****************
  2118 ;; Defined at:
  2119 ;;		line 168 in file "virtualwire.c"
  2120 ;; Parameters:    Size  Location     Type
  2121 ;;		None
  2122 ;; Auto vars:     Size  Location     Type
  2123 ;;		None
  2124 ;; Return value:  Size  Location     Type
  2125 ;;                  1    wreg      void 
  2126 ;; Registers used:
  2127 ;;		status,2
  2128 ;; Tracked objects:
  2129 ;;		On entry : 0/0
  2130 ;;		On exit  : 0/0
  2131 ;;		Unchanged: 0/0
  2132 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2133 ;;      Params:         0       0       0       0       0
  2134 ;;      Locals:         0       0       0       0       0
  2135 ;;      Temps:          0       0       0       0       0
  2136 ;;      Totals:         0       0       0       0       0
  2137 ;;Total ram usage:        0 bytes
  2138 ;; Hardware stack levels used:    1
  2139 ;; Hardware stack levels required when called:    5
  2140 ;; This function calls:
  2141 ;;		Nothing
  2142 ;; This function is called by:
  2143 ;;		_vw_send
  2144 ;; This function uses a non-reentrant model
  2145 ;;
  2146                           
  2147                           
  2148                           ;psect for function _vw_tx_start
  2149  0F4E                     _vw_tx_start:	
  2150                           
  2151                           ;virtualwire.c: 170: vw_tx_index = 0;
  2152                           
  2153                           ;incstack = 0
  2154                           ; Regs used in _vw_tx_start: [status,2]
  2155  0F4E  1283               	bcf	3,5	;RP0=0, select bank0
  2156  0F4F  1303               	bcf	3,6	;RP1=0, select bank0
  2157  0F50  01DE               	clrf	_vw_tx_index
  2158                           
  2159                           ;virtualwire.c: 171: vw_tx_bit = 0;
  2160  0F51  01DC               	clrf	_vw_tx_bit
  2161                           
  2162                           ;virtualwire.c: 172: vw_tx_sample = 0;
  2163  0F52  01DF               	clrf	_vw_tx_sample
  2164                           
  2165                           ;virtualwire.c: 174: vw_tx_header = 1;
  2166  0F53  1683               	bsf	3,5	;RP0=1, select bank1
  2167  0F54  1303               	bcf	3,6	;RP1=0, select bank1
  2168  0F55  01AA               	clrf	_vw_tx_header^(0+128)
  2169  0F56  0AAA               	incf	_vw_tx_header^(0+128),f
  2170                           
  2171                           ;virtualwire.c: 177: vw_tx_enabled = 1;
  2172  0F57  1283               	bcf	3,5	;RP0=0, select bank0
  2173  0F58  1303               	bcf	3,6	;RP1=0, select bank0
  2174  0F59  01DD               	clrf	_vw_tx_enabled
  2175  0F5A  0ADD               	incf	_vw_tx_enabled,f
  2176  0F5B  0008               	return
  2177  0F5C                     __end_of_vw_tx_start:	
  2178                           
  2179                           	psect	text8
  2180  0725                     __ptext8:	
  2181 ;; *************** function __crc_ccitt_update *****************
  2182 ;; Defined at:
  2183 ;;		line 51 in file "../_libs/crc16.h"
  2184 ;; Parameters:    Size  Location     Type
  2185 ;;  crc             2    4[BANK0 ] unsigned int 
  2186 ;;  data            1    6[BANK0 ] unsigned char 
  2187 ;; Auto vars:     Size  Location     Type
  2188 ;;		None
  2189 ;; Return value:  Size  Location     Type
  2190 ;;                  2    4[BANK0 ] unsigned int 
  2191 ;; Registers used:
  2192 ;;		wreg, status,2, status,0, btemp+1
  2193 ;; Tracked objects:
  2194 ;;		On entry : 0/0
  2195 ;;		On exit  : 0/0
  2196 ;;		Unchanged: 0/0
  2197 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2198 ;;      Params:         0       3       0       0       0
  2199 ;;      Locals:         0       0       0       0       0
  2200 ;;      Temps:          0      13       0       0       0
  2201 ;;      Totals:         0      16       0       0       0
  2202 ;;Total ram usage:       16 bytes
  2203 ;; Hardware stack levels used:    1
  2204 ;; Hardware stack levels required when called:    5
  2205 ;; This function calls:
  2206 ;;		Nothing
  2207 ;; This function is called by:
  2208 ;;		_vw_send
  2209 ;;		_vw_crc
  2210 ;; This function uses a non-reentrant model
  2211 ;;
  2212                           
  2213                           
  2214                           ;psect for function __crc_ccitt_update
  2215  0725                     __crc_ccitt_update:	
  2216                           
  2217                           ;crc16.h: 53: data ^= ((crc)&0xff);
  2218                           
  2219                           ;incstack = 0
  2220                           ; Regs used in __crc_ccitt_update: [wreg+status,2+status,0+btemp+1]
  2221  0725  1283               	bcf	3,5	;RP0=0, select bank0
  2222  0726  1303               	bcf	3,6	;RP1=0, select bank0
  2223  0727  0824               	movf	__crc_ccitt_update@crc,w
  2224  0728  00A7               	movwf	??__crc_ccitt_update
  2225  0729  0827               	movf	??__crc_ccitt_update,w
  2226  072A  06A6               	xorwf	__crc_ccitt_update@data,f
  2227                           
  2228                           ;crc16.h: 54: data ^= data << 4;
  2229  072B  0826               	movf	__crc_ccitt_update@data,w
  2230  072C  00A7               	movwf	??__crc_ccitt_update
  2231  072D  3003               	movlw	3
  2232  072E                     u2255:	
  2233  072E  1003               	clrc
  2234  072F  0DA7               	rlf	??__crc_ccitt_update,f
  2235  0730  3EFF               	addlw	-1
  2236  0731  1D03               	skipz
  2237  0732  2F2E               	goto	u2255
  2238  0733  1003               	clrc
  2239  0734  0D27               	rlf	??__crc_ccitt_update,w
  2240  0735  00A8               	movwf	??__crc_ccitt_update+1
  2241  0736  0828               	movf	??__crc_ccitt_update+1,w
  2242  0737  06A6               	xorwf	__crc_ccitt_update@data,f
  2243                           
  2244                           ;crc16.h: 56: return ((((uint16_t) data << 8) | ((crc)>>8)) ^ (uint8_t) (data >> 4)
  2245                           ;crc16.h: 57: ^ ((uint16_t) data << 3));
  2246  0738  0826               	movf	__crc_ccitt_update@data,w
  2247  0739  00A7               	movwf	??__crc_ccitt_update
  2248  073A  01A8               	clrf	??__crc_ccitt_update+1
  2249  073B  1003               	clrc
  2250  073C  0DA7               	rlf	??__crc_ccitt_update,f
  2251  073D  0DA8               	rlf	??__crc_ccitt_update+1,f
  2252  073E  1003               	clrc
  2253  073F  0DA7               	rlf	??__crc_ccitt_update,f
  2254  0740  0DA8               	rlf	??__crc_ccitt_update+1,f
  2255  0741  1003               	clrc
  2256  0742  0DA7               	rlf	??__crc_ccitt_update,f
  2257  0743  0DA8               	rlf	??__crc_ccitt_update+1,f
  2258  0744  0826               	movf	__crc_ccitt_update@data,w
  2259  0745  00A9               	movwf	??__crc_ccitt_update+2
  2260  0746  3004               	movlw	4
  2261  0747                     u2265:	
  2262  0747  1003               	clrc
  2263  0748  0CA9               	rrf	??__crc_ccitt_update+2,f
  2264  0749  3EFF               	addlw	-1
  2265  074A  1D03               	skipz
  2266  074B  2F47               	goto	u2265
  2267  074C  0829               	movf	??__crc_ccitt_update+2,w
  2268  074D  00AA               	movwf	??__crc_ccitt_update+3
  2269  074E  01AB               	clrf	??__crc_ccitt_update+4
  2270  074F  0825               	movf	__crc_ccitt_update@crc+1,w
  2271  0750  00AD               	movwf	??__crc_ccitt_update+6
  2272  0751  0824               	movf	__crc_ccitt_update@crc,w
  2273  0752  00AC               	movwf	??__crc_ccitt_update+5
  2274  0753  082D               	movf	??__crc_ccitt_update+6,w
  2275  0754  00AC               	movwf	??__crc_ccitt_update+5
  2276  0755  01AD               	clrf	??__crc_ccitt_update+6
  2277  0756  0826               	movf	__crc_ccitt_update@data,w
  2278  0757  00AE               	movwf	??__crc_ccitt_update+7
  2279  0758  01AF               	clrf	??__crc_ccitt_update+8
  2280  0759  082E               	movf	??__crc_ccitt_update+7,w
  2281  075A  00AF               	movwf	??__crc_ccitt_update+8
  2282  075B  01AE               	clrf	??__crc_ccitt_update+7
  2283  075C  082C               	movf	??__crc_ccitt_update+5,w
  2284  075D  042E               	iorwf	??__crc_ccitt_update+7,w
  2285  075E  00B0               	movwf	??__crc_ccitt_update+9
  2286  075F  082D               	movf	??__crc_ccitt_update+6,w
  2287  0760  042F               	iorwf	??__crc_ccitt_update+8,w
  2288  0761  00B1               	movwf	??__crc_ccitt_update+10
  2289  0762  082A               	movf	??__crc_ccitt_update+3,w
  2290  0763  0630               	xorwf	??__crc_ccitt_update+9,w
  2291  0764  00B2               	movwf	??__crc_ccitt_update+11
  2292  0765  082B               	movf	??__crc_ccitt_update+4,w
  2293  0766  0631               	xorwf	??__crc_ccitt_update+10,w
  2294  0767  00B3               	movwf	??__crc_ccitt_update+12
  2295  0768  0827               	movf	??__crc_ccitt_update,w
  2296  0769  0632               	xorwf	??__crc_ccitt_update+11,w
  2297  076A  00A4               	movwf	?__crc_ccitt_update
  2298  076B  0828               	movf	??__crc_ccitt_update+1,w
  2299  076C  0633               	xorwf	??__crc_ccitt_update+12,w
  2300  076D  00A5               	movwf	?__crc_ccitt_update+1
  2301  076E  0008               	return
  2302  076F                     __end_of__crc_ccitt_update:	
  2303                           
  2304                           	psect	text9
  2305  028A                     __ptext9:	
  2306 ;; *************** function _sprintf *****************
  2307 ;; Defined at:
  2308 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  2309 ;; Parameters:    Size  Location     Type
  2310 ;;  sp              1    wreg     PTR unsigned char 
  2311 ;;		 -> main@adcBuffer(7), 
  2312 ;;  f               1   28[BANK0 ] PTR const unsigned char 
  2313 ;;		 -> STR_2(7), STR_1(7), 
  2314 ;; Auto vars:     Size  Location     Type
  2315 ;;  sp              1   48[BANK0 ] PTR unsigned char 
  2316 ;;		 -> main@adcBuffer(7), 
  2317 ;;  val             4   43[BANK0 ] unsigned long 
  2318 ;;  tmpval          4    0        struct .
  2319 ;;  prec            2   41[BANK0 ] int 
  2320 ;;  cp              2    0        PTR const unsigned char 
  2321 ;;  len             2    0        unsigned int 
  2322 ;;  c               1   49[BANK0 ] char 
  2323 ;;  ap              1   47[BANK0 ] PTR void [1]
  2324 ;;		 -> ?_sprintf(2), 
  2325 ;;  flag            1   40[BANK0 ] unsigned char 
  2326 ;; Return value:  Size  Location     Type
  2327 ;;                  2   28[BANK0 ] int 
  2328 ;; Registers used:
  2329 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2330 ;; Tracked objects:
  2331 ;;		On entry : 0/0
  2332 ;;		On exit  : 0/0
  2333 ;;		Unchanged: 0/0
  2334 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2335 ;;      Params:         0       7       0       0       0
  2336 ;;      Locals:         0      10       0       0       0
  2337 ;;      Temps:          0       5       0       0       0
  2338 ;;      Totals:         0      22       0       0       0
  2339 ;;Total ram usage:       22 bytes
  2340 ;; Hardware stack levels used:    1
  2341 ;; Hardware stack levels required when called:    6
  2342 ;; This function calls:
  2343 ;;		___lldiv
  2344 ;;		___llmod
  2345 ;; This function is called by:
  2346 ;;		_main
  2347 ;; This function uses a non-reentrant model
  2348 ;;
  2349                           
  2350                           
  2351                           ;psect for function _sprintf
  2352  028A                     _sprintf:	
  2353                           
  2354                           ;incstack = 0
  2355                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2356                           ;sprintf@sp stored from wreg
  2357  028A  1283               	bcf	3,5	;RP0=0, select bank0
  2358  028B  1303               	bcf	3,6	;RP1=0, select bank0
  2359  028C  00D0               	movwf	sprintf@sp
  2360                           
  2361                           ;doprnt.c: 494: va_list ap;
  2362                           ;doprnt.c: 499: signed char c;
  2363                           ;doprnt.c: 504: int prec;
  2364                           ;doprnt.c: 508: unsigned char flag;
  2365                           ;doprnt.c: 523: union {
  2366                           ;doprnt.c: 524: unsigned long vd;
  2367                           ;doprnt.c: 525: double integ;
  2368                           ;doprnt.c: 526: } tmpval;
  2369                           ;doprnt.c: 528: unsigned long val;
  2370                           ;doprnt.c: 529: unsigned len;
  2371                           ;doprnt.c: 530: const char * cp;
  2372                           ;doprnt.c: 533: *ap = __va_start();
  2373  028D  303D               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
  2374  028E  00C3               	movwf	??_sprintf
  2375  028F  0843               	movf	??_sprintf,w
  2376  0290  00CF               	movwf	sprintf@ap
  2377  0291                     l2031:	
  2378                           ;doprnt.c: 536: while(c = *f++) {
  2379                           
  2380  0291  3001               	movlw	1
  2381  0292  07BC               	addwf	sprintf@f,f
  2382  0293  30FF               	movlw	-1
  2383  0294  073C               	addwf	sprintf@f,w
  2384  0295  0084               	movwf	4
  2385  0296  120A  118A  2678  120A  118A  	fcall	stringdir
  2386  029B  00C3               	movwf	??_sprintf
  2387  029C  0843               	movf	??_sprintf,w
  2388  029D  00D1               	movwf	sprintf@c
  2389  029E  0851               	movf	sprintf@c,w
  2390  029F  1903               	btfsc	3,2
  2391  02A0  2BA0               	goto	l2033
  2392                           
  2393                           ;doprnt.c: 538: if(c != '%')
  2394  02A1  3025               	movlw	37
  2395  02A2  0651               	xorwf	sprintf@c,w
  2396  02A3  1903               	btfsc	3,2
  2397  02A4  2AB1               	goto	l1993
  2398                           
  2399                           ;doprnt.c: 540: {
  2400                           ;doprnt.c: 541: ((*sp++ = (c)));
  2401  02A5  0851               	movf	sprintf@c,w
  2402  02A6  00C3               	movwf	??_sprintf
  2403  02A7  0850               	movf	sprintf@sp,w
  2404  02A8  0084               	movwf	4
  2405  02A9  0843               	movf	??_sprintf,w
  2406  02AA  1383               	bcf	3,7	;select IRP bank0
  2407  02AB  0080               	movwf	0
  2408  02AC  3001               	movlw	1
  2409  02AD  00C3               	movwf	??_sprintf
  2410  02AE  0843               	movf	??_sprintf,w
  2411  02AF  07D0               	addwf	sprintf@sp,f
  2412                           
  2413                           ;doprnt.c: 542: continue;
  2414  02B0  2A91               	goto	l2031
  2415  02B1                     l1993:	
  2416                           
  2417                           ;doprnt.c: 543: }
  2418                           ;doprnt.c: 548: flag = 0;
  2419  02B1  01C8               	clrf	sprintf@flag
  2420                           
  2421                           ;doprnt.c: 635: switch(c = *f++) {
  2422                           
  2423                           ;doprnt.c: 633: loop:
  2424  02B2  2ABA               	goto	l1999
  2425  02B3                     l270:	
  2426                           ;doprnt.c: 641: case 'l':
  2427                           
  2428                           ;doprnt.c: 638: goto alldone;
  2429                           
  2430                           ;doprnt.c: 637: case 0:
  2431                           
  2432                           
  2433                           ;doprnt.c: 643: flag |= 0x10;
  2434  02B3  1648               	bsf	sprintf@flag,4
  2435                           
  2436                           ;doprnt.c: 644: goto loop;
  2437  02B4  2ABA               	goto	l1999
  2438  02B5                     l1995:	
  2439                           ;doprnt.c: 817: case 'u':
  2440                           
  2441                           ;doprnt.c: 813: continue;
  2442                           
  2443                           ;doprnt.c: 802: default:
  2444                           
  2445                           
  2446                           ;doprnt.c: 818: flag |= 0xC0;
  2447  02B5  30C0               	movlw	192
  2448  02B6  00C3               	movwf	??_sprintf
  2449  02B7  0843               	movf	??_sprintf,w
  2450  02B8  04C8               	iorwf	sprintf@flag,f
  2451                           
  2452                           ;doprnt.c: 822: }
  2453                           
  2454                           ;doprnt.c: 819: break;
  2455  02B9  2ACF               	goto	l273
  2456  02BA                     l1999:	
  2457  02BA  3001               	movlw	1
  2458  02BB  07BC               	addwf	sprintf@f,f
  2459  02BC  30FF               	movlw	-1
  2460  02BD  073C               	addwf	sprintf@f,w
  2461  02BE  0084               	movwf	4
  2462  02BF  120A  118A  2678  120A  118A  	fcall	stringdir
  2463  02C4  00D1               	movwf	sprintf@c
  2464                           
  2465                           ; Switch size 1, requested type "space"
  2466                           ; Number of cases is 3, Range of values is 0 to 117
  2467                           ; switch strategies available:
  2468                           ; Name         Instructions Cycles
  2469                           ; simple_byte           10     6 (average)
  2470                           ; jumptable            260     6 (fixed)
  2471                           ;	Chosen strategy is simple_byte
  2472  02C5  3A00               	xorlw	0	; case 0
  2473  02C6  1903               	skipnz
  2474  02C7  2BA0               	goto	l2033
  2475  02C8  3A6C               	xorlw	108	; case 108
  2476  02C9  1903               	skipnz
  2477  02CA  2AB3               	goto	l270
  2478  02CB  3A19               	xorlw	25	; case 117
  2479  02CC  1903               	skipnz
  2480  02CD  2AB5               	goto	l1995
  2481  02CE  2A91               	goto	l2031
  2482  02CF                     l273:	
  2483                           
  2484                           ;doprnt.c: 1273: {
  2485                           ;doprnt.c: 1281: if(flag & 0x10)
  2486  02CF  1E48               	btfss	sprintf@flag,4
  2487  02D0  2AE1               	goto	l2005
  2488                           
  2489                           ;doprnt.c: 1282: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
  2490  02D1  084F               	movf	sprintf@ap,w
  2491  02D2  0084               	movwf	4
  2492  02D3  1383               	bcf	3,7	;select IRP bank0
  2493  02D4  0800               	movf	0,w
  2494  02D5  00CB               	movwf	sprintf@val
  2495  02D6  0A84               	incf	4,f
  2496  02D7  0800               	movf	0,w
  2497  02D8  00CC               	movwf	sprintf@val+1
  2498  02D9  0A84               	incf	4,f
  2499  02DA  0800               	movf	0,w
  2500  02DB  00CD               	movwf	sprintf@val+2
  2501  02DC  0A84               	incf	4,f
  2502  02DD  0800               	movf	0,w
  2503  02DE  00CE               	movwf	sprintf@val+3
  2504  02DF  3004               	movlw	4
  2505  02E0  2AF0               	goto	L2
  2506  02E1                     l2005:	
  2507                           
  2508                           ;doprnt.c: 1283: else
  2509                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  2510  02E1  084F               	movf	sprintf@ap,w
  2511  02E2  0084               	movwf	4
  2512  02E3  1383               	bcf	3,7	;select IRP bank0
  2513  02E4  0800               	movf	0,w
  2514  02E5  00C3               	movwf	??_sprintf
  2515  02E6  0A84               	incf	4,f
  2516  02E7  0800               	movf	0,w
  2517  02E8  00C4               	movwf	??_sprintf+1
  2518  02E9  0843               	movf	??_sprintf,w
  2519  02EA  00CB               	movwf	sprintf@val
  2520  02EB  0844               	movf	??_sprintf+1,w
  2521  02EC  00CC               	movwf	sprintf@val+1
  2522  02ED  01CD               	clrf	sprintf@val+2
  2523  02EE  01CE               	clrf	sprintf@val+3
  2524  02EF  3002               	movlw	2
  2525  02F0                     L2:	
  2526  02F0  00C3               	movwf	??_sprintf
  2527  02F1  0843               	movf	??_sprintf,w
  2528  02F2  07CF               	addwf	sprintf@ap,f
  2529                           
  2530                           ;doprnt.c: 1287: }
  2531                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2532  02F3  01D1               	clrf	sprintf@c
  2533  02F4  0AD1               	incf	sprintf@c,f
  2534  02F5  300A               	movlw	10
  2535  02F6  0651               	xorwf	sprintf@c,w
  2536  02F7  1903               	btfsc	3,2
  2537  02F8  2B35               	goto	l2021
  2538  02F9                     l2015:	
  2539                           
  2540                           ;doprnt.c: 1306: if(val < dpowers[c])
  2541  02F9  0851               	movf	sprintf@c,w
  2542  02FA  00C3               	movwf	??_sprintf
  2543  02FB  3001               	movlw	1
  2544  02FC                     u2535:	
  2545  02FC  1003               	clrc
  2546  02FD  0DC3               	rlf	??_sprintf,f
  2547  02FE  3EFF               	addlw	-1
  2548  02FF  1D03               	skipz
  2549  0300  2AFC               	goto	u2535
  2550  0301  1003               	clrc
  2551  0302  0D43               	rlf	??_sprintf,w
  2552  0303  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  2553  0304  0084               	movwf	4
  2554  0305  120A  118A  2678  120A  118A  	fcall	stringdir
  2555  030A  00C4               	movwf	??_sprintf+1
  2556  030B  120A  118A  2678  120A  118A  	fcall	stringdir
  2557  0310  00C5               	movwf	??_sprintf+2
  2558  0311  120A  118A  2678  120A  118A  	fcall	stringdir
  2559  0316  00C6               	movwf	??_sprintf+3
  2560  0317  120A  118A  2678  120A  118A  	fcall	stringdir
  2561  031C  00C7               	movwf	??_sprintf+4
  2562  031D  0847               	movf	??_sprintf+4,w
  2563  031E  024E               	subwf	sprintf@val+3,w
  2564  031F  1D03               	skipz
  2565  0320  2B2B               	goto	u2545
  2566  0321  0846               	movf	??_sprintf+3,w
  2567  0322  024D               	subwf	sprintf@val+2,w
  2568  0323  1D03               	skipz
  2569  0324  2B2B               	goto	u2545
  2570  0325  0845               	movf	??_sprintf+2,w
  2571  0326  024C               	subwf	sprintf@val+1,w
  2572  0327  1D03               	skipz
  2573  0328  2B2B               	goto	u2545
  2574  0329  0844               	movf	??_sprintf+1,w
  2575  032A  024B               	subwf	sprintf@val,w
  2576  032B                     u2545:	
  2577  032B  1C03               	btfss	3,0
  2578  032C  2B35               	goto	l2021
  2579                           
  2580                           ;doprnt.c: 1307: break;
  2581  032D  3001               	movlw	1
  2582  032E  00C3               	movwf	??_sprintf
  2583  032F  0843               	movf	??_sprintf,w
  2584  0330  07D1               	addwf	sprintf@c,f
  2585  0331  300A               	movlw	10
  2586  0332  0651               	xorwf	sprintf@c,w
  2587  0333  1D03               	btfss	3,2
  2588  0334  2AF9               	goto	l2015
  2589  0335                     l2021:	
  2590                           
  2591                           ;doprnt.c: 1422: {
  2592                           ;doprnt.c: 1469: }
  2593                           ;doprnt.c: 1472: prec = c;
  2594  0335  0851               	movf	sprintf@c,w
  2595  0336  00C9               	movwf	sprintf@prec
  2596  0337  01CA               	clrf	sprintf@prec+1
  2597  0338  1BC9               	btfsc	sprintf@prec,7
  2598  0339  03CA               	decf	sprintf@prec+1,f
  2599  033A                     l2029:	
  2600                           ;doprnt.c: 1474: while(prec--) {
  2601                           
  2602  033A  30FF               	movlw	255
  2603  033B  07C9               	addwf	sprintf@prec,f
  2604  033C  1803               	skipnc
  2605  033D  0ACA               	incf	sprintf@prec+1,f
  2606  033E  30FF               	movlw	255
  2607  033F  07CA               	addwf	sprintf@prec+1,f
  2608  0340  0A49               	incf	sprintf@prec,w
  2609  0341  1903               	btfsc	3,2
  2610  0342  0A4A               	incf	sprintf@prec+1,w
  2611  0343  1903               	btfsc	3,2
  2612  0344  2A91               	goto	l2031
  2613                           
  2614                           ;doprnt.c: 1478: {
  2615                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2616  0345  3000               	movlw	0
  2617  0346  00B5               	movwf	___llmod@divisor+3
  2618  0347  3000               	movlw	0
  2619  0348  00B4               	movwf	___llmod@divisor+2
  2620  0349  3000               	movlw	0
  2621  034A  00B3               	movwf	___llmod@divisor+1
  2622  034B  300A               	movlw	10
  2623  034C  00B2               	movwf	___llmod@divisor
  2624  034D  0849               	movf	sprintf@prec,w
  2625  034E  00C3               	movwf	??_sprintf
  2626  034F  3001               	movlw	1
  2627  0350                     u2565:	
  2628  0350  1003               	clrc
  2629  0351  0DC3               	rlf	??_sprintf,f
  2630  0352  3EFF               	addlw	-1
  2631  0353  1D03               	skipz
  2632  0354  2B50               	goto	u2565
  2633  0355  1003               	clrc
  2634  0356  0D43               	rlf	??_sprintf,w
  2635  0357  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  2636  0358  0084               	movwf	4
  2637  0359  120A  118A  2678  120A  118A  	fcall	stringdir
  2638  035E  00A4               	movwf	___lldiv@divisor
  2639  035F  120A  118A  2678  120A  118A  	fcall	stringdir
  2640  0364  00A5               	movwf	___lldiv@divisor+1
  2641  0365  120A  118A  2678  120A  118A  	fcall	stringdir
  2642  036A  00A6               	movwf	___lldiv@divisor+2
  2643  036B  120A  118A  2678  120A  118A  	fcall	stringdir
  2644  0370  00A7               	movwf	___lldiv@divisor+3
  2645  0371  084E               	movf	sprintf@val+3,w
  2646  0372  00AB               	movwf	___lldiv@dividend+3
  2647  0373  084D               	movf	sprintf@val+2,w
  2648  0374  00AA               	movwf	___lldiv@dividend+2
  2649  0375  084C               	movf	sprintf@val+1,w
  2650  0376  00A9               	movwf	___lldiv@dividend+1
  2651  0377  084B               	movf	sprintf@val,w
  2652  0378  00A8               	movwf	___lldiv@dividend
  2653  0379  120A  118A  2618  120A  118A  	fcall	___lldiv
  2654  037E  1283               	bcf	3,5	;RP0=0, select bank0
  2655  037F  1303               	bcf	3,6	;RP1=0, select bank0
  2656  0380  0827               	movf	?___lldiv+3,w
  2657  0381  00B9               	movwf	___llmod@dividend+3
  2658  0382  0826               	movf	?___lldiv+2,w
  2659  0383  00B8               	movwf	___llmod@dividend+2
  2660  0384  0825               	movf	?___lldiv+1,w
  2661  0385  00B7               	movwf	___llmod@dividend+1
  2662  0386  0824               	movf	?___lldiv,w
  2663  0387  00B6               	movwf	___llmod@dividend
  2664  0388  120A  118A  26D7  120A  118A  	fcall	___llmod
  2665  038D  1283               	bcf	3,5	;RP0=0, select bank0
  2666  038E  1303               	bcf	3,6	;RP1=0, select bank0
  2667  038F  0832               	movf	?___llmod,w
  2668  0390  3E30               	addlw	48
  2669  0391  00C4               	movwf	??_sprintf+1
  2670  0392  0844               	movf	??_sprintf+1,w
  2671  0393  00D1               	movwf	sprintf@c
  2672                           
  2673                           ;doprnt.c: 1523: }
  2674                           ;doprnt.c: 1524: ((*sp++ = (c)));
  2675  0394  0851               	movf	sprintf@c,w
  2676  0395  00C3               	movwf	??_sprintf
  2677  0396  0850               	movf	sprintf@sp,w
  2678  0397  0084               	movwf	4
  2679  0398  0843               	movf	??_sprintf,w
  2680  0399  1383               	bcf	3,7	;select IRP bank0
  2681  039A  0080               	movwf	0
  2682  039B  3001               	movlw	1
  2683  039C  00C3               	movwf	??_sprintf
  2684  039D  0843               	movf	??_sprintf,w
  2685  039E  07D0               	addwf	sprintf@sp,f
  2686  039F  2B3A               	goto	l2029
  2687  03A0                     l2033:	
  2688                           ;doprnt.c: 1525: }
  2689                           ;doprnt.c: 1533: }
  2690                           ;doprnt.c: 1535: alldone:
  2691                           
  2692                           
  2693                           ;doprnt.c: 1538: *sp = 0;
  2694  03A0  0850               	movf	sprintf@sp,w
  2695  03A1  0084               	movwf	4
  2696  03A2  1383               	bcf	3,7	;select IRP bank0
  2697  03A3  0180               	clrf	0
  2698  03A4  0008               	return
  2699  03A5                     __end_of_sprintf:	
  2700                           ;doprnt.c: 1540: return 0;
  2701                           ;	Return value of _sprintf is never used
  2702                           
  2703                           
  2704                           	psect	text10
  2705  06D7                     __ptext10:	
  2706 ;; *************** function ___llmod *****************
  2707 ;; Defined at:
  2708 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\llmod.c"
  2709 ;; Parameters:    Size  Location     Type
  2710 ;;  divisor         4   18[BANK0 ] unsigned long 
  2711 ;;  dividend        4   22[BANK0 ] unsigned long 
  2712 ;; Auto vars:     Size  Location     Type
  2713 ;;  counter         1   27[BANK0 ] unsigned char 
  2714 ;; Return value:  Size  Location     Type
  2715 ;;                  4   18[BANK0 ] unsigned long 
  2716 ;; Registers used:
  2717 ;;		wreg, status,2, status,0
  2718 ;; Tracked objects:
  2719 ;;		On entry : 0/0
  2720 ;;		On exit  : 0/0
  2721 ;;		Unchanged: 0/0
  2722 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2723 ;;      Params:         0       8       0       0       0
  2724 ;;      Locals:         0       1       0       0       0
  2725 ;;      Temps:          0       1       0       0       0
  2726 ;;      Totals:         0      10       0       0       0
  2727 ;;Total ram usage:       10 bytes
  2728 ;; Hardware stack levels used:    1
  2729 ;; Hardware stack levels required when called:    5
  2730 ;; This function calls:
  2731 ;;		Nothing
  2732 ;; This function is called by:
  2733 ;;		_sprintf
  2734 ;; This function uses a non-reentrant model
  2735 ;;
  2736                           
  2737                           
  2738                           ;psect for function ___llmod
  2739  06D7                     ___llmod:	
  2740                           
  2741                           ;incstack = 0
  2742                           ; Regs used in ___llmod: [wreg+status,2+status,0]
  2743  06D7  1283               	bcf	3,5	;RP0=0, select bank0
  2744  06D8  1303               	bcf	3,6	;RP1=0, select bank0
  2745  06D9  0835               	movf	___llmod@divisor+3,w
  2746  06DA  0434               	iorwf	___llmod@divisor+2,w
  2747  06DB  0433               	iorwf	___llmod@divisor+1,w
  2748  06DC  0432               	iorwf	___llmod@divisor,w
  2749  06DD  1903               	skipnz
  2750  06DE  2F1C               	goto	l1941
  2751  06DF  01BB               	clrf	___llmod@counter
  2752  06E0  0ABB               	incf	___llmod@counter,f
  2753  06E1                     l1931:	
  2754  06E1  1BB5               	btfsc	___llmod@divisor+3,7
  2755  06E2  2EF1               	goto	l1933
  2756  06E3  3001               	movlw	1
  2757  06E4  00BA               	movwf	??___llmod
  2758  06E5                     u2405:	
  2759  06E5  1003               	clrc
  2760  06E6  0DB2               	rlf	___llmod@divisor,f
  2761  06E7  0DB3               	rlf	___llmod@divisor+1,f
  2762  06E8  0DB4               	rlf	___llmod@divisor+2,f
  2763  06E9  0DB5               	rlf	___llmod@divisor+3,f
  2764  06EA  0BBA               	decfsz	??___llmod,f
  2765  06EB  2EE5               	goto	u2405
  2766  06EC  3001               	movlw	1
  2767  06ED  00BA               	movwf	??___llmod
  2768  06EE  083A               	movf	??___llmod,w
  2769  06EF  07BB               	addwf	___llmod@counter,f
  2770  06F0  2EE1               	goto	l1931
  2771  06F1                     l1933:	
  2772  06F1  0835               	movf	___llmod@divisor+3,w
  2773  06F2  0239               	subwf	___llmod@dividend+3,w
  2774  06F3  1D03               	skipz
  2775  06F4  2EFF               	goto	u2425
  2776  06F5  0834               	movf	___llmod@divisor+2,w
  2777  06F6  0238               	subwf	___llmod@dividend+2,w
  2778  06F7  1D03               	skipz
  2779  06F8  2EFF               	goto	u2425
  2780  06F9  0833               	movf	___llmod@divisor+1,w
  2781  06FA  0237               	subwf	___llmod@dividend+1,w
  2782  06FB  1D03               	skipz
  2783  06FC  2EFF               	goto	u2425
  2784  06FD  0832               	movf	___llmod@divisor,w
  2785  06FE  0236               	subwf	___llmod@dividend,w
  2786  06FF                     u2425:	
  2787  06FF  1C03               	skipc
  2788  0700  2F0F               	goto	l1937
  2789  0701  0832               	movf	___llmod@divisor,w
  2790  0702  02B6               	subwf	___llmod@dividend,f
  2791  0703  0833               	movf	___llmod@divisor+1,w
  2792  0704  1C03               	skipc
  2793  0705  0F33               	incfsz	___llmod@divisor+1,w
  2794  0706  02B7               	subwf	___llmod@dividend+1,f
  2795  0707  0834               	movf	___llmod@divisor+2,w
  2796  0708  1C03               	skipc
  2797  0709  0F34               	incfsz	___llmod@divisor+2,w
  2798  070A  02B8               	subwf	___llmod@dividend+2,f
  2799  070B  0835               	movf	___llmod@divisor+3,w
  2800  070C  1C03               	skipc
  2801  070D  0F35               	incfsz	___llmod@divisor+3,w
  2802  070E  02B9               	subwf	___llmod@dividend+3,f
  2803  070F                     l1937:	
  2804  070F  3001               	movlw	1
  2805  0710                     u2435:	
  2806  0710  1003               	clrc
  2807  0711  0CB5               	rrf	___llmod@divisor+3,f
  2808  0712  0CB4               	rrf	___llmod@divisor+2,f
  2809  0713  0CB3               	rrf	___llmod@divisor+1,f
  2810  0714  0CB2               	rrf	___llmod@divisor,f
  2811  0715  3EFF               	addlw	-1
  2812  0716  1D03               	skipz
  2813  0717  2F10               	goto	u2435
  2814  0718  3001               	movlw	1
  2815  0719  02BB               	subwf	___llmod@counter,f
  2816  071A  1D03               	btfss	3,2
  2817  071B  2EF1               	goto	l1933
  2818  071C                     l1941:	
  2819  071C  0839               	movf	___llmod@dividend+3,w
  2820  071D  00B5               	movwf	?___llmod+3
  2821  071E  0838               	movf	___llmod@dividend+2,w
  2822  071F  00B4               	movwf	?___llmod+2
  2823  0720  0837               	movf	___llmod@dividend+1,w
  2824  0721  00B3               	movwf	?___llmod+1
  2825  0722  0836               	movf	___llmod@dividend,w
  2826  0723  00B2               	movwf	?___llmod
  2827  0724  0008               	return
  2828  0725                     __end_of___llmod:	
  2829                           
  2830                           	psect	text11
  2831  0618                     __ptext11:	
  2832 ;; *************** function ___lldiv *****************
  2833 ;; Defined at:
  2834 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  2835 ;; Parameters:    Size  Location     Type
  2836 ;;  divisor         4    4[BANK0 ] unsigned long 
  2837 ;;  dividend        4    8[BANK0 ] unsigned long 
  2838 ;; Auto vars:     Size  Location     Type
  2839 ;;  quotient        4   13[BANK0 ] unsigned long 
  2840 ;;  counter         1   17[BANK0 ] unsigned char 
  2841 ;; Return value:  Size  Location     Type
  2842 ;;                  4    4[BANK0 ] unsigned long 
  2843 ;; Registers used:
  2844 ;;		wreg, status,2, status,0
  2845 ;; Tracked objects:
  2846 ;;		On entry : 0/0
  2847 ;;		On exit  : 0/0
  2848 ;;		Unchanged: 0/0
  2849 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2850 ;;      Params:         0       8       0       0       0
  2851 ;;      Locals:         0       5       0       0       0
  2852 ;;      Temps:          0       1       0       0       0
  2853 ;;      Totals:         0      14       0       0       0
  2854 ;;Total ram usage:       14 bytes
  2855 ;; Hardware stack levels used:    1
  2856 ;; Hardware stack levels required when called:    5
  2857 ;; This function calls:
  2858 ;;		Nothing
  2859 ;; This function is called by:
  2860 ;;		_sprintf
  2861 ;; This function uses a non-reentrant model
  2862 ;;
  2863                           
  2864                           
  2865                           ;psect for function ___lldiv
  2866  0618                     ___lldiv:	
  2867                           
  2868                           ;incstack = 0
  2869                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  2870  0618  3000               	movlw	0
  2871  0619  1283               	bcf	3,5	;RP0=0, select bank0
  2872  061A  1303               	bcf	3,6	;RP1=0, select bank0
  2873  061B  00B0               	movwf	___lldiv@quotient+3
  2874  061C  3000               	movlw	0
  2875  061D  00AF               	movwf	___lldiv@quotient+2
  2876  061E  3000               	movlw	0
  2877  061F  00AE               	movwf	___lldiv@quotient+1
  2878  0620  3000               	movlw	0
  2879  0621  00AD               	movwf	___lldiv@quotient
  2880  0622  0827               	movf	___lldiv@divisor+3,w
  2881  0623  0426               	iorwf	___lldiv@divisor+2,w
  2882  0624  0425               	iorwf	___lldiv@divisor+1,w
  2883  0625  0424               	iorwf	___lldiv@divisor,w
  2884  0626  1903               	skipnz
  2885  0627  2E6F               	goto	l1921
  2886  0628  01B1               	clrf	___lldiv@counter
  2887  0629  0AB1               	incf	___lldiv@counter,f
  2888  062A                     l1907:	
  2889  062A  1BA7               	btfsc	___lldiv@divisor+3,7
  2890  062B  2E3A               	goto	l1909
  2891  062C  3001               	movlw	1
  2892  062D  00AC               	movwf	??___lldiv
  2893  062E                     u2335:	
  2894  062E  1003               	clrc
  2895  062F  0DA4               	rlf	___lldiv@divisor,f
  2896  0630  0DA5               	rlf	___lldiv@divisor+1,f
  2897  0631  0DA6               	rlf	___lldiv@divisor+2,f
  2898  0632  0DA7               	rlf	___lldiv@divisor+3,f
  2899  0633  0BAC               	decfsz	??___lldiv,f
  2900  0634  2E2E               	goto	u2335
  2901  0635  3001               	movlw	1
  2902  0636  00AC               	movwf	??___lldiv
  2903  0637  082C               	movf	??___lldiv,w
  2904  0638  07B1               	addwf	___lldiv@counter,f
  2905  0639  2E2A               	goto	l1907
  2906  063A                     l1909:	
  2907  063A  3001               	movlw	1
  2908  063B  00AC               	movwf	??___lldiv
  2909  063C                     u2355:	
  2910  063C  1003               	clrc
  2911  063D  0DAD               	rlf	___lldiv@quotient,f
  2912  063E  0DAE               	rlf	___lldiv@quotient+1,f
  2913  063F  0DAF               	rlf	___lldiv@quotient+2,f
  2914  0640  0DB0               	rlf	___lldiv@quotient+3,f
  2915  0641  0BAC               	decfsz	??___lldiv,f
  2916  0642  2E3C               	goto	u2355
  2917  0643  0827               	movf	___lldiv@divisor+3,w
  2918  0644  022B               	subwf	___lldiv@dividend+3,w
  2919  0645  1D03               	skipz
  2920  0646  2E51               	goto	u2365
  2921  0647  0826               	movf	___lldiv@divisor+2,w
  2922  0648  022A               	subwf	___lldiv@dividend+2,w
  2923  0649  1D03               	skipz
  2924  064A  2E51               	goto	u2365
  2925  064B  0825               	movf	___lldiv@divisor+1,w
  2926  064C  0229               	subwf	___lldiv@dividend+1,w
  2927  064D  1D03               	skipz
  2928  064E  2E51               	goto	u2365
  2929  064F  0824               	movf	___lldiv@divisor,w
  2930  0650  0228               	subwf	___lldiv@dividend,w
  2931  0651                     u2365:	
  2932  0651  1C03               	skipc
  2933  0652  2E62               	goto	l1917
  2934  0653  0824               	movf	___lldiv@divisor,w
  2935  0654  02A8               	subwf	___lldiv@dividend,f
  2936  0655  0825               	movf	___lldiv@divisor+1,w
  2937  0656  1C03               	skipc
  2938  0657  0F25               	incfsz	___lldiv@divisor+1,w
  2939  0658  02A9               	subwf	___lldiv@dividend+1,f
  2940  0659  0826               	movf	___lldiv@divisor+2,w
  2941  065A  1C03               	skipc
  2942  065B  0F26               	incfsz	___lldiv@divisor+2,w
  2943  065C  02AA               	subwf	___lldiv@dividend+2,f
  2944  065D  0827               	movf	___lldiv@divisor+3,w
  2945  065E  1C03               	skipc
  2946  065F  0F27               	incfsz	___lldiv@divisor+3,w
  2947  0660  02AB               	subwf	___lldiv@dividend+3,f
  2948  0661  142D               	bsf	___lldiv@quotient,0
  2949  0662                     l1917:	
  2950  0662  3001               	movlw	1
  2951  0663                     u2375:	
  2952  0663  1003               	clrc
  2953  0664  0CA7               	rrf	___lldiv@divisor+3,f
  2954  0665  0CA6               	rrf	___lldiv@divisor+2,f
  2955  0666  0CA5               	rrf	___lldiv@divisor+1,f
  2956  0667  0CA4               	rrf	___lldiv@divisor,f
  2957  0668  3EFF               	addlw	-1
  2958  0669  1D03               	skipz
  2959  066A  2E63               	goto	u2375
  2960  066B  3001               	movlw	1
  2961  066C  02B1               	subwf	___lldiv@counter,f
  2962  066D  1D03               	btfss	3,2
  2963  066E  2E3A               	goto	l1909
  2964  066F                     l1921:	
  2965  066F  0830               	movf	___lldiv@quotient+3,w
  2966  0670  00A7               	movwf	?___lldiv+3
  2967  0671  082F               	movf	___lldiv@quotient+2,w
  2968  0672  00A6               	movwf	?___lldiv+2
  2969  0673  082E               	movf	___lldiv@quotient+1,w
  2970  0674  00A5               	movwf	?___lldiv+1
  2971  0675  082D               	movf	___lldiv@quotient,w
  2972  0676  00A4               	movwf	?___lldiv
  2973  0677  0008               	return
  2974  0678                     __end_of___lldiv:	
  2975                           
  2976                           	psect	text12
  2977  0FBF                     __ptext12:	
  2978 ;; *************** function ___lmul *****************
  2979 ;; Defined at:
  2980 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul32.c"
  2981 ;; Parameters:    Size  Location     Type
  2982 ;;  multiplier      4    9[BANK0 ] unsigned long 
  2983 ;;  multiplicand    4   13[BANK0 ] unsigned long 
  2984 ;; Auto vars:     Size  Location     Type
  2985 ;;  product         4   18[BANK0 ] unsigned long 
  2986 ;; Return value:  Size  Location     Type
  2987 ;;                  4    9[BANK0 ] unsigned long 
  2988 ;; Registers used:
  2989 ;;		wreg, status,2, status,0
  2990 ;; Tracked objects:
  2991 ;;		On entry : 0/0
  2992 ;;		On exit  : 0/0
  2993 ;;		Unchanged: 0/0
  2994 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2995 ;;      Params:         0       8       0       0       0
  2996 ;;      Locals:         0       4       0       0       0
  2997 ;;      Temps:          0       1       0       0       0
  2998 ;;      Totals:         0      13       0       0       0
  2999 ;;Total ram usage:       13 bytes
  3000 ;; Hardware stack levels used:    1
  3001 ;; Hardware stack levels required when called:    5
  3002 ;; This function calls:
  3003 ;;		Nothing
  3004 ;; This function is called by:
  3005 ;;		_main
  3006 ;; This function uses a non-reentrant model
  3007 ;;
  3008                           
  3009                           
  3010                           ;psect for function ___lmul
  3011  0FBF                     ___lmul:	
  3012                           
  3013                           ;incstack = 0
  3014                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  3015  0FBF  3000               	movlw	0
  3016  0FC0  1283               	bcf	3,5	;RP0=0, select bank0
  3017  0FC1  1303               	bcf	3,6	;RP1=0, select bank0
  3018  0FC2  00B5               	movwf	___lmul@product+3
  3019  0FC3  3000               	movlw	0
  3020  0FC4  00B4               	movwf	___lmul@product+2
  3021  0FC5  3000               	movlw	0
  3022  0FC6  00B3               	movwf	___lmul@product+1
  3023  0FC7  3000               	movlw	0
  3024  0FC8  00B2               	movwf	___lmul@product
  3025  0FC9                     l2111:	
  3026  0FC9  1C29               	btfss	___lmul@multiplier,0
  3027  0FCA  2FDF               	goto	l2115
  3028  0FCB  082D               	movf	___lmul@multiplicand,w
  3029  0FCC  07B2               	addwf	___lmul@product,f
  3030  0FCD  082E               	movf	___lmul@multiplicand+1,w
  3031  0FCE  1103               	clrz
  3032  0FCF  1803               	skipnc
  3033  0FD0  3E01               	addlw	1
  3034  0FD1  1D03               	btfss	3,2
  3035  0FD2  07B3               	addwf	___lmul@product+1,f
  3036  0FD3  082F               	movf	___lmul@multiplicand+2,w
  3037  0FD4  1103               	clrz
  3038  0FD5  1803               	skipnc
  3039  0FD6  3E01               	addlw	1
  3040  0FD7  1D03               	btfss	3,2
  3041  0FD8  07B4               	addwf	___lmul@product+2,f
  3042  0FD9  0830               	movf	___lmul@multiplicand+3,w
  3043  0FDA  1103               	clrz
  3044  0FDB  1803               	skipnc
  3045  0FDC  3E01               	addlw	1
  3046  0FDD  1D03               	btfss	3,2
  3047  0FDE  07B5               	addwf	___lmul@product+3,f
  3048  0FDF                     l2115:	
  3049  0FDF  3001               	movlw	1
  3050  0FE0  00B1               	movwf	??___lmul
  3051  0FE1                     u2675:	
  3052  0FE1  1003               	clrc
  3053  0FE2  0DAD               	rlf	___lmul@multiplicand,f
  3054  0FE3  0DAE               	rlf	___lmul@multiplicand+1,f
  3055  0FE4  0DAF               	rlf	___lmul@multiplicand+2,f
  3056  0FE5  0DB0               	rlf	___lmul@multiplicand+3,f
  3057  0FE6  0BB1               	decfsz	??___lmul,f
  3058  0FE7  2FE1               	goto	u2675
  3059  0FE8  3001               	movlw	1
  3060  0FE9                     u2685:	
  3061  0FE9  1003               	clrc
  3062  0FEA  0CAC               	rrf	___lmul@multiplier+3,f
  3063  0FEB  0CAB               	rrf	___lmul@multiplier+2,f
  3064  0FEC  0CAA               	rrf	___lmul@multiplier+1,f
  3065  0FED  0CA9               	rrf	___lmul@multiplier,f
  3066  0FEE  3EFF               	addlw	-1
  3067  0FEF  1D03               	skipz
  3068  0FF0  2FE9               	goto	u2685
  3069  0FF1  082C               	movf	___lmul@multiplier+3,w
  3070  0FF2  042B               	iorwf	___lmul@multiplier+2,w
  3071  0FF3  042A               	iorwf	___lmul@multiplier+1,w
  3072  0FF4  0429               	iorwf	___lmul@multiplier,w
  3073  0FF5  1D03               	skipz
  3074  0FF6  2FC9               	goto	l2111
  3075  0FF7  0835               	movf	___lmul@product+3,w
  3076  0FF8  00AC               	movwf	?___lmul+3
  3077  0FF9  0834               	movf	___lmul@product+2,w
  3078  0FFA  00AB               	movwf	?___lmul+2
  3079  0FFB  0833               	movf	___lmul@product+1,w
  3080  0FFC  00AA               	movwf	?___lmul+1
  3081  0FFD  0832               	movf	___lmul@product,w
  3082  0FFE  00A9               	movwf	?___lmul
  3083  0FFF  0008               	return
  3084  1000                     __end_of___lmul:	
  3085                           
  3086                           	psect	text13
  3087  07B4                     __ptext13:	
  3088 ;; *************** function _ADC_Read *****************
  3089 ;; Defined at:
  3090 ;;		line 26 in file "adc.h"
  3091 ;; Parameters:    Size  Location     Type
  3092 ;;  channel         1    wreg     unsigned char 
  3093 ;; Auto vars:     Size  Location     Type
  3094 ;;  channel         1    8[BANK0 ] unsigned char 
  3095 ;; Return value:  Size  Location     Type
  3096 ;;                  2    4[BANK0 ] unsigned short 
  3097 ;; Registers used:
  3098 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3099 ;; Tracked objects:
  3100 ;;		On entry : 0/0
  3101 ;;		On exit  : 0/0
  3102 ;;		Unchanged: 0/0
  3103 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3104 ;;      Params:         0       2       0       0       0
  3105 ;;      Locals:         0       1       0       0       0
  3106 ;;      Temps:          0       2       0       0       0
  3107 ;;      Totals:         0       5       0       0       0
  3108 ;;Total ram usage:        5 bytes
  3109 ;; Hardware stack levels used:    1
  3110 ;; Hardware stack levels required when called:    5
  3111 ;; This function calls:
  3112 ;;		Nothing
  3113 ;; This function is called by:
  3114 ;;		_main
  3115 ;; This function uses a non-reentrant model
  3116 ;;
  3117                           
  3118                           
  3119                           ;psect for function _ADC_Read
  3120  07B4                     _ADC_Read:	
  3121                           
  3122                           ;incstack = 0
  3123                           ; Regs used in _ADC_Read: [wreg-fsr0h+status,2+status,0]
  3124                           ;ADC_Read@channel stored from wreg
  3125  07B4  1283               	bcf	3,5	;RP0=0, select bank0
  3126  07B5  1303               	bcf	3,6	;RP1=0, select bank0
  3127  07B6  00A8               	movwf	ADC_Read@channel
  3128                           
  3129                           ;adc.h: 30: if(channel > 1){
  3130  07B7  3002               	movlw	2
  3131  07B8  0228               	subwf	ADC_Read@channel,w
  3132  07B9  1C03               	skipc
  3133  07BA  2FC4               	goto	l1955
  3134                           
  3135                           ;adc.h: 31: TRISA0 = TRISA1 = 0;
  3136  07BB  1683               	bsf	3,5	;RP0=1, select bank1
  3137  07BC  1303               	bcf	3,6	;RP1=0, select bank1
  3138  07BD  1085               	bcf	5,1	;volatile
  3139  07BE  1005               	bcf	5,0	;volatile
  3140                           
  3141                           ;adc.h: 32: return 0;
  3142  07BF  1283               	bcf	3,5	;RP0=0, select bank0
  3143  07C0  1303               	bcf	3,6	;RP1=0, select bank0
  3144  07C1  01A4               	clrf	?_ADC_Read
  3145  07C2  01A5               	clrf	?_ADC_Read+1
  3146  07C3  0008               	return
  3147  07C4                     l1955:	
  3148                           
  3149                           ;adc.h: 33: }
  3150                           ;adc.h: 36: ADCON0bits.CHS = channel;
  3151  07C4  0828               	movf	ADC_Read@channel,w
  3152  07C5  00A6               	movwf	??_ADC_Read
  3153  07C6  0DA6               	rlf	??_ADC_Read,f
  3154  07C7  0DA6               	rlf	??_ADC_Read,f
  3155  07C8  0DA6               	rlf	??_ADC_Read,f
  3156  07C9  081F               	movf	31,w	;volatile
  3157  07CA  0626               	xorwf	??_ADC_Read,w
  3158  07CB  39C7               	andlw	-57
  3159  07CC  0626               	xorwf	??_ADC_Read,w
  3160  07CD  009F               	movwf	31	;volatile
  3161                           
  3162                           ;adc.h: 39: switch(channel){
  3163  07CE  2FD7               	goto	l1959
  3164  07CF                     l49:	
  3165                           ;adc.h: 40: case 0:
  3166                           
  3167                           
  3168                           ;adc.h: 41: TRISA0 = 1;
  3169  07CF  1683               	bsf	3,5	;RP0=1, select bank1
  3170  07D0  1303               	bcf	3,6	;RP1=0, select bank1
  3171  07D1  1405               	bsf	5,0	;volatile
  3172                           
  3173                           ;adc.h: 42: break;
  3174  07D2  2FE0               	goto	l1961
  3175  07D3                     l51:	
  3176                           ;adc.h: 43: case 1:
  3177                           
  3178                           
  3179                           ;adc.h: 44: TRISA1 = 1;
  3180  07D3  1683               	bsf	3,5	;RP0=1, select bank1
  3181  07D4  1303               	bcf	3,6	;RP1=0, select bank1
  3182  07D5  1485               	bsf	5,1	;volatile
  3183                           
  3184                           ;adc.h: 49: }
  3185                           
  3186                           ;adc.h: 48: break;
  3187                           
  3188                           ;adc.h: 46: default:
  3189                           
  3190                           ;adc.h: 45: break;
  3191  07D6  2FE0               	goto	l1961
  3192  07D7                     l1959:	
  3193  07D7  1283               	bcf	3,5	;RP0=0, select bank0
  3194  07D8  0828               	movf	ADC_Read@channel,w
  3195                           
  3196                           ; Switch size 1, requested type "space"
  3197                           ; Number of cases is 2, Range of values is 0 to 1
  3198                           ; switch strategies available:
  3199                           ; Name         Instructions Cycles
  3200                           ; simple_byte            7     4 (average)
  3201                           ; direct_byte           14     8 (fixed)
  3202                           ; jumptable            260     6 (fixed)
  3203                           ;	Chosen strategy is simple_byte
  3204  07D9  3A00               	xorlw	0	; case 0
  3205  07DA  1903               	skipnz
  3206  07DB  2FCF               	goto	l49
  3207  07DC  3A01               	xorlw	1	; case 1
  3208  07DD  1903               	skipnz
  3209  07DE  2FD3               	goto	l51
  3210  07DF  2FE0               	goto	l1961
  3211  07E0                     l1961:	
  3212                           
  3213                           ;adc.h: 53: _delay((unsigned long)((2)*(8000000/4000.0)));
  3214  07E0  3006               	movlw	6
  3215  07E1  1283               	bcf	3,5	;RP0=0, select bank0
  3216  07E2  1303               	bcf	3,6	;RP1=0, select bank0
  3217  07E3  00A7               	movwf	??_ADC_Read+1
  3218  07E4  302F               	movlw	47
  3219  07E5  00A6               	movwf	??_ADC_Read
  3220  07E6                     u2757:	
  3221  07E6  0BA6               	decfsz	??_ADC_Read,f
  3222  07E7  2FE6               	goto	u2757
  3223  07E8  0BA7               	decfsz	??_ADC_Read+1,f
  3224  07E9  2FE6               	goto	u2757
  3225  07EA  2FEB               	nop2
  3226                           
  3227                           ;adc.h: 56: ADCON0bits.GO_nDONE = 1;
  3228  07EB  1283               	bcf	3,5	;RP0=0, select bank0
  3229  07EC  1303               	bcf	3,6	;RP1=0, select bank0
  3230  07ED  151F               	bsf	31,2	;volatile
  3231  07EE                     l53:	
  3232                           ;adc.h: 59: while(GO_nDONE == 1);
  3233                           
  3234  07EE  191F               	btfsc	31,2	;volatile
  3235  07EF  2FEE               	goto	l53
  3236                           
  3237                           ;adc.h: 62: return (unsigned short) (ADRESL + (ADRESH << 8));
  3238  07F0  081E               	movf	30,w	;volatile
  3239  07F1  00A5               	movwf	?_ADC_Read+1
  3240  07F2  1683               	bsf	3,5	;RP0=1, select bank1
  3241  07F3  1303               	bcf	3,6	;RP1=0, select bank1
  3242  07F4  081E               	movf	30,w	;volatile
  3243  07F5  1283               	bcf	3,5	;RP0=0, select bank0
  3244  07F6  1303               	bcf	3,6	;RP1=0, select bank0
  3245  07F7  00A4               	movwf	?_ADC_Read
  3246  07F8  0008               	return
  3247  07F9                     __end_of_ADC_Read:	
  3248                           
  3249                           	psect	text14
  3250  0F5C                     __ptext14:	
  3251 ;; *************** function _ADC_Init *****************
  3252 ;; Defined at:
  3253 ;;		line 13 in file "adc.h"
  3254 ;; Parameters:    Size  Location     Type
  3255 ;;		None
  3256 ;; Auto vars:     Size  Location     Type
  3257 ;;		None
  3258 ;; Return value:  Size  Location     Type
  3259 ;;                  1    wreg      void 
  3260 ;; Registers used:
  3261 ;;		None
  3262 ;; Tracked objects:
  3263 ;;		On entry : 0/0
  3264 ;;		On exit  : 0/0
  3265 ;;		Unchanged: 0/0
  3266 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3267 ;;      Params:         0       0       0       0       0
  3268 ;;      Locals:         0       0       0       0       0
  3269 ;;      Temps:          0       0       0       0       0
  3270 ;;      Totals:         0       0       0       0       0
  3271 ;;Total ram usage:        0 bytes
  3272 ;; Hardware stack levels used:    1
  3273 ;; Hardware stack levels required when called:    5
  3274 ;; This function calls:
  3275 ;;		Nothing
  3276 ;; This function is called by:
  3277 ;;		_main
  3278 ;; This function uses a non-reentrant model
  3279 ;;
  3280                           
  3281                           
  3282                           ;psect for function _ADC_Init
  3283  0F5C                     _ADC_Init:	
  3284                           
  3285                           ;adc.h: 16: ADCS1 = 1; ADCS0 = 0;
  3286                           
  3287                           ;incstack = 0
  3288                           ; Regs used in _ADC_Init: []
  3289  0F5C  1283               	bcf	3,5	;RP0=0, select bank0
  3290  0F5D  1303               	bcf	3,6	;RP1=0, select bank0
  3291  0F5E  179F               	bsf	31,7	;volatile
  3292  0F5F  131F               	bcf	31,6	;volatile
  3293                           
  3294                           ;adc.h: 19: PCFG3 = 0; PCFG2 = 1; PCFG1 = 0; PCFG0 = 0;
  3295  0F60  1683               	bsf	3,5	;RP0=1, select bank1
  3296  0F61  1303               	bcf	3,6	;RP1=0, select bank1
  3297  0F62  119F               	bcf	31,3	;volatile
  3298  0F63  151F               	bsf	31,2	;volatile
  3299  0F64  109F               	bcf	31,1	;volatile
  3300  0F65  101F               	bcf	31,0	;volatile
  3301                           
  3302                           ;adc.h: 21: ADFM = 1;
  3303  0F66  179F               	bsf	31,7	;volatile
  3304                           
  3305                           ;adc.h: 23: ADON = 1;
  3306  0F67  1283               	bcf	3,5	;RP0=0, select bank0
  3307  0F68  1303               	bcf	3,6	;RP1=0, select bank0
  3308  0F69  141F               	bsf	31,0	;volatile
  3309  0F6A  0008               	return
  3310  0F6B                     __end_of_ADC_Init:	
  3311                           
  3312                           	psect	text15
  3313  0F6B                     __ptext15:	
  3314 ;; *************** function _global_isr *****************
  3315 ;; Defined at:
  3316 ;;		line 18 in file "main.c"
  3317 ;; Parameters:    Size  Location     Type
  3318 ;;		None
  3319 ;; Auto vars:     Size  Location     Type
  3320 ;;		None
  3321 ;; Return value:  Size  Location     Type
  3322 ;;                  1    wreg      void 
  3323 ;; Registers used:
  3324 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3325 ;; Tracked objects:
  3326 ;;		On entry : 0/0
  3327 ;;		On exit  : 0/0
  3328 ;;		Unchanged: 0/0
  3329 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3330 ;;      Params:         0       0       0       0       0
  3331 ;;      Locals:         0       0       0       0       0
  3332 ;;      Temps:          0       4       0       0       0
  3333 ;;      Totals:         0       4       0       0       0
  3334 ;;Total ram usage:        4 bytes
  3335 ;; Hardware stack levels used:    1
  3336 ;; Hardware stack levels required when called:    4
  3337 ;; This function calls:
  3338 ;;		_vw_isr_tmr0
  3339 ;; This function is called by:
  3340 ;;		Interrupt level 1
  3341 ;; This function uses a non-reentrant model
  3342 ;;
  3343                           
  3344                           
  3345                           ;psect for function _global_isr
  3346  0F6B                     _global_isr:	
  3347                           
  3348                           ;main.c: 19: if(TMR0IF)
  3349  0F6B  1D0B               	btfss	11,2	;volatile
  3350  0F6C  2F72               	goto	i1l59
  3351                           
  3352                           ;main.c: 20: vw_isr_tmr0();
  3353  0F6D  120A  118A  2456  120A  158A  	fcall	_vw_isr_tmr0
  3354  0F72                     i1l59:	
  3355  0F72  1283               	bcf	3,5	;RP0=0, select bank0
  3356  0F73  1303               	bcf	3,6	;RP1=0, select bank0
  3357  0F74  0823               	movf	??_global_isr+3,w
  3358  0F75  00FF               	movwf	127
  3359  0F76  0822               	movf	??_global_isr+2,w
  3360  0F77  008A               	movwf	10
  3361  0F78  0821               	movf	??_global_isr+1,w
  3362  0F79  0084               	movwf	4
  3363  0F7A  0E20               	swapf	??_global_isr^0,w
  3364  0F7B  0083               	movwf	3
  3365  0F7C  0EFE               	swapf	126,f
  3366  0F7D  0E7E               	swapf	126,w
  3367  0F7E  0009               	retfie
  3368  0F7F                     __end_of_global_isr:	
  3369                           
  3370                           	psect	intentry
  3371  0004                     __pintentry:	
  3372                           ;incstack = 0
  3373                           ; Regs used in _global_isr: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3374                           
  3375  0004                     interrupt_function:	
  3376  007E                     saved_w	set	btemp
  3377  0004  00FE               	movwf	btemp
  3378  0005  0E03               	swapf	3,w
  3379  0006  1283               	bcf	3,5	;RP0=0, select bank0
  3380  0007  1303               	bcf	3,6	;RP1=0, select bank0
  3381  0008  00A0               	movwf	??_global_isr
  3382  0009  0804               	movf	4,w
  3383  000A  00A1               	movwf	??_global_isr+1
  3384  000B  080A               	movf	10,w
  3385  000C  00A2               	movwf	??_global_isr+2
  3386  000D  087F               	movf	btemp+1,w
  3387  000E  00A3               	movwf	??_global_isr+3
  3388  000F  120A  158A  2F6B   	ljmp	_global_isr
  3389                           
  3390                           	psect	text16
  3391  0456                     __ptext16:	
  3392 ;; *************** function _vw_isr_tmr0 *****************
  3393 ;; Defined at:
  3394 ;;		line 388 in file "virtualwire.c"
  3395 ;; Parameters:    Size  Location     Type
  3396 ;;		None
  3397 ;; Auto vars:     Size  Location     Type
  3398 ;;		None
  3399 ;; Return value:  Size  Location     Type
  3400 ;;                  1    wreg      void 
  3401 ;; Registers used:
  3402 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3403 ;; Tracked objects:
  3404 ;;		On entry : 0/0
  3405 ;;		On exit  : 0/0
  3406 ;;		Unchanged: 0/0
  3407 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3408 ;;      Params:         0       0       0       0       0
  3409 ;;      Locals:         0       0       0       0       0
  3410 ;;      Temps:          2       0       0       0       0
  3411 ;;      Totals:         2       0       0       0       0
  3412 ;;Total ram usage:        2 bytes
  3413 ;; Hardware stack levels used:    1
  3414 ;; Hardware stack levels required when called:    3
  3415 ;; This function calls:
  3416 ;;		_vw_pll
  3417 ;;		_vw_tx_stop
  3418 ;; This function is called by:
  3419 ;;		_global_isr
  3420 ;; This function uses a non-reentrant model
  3421 ;;
  3422                           
  3423                           
  3424                           ;psect for function _vw_isr_tmr0
  3425  0456                     _vw_isr_tmr0:	
  3426                           
  3427                           ;virtualwire.c: 390: TMR0 += -vw_tmr0_value + 4;
  3428                           
  3429                           ;incstack = 0
  3430 ;; using string table level
  3431                           ; Regs used in _vw_isr_tmr0: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3432  0456  1283               	bcf	3,5	;RP0=0, select bank0
  3433  0457  1303               	bcf	3,6	;RP1=0, select bank0
  3434  0458  0360               	decf	_vw_tmr0_value,w
  3435  0459  3AFF               	xorlw	255
  3436  045A  3E04               	addlw	4
  3437  045B  00FB               	movwf	??_vw_isr_tmr0
  3438  045C  087B               	movf	??_vw_isr_tmr0,w
  3439  045D  0781               	addwf	1,f	;volatile
  3440                           
  3441                           ;virtualwire.c: 391: TMR0IF = 0;
  3442  045E  110B               	bcf	11,2	;volatile
  3443                           
  3444                           ;virtualwire.c: 393: if (vw_rx_enabled && !vw_tx_enabled)
  3445  045F  1683               	bsf	3,5	;RP0=1, select bank1
  3446  0460  1303               	bcf	3,6	;RP1=0, select bank1
  3447  0461  0825               	movf	_vw_rx_enabled^(0+128),w
  3448  0462  1903               	btfsc	3,2
  3449  0463  2C6D               	goto	i1l1559
  3450  0464  1283               	bcf	3,5	;RP0=0, select bank0
  3451  0465  1303               	bcf	3,6	;RP1=0, select bank0
  3452  0466  085D               	movf	_vw_tx_enabled,w
  3453  0467  1D03               	btfss	3,2
  3454  0468  2C6D               	goto	i1l1559
  3455                           
  3456                           ;virtualwire.c: 394: vw_rx_sample = RB1;
  3457  0469  3000               	movlw	0
  3458  046A  1886               	btfsc	6,1	;volatile
  3459  046B  3001               	movlw	1
  3460  046C  00DB               	movwf	_vw_rx_sample
  3461  046D                     i1l1559:	
  3462                           
  3463                           ;virtualwire.c: 398: if (vw_tx_enabled && vw_tx_sample++ == 0)
  3464  046D  1283               	bcf	3,5	;RP0=0, select bank0
  3465  046E  085D               	movf	_vw_tx_enabled,w
  3466  046F  1903               	btfsc	3,2
  3467  0470  2CEE               	goto	i1l1595
  3468  0471  3001               	movlw	1
  3469  0472  00FB               	movwf	??_vw_isr_tmr0
  3470  0473  087B               	movf	??_vw_isr_tmr0,w
  3471  0474  07DF               	addwf	_vw_tx_sample,f
  3472  0475  035F               	decf	_vw_tx_sample,w
  3473  0476  1D03               	btfss	3,2
  3474  0477  2CEE               	goto	i1l1595
  3475                           
  3476                           ;virtualwire.c: 399: {
  3477                           ;virtualwire.c: 400: if (vw_tx_header)
  3478  0478  1683               	bsf	3,5	;RP0=1, select bank1
  3479  0479  1303               	bcf	3,6	;RP1=0, select bank1
  3480  047A  082A               	movf	_vw_tx_header^(0+128),w
  3481  047B  1903               	btfsc	3,2
  3482  047C  2CB4               	goto	i1l1579
  3483                           
  3484                           ;virtualwire.c: 401: {
  3485                           ;virtualwire.c: 402: RB0 = (vw_tx_buf_header[vw_tx_index] & (1 << vw_tx_bit++)) ? 1 : 0;
  3486  047D  1283               	bcf	3,5	;RP0=0, select bank0
  3487  047E  1303               	bcf	3,6	;RP1=0, select bank0
  3488  047F  085E               	movf	_vw_tx_index,w
  3489  0480  3E4B               	addlw	low ((_vw_tx_buf_header-__stringbase)| (0+32768))
  3490  0481  0084               	movwf	4
  3491  0482  120A  118A  2678  120A  118A  	fcall	stringdir
  3492  0487  00FB               	movwf	??_vw_isr_tmr0
  3493  0488  3001               	movlw	1
  3494  0489  00FC               	movwf	??_vw_isr_tmr0+1
  3495  048A  0A5C               	incf	_vw_tx_bit,w
  3496  048B  2C8E               	goto	u170_24
  3497  048C                     u170_25:	
  3498  048C  1003               	clrc
  3499  048D  0DFC               	rlf	??_vw_isr_tmr0+1,f
  3500  048E                     u170_24:	
  3501  048E  3EFF               	addlw	-1
  3502  048F  1D03               	skipz
  3503  0490  2C8C               	goto	u170_25
  3504  0491  087C               	movf	??_vw_isr_tmr0+1,w
  3505  0492  057B               	andwf	??_vw_isr_tmr0,w
  3506  0493  1903               	btfsc	3,2
  3507  0494  2C99               	goto	u171_20
  3508  0495  1283               	bcf	3,5	;RP0=0, select bank0
  3509  0496  1303               	bcf	3,6	;RP1=0, select bank0
  3510  0497  1406               	bsf	6,0	;volatile
  3511  0498  2C9C               	goto	i1l1567
  3512  0499                     u171_20:	
  3513  0499  1283               	bcf	3,5	;RP0=0, select bank0
  3514  049A  1303               	bcf	3,6	;RP1=0, select bank0
  3515  049B  1006               	bcf	6,0	;volatile
  3516  049C                     i1l1567:	
  3517  049C  3001               	movlw	1
  3518  049D  00FB               	movwf	??_vw_isr_tmr0
  3519  049E  087B               	movf	??_vw_isr_tmr0,w
  3520  049F  07DC               	addwf	_vw_tx_bit,f
  3521                           
  3522                           ;virtualwire.c: 403: if (vw_tx_bit >= 6)
  3523  04A0  3006               	movlw	6
  3524  04A1  025C               	subwf	_vw_tx_bit,w
  3525  04A2  1C03               	skipc
  3526  04A3  2CA9               	goto	i1l1575
  3527                           
  3528                           ;virtualwire.c: 404: {
  3529                           ;virtualwire.c: 405: vw_tx_bit = 0;
  3530  04A4  01DC               	clrf	_vw_tx_bit
  3531                           
  3532                           ;virtualwire.c: 406: vw_tx_index++;
  3533  04A5  3001               	movlw	1
  3534  04A6  00FB               	movwf	??_vw_isr_tmr0
  3535  04A7  087B               	movf	??_vw_isr_tmr0,w
  3536  04A8  07DE               	addwf	_vw_tx_index,f
  3537  04A9                     i1l1575:	
  3538                           
  3539                           ;virtualwire.c: 407: }
  3540                           ;virtualwire.c: 409: if (vw_tx_index >= 8)
  3541  04A9  3008               	movlw	8
  3542  04AA  025E               	subwf	_vw_tx_index,w
  3543  04AB  1C03               	skipc
  3544  04AC  2CEE               	goto	i1l1595
  3545                           
  3546                           ;virtualwire.c: 410: {
  3547                           ;virtualwire.c: 412: vw_tx_header = 0;
  3548  04AD  1683               	bsf	3,5	;RP0=1, select bank1
  3549  04AE  1303               	bcf	3,6	;RP1=0, select bank1
  3550  04AF  01AA               	clrf	_vw_tx_header^(0+128)
  3551                           
  3552                           ;virtualwire.c: 413: vw_tx_index = 0;
  3553  04B0  1283               	bcf	3,5	;RP0=0, select bank0
  3554  04B1  1303               	bcf	3,6	;RP1=0, select bank0
  3555  04B2  01DE               	clrf	_vw_tx_index
  3556                           
  3557                           ;virtualwire.c: 414: }
  3558                           ;virtualwire.c: 415: }
  3559  04B3  2CEE               	goto	i1l1595
  3560  04B4                     i1l1579:	
  3561                           
  3562                           ;virtualwire.c: 416: else
  3563                           ;virtualwire.c: 417: {
  3564                           ;virtualwire.c: 422: if (vw_tx_index >= vw_tx_len)
  3565  04B4  1683               	bsf	3,5	;RP0=1, select bank1
  3566  04B5  1303               	bcf	3,6	;RP1=0, select bank1
  3567  04B6  082B               	movf	_vw_tx_len^(0+128),w
  3568  04B7  1283               	bcf	3,5	;RP0=0, select bank0
  3569  04B8  1303               	bcf	3,6	;RP1=0, select bank0
  3570  04B9  025E               	subwf	_vw_tx_index,w
  3571  04BA  1C03               	skipc
  3572  04BB  2CC8               	goto	i1l1585
  3573                           
  3574                           ;virtualwire.c: 423: {
  3575                           ;virtualwire.c: 424: vw_tx_stop();
  3576  04BC  120A  158A  2741  120A  118A  	fcall	_vw_tx_stop
  3577                           
  3578                           ;virtualwire.c: 425: vw_rx_enabled = vw_rx_enabled_last;
  3579  04C1  1683               	bsf	3,5	;RP0=1, select bank1
  3580  04C2  1303               	bcf	3,6	;RP1=0, select bank1
  3581  04C3  0826               	movf	_vw_rx_enabled_last^(0+128),w
  3582  04C4  00FB               	movwf	??_vw_isr_tmr0
  3583  04C5  087B               	movf	??_vw_isr_tmr0,w
  3584  04C6  00A5               	movwf	_vw_rx_enabled^(0+128)
  3585                           
  3586                           ;virtualwire.c: 426: }
  3587  04C7  2CEE               	goto	i1l1595
  3588  04C8                     i1l1585:	
  3589                           
  3590                           ;virtualwire.c: 427: else
  3591                           ;virtualwire.c: 428: {
  3592                           ;virtualwire.c: 429: RB0 = (vw_tx_buf[vw_tx_index] & (1 << vw_tx_bit++)) ? 1 : 0;
  3593  04C8  1283               	bcf	3,5	;RP0=0, select bank0
  3594  04C9  085E               	movf	_vw_tx_index,w
  3595  04CA  3EAC               	addlw	(low (_vw_tx_buf| 0))& (0+255)
  3596  04CB  0084               	movwf	4
  3597  04CC  3001               	movlw	1
  3598  04CD  00FB               	movwf	??_vw_isr_tmr0
  3599  04CE  0A5C               	incf	_vw_tx_bit,w
  3600  04CF  2CD2               	goto	u176_24
  3601  04D0                     u176_25:	
  3602  04D0  1003               	clrc
  3603  04D1  0DFB               	rlf	??_vw_isr_tmr0,f
  3604  04D2                     u176_24:	
  3605  04D2  3EFF               	addlw	-1
  3606  04D3  1D03               	skipz
  3607  04D4  2CD0               	goto	u176_25
  3608  04D5  087B               	movf	??_vw_isr_tmr0,w
  3609  04D6  1383               	bcf	3,7	;select IRP bank1
  3610  04D7  0500               	andwf	0,w
  3611  04D8  1903               	btfsc	3,2
  3612  04D9  2CDE               	goto	u177_20
  3613  04DA  1283               	bcf	3,5	;RP0=0, select bank0
  3614  04DB  1303               	bcf	3,6	;RP1=0, select bank0
  3615  04DC  1406               	bsf	6,0	;volatile
  3616  04DD  2CE1               	goto	i1l1587
  3617  04DE                     u177_20:	
  3618  04DE  1283               	bcf	3,5	;RP0=0, select bank0
  3619  04DF  1303               	bcf	3,6	;RP1=0, select bank0
  3620  04E0  1006               	bcf	6,0	;volatile
  3621  04E1                     i1l1587:	
  3622  04E1  3001               	movlw	1
  3623  04E2  00FB               	movwf	??_vw_isr_tmr0
  3624  04E3  087B               	movf	??_vw_isr_tmr0,w
  3625  04E4  07DC               	addwf	_vw_tx_bit,f
  3626                           
  3627                           ;virtualwire.c: 430: if (vw_tx_bit >= 6)
  3628  04E5  3006               	movlw	6
  3629  04E6  025C               	subwf	_vw_tx_bit,w
  3630  04E7  1C03               	skipc
  3631  04E8  2CEE               	goto	i1l1595
  3632                           
  3633                           ;virtualwire.c: 431: {
  3634                           ;virtualwire.c: 432: vw_tx_bit = 0;
  3635  04E9  01DC               	clrf	_vw_tx_bit
  3636                           
  3637                           ;virtualwire.c: 433: vw_tx_index++;
  3638  04EA  3001               	movlw	1
  3639  04EB  00FB               	movwf	??_vw_isr_tmr0
  3640  04EC  087B               	movf	??_vw_isr_tmr0,w
  3641  04ED  07DE               	addwf	_vw_tx_index,f
  3642  04EE                     i1l1595:	
  3643                           
  3644                           ;virtualwire.c: 434: }
  3645                           ;virtualwire.c: 435: }
  3646                           ;virtualwire.c: 436: }
  3647                           ;virtualwire.c: 438: }
  3648                           ;virtualwire.c: 440: if (vw_tx_sample > 7)
  3649  04EE  3008               	movlw	8
  3650  04EF  1283               	bcf	3,5	;RP0=0, select bank0
  3651  04F0  025F               	subwf	_vw_tx_sample,w
  3652  04F1  1803               	btfsc	3,0
  3653                           
  3654                           ;virtualwire.c: 441: vw_tx_sample = 0;
  3655  04F2  01DF               	clrf	_vw_tx_sample
  3656                           
  3657                           ;virtualwire.c: 445: if (vw_rx_enabled && !vw_tx_enabled)
  3658  04F3  1683               	bsf	3,5	;RP0=1, select bank1
  3659  04F4  1303               	bcf	3,6	;RP1=0, select bank1
  3660  04F5  0825               	movf	_vw_rx_enabled^(0+128),w
  3661  04F6  1903               	btfsc	3,2
  3662  04F7  0008               	return
  3663  04F8  1283               	bcf	3,5	;RP0=0, select bank0
  3664  04F9  1303               	bcf	3,6	;RP1=0, select bank0
  3665  04FA  085D               	movf	_vw_tx_enabled,w
  3666  04FB  1D03               	btfss	3,2
  3667  04FC  0008               	return
  3668                           
  3669                           ;virtualwire.c: 446: vw_pll();
  3670  04FD  120A  118A  23A5   	fcall	_vw_pll
  3671  0500  0008               	return
  3672  0501                     __end_of_vw_isr_tmr0:	
  3673                           
  3674                           	psect	text17
  3675  0F41                     __ptext17:	
  3676 ;; *************** function _vw_tx_stop *****************
  3677 ;; Defined at:
  3678 ;;		line 162 in file "virtualwire.c"
  3679 ;; Parameters:    Size  Location     Type
  3680 ;;		None
  3681 ;; Auto vars:     Size  Location     Type
  3682 ;;		None
  3683 ;; Return value:  Size  Location     Type
  3684 ;;                  1    wreg      void 
  3685 ;; Registers used:
  3686 ;;		status,2
  3687 ;; Tracked objects:
  3688 ;;		On entry : 0/0
  3689 ;;		On exit  : 0/0
  3690 ;;		Unchanged: 0/0
  3691 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3692 ;;      Params:         0       0       0       0       0
  3693 ;;      Locals:         0       0       0       0       0
  3694 ;;      Temps:          0       0       0       0       0
  3695 ;;      Totals:         0       0       0       0       0
  3696 ;;Total ram usage:        0 bytes
  3697 ;; Hardware stack levels used:    1
  3698 ;; This function calls:
  3699 ;;		Nothing
  3700 ;; This function is called by:
  3701 ;;		_vw_isr_tmr0
  3702 ;; This function uses a non-reentrant model
  3703 ;;
  3704                           
  3705                           
  3706                           ;psect for function _vw_tx_stop
  3707  0F41                     _vw_tx_stop:	
  3708                           
  3709                           ;virtualwire.c: 164: RB0 = 0;
  3710                           
  3711                           ;incstack = 0
  3712                           ; Regs used in _vw_tx_stop: [status,2]
  3713  0F41  1283               	bcf	3,5	;RP0=0, select bank0
  3714  0F42  1303               	bcf	3,6	;RP1=0, select bank0
  3715  0F43  1006               	bcf	6,0	;volatile
  3716                           
  3717                           ;virtualwire.c: 165: vw_tx_enabled = 0;
  3718  0F44  01DD               	clrf	_vw_tx_enabled
  3719  0F45  0008               	return
  3720  0F46                     __end_of_vw_tx_stop:	
  3721                           
  3722                           	psect	text18
  3723  03A5                     __ptext18:	
  3724 ;; *************** function _vw_pll *****************
  3725 ;; Defined at:
  3726 ;;		line 262 in file "virtualwire.c"
  3727 ;; Parameters:    Size  Location     Type
  3728 ;;		None
  3729 ;; Auto vars:     Size  Location     Type
  3730 ;;  this_byte       1   10[COMMON] unsigned char 
  3731 ;; Return value:  Size  Location     Type
  3732 ;;                  1    wreg      void 
  3733 ;; Registers used:
  3734 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3735 ;; Tracked objects:
  3736 ;;		On entry : 0/0
  3737 ;;		On exit  : 0/0
  3738 ;;		Unchanged: 0/0
  3739 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3740 ;;      Params:         0       0       0       0       0
  3741 ;;      Locals:         3       0       0       0       0
  3742 ;;      Temps:          5       0       0       0       0
  3743 ;;      Totals:         8       0       0       0       0
  3744 ;;Total ram usage:        8 bytes
  3745 ;; Hardware stack levels used:    1
  3746 ;; Hardware stack levels required when called:    2
  3747 ;; This function calls:
  3748 ;;		_vw_symbol_6to4
  3749 ;; This function is called by:
  3750 ;;		_vw_isr_tmr0
  3751 ;; This function uses a non-reentrant model
  3752 ;;
  3753                           
  3754                           
  3755                           ;psect for function _vw_pll
  3756  03A5                     _vw_pll:	
  3757                           
  3758                           ;virtualwire.c: 265: if (vw_rx_sample)
  3759                           
  3760                           ;incstack = 0
  3761                           ; Regs used in _vw_pll: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3762  03A5  1283               	bcf	3,5	;RP0=0, select bank0
  3763  03A6  1303               	bcf	3,6	;RP1=0, select bank0
  3764  03A7  085B               	movf	_vw_rx_sample,w
  3765  03A8  1903               	btfsc	3,2
  3766  03A9  2BB0               	goto	i1l1423
  3767                           
  3768                           ;virtualwire.c: 266: vw_rx_integrator++;
  3769  03AA  3001               	movlw	1
  3770  03AB  00F3               	movwf	??_vw_pll
  3771  03AC  0873               	movf	??_vw_pll,w
  3772  03AD  1683               	bsf	3,5	;RP0=1, select bank1
  3773  03AE  1303               	bcf	3,6	;RP1=0, select bank1
  3774  03AF  07A7               	addwf	_vw_rx_integrator^(0+128),f
  3775  03B0                     i1l1423:	
  3776                           
  3777                           ;virtualwire.c: 268: if (vw_rx_sample != vw_rx_last_sample)
  3778  03B0  1283               	bcf	3,5	;RP0=0, select bank0
  3779  03B1  085B               	movf	_vw_rx_sample,w
  3780  03B2  1683               	bsf	3,5	;RP0=1, select bank1
  3781  03B3  1303               	bcf	3,6	;RP1=0, select bank1
  3782  03B4  0628               	xorwf	_vw_rx_last_sample^(0+128),w
  3783  03B5  1903               	skipnz
  3784  03B6  2BCE               	goto	i1l1435
  3785                           
  3786                           ;virtualwire.c: 269: {
  3787                           ;virtualwire.c: 271: vw_rx_pll_ramp += ((vw_rx_pll_ramp < 160/2)
  3788                           ;virtualwire.c: 272: ? ((160/8)-9)
  3789                           ;virtualwire.c: 273: : ((160/8)+9));
  3790  03B7  3050               	movlw	80
  3791  03B8  0229               	subwf	_vw_rx_pll_ramp^(0+128),w
  3792  03B9  1C03               	skipc
  3793  03BA  2BBD               	goto	i1l1429
  3794  03BB  301D               	movlw	29
  3795  03BC  2BBE               	goto	L3
  3796  03BD                     i1l1429:	
  3797  03BD  300B               	movlw	11
  3798  03BE                     L3:	
  3799  03BE  00F8               	movwf	_vw_pll$212
  3800  03BF  3000               	movlw	0
  3801  03C0  00F9               	movwf	_vw_pll$212+1
  3802  03C1  0878               	movf	_vw_pll$212,w
  3803  03C2  00F3               	movwf	??_vw_pll
  3804  03C3  0873               	movf	??_vw_pll,w
  3805  03C4  07A9               	addwf	_vw_rx_pll_ramp^(0+128),f
  3806                           
  3807                           ;virtualwire.c: 274: vw_rx_last_sample = vw_rx_sample;
  3808  03C5  1283               	bcf	3,5	;RP0=0, select bank0
  3809  03C6  1303               	bcf	3,6	;RP1=0, select bank0
  3810  03C7  085B               	movf	_vw_rx_sample,w
  3811  03C8  00F3               	movwf	??_vw_pll
  3812  03C9  0873               	movf	??_vw_pll,w
  3813  03CA  1683               	bsf	3,5	;RP0=1, select bank1
  3814  03CB  1303               	bcf	3,6	;RP1=0, select bank1
  3815  03CC  00A8               	movwf	_vw_rx_last_sample^(0+128)
  3816                           
  3817                           ;virtualwire.c: 275: }
  3818  03CD  2BD2               	goto	i1l1437
  3819  03CE                     i1l1435:	
  3820                           
  3821                           ;virtualwire.c: 276: else
  3822                           ;virtualwire.c: 277: {
  3823                           ;virtualwire.c: 280: vw_rx_pll_ramp += (160/8);
  3824  03CE  3014               	movlw	20
  3825  03CF  00F3               	movwf	??_vw_pll
  3826  03D0  0873               	movf	??_vw_pll,w
  3827  03D1  07A9               	addwf	_vw_rx_pll_ramp^(0+128),f
  3828  03D2                     i1l1437:	
  3829                           
  3830                           ;virtualwire.c: 281: }
  3831                           ;virtualwire.c: 282: if (vw_rx_pll_ramp >= 160)
  3832  03D2  30A0               	movlw	160
  3833  03D3  0229               	subwf	_vw_rx_pll_ramp^(0+128),w
  3834  03D4  1C03               	skipc
  3835  03D5  0008               	return
  3836                           
  3837                           ;virtualwire.c: 283: {
  3838                           ;virtualwire.c: 286: vw_rx_bits >>= 1;
  3839  03D6  3001               	movlw	1
  3840  03D7                     u139_25:	
  3841  03D7  1003               	clrc
  3842  03D8  0CA1               	rrf	(_vw_rx_bits+1)^(0+128),f
  3843  03D9  0CA0               	rrf	_vw_rx_bits^(0+128),f
  3844  03DA  3EFF               	addlw	-1
  3845  03DB  1D03               	skipz
  3846  03DC  2BD7               	goto	u139_25
  3847                           
  3848                           ;virtualwire.c: 290: if (vw_rx_integrator >= 5)
  3849  03DD  3005               	movlw	5
  3850  03DE  0227               	subwf	_vw_rx_integrator^(0+128),w
  3851  03DF  1803               	btfsc	3,0
  3852                           
  3853                           ;virtualwire.c: 291: vw_rx_bits |= 0x800;
  3854  03E0  15A1               	bsf	(_vw_rx_bits^(0+128)+1),3
  3855                           
  3856                           ;virtualwire.c: 293: vw_rx_pll_ramp -= 160;
  3857  03E1  30A0               	movlw	160
  3858  03E2  02A9               	subwf	_vw_rx_pll_ramp^(0+128),f
  3859                           
  3860                           ;virtualwire.c: 294: vw_rx_integrator = 0;
  3861  03E3  01A7               	clrf	_vw_rx_integrator^(0+128)
  3862                           
  3863                           ;virtualwire.c: 296: if (vw_rx_active)
  3864  03E4  0822               	movf	_vw_rx_active^(0+128),w
  3865  03E5  1903               	btfsc	3,2
  3866  03E6  2C49               	goto	i1l1477
  3867                           
  3868                           ;virtualwire.c: 297: {
  3869                           ;virtualwire.c: 300: if (++vw_rx_bit_count >= 12)
  3870  03E7  3001               	movlw	1
  3871  03E8  00F3               	movwf	??_vw_pll
  3872  03E9  0873               	movf	??_vw_pll,w
  3873  03EA  07A3               	addwf	_vw_rx_bit_count^(0+128),f
  3874  03EB  300C               	movlw	12
  3875  03EC  0223               	subwf	_vw_rx_bit_count^(0+128),w
  3876  03ED  1C03               	skipc
  3877  03EE  0008               	return
  3878                           
  3879                           ;virtualwire.c: 301: {
  3880                           ;virtualwire.c: 305: uint8_t this_byte =
  3881                           ;virtualwire.c: 306: (vw_symbol_6to4(vw_rx_bits & 0x3f)) << 4
  3882                           ;virtualwire.c: 307: | vw_symbol_6to4(vw_rx_bits >> 6);
  3883  03EF  0821               	movf	(_vw_rx_bits+1)^(0+128),w
  3884  03F0  00F4               	movwf	??_vw_pll+1
  3885  03F1  0820               	movf	_vw_rx_bits^(0+128),w
  3886  03F2  00F3               	movwf	??_vw_pll
  3887  03F3  3006               	movlw	6
  3888  03F4                     u143_25:	
  3889  03F4  1003               	clrc
  3890  03F5  0CF4               	rrf	??_vw_pll+1,f
  3891  03F6  0CF3               	rrf	??_vw_pll,f
  3892  03F7  3EFF               	addlw	-1
  3893  03F8  1D03               	skipz
  3894  03F9  2BF4               	goto	u143_25
  3895  03FA  0873               	movf	??_vw_pll,w
  3896  03FB  120A  158A  277F  120A  118A  	fcall	_vw_symbol_6to4
  3897  0400  00F5               	movwf	??_vw_pll+2
  3898  0401  1683               	bsf	3,5	;RP0=1, select bank1
  3899  0402  1303               	bcf	3,6	;RP1=0, select bank1
  3900  0403  0820               	movf	_vw_rx_bits^(0+128),w
  3901  0404  393F               	andlw	63
  3902  0405  120A  158A  277F  120A  118A  	fcall	_vw_symbol_6to4
  3903  040A  00F6               	movwf	??_vw_pll+3
  3904  040B  3003               	movlw	3
  3905  040C                     u144_25:	
  3906  040C  1003               	clrc
  3907  040D  0DF6               	rlf	??_vw_pll+3,f
  3908  040E  3EFF               	addlw	-1
  3909  040F  1D03               	skipz
  3910  0410  2C0C               	goto	u144_25
  3911  0411  1003               	clrc
  3912  0412  0D76               	rlf	??_vw_pll+3,w
  3913  0413  0475               	iorwf	??_vw_pll+2,w
  3914  0414  00F7               	movwf	??_vw_pll+4
  3915  0415  0877               	movf	??_vw_pll+4,w
  3916  0416  00FA               	movwf	vw_pll@this_byte
  3917                           
  3918                           ;virtualwire.c: 312: if (vw_rx_len == 0)
  3919  0417  087D               	movf	_vw_rx_len,w
  3920  0418  1D03               	btfss	3,2
  3921  0419  2C2C               	goto	i1l1465
  3922                           
  3923                           ;virtualwire.c: 313: {
  3924                           ;virtualwire.c: 317: vw_rx_count = this_byte;
  3925  041A  087A               	movf	vw_pll@this_byte,w
  3926  041B  00F3               	movwf	??_vw_pll
  3927  041C  0873               	movf	??_vw_pll,w
  3928  041D  1283               	bcf	3,5	;RP0=0, select bank0
  3929  041E  1303               	bcf	3,6	;RP1=0, select bank0
  3930  041F  00DA               	movwf	_vw_rx_count
  3931                           
  3932                           ;virtualwire.c: 318: if (vw_rx_count < 4 || vw_rx_count > 24)
  3933  0420  3004               	movlw	4
  3934  0421  025A               	subwf	_vw_rx_count,w
  3935  0422  1C03               	skipc
  3936  0423  2C28               	goto	i1l1461
  3937  0424  3019               	movlw	25
  3938  0425  025A               	subwf	_vw_rx_count,w
  3939  0426  1C03               	skipc
  3940  0427  2C2C               	goto	i1l1465
  3941  0428                     i1l1461:	
  3942                           
  3943                           ;virtualwire.c: 319: {
  3944                           ;virtualwire.c: 321: vw_rx_active = 0;
  3945  0428  1683               	bsf	3,5	;RP0=1, select bank1
  3946  0429  1303               	bcf	3,6	;RP1=0, select bank1
  3947  042A  01A2               	clrf	_vw_rx_active^(0+128)
  3948                           
  3949                           ;virtualwire.c: 322: return;
  3950  042B  0008               	return
  3951  042C                     i1l1465:	
  3952                           
  3953                           ;virtualwire.c: 323: }
  3954                           ;virtualwire.c: 324: }
  3955                           ;virtualwire.c: 325: vw_tx_buf[vw_rx_len++] = this_byte;
  3956  042C  087A               	movf	vw_pll@this_byte,w
  3957  042D  00F3               	movwf	??_vw_pll
  3958  042E  087D               	movf	_vw_rx_len,w
  3959  042F  3EAC               	addlw	(low (_vw_tx_buf| 0))& (0+255)
  3960  0430  0084               	movwf	4
  3961  0431  0873               	movf	??_vw_pll,w
  3962  0432  1383               	bcf	3,7	;select IRP bank1
  3963  0433  0080               	movwf	0
  3964  0434  3001               	movlw	1
  3965  0435  00F3               	movwf	??_vw_pll
  3966  0436  0873               	movf	??_vw_pll,w
  3967  0437  07FD               	addwf	_vw_rx_len,f
  3968                           
  3969                           ;virtualwire.c: 327: if (vw_rx_len >= vw_rx_count)
  3970  0438  1283               	bcf	3,5	;RP0=0, select bank0
  3971  0439  1303               	bcf	3,6	;RP1=0, select bank0
  3972  043A  085A               	movf	_vw_rx_count,w
  3973  043B  027D               	subwf	_vw_rx_len,w
  3974  043C  1C03               	skipc
  3975  043D  2C45               	goto	i1l1475
  3976                           
  3977                           ;virtualwire.c: 328: {
  3978                           ;virtualwire.c: 330: vw_rx_active = 0;
  3979  043E  1683               	bsf	3,5	;RP0=1, select bank1
  3980  043F  1303               	bcf	3,6	;RP1=0, select bank1
  3981  0440  01A2               	clrf	_vw_rx_active^(0+128)
  3982                           
  3983                           ;virtualwire.c: 331: vw_rx_done = 1;
  3984  0441  3001               	movlw	1
  3985  0442  00F3               	movwf	??_vw_pll
  3986  0443  0873               	movf	??_vw_pll,w
  3987  0444  00A4               	movwf	_vw_rx_done^(0+128)	;volatile
  3988  0445                     i1l1475:	
  3989                           
  3990                           ;virtualwire.c: 332: }
  3991                           ;virtualwire.c: 333: vw_rx_bit_count = 0;
  3992  0445  1683               	bsf	3,5	;RP0=1, select bank1
  3993  0446  1303               	bcf	3,6	;RP1=0, select bank1
  3994  0447  01A3               	clrf	_vw_rx_bit_count^(0+128)
  3995                           
  3996                           ;virtualwire.c: 334: }
  3997                           ;virtualwire.c: 335: }
  3998  0448  0008               	return
  3999  0449                     i1l1477:	
  4000                           
  4001                           ;virtualwire.c: 337: else if (vw_rx_bits == 0xb38)
  4002  0449  3038               	movlw	56
  4003  044A  0620               	xorwf	_vw_rx_bits^(0+128),w
  4004  044B  300B               	movlw	11
  4005  044C  1903               	skipnz
  4006  044D  0621               	xorwf	(_vw_rx_bits+1)^(0+128),w
  4007  044E  1D03               	btfss	3,2
  4008  044F  0008               	return
  4009                           
  4010                           ;virtualwire.c: 338: {
  4011                           ;virtualwire.c: 340: vw_rx_active = 1;
  4012  0450  01A2               	clrf	_vw_rx_active^(0+128)
  4013  0451  0AA2               	incf	_vw_rx_active^(0+128),f
  4014                           
  4015                           ;virtualwire.c: 341: vw_rx_bit_count = 0;
  4016  0452  01A3               	clrf	_vw_rx_bit_count^(0+128)
  4017                           
  4018                           ;virtualwire.c: 342: vw_rx_len = 0;
  4019  0453  01FD               	clrf	_vw_rx_len
  4020                           
  4021                           ;virtualwire.c: 343: vw_rx_done = 0;
  4022  0454  01A4               	clrf	_vw_rx_done^(0+128)	;volatile
  4023  0455  0008               	return
  4024  0456                     __end_of_vw_pll:	
  4025                           
  4026                           	psect	text19
  4027  0F7F                     __ptext19:	
  4028 ;; *************** function _vw_symbol_6to4 *****************
  4029 ;; Defined at:
  4030 ;;		line 245 in file "virtualwire.c"
  4031 ;; Parameters:    Size  Location     Type
  4032 ;;  symbol          1    wreg     unsigned char 
  4033 ;; Auto vars:     Size  Location     Type
  4034 ;;  symbol          1    1[COMMON] unsigned char 
  4035 ;;  i               1    2[COMMON] unsigned char 
  4036 ;; Return value:  Size  Location     Type
  4037 ;;                  1    wreg      unsigned char 
  4038 ;; Registers used:
  4039 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  4040 ;; Tracked objects:
  4041 ;;		On entry : 0/0
  4042 ;;		On exit  : 0/0
  4043 ;;		Unchanged: 0/0
  4044 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4045 ;;      Params:         0       0       0       0       0
  4046 ;;      Locals:         2       0       0       0       0
  4047 ;;      Temps:          1       0       0       0       0
  4048 ;;      Totals:         3       0       0       0       0
  4049 ;;Total ram usage:        3 bytes
  4050 ;; Hardware stack levels used:    2
  4051 ;; This function calls:
  4052 ;;		Nothing
  4053 ;; This function is called by:
  4054 ;;		_vw_pll
  4055 ;; This function uses a non-reentrant model
  4056 ;;
  4057                           
  4058                           
  4059                           ;psect for function _vw_symbol_6to4
  4060  0F7F                     _vw_symbol_6to4:	
  4061                           
  4062                           ;incstack = 0
  4063 ;; using string table level
  4064                           ; Regs used in _vw_symbol_6to4: [wreg-fsr0h+status,2+status,0+pclath]
  4065                           ;vw_symbol_6to4@symbol stored from wreg
  4066  0F7F  00F1               	movwf	vw_symbol_6to4@symbol
  4067                           
  4068                           ;virtualwire.c: 247: uint8_t i;
  4069                           ;virtualwire.c: 250: for (i = 0; i < 16; i++)
  4070  0F80  01F2               	clrf	vw_symbol_6to4@i
  4071  0F81  3010               	movlw	16
  4072  0F82  0272               	subwf	vw_symbol_6to4@i,w
  4073  0F83  1803               	btfsc	3,0
  4074  0F84  2F9A               	goto	i1l1317
  4075  0F85                     i1l1307:	
  4076                           
  4077                           ;virtualwire.c: 251: if (symbol == symbols[i])
  4078  0F85  0872               	movf	vw_symbol_6to4@i,w
  4079  0F86  3E3B               	addlw	low ((_symbols-__stringbase)| (0+32768))
  4080  0F87  0084               	movwf	4
  4081  0F88  120A  118A  2678  120A  158A  	fcall	stringdir
  4082  0F8D  0671               	xorwf	vw_symbol_6to4@symbol,w
  4083  0F8E  1D03               	skipz
  4084  0F8F  2F92               	goto	i1l1313
  4085                           
  4086                           ;virtualwire.c: 252: return i;
  4087  0F90  0872               	movf	vw_symbol_6to4@i,w
  4088  0F91  0008               	return
  4089  0F92                     i1l1313:	
  4090  0F92  3001               	movlw	1
  4091  0F93  00F0               	movwf	??_vw_symbol_6to4
  4092  0F94  0870               	movf	??_vw_symbol_6to4,w
  4093  0F95  07F2               	addwf	vw_symbol_6to4@i,f
  4094  0F96  3010               	movlw	16
  4095  0F97  0272               	subwf	vw_symbol_6to4@i,w
  4096  0F98  1C03               	skipc
  4097  0F99  2F85               	goto	i1l1307
  4098  0F9A                     i1l1317:	
  4099                           
  4100                           ;virtualwire.c: 254: return 0;
  4101  0F9A  3000               	movlw	0
  4102  0F9B  0008               	return
  4103  0F9C                     __end_of_vw_symbol_6to4:	
  4104  007E                     btemp	set	126	;btemp
  4105  007E                     wtemp0	set	126


Data Sizes:
    Strings     7
    Constant    82
    Data        0
    BSS         68
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      14
    BANK0            80     58      65
    BANK1            80     15      75
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 7
		 -> STR_2(CODE[7]), STR_1(CODE[7]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 7
		 -> main@adcBuffer(BANK1[7]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    vw_send@buf	PTR const unsigned char  size(1) Largest target is 7
		 -> main@adcBuffer(BANK1[7]), 

    vw_send@p	PTR unsigned char  size(1) Largest target is 48
		 -> vw_tx_buf(BANK1[48]), 

    _calc_timer0_prescaler@prescaler_bits	PTR unsigned char  size(1) Largest target is 1
		 -> vw_setup@prescaler_bits(BANK0[1]), 

    _calc_timer0_prescaler@k_tmr0	PTR unsigned char  size(1) Largest target is 1
		 -> vw_tmr0_value(BANK0[1]), 

    _calc_timer0_prescaler@prescaler_value	PTR unsigned int  size(1) Largest target is 2
		 -> vw_setup@prescaler_value(BANK0[2]), 

    sp__memcpy	PTR unsigned char  size(1) Largest target is 0


Critical Paths under _main in COMMON

    None.

Critical Paths under _global_isr in COMMON

    _global_isr->_vw_isr_tmr0
    _vw_isr_tmr0->_vw_pll
    _vw_pll->_vw_symbol_6to4

Critical Paths under _main in BANK0

    _main->_sprintf
    _vw_setup->__calc_timer0_prescaler
    __calc_timer0_prescaler->___aldiv
    ___aldiv->___wmul
    _vw_send->__crc_ccitt_update
    _sprintf->___llmod
    ___llmod->___lldiv
    ___lmul->_ADC_Read

Critical Paths under _global_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _global_isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _global_isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _global_isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                23    23      0    6291
                                             50 BANK0      8     8      0
                                              0 BANK1     15    15      0
                           _ADC_Init
                           _ADC_Read
                             ___lmul
                            _sprintf
                            _vw_send
                           _vw_setup
 ---------------------------------------------------------------------------------
 (1) _vw_setup                                             8     6      2    1825
                                             41 BANK0      8     6      2
             __calc_timer0_prescaler
 ---------------------------------------------------------------------------------
 (2) __calc_timer0_prescaler                              16    11      5    1578
                                             25 BANK0     16    11      5
                            ___aldiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     290
                                              4 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___aldiv                                             15     7      8     599
                                             10 BANK0     15     7      8
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _vw_send                                             12    11      1    2072
                                             20 BANK0     12    11      1
                  __crc_ccitt_update
                        _vw_tx_start
                         _vw_wait_tx
 ---------------------------------------------------------------------------------
 (2) _vw_wait_tx                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _vw_tx_start                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) __crc_ccitt_update                                   16    13      3     654
                                              4 BANK0     16    13      3
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             30    23      7    1638
                                             28 BANK0     22    15      7
                            ___lldiv
                            ___llmod
 ---------------------------------------------------------------------------------
 (2) ___llmod                                             10     2      8     386
                                             18 BANK0     10     2      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             14     6      8     395
                                              4 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (1) ___lmul                                              13     5      8     444
                                              9 BANK0     13     5      8
                           _ADC_Read (ARG)
 ---------------------------------------------------------------------------------
 (1) _ADC_Read                                             5     3      2      93
                                              4 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (1) _ADC_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _global_isr                                           4     4      0     181
                                              0 BANK0      4     4      0
                        _vw_isr_tmr0
 ---------------------------------------------------------------------------------
 (5) _vw_isr_tmr0                                          2     2      0     181
                                             11 COMMON     2     2      0
                             _vw_pll
                         _vw_tx_stop
 ---------------------------------------------------------------------------------
 (6) _vw_tx_stop                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _vw_pll                                               8     8      0     181
                                              3 COMMON     8     8      0
                     _vw_symbol_6to4
 ---------------------------------------------------------------------------------
 (8) _vw_symbol_6to4                                       3     3      0     112
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Init
   _ADC_Read
   ___lmul
     _ADC_Read (ARG)
   _sprintf
     ___lldiv
     ___llmod
       ___lldiv (ARG)
   _vw_send
     __crc_ccitt_update
     _vw_tx_start
     _vw_wait_tx
   _vw_setup
     __calc_timer0_prescaler
       ___aldiv
         ___wmul (ARG)
       ___wmul

 _global_isr (ROOT)
   _vw_isr_tmr0
     _vw_pll
       _vw_symbol_6to4
     _vw_tx_stop

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      D       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      9A       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     3A      41       5       81.3%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      F      4B       7       93.8%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      9A      12        0.0%


Microchip Technology PIC Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Sun May 06 18:43:48 2018

                                              pc 0002                                      __CFG_CP$OFF 0000  
                        ?__calc_timer0_prescaler 0039                                               l51 07D3  
                                             l53 07EE                                               l49 07CF  
                                             fsr 0004                              ___wmul@multiplicand 0026  
                                            l270 02B3                                              l422 0513  
                                            l273 02CF                                              l193 00EC  
                                            l367 0FA8                                              _GIE 005F  
                                            _RB0 0030                                              _RB1 0031  
                                   __CFG_CPD$OFF 0000                                              fsr0 0004  
                                            indf 0000                        __end_of__crc_ccitt_update 076F  
                                   __CFG_FOSC$HS 0000                                     __CFG_LVP$OFF 0000  
                                           l2021 0335                                             l2005 02E1  
                                           l2111 0FC9                                             l2015 02F9  
                                           l2031 0291                                             l2033 03A0  
                                           l2115 0FDF                                             l2029 033A  
                                           l2127 0170                                             l2077 008F  
                                           l1831 0524                                             l1921 066F  
                                           l1841 0544                                             l1809 0FA0  
                                           l1907 062A                                             l1931 06E1  
                                           l1917 0662                                             l1909 063A  
                                           l1933 06F1                                             l1941 071C  
                                           l1853 0579                                             l1839 0534  
                                           l1961 07E0                                             l1937 070F  
                                           l1857 0587                                             l1849 056C  
                                           l1955 07C4                                             l1893 07F9  
                                           l1959 07D7                                             l1887 0613  
                                           l1993 02B1                                             l1977 07A2  
                                           l1995 02B5                                             l1999 02BA  
                                           _ADFM 04FF                                             _ADON 00F8  
                                           STR_1 06D0                                             STR_2 06D0  
                                           _T0CS 040D                                             u2205 0546  
                                           u2125 0FA9                                             u2215 055B  
                                           u2135 0FB0                                             u2225 056D  
                                           u2405 06E5                                             u2335 062E  
                                           u2255 072E                                             u2425 06FF  
                                           u2265 0747                                             u2185 0538  
                                           u2355 063C                                             u2435 0710  
                                           u2365 0651                                             u2605 005F  
                                           u2375 0663                                             u2535 02FC  
                                           u2615 00B4                                             u2480 07B2  
                                           u2545 032B                                             u2705 019E  
                                           u2635 00F3                                             u2715 01EA  
                                           u2565 0350                                             u2737 0241  
                                           u2675 0FE1                                             u2747 0282  
                                           _PEIE 005E                                             u2757 07E6  
                                           u2685 0FE9                                             i1l59 0F72  
                                           _TMR0 0001                                     __CFG_WRT$OFF 0000  
                                           _main 0160                                             btemp 007E  
                               __end_of_ADC_Init 0F6B                                 __end_of_ADC_Read 07F9  
                                  __CFG_BOREN$ON 0000                                             start 0012  
                 __end_of__calc_timer0_prescaler 0618                                      _vw_isr_tmr0 0456  
                                __end_of___aldiv 0590                                            _ADCS0 00FE  
                                          _ADCS1 00FF                                            ?_main 0070  
                                  __CFG_WDTE$OFF 0000                                  __end_of___lldiv 0678  
                                __end_of___llmod 0725                                            _PCFG0 04F8  
                                          _PCFG1 04F9                                            _PCFG2 04FA  
                                          _PCFG3 04FB                           __crc_ccitt_update@data 0026  
                                    _vw_rx_count 005A                              ___lmul@multiplicand 002D  
                                    _vw_tx_index 005E                                      _vw_tx_start 0F4E  
                                __end_of_dpowers 06A6                                    main@adcBuffer 00DC  
                                          pclath 000A                                            status 0003  
                                          wtemp0 007E                                  __end_of_sprintf 03A5  
                                __end_of_vw_send 0160                                  __end_of_symbols 06C8  
                                __initialization 0015                                     __end_of_main 028A  
                               _vw_rx_integrator 00A7                  __calc_timer0_prescaler@aux_tmr0 0046  
                                         ??_main 0052                           vw_setup@prescaler_bits 004E  
                     __size_of__crc_ccitt_update 004A                                 ___llmod@dividend 0036  
                                         _ADRESH 001E                                           _ADRESL 009E  
                                         i1l1313 0F92                                           i1l1307 0F85  
                                         i1l1317 0F9A                                           i1l1423 03B0  
                                         i1l1435 03CE                                           i1l1461 0428  
                                         i1l1437 03D2                                           i1l1429 03BD  
                                         i1l1465 042C                                           i1l1475 0445  
                                         i1l1477 0449                                           i1l1575 04A9  
                                         i1l1567 049C                                           i1l1559 046D  
                                         i1l1585 04C8                                           i1l1587 04E1  
                                         i1l1579 04B4                                           i1l1595 04EE  
                                         u143_25 03F4                                           u144_25 040C  
                                         u170_24 048E                                           u170_25 048C  
                                         u171_20 0499                                           u139_25 03D7  
                                         u176_24 04D2                                           u176_25 04D0  
                                         u177_20 04DE                                           _TMR0IE 005D  
                                         _TMR0IF 005A                                           _TRISA0 0428  
                                         _TRISA1 0429                                           _TRISB0 0430  
                                         _TRISB1 0431                                     _vw_rx_active 00A2  
                                 __CFG_PWRTE$OFF 0000                                     _vw_rx_sample 005B  
                                   _vw_tx_header 00AA                                           ___lmul 0FBF  
                                      ??___aldiv 0032                                           ___wmul 0F9C  
                                   _vw_tx_sample 005F                                 _vw_tx_buf_header 06C8  
                                      ??___lldiv 002C                                        ??___llmod 003A  
                                ADC_Read@channel 0028                                           _vw_pll 03A5  
                               ??_vw_symbol_6to4 0070                                   main@adcValue_0 00E3  
                                 main@adcValue_1 00E7                                        ?_ADC_Init 0070  
                                      ?_ADC_Read 0024                                           saved_w 007E  
                                      ??_sprintf 0043                                        ??_vw_send 0035  
                              _vw_rx_last_sample 00A8                                 __end_of_vw_setup 07B4  
                             _vw_rx_enabled_last 00A6                          __end_of__initialization 0026  
                                 __pcstackCOMMON 0070                                       ??_ADC_Init 0024  
                                     ??_ADC_Read 0026                                       __pbssBANK0 005A  
                                     __pbssBANK1 00A0                          vw_setup@prescaler_value 004F  
                                     __pmaintext 0160                                    _vw_tmr0_value 0060  
                                        ?___lmul 0029                                          ?___wmul 0024  
                                     __pintentry 0004                                     ?_vw_isr_tmr0 0070  
                                 ___lmul@product 0032                                          ?_vw_pll 0070  
                                   ?_vw_tx_start 0070                                       __stringtab 0678  
                                     _global_isr 0F6B                                    _vw_rx_enabled 00A5  
                   __calc_timer0_prescaler@brate 0039                                    _vw_tx_enabled 005D  
                                        ___aldiv 0501                                  __size_of___lmul 0041  
                                        ___lldiv 0618                                  __size_of___wmul 0023  
                                        ___llmod 06D7                                          __ptext1 076F  
                                        __ptext2 0590                                          __ptext3 0F9C  
                                        __ptext4 0501                                          __ptext5 002A  
                                        __ptext6 07F9                                          __ptext7 0F4E  
                                        __ptext8 0725                                          __ptext9 028A  
                                      ?_vw_setup 0049                                  __size_of_vw_pll 00B1  
                                        _dpowers 067E                                 ___aldiv@dividend 002E  
                                        _sprintf 028A                                          clrloop0 0F47  
                       __end_of_vw_tx_buf_header 06D0                                          _vw_send 002A  
                                        _symbols 06B8                             end_of_initialization 0026  
                                vw_symbol_6to4@i 0072                                     vw_send@count 0039  
                                   vw_send@index 003F                                  ___lldiv@divisor 0024  
                                ___lldiv@counter 0031                                 ___aldiv@quotient 0035  
                                     ??_vw_setup 004B                                __size_of_ADC_Init 000F  
                              __size_of_ADC_Read 0045                             vw_symbol_6to4@symbol 0071  
                                    ?_global_isr 0070                         ??__calc_timer0_prescaler 003E  
                                _vw_rx_bit_count 00A3                                       _vw_pll$212 0078  
                                 __end_of___lmul 1000                                       _vw_wait_tx 07F9  
                                 __end_of___wmul 0FBF                            __crc_ccitt_update@crc 0024  
                                     _vw_rx_bits 00A0                                       _vw_rx_done 00A4  
                                     _vw_tx_stop 0F41                             __size_of_vw_isr_tmr0 00AB  
                                vw_pll@this_byte 007A                                   __end_of_vw_pll 0456  
__end_of__calc_timer0_prescaler@prescaler_factor 06B8          __calc_timer0_prescaler@prescaler_factor 06A6  
                            start_initialization 0015                             __size_of_vw_tx_start 000E  
                                ___llmod@divisor 0032                                  ___llmod@counter 003B  
          __calc_timer0_prescaler@prescaler_bits 003C                                         ??___lmul 0031  
                                       ??___wmul 0028                              __size_of_global_isr 0014  
                                       ??_vw_pll 0073                                      __pbssCOMMON 007D  
                                      ___latbits 0002                                    __pcstackBANK0 0020  
                                  __pcstackBANK1 00DC                          __size_of_vw_symbol_6to4 001D  
                                    sprintf@flag 0048                                      sprintf@prec 0049  
                __size_of__calc_timer0_prescaler 0088                                         ?___aldiv 002A  
                                       ?___lldiv 0024                                         ?___llmod 0032  
                                    ?_vw_wait_tx 0070                                        __pstrings 0678  
                                    ?_vw_tx_stop 0070                                         _ADC_Init 0F5C  
                              __size_of_vw_setup 0045                                         _ADC_Read 07B4  
                                       ?_sprintf 003C                                         ?_vw_send 0034  
                                ___aldiv@divisor 002A                                interrupt_function 0004  
                                ___aldiv@counter 0033                                   ___wmul@product 0028  
                                      clear_ram0 0F46                                         _GO_nDONE 00FA  
                                     _ADCON0bits 001F                                      __stringbase 067D  
                              ___wmul@multiplier 0024                           __calc_timer0_prescaler 0590  
                                      _vw_rx_len 007D                                ___lmul@multiplier 0029  
                                      _vw_tx_bit 005C                                        _vw_tx_buf 00AC  
                                      _vw_tx_len 00AB                                     ??_global_isr 0020  
                            __size_of_vw_wait_tx 0006           __calc_timer0_prescaler@prescaler_value 003B  
                  __calc_timer0_prescaler@k_tmr0 003D                              __size_of_vw_tx_stop 0005  
                  __calc_timer0_prescaler@pindex 0048                                   _vw_rx_pll_ramp 00A9  
                               __size_of___aldiv 008F                                 __size_of___lldiv 0060  
                               __size_of___llmod 004E                               __end_of__stringtab 067E  
                             __end_of_global_isr 0F7F                                       sprintf@val 004B  
                                       __ptext10 06D7                                         __ptext11 0618  
                                       __ptext12 0FBF                                         __ptext13 07B4  
                                       __ptext14 0F5C                                         __ptext15 0F6B  
                                       __ptext16 0456                                         __ptext17 0F41  
                                       __ptext18 03A5                                         __ptext19 0F7F  
                                 _vw_symbol_6to4 0F7F                                 __size_of_sprintf 011B  
                               __size_of_vw_send 0136                                    __size_of_main 012A  
                                     vw_send@crc 003C                                       vw_send@buf 003A  
                                     vw_send@len 0034                                    ??_vw_isr_tmr0 007B  
                                       _vw_setup 076F                           __end_of_vw_symbol_6to4 0F9C  
                                  ??_vw_tx_start 0024                                         intlevel1 0000  
                                      sprintf@ap 004F                                        sprintf@sp 0050  
                               ___lldiv@dividend 0028                                        stringcode 0678  
                                   ??_vw_wait_tx 0024                                     ??_vw_tx_stop 0070  
                                     _OPTION_REG 0081                                         sprintf@c 0051  
                                       sprintf@f 003C                                 ___lldiv@quotient 002D  
                            __end_of_vw_isr_tmr0 0501                                         stringdir 0678  
                                       stringtab 0678                                         vw_send@i 003B  
                                   ___aldiv@sign 0034                                         vw_send@p 003E  
                                ?_vw_symbol_6to4 0070                                __crc_ccitt_update 0725  
                             ?__crc_ccitt_update 0024                               __end_of_vw_wait_tx 07FF  
                            __end_of_vw_tx_start 0F5C                               __end_of_vw_tx_stop 0F46  
                            ??__crc_ccitt_update 0027                                    vw_setup@brate 0049  
