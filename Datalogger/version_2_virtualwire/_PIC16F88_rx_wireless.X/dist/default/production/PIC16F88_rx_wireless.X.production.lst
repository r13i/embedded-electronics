

Microchip Technology PIC LITE Macro Assembler V1.40 build -251452761 
                                                                                               Fri Apr 20 10:30:39 2018

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	16F88
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	maintext,global,class=CODE,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,delta=2
    15                           	psect	text2,local,class=CODE,merge=1,delta=2
    16                           	psect	text3,local,class=CODE,merge=1,delta=2
    17                           	psect	text4,local,class=CODE,merge=1,delta=2
    18                           	psect	text5,local,class=CODE,merge=1,delta=2
    19                           	psect	text6,local,class=CODE,merge=1,delta=2
    20                           	psect	text7,local,class=CODE,merge=1,delta=2
    21                           	psect	text8,local,class=CODE,merge=1,delta=2
    22                           	psect	text9,local,class=CODE,merge=1,delta=2
    23                           	psect	text10,local,class=CODE,merge=1,delta=2
    24                           	psect	text11,local,class=CODE,merge=1,delta=2
    25                           	psect	text12,local,class=CODE,merge=1,delta=2
    26                           	psect	text13,local,class=CODE,merge=1,delta=2
    27                           	psect	text14,local,class=CODE,merge=1,delta=2
    28                           	psect	text15,local,class=CODE,merge=1,delta=2
    29                           	psect	intentry,global,class=CODE,delta=2
    30                           	psect	text16,local,class=CODE,merge=1,delta=2
    31                           	psect	text17,local,class=CODE,merge=1,delta=2
    32                           	psect	text18,local,class=CODE,merge=1,delta=2
    33                           	psect	text19,local,class=CODE,merge=1,delta=2
    34                           	dabs	1,0x7E,2
    35  0000                     
    36                           ; Version 1.40
    37                           ; Generated 01/12/2016 GMT
    38                           ; 
    39                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    40                           ; All rights reserved.
    41                           ; 
    42                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    43                           ; 
    44                           ; Redistribution and use in source and binary forms, with or without modification, are
    45                           ; permitted provided that the following conditions are met:
    46                           ; 
    47                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    48                           ;        conditions and the following disclaimer.
    49                           ; 
    50                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    51                           ;        of conditions and the following disclaimer in the documentation and/or other
    52                           ;        materials provided with the distribution.
    53                           ; 
    54                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    55                           ;        software without specific prior written permission.
    56                           ; 
    57                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    58                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    59                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    60                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    61                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    62                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    63                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    64                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    65                           ; 
    66                           ; 
    67                           ; Code-generator required, PIC16F88 Definitions
    68                           ; 
    69                           ; SFR Addresses
    70  0000                     	;# 
    71  0001                     	;# 
    72  0002                     	;# 
    73  0003                     	;# 
    74  0004                     	;# 
    75  0005                     	;# 
    76  0006                     	;# 
    77  000A                     	;# 
    78  000B                     	;# 
    79  000C                     	;# 
    80  000D                     	;# 
    81  000E                     	;# 
    82  000E                     	;# 
    83  000F                     	;# 
    84  0010                     	;# 
    85  0011                     	;# 
    86  0012                     	;# 
    87  0013                     	;# 
    88  0014                     	;# 
    89  0015                     	;# 
    90  0015                     	;# 
    91  0016                     	;# 
    92  0017                     	;# 
    93  0018                     	;# 
    94  0019                     	;# 
    95  001A                     	;# 
    96  001E                     	;# 
    97  001F                     	;# 
    98  0081                     	;# 
    99  0085                     	;# 
   100  0086                     	;# 
   101  008C                     	;# 
   102  008D                     	;# 
   103  008E                     	;# 
   104  008F                     	;# 
   105  0090                     	;# 
   106  0092                     	;# 
   107  0093                     	;# 
   108  0094                     	;# 
   109  0098                     	;# 
   110  0099                     	;# 
   111  009B                     	;# 
   112  009C                     	;# 
   113  009D                     	;# 
   114  009E                     	;# 
   115  009F                     	;# 
   116  0105                     	;# 
   117  010C                     	;# 
   118  010D                     	;# 
   119  010E                     	;# 
   120  010F                     	;# 
   121  018C                     	;# 
   122  018D                     	;# 
   123  0000                     	;# 
   124  0001                     	;# 
   125  0002                     	;# 
   126  0003                     	;# 
   127  0004                     	;# 
   128  0005                     	;# 
   129  0006                     	;# 
   130  000A                     	;# 
   131  000B                     	;# 
   132  000C                     	;# 
   133  000D                     	;# 
   134  000E                     	;# 
   135  000E                     	;# 
   136  000F                     	;# 
   137  0010                     	;# 
   138  0011                     	;# 
   139  0012                     	;# 
   140  0013                     	;# 
   141  0014                     	;# 
   142  0015                     	;# 
   143  0015                     	;# 
   144  0016                     	;# 
   145  0017                     	;# 
   146  0018                     	;# 
   147  0019                     	;# 
   148  001A                     	;# 
   149  001E                     	;# 
   150  001F                     	;# 
   151  0081                     	;# 
   152  0085                     	;# 
   153  0086                     	;# 
   154  008C                     	;# 
   155  008D                     	;# 
   156  008E                     	;# 
   157  008F                     	;# 
   158  0090                     	;# 
   159  0092                     	;# 
   160  0093                     	;# 
   161  0094                     	;# 
   162  0098                     	;# 
   163  0099                     	;# 
   164  009B                     	;# 
   165  009C                     	;# 
   166  009D                     	;# 
   167  009E                     	;# 
   168  009F                     	;# 
   169  0105                     	;# 
   170  010C                     	;# 
   171  010D                     	;# 
   172  010E                     	;# 
   173  010F                     	;# 
   174  018C                     	;# 
   175  018D                     	;# 
   176                           
   177                           	psect	strings
   178  0379                     __pstrings:	
   179  0379                     stringtab:	
   180  0379                     __stringtab:	
   181                           
   182                           ;	String table - string pointers are 1 byte each
   183  0379  1BFF               	btfsc	btemp+1,7
   184  037A  2B83               	ljmp	stringcode
   185  037B  1383               	bcf	3,7
   186  037C  187F               	btfsc	btemp+1,0
   187  037D  1783               	bsf	3,7
   188  037E  0800               	movf	0,w
   189  037F  0A84               	incf	4,f
   190  0380  1903               	skipnz
   191  0381  0AFF               	incf	btemp+1,f
   192  0382  0008               	return
   193  0383                     stringcode:	
   194  0383                     stringdir:	
   195  0383  3003               	movlw	high stringdir
   196  0384  008A               	movwf	10
   197  0385  0804               	movf	4,w
   198  0386  0A84               	incf	4,f
   199  0387  0782               	addwf	2,f
   200  0388                     __stringbase:	
   201  0388  3400               	retlw	0
   202  0389                     __end_of__stringtab:	
   203  0389                     __calc_timer0_prescaler@prescaler_factor:	
   204  0389  3401               	retlw	1
   205  038A  3400               	retlw	0
   206  038B  3402               	retlw	2
   207  038C  3400               	retlw	0
   208  038D  3404               	retlw	4
   209  038E  3400               	retlw	0
   210  038F  3408               	retlw	8
   211  0390  3400               	retlw	0
   212  0391  3410               	retlw	16
   213  0392  3400               	retlw	0
   214  0393  3420               	retlw	32
   215  0394  3400               	retlw	0
   216  0395  3440               	retlw	64
   217  0396  3400               	retlw	0
   218  0397  3480               	retlw	128
   219  0398  3400               	retlw	0
   220  0399  3400               	retlw	0
   221  039A  3401               	retlw	1
   222  039B                     __end_of__calc_timer0_prescaler@prescaler_factor:	
   223  039B                     _symbols:	
   224  039B  340D               	retlw	13
   225  039C  340E               	retlw	14
   226  039D  3413               	retlw	19
   227  039E  3415               	retlw	21
   228  039F  3416               	retlw	22
   229  03A0  3419               	retlw	25
   230  03A1  341A               	retlw	26
   231  03A2  341C               	retlw	28
   232  03A3  3423               	retlw	35
   233  03A4  3425               	retlw	37
   234  03A5  3426               	retlw	38
   235  03A6  3429               	retlw	41
   236  03A7  342A               	retlw	42
   237  03A8  342C               	retlw	44
   238  03A9  3432               	retlw	50
   239  03AA  3434               	retlw	52
   240  03AB                     __end_of_symbols:	
   241  03AB                     _vw_tx_buf_header:	
   242  03AB  342A               	retlw	42
   243  03AC  342A               	retlw	42
   244  03AD  342A               	retlw	42
   245  03AE  342A               	retlw	42
   246  03AF  342A               	retlw	42
   247  03B0  342A               	retlw	42
   248  03B1  3438               	retlw	56
   249  03B2  342C               	retlw	44
   250  03B3                     __end_of_vw_tx_buf_header:	
   251  0006                     _PORTB	set	6
   252  001A                     _RCREG	set	26
   253  0018                     _RCSTAbits	set	24
   254  0001                     _TMR0	set	1
   255  0019                     _TXREG	set	25
   256  00C4                     _CREN	set	196
   257  005F                     _GIE	set	95
   258  005E                     _PEIE	set	94
   259  0033                     _RB3	set	51
   260  0034                     _RB4	set	52
   261  0065                     _RCIF	set	101
   262  00C6                     _RX9	set	198
   263  00C7                     _SPEN	set	199
   264  005D                     _TMR0IE	set	93
   265  005A                     _TMR0IF	set	90
   266  0081                     _OPTION_REG	set	129
   267  0099                     _SPBRG	set	153
   268  0086                     _TRISB	set	134
   269  04C2                     _BRGH	set	1218
   270  04C4                     _SYNC	set	1220
   271  040D                     _T0CS	set	1037
   272  0432                     _TRISB2	set	1074
   273  0433                     _TRISB3	set	1075
   274  0434                     _TRISB4	set	1076
   275  0435                     _TRISB5	set	1077
   276  04C1                     _TRMT	set	1217
   277  04C6                     _TX9	set	1222
   278  04C5                     _TXEN	set	1221
   279  03B3                     STR_4:	
   280  03B3  344C               	retlw	76	;'L'
   281  03B4  3469               	retlw	105	;'i'
   282  03B5  3467               	retlw	103	;'g'
   283  03B6  3468               	retlw	104	;'h'
   284  03B7  3474               	retlw	116	;'t'
   285  03B8  3420               	retlw	32	;' '
   286  03B9  3470               	retlw	112	;'p'
   287  03BA  3465               	retlw	101	;'e'
   288  03BB  3472               	retlw	114	;'r'
   289  03BC  3463               	retlw	99	;'c'
   290  03BD  3465               	retlw	101	;'e'
   291  03BE  346E               	retlw	110	;'n'
   292  03BF  3474               	retlw	116	;'t'
   293  03C0  3461               	retlw	97	;'a'
   294  03C1  3467               	retlw	103	;'g'
   295  03C2  3465               	retlw	101	;'e'
   296  03C3  343A               	retlw	58	;':'
   297  03C4  3420               	retlw	32	;' '
   298  03C5  3425               	retlw	37	;'%'
   299  03C6  3473               	retlw	115	;'s'
   300  03C7  3400               	retlw	0
   301  03C8                     STR_1:	
   302  03C8  3450               	retlw	80	;'P'
   303  03C9  3449               	retlw	73	;'I'
   304  03CA  3443               	retlw	67	;'C'
   305  03CB  3420               	retlw	32	;' '
   306  03CC  3452               	retlw	82	;'R'
   307  03CD  3465               	retlw	101	;'e'
   308  03CE  3463               	retlw	99	;'c'
   309  03CF  3465               	retlw	101	;'e'
   310  03D0  3469               	retlw	105	;'i'
   311  03D1  3476               	retlw	118	;'v'
   312  03D2  3465               	retlw	101	;'e'
   313  03D3  3472               	retlw	114	;'r'
   314  03D4  3420               	retlw	32	;' '
   315  03D5  3444               	retlw	68	;'D'
   316  03D6  3465               	retlw	101	;'e'
   317  03D7  346D               	retlw	109	;'m'
   318  03D8  346F               	retlw	111	;'o'
   319  03D9  340A               	retlw	10
   320  03DA  3400               	retlw	0
   321  03DB                     STR_5:	
   322  03DB  3428               	retlw	40	;'('
   323  03DC  346E               	retlw	110	;'n'
   324  03DD  3475               	retlw	117	;'u'
   325  03DE  346C               	retlw	108	;'l'
   326  03DF  346C               	retlw	108	;'l'
   327  03E0  3429               	retlw	41	;')'
   328  03E1  3400               	retlw	0
   329  03C8                     
   330                           ; #config settings
   331  0000                     
   332                           	psect	cinit
   333  0013                     start_initialization:	
   334  0013                     __initialization:	
   335                           
   336                           ; Clear objects allocated to COMMON
   337  0013  01FD               	clrf	__pbssCOMMON& (0+127)
   338                           
   339                           ; Clear objects allocated to BANK0
   340  0014  1383               	bcf	3,7	;select IRP bank0
   341  0015  3054               	movlw	low __pbssBANK0
   342  0016  0084               	movwf	4
   343  0017  3068               	movlw	low (__pbssBANK0+20)
   344  0018  118A  2592  118A   	fcall	clear_ram0
   345                           
   346                           ; Clear objects allocated to BANK1
   347  001B  30BF               	movlw	low __pbssBANK1
   348  001C  0084               	movwf	4
   349  001D  30D7               	movlw	low (__pbssBANK1+24)
   350  001E  118A  2592         	fcall	clear_ram0
   351  0020                     end_of_initialization:	
   352                           ;End of C runtime variable initialization code
   353                           
   354  0020                     __end_of__initialization:	
   355  0020  0183               	clrf	3
   356  0021  118A  2823         	ljmp	_main	;jump to C main() function
   357                           
   358                           	psect	bssCOMMON
   359  007D                     __pbssCOMMON:	
   360  007D                     _vw_rx_len:	
   361  007D                     	ds	1
   362                           
   363                           	psect	bssBANK0
   364  0054                     __pbssBANK0:	
   365  0054                     _vw_rx_bits:	
   366  0054                     	ds	2
   367  0056                     _vw_rx_active:	
   368  0056                     	ds	1
   369  0057                     _vw_rx_bit_count:	
   370  0057                     	ds	1
   371  0058                     _vw_rx_count:	
   372  0058                     	ds	1
   373  0059                     _vw_rx_done:	
   374  0059                     	ds	1
   375  005A                     _vw_rx_enabled:	
   376  005A                     	ds	1
   377  005B                     _vw_rx_enabled_last:	
   378  005B                     	ds	1
   379  005C                     _vw_rx_integrator:	
   380  005C                     	ds	1
   381  005D                     _vw_rx_inverted:	
   382  005D                     	ds	1
   383  005E                     _vw_rx_last_sample:	
   384  005E                     	ds	1
   385  005F                     _vw_rx_pll_ramp:	
   386  005F                     	ds	1
   387  0060                     _vw_rx_sample:	
   388  0060                     	ds	1
   389  0061                     _vw_tx_bit:	
   390  0061                     	ds	1
   391  0062                     _vw_tx_enabled:	
   392  0062                     	ds	1
   393  0063                     _vw_tx_header:	
   394  0063                     	ds	1
   395  0064                     _vw_tx_index:	
   396  0064                     	ds	1
   397  0065                     _vw_tx_len:	
   398  0065                     	ds	1
   399  0066                     _vw_tx_sample:	
   400  0066                     	ds	1
   401  0067                     _vw_tmr0_value:	
   402  0067                     	ds	1
   403                           
   404                           	psect	bssBANK1
   405  00BF                     __pbssBANK1:	
   406  00BF                     _vw_tx_buf:	
   407  00BF                     	ds	16
   408  00CF                     _text:	
   409  00CF                     	ds	8
   410                           
   411                           	psect	clrtext
   412  0592                     clear_ram0:	
   413                           ;	Called with FSR containing the base address, and
   414                           ;	W with the last address+1
   415                           
   416  0592  0064               	clrwdt	;clear the watchdog before getting into this loop
   417  0593                     clrloop0:	
   418  0593  0180               	clrf	0	;clear RAM location pointed to by FSR
   419  0594  0A84               	incf	4,f	;increment pointer
   420  0595  0604               	xorwf	4,w	;XOR with final address
   421  0596  1903               	btfsc	3,2	;have we reached the end yet?
   422  0597  3400               	retlw	0	;all done for this memory range, return
   423  0598  0604               	xorwf	4,w	;XOR again to restore value
   424  0599  2D93               	goto	clrloop0	;do the next byte
   425                           
   426                           	psect	cstackBANK1
   427  00A0                     __pcstackBANK1:	
   428  00A0                     main@buffer:	
   429                           
   430                           ; 30 bytes @ 0x0
   431  00A0                     	ds	30
   432  00BE                     main@len:	
   433                           
   434                           ; 1 bytes @ 0x1E
   435  00BE                     	ds	1
   436                           
   437                           	psect	cstackCOMMON
   438  0070                     __pcstackCOMMON:	
   439  0070                     ?_vw_isr_tmr0:	
   440  0070                     ?_vw_rx_start:	
   441                           ; 1 bytes @ 0x0
   442                           
   443  0070                     ?_vw_have_message:	
   444                           ; 1 bytes @ 0x0
   445                           
   446  0070                     ?_UART_Init:	
   447                           ; 1 bytes @ 0x0
   448                           
   449  0070                     ?_UART_send_byte:	
   450                           ; 1 bytes @ 0x0
   451                           
   452  0070                     ?_global_isr:	
   453                           ; 1 bytes @ 0x0
   454                           
   455  0070                     ?_main:	
   456                           ; 1 bytes @ 0x0
   457                           
   458  0070                     ?_vw_tx_stop:	
   459                           ; 1 bytes @ 0x0
   460                           
   461  0070                     ??_vw_tx_stop:	
   462                           ; 1 bytes @ 0x0
   463                           
   464  0070                     ?_vw_symbol_6to4:	
   465                           ; 1 bytes @ 0x0
   466                           
   467  0070                     ??_vw_symbol_6to4:	
   468                           ; 1 bytes @ 0x0
   469                           
   470  0070                     ?_vw_pll:	
   471                           ; 1 bytes @ 0x0
   472                           
   473                           
   474                           ; 1 bytes @ 0x0
   475  0070                     	ds	1
   476  0071                     vw_symbol_6to4@symbol:	
   477                           
   478                           ; 1 bytes @ 0x1
   479  0071                     	ds	1
   480  0072                     vw_symbol_6to4@i:	
   481                           
   482                           ; 1 bytes @ 0x2
   483  0072                     	ds	1
   484  0073                     ??_vw_pll:	
   485                           
   486                           ; 1 bytes @ 0x3
   487  0073                     	ds	5
   488  0078                     _vw_pll$233:	
   489                           
   490                           ; 2 bytes @ 0x8
   491  0078                     	ds	2
   492  007A                     vw_pll@this_byte:	
   493                           
   494                           ; 1 bytes @ 0xA
   495  007A                     	ds	1
   496  007B                     ??_vw_isr_tmr0:	
   497                           
   498                           ; 1 bytes @ 0xB
   499  007B                     	ds	2
   500                           
   501                           	psect	cstackBANK0
   502  0020                     __pcstackBANK0:	
   503  0020                     ??_global_isr:	
   504                           
   505                           ; 1 bytes @ 0x0
   506  0020                     	ds	4
   507  0024                     ??_vw_rx_start:	
   508  0024                     ??_vw_have_message:	
   509                           ; 1 bytes @ 0x4
   510                           
   511  0024                     ??_UART_Init:	
   512                           ; 1 bytes @ 0x4
   513                           
   514  0024                     ??_UART_send_byte:	
   515                           ; 1 bytes @ 0x4
   516                           
   517  0024                     ?_memcpy:	
   518                           ; 1 bytes @ 0x4
   519                           
   520  0024                     ?_sprintf:	
   521                           ; 1 bytes @ 0x4
   522                           
   523  0024                     ?__crc_ccitt_update:	
   524                           ; 2 bytes @ 0x4
   525                           
   526  0024                     ?___wmul:	
   527                           ; 2 bytes @ 0x4
   528                           
   529  0024                     UART_send_byte@single_byte:	
   530                           ; 2 bytes @ 0x4
   531                           
   532  0024                     memcpy@src:	
   533                           ; 1 bytes @ 0x4
   534                           
   535  0024                     sprintf@f:	
   536                           ; 1 bytes @ 0x4
   537                           
   538  0024                     __crc_ccitt_update@crc:	
   539                           ; 1 bytes @ 0x4
   540                           
   541  0024                     ___wmul@multiplier:	
   542                           ; 2 bytes @ 0x4
   543                           
   544                           
   545                           ; 2 bytes @ 0x4
   546  0024                     	ds	1
   547  0025                     ?_UART_send_string:	
   548  0025                     UART_send_string@str:	
   549                           ; 1 bytes @ 0x5
   550                           
   551  0025                     memcpy@n:	
   552                           ; 2 bytes @ 0x5
   553                           
   554                           
   555                           ; 2 bytes @ 0x5
   556  0025                     	ds	1
   557  0026                     ??_sprintf:	
   558  0026                     __crc_ccitt_update@data:	
   559                           ; 1 bytes @ 0x6
   560                           
   561  0026                     ___wmul@multiplicand:	
   562                           ; 1 bytes @ 0x6
   563                           
   564                           
   565                           ; 2 bytes @ 0x6
   566  0026                     	ds	1
   567  0027                     ??_UART_send_string:	
   568  0027                     ??__crc_ccitt_update:	
   569                           ; 1 bytes @ 0x7
   570                           
   571  0027                     ??_memcpy:	
   572                           ; 1 bytes @ 0x7
   573                           
   574  0027                     sprintf@flag:	
   575                           ; 1 bytes @ 0x7
   576                           
   577                           
   578                           ; 1 bytes @ 0x7
   579  0027                     	ds	1
   580  0028                     ??___wmul:	
   581  0028                     sprintf@ap:	
   582                           ; 1 bytes @ 0x8
   583                           
   584  0028                     ___wmul@product:	
   585                           ; 1 bytes @ 0x8
   586                           
   587                           
   588                           ; 2 bytes @ 0x8
   589  0028                     	ds	1
   590  0029                     sprintf@c:	
   591                           
   592                           ; 1 bytes @ 0x9
   593  0029                     	ds	1
   594  002A                     ?___aldiv:	
   595  002A                     memcpy@dest:	
   596                           ; 4 bytes @ 0xA
   597                           
   598  002A                     sprintf@cp:	
   599                           ; 1 bytes @ 0xA
   600                           
   601  002A                     ___aldiv@divisor:	
   602                           ; 2 bytes @ 0xA
   603                           
   604                           
   605                           ; 4 bytes @ 0xA
   606  002A                     	ds	2
   607  002C                     sprintf@sp:	
   608                           
   609                           ; 1 bytes @ 0xC
   610  002C                     	ds	2
   611  002E                     ___aldiv@dividend:	
   612                           
   613                           ; 4 bytes @ 0xE
   614  002E                     	ds	4
   615  0032                     ??___aldiv:	
   616                           
   617                           ; 1 bytes @ 0x12
   618  0032                     	ds	1
   619  0033                     ___aldiv@counter:	
   620                           
   621                           ; 1 bytes @ 0x13
   622  0033                     	ds	1
   623  0034                     ?_vw_crc:	
   624  0034                     vw_crc@count:	
   625                           ; 2 bytes @ 0x14
   626                           
   627  0034                     ___aldiv@sign:	
   628                           ; 1 bytes @ 0x14
   629                           
   630                           
   631                           ; 1 bytes @ 0x14
   632  0034                     	ds	1
   633  0035                     ___aldiv@quotient:	
   634                           
   635                           ; 4 bytes @ 0x15
   636  0035                     	ds	1
   637  0036                     ??_vw_crc:	
   638                           
   639                           ; 1 bytes @ 0x16
   640  0036                     	ds	1
   641  0037                     vw_crc@ptr:	
   642                           
   643                           ; 1 bytes @ 0x17
   644  0037                     	ds	1
   645  0038                     vw_crc@crc:	
   646                           
   647                           ; 2 bytes @ 0x18
   648  0038                     	ds	1
   649  0039                     ?__calc_timer0_prescaler:	
   650  0039                     __calc_timer0_prescaler@brate:	
   651                           ; 1 bytes @ 0x19
   652                           
   653                           
   654                           ; 2 bytes @ 0x19
   655  0039                     	ds	1
   656  003A                     ?_vw_recv:	
   657  003A                     vw_recv@len:	
   658                           ; 1 bytes @ 0x1A
   659                           
   660                           
   661                           ; 1 bytes @ 0x1A
   662  003A                     	ds	1
   663  003B                     ??_vw_recv:	
   664  003B                     __calc_timer0_prescaler@prescaler_value:	
   665                           ; 1 bytes @ 0x1B
   666                           
   667                           
   668                           ; 1 bytes @ 0x1B
   669  003B                     	ds	1
   670  003C                     __calc_timer0_prescaler@prescaler_bits:	
   671                           
   672                           ; 1 bytes @ 0x1C
   673  003C                     	ds	1
   674  003D                     __calc_timer0_prescaler@k_tmr0:	
   675                           
   676                           ; 1 bytes @ 0x1D
   677  003D                     	ds	1
   678  003E                     ??__calc_timer0_prescaler:	
   679  003E                     vw_recv@buf:	
   680                           ; 1 bytes @ 0x1E
   681                           
   682                           
   683                           ; 1 bytes @ 0x1E
   684  003E                     	ds	1
   685  003F                     vw_recv@rxlen:	
   686                           
   687                           ; 1 bytes @ 0x1F
   688  003F                     	ds	7
   689  0046                     __calc_timer0_prescaler@aux_tmr0:	
   690                           
   691                           ; 2 bytes @ 0x26
   692  0046                     	ds	2
   693  0048                     __calc_timer0_prescaler@pindex:	
   694                           
   695                           ; 1 bytes @ 0x28
   696  0048                     	ds	1
   697  0049                     ?_vw_setup:	
   698  0049                     vw_setup@brate:	
   699                           ; 1 bytes @ 0x29
   700                           
   701                           
   702                           ; 2 bytes @ 0x29
   703  0049                     	ds	2
   704  004B                     ??_vw_setup:	
   705                           
   706                           ; 1 bytes @ 0x2B
   707  004B                     	ds	3
   708  004E                     vw_setup@prescaler_value:	
   709                           
   710                           ; 2 bytes @ 0x2E
   711  004E                     	ds	2
   712  0050                     vw_setup@prescaler_bits:	
   713                           
   714                           ; 1 bytes @ 0x30
   715  0050                     	ds	1
   716  0051                     ??_main:	
   717                           
   718                           ; 1 bytes @ 0x31
   719  0051                     	ds	3
   720                           
   721                           	psect	maintext
   722  0023                     __pmaintext:	
   723 ;;
   724 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   725 ;;
   726 ;; *************** function _main *****************
   727 ;; Defined at:
   728 ;;		line 23 in file "main.c"
   729 ;; Parameters:    Size  Location     Type
   730 ;;		None
   731 ;; Auto vars:     Size  Location     Type
   732 ;;  buffer         30    0[BANK1 ] unsigned char [30]
   733 ;;  len             1   30[BANK1 ] unsigned char 
   734 ;;  i               2    0        unsigned int 
   735 ;; Return value:  Size  Location     Type
   736 ;;                  1    wreg      void 
   737 ;; Registers used:
   738 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   739 ;; Tracked objects:
   740 ;;		On entry : B00/0
   741 ;;		On exit  : 0/0
   742 ;;		Unchanged: 0/0
   743 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   744 ;;      Params:         0       0       0       0       0
   745 ;;      Locals:         0       0      31       0       0
   746 ;;      Temps:          0       3       0       0       0
   747 ;;      Totals:         0       3      31       0       0
   748 ;;Total ram usage:       34 bytes
   749 ;; Hardware stack levels required when called:    8
   750 ;; This function calls:
   751 ;;		_UART_Init
   752 ;;		_UART_send_byte
   753 ;;		_UART_send_string
   754 ;;		_sprintf
   755 ;;		_vw_have_message
   756 ;;		_vw_recv
   757 ;;		_vw_rx_start
   758 ;;		_vw_setup
   759 ;; This function is called by:
   760 ;;		Startup code after reset
   761 ;; This function uses a non-reentrant model
   762 ;;
   763                           
   764                           
   765                           ;psect for function _main
   766  0023                     _main:	
   767                           
   768                           ;main.c: 24: TRISB = 0;
   769                           
   770                           ;incstack = 0
   771                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   772  0023  1683               	bsf	3,5	;RP0=1, select bank1
   773  0024  1303               	bcf	3,6	;RP1=0, select bank1
   774  0025  0186               	clrf	6	;volatile
   775                           
   776                           ;main.c: 25: PORTB = 0;
   777  0026  1283               	bcf	3,5	;RP0=0, select bank0
   778  0027  1303               	bcf	3,6	;RP1=0, select bank0
   779  0028  0186               	clrf	6	;volatile
   780                           
   781                           ;main.c: 27: uint16_t i;
   782                           ;main.c: 29: UART_Init();
   783  0029  118A  2557  118A   	fcall	_UART_Init
   784                           
   785                           ;main.c: 32: vw_setup(200);
   786  002C  30C8               	movlw	200
   787  002D  1283               	bcf	3,5	;RP0=0, select bank0
   788  002E  1303               	bcf	3,6	;RP1=0, select bank0
   789  002F  00C9               	movwf	vw_setup@brate
   790  0030  3000               	movlw	0
   791  0031  00CA               	movwf	vw_setup@brate+1
   792  0032  118A  242C  118A   	fcall	_vw_setup
   793                           
   794                           ;main.c: 36: UART_send_string((char *) "PIC Receiver Demo\n");
   795  0035  3040               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   796  0036  1283               	bcf	3,5	;RP0=0, select bank0
   797  0037  1303               	bcf	3,6	;RP1=0, select bank0
   798  0038  00A5               	movwf	UART_send_string@str
   799  0039  3080               	movlw	128
   800  003A  00A6               	movwf	UART_send_string@str+1
   801  003B  118A  24FF  118A   	fcall	_UART_send_string
   802                           
   803                           ;main.c: 37: UART_send_byte(0xD);
   804  003E  300D               	movlw	13
   805  003F  118A  257D  118A   	fcall	_UART_send_byte
   806                           
   807                           ;main.c: 38: UART_send_byte(0xA);
   808  0042  300A               	movlw	10
   809  0043  118A  257D  118A   	fcall	_UART_send_byte
   810                           
   811                           ;main.c: 40: _delay((unsigned long)((1000)*(12000000/4000.0)));
   812  0046  3010               	movlw	16
   813  0047  1283               	bcf	3,5	;RP0=0, select bank0
   814  0048  1303               	bcf	3,6	;RP1=0, select bank0
   815  0049  00D3               	movwf	??_main+2
   816  004A  3039               	movlw	57
   817  004B  00D2               	movwf	??_main+1
   818  004C  300D               	movlw	13
   819  004D  00D1               	movwf	??_main
   820  004E                     u1817:	
   821  004E  0BD1               	decfsz	??_main,f
   822  004F  284E               	goto	u1817
   823  0050  0BD2               	decfsz	??_main+1,f
   824  0051  284E               	goto	u1817
   825  0052  0BD3               	decfsz	??_main+2,f
   826  0053  284E               	goto	u1817
   827                           
   828                           ;main.c: 42: UART_send_string((char *) "PIC Receiver Demo\n");
   829  0054  3040               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   830  0055  1283               	bcf	3,5	;RP0=0, select bank0
   831  0056  1303               	bcf	3,6	;RP1=0, select bank0
   832  0057  00A5               	movwf	UART_send_string@str
   833  0058  3080               	movlw	128
   834  0059  00A6               	movwf	UART_send_string@str+1
   835  005A  118A  24FF  118A   	fcall	_UART_send_string
   836                           
   837                           ;main.c: 43: UART_send_byte(0xD);
   838  005D  300D               	movlw	13
   839  005E  118A  257D  118A   	fcall	_UART_send_byte
   840                           
   841                           ;main.c: 44: UART_send_byte(0xA);
   842  0061  300A               	movlw	10
   843  0062  118A  257D  118A   	fcall	_UART_send_byte
   844                           
   845                           ;main.c: 46: _delay((unsigned long)((1000)*(12000000/4000.0)));
   846  0065  3010               	movlw	16
   847  0066  1283               	bcf	3,5	;RP0=0, select bank0
   848  0067  1303               	bcf	3,6	;RP1=0, select bank0
   849  0068  00D3               	movwf	??_main+2
   850  0069  3039               	movlw	57
   851  006A  00D2               	movwf	??_main+1
   852  006B  300D               	movlw	13
   853  006C  00D1               	movwf	??_main
   854  006D                     u1827:	
   855  006D  0BD1               	decfsz	??_main,f
   856  006E  286D               	goto	u1827
   857  006F  0BD2               	decfsz	??_main+1,f
   858  0070  286D               	goto	u1827
   859  0071  0BD3               	decfsz	??_main+2,f
   860  0072  286D               	goto	u1827
   861                           
   862                           ;main.c: 48: UART_send_string((char *) "PIC Receiver Demo\n");
   863  0073  3040               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   864  0074  1283               	bcf	3,5	;RP0=0, select bank0
   865  0075  1303               	bcf	3,6	;RP1=0, select bank0
   866  0076  00A5               	movwf	UART_send_string@str
   867  0077  3080               	movlw	128
   868  0078  00A6               	movwf	UART_send_string@str+1
   869  0079  118A  24FF  118A   	fcall	_UART_send_string
   870                           
   871                           ;main.c: 49: UART_send_byte(0xD);
   872  007C  300D               	movlw	13
   873  007D  118A  257D  118A   	fcall	_UART_send_byte
   874                           
   875                           ;main.c: 50: UART_send_byte(0xA);
   876  0080  300A               	movlw	10
   877  0081  118A  257D  118A   	fcall	_UART_send_byte
   878                           
   879                           ;main.c: 52: vw_rx_start();
   880  0084  118A  259A  118A   	fcall	_vw_rx_start
   881  0087                     l1709:	
   882                           ;main.c: 54: while(1){
   883                           
   884                           
   885                           ;main.c: 55: if (vw_have_message()){
   886  0087  118A  2589  118A   	fcall	_vw_have_message
   887  008A  3A00               	xorlw	0
   888  008B  1903               	skipnz
   889  008C  2887               	goto	l1709
   890                           
   891                           ;main.c: 58: uint8_t len = 8;
   892  008D  3008               	movlw	8
   893  008E  1283               	bcf	3,5	;RP0=0, select bank0
   894  008F  1303               	bcf	3,6	;RP1=0, select bank0
   895  0090  00D1               	movwf	??_main
   896  0091  0851               	movf	??_main,w
   897  0092  1683               	bsf	3,5	;RP0=1, select bank1
   898  0093  1303               	bcf	3,6	;RP1=0, select bank1
   899  0094  00BE               	movwf	main@len^(0+128)
   900                           
   901                           ;main.c: 60: if (vw_recv(text, &len)){
   902  0095  30BE               	movlw	(low (main@len| 0))& (0+255)
   903  0096  1283               	bcf	3,5	;RP0=0, select bank0
   904  0097  1303               	bcf	3,6	;RP1=0, select bank0
   905  0098  00D1               	movwf	??_main
   906  0099  0851               	movf	??_main,w
   907  009A  00BA               	movwf	vw_recv@len
   908  009B  30CF               	movlw	(low (_text| 0))& (0+255)
   909  009C  118A  246F  118A   	fcall	_vw_recv
   910  009F  3A00               	xorlw	0
   911  00A0  1903               	skipnz
   912  00A1  2887               	goto	l1709
   913                           
   914                           ;main.c: 62: char buffer[30];
   915                           ;main.c: 63: sprintf(buffer, "Light percentage: %s", text);
   916  00A2  302B               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
   917  00A3  1283               	bcf	3,5	;RP0=0, select bank0
   918  00A4  1303               	bcf	3,6	;RP1=0, select bank0
   919  00A5  00D1               	movwf	??_main
   920  00A6  0851               	movf	??_main,w
   921  00A7  00A4               	movwf	sprintf@f
   922  00A8  30CF               	movlw	(low (_text| 0))& (0+255)
   923  00A9  00D2               	movwf	??_main+1
   924  00AA  0852               	movf	??_main+1,w
   925  00AB  00A5               	movwf	low ((?_sprintf| 0+1))
   926  00AC  30A0               	movlw	(low (main@buffer| 0))& (0+255)
   927  00AD  118A  2309  118A   	fcall	_sprintf
   928                           
   929                           ;main.c: 65: UART_send_string((char *) buffer);
   930  00B0  30A0               	movlw	(low (main@buffer| 0))& (0+255)
   931  00B1  1283               	bcf	3,5	;RP0=0, select bank0
   932  00B2  1303               	bcf	3,6	;RP1=0, select bank0
   933  00B3  00A5               	movwf	UART_send_string@str
   934  00B4  3000               	movlw	0
   935  00B5  00A6               	movwf	UART_send_string@str+1
   936  00B6  118A  24FF  118A   	fcall	_UART_send_string
   937                           
   938                           ;main.c: 71: UART_send_byte(0xD);
   939  00B9  300D               	movlw	13
   940  00BA  118A  257D  118A   	fcall	_UART_send_byte
   941                           
   942                           ;main.c: 72: UART_send_byte(0xA);
   943  00BD  300A               	movlw	10
   944  00BE  118A  257D  118A   	fcall	_UART_send_byte
   945  00C1  2887               	goto	l1709
   946  00C2                     __end_of_main:	
   947                           
   948                           	psect	text1
   949  042C                     __ptext1:	
   950 ;; *************** function _vw_setup *****************
   951 ;; Defined at:
   952 ;;		line 123 in file "virtualwire.c"
   953 ;; Parameters:    Size  Location     Type
   954 ;;  brate           2   41[BANK0 ] unsigned int 
   955 ;; Auto vars:     Size  Location     Type
   956 ;;  prescaler_va    2   46[BANK0 ] unsigned int 
   957 ;;  prescaler_bi    1   48[BANK0 ] unsigned char 
   958 ;; Return value:  Size  Location     Type
   959 ;;                  1    wreg      void 
   960 ;; Registers used:
   961 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   962 ;; Tracked objects:
   963 ;;		On entry : 0/0
   964 ;;		On exit  : 0/0
   965 ;;		Unchanged: 0/0
   966 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   967 ;;      Params:         0       2       0       0       0
   968 ;;      Locals:         0       3       0       0       0
   969 ;;      Temps:          0       3       0       0       0
   970 ;;      Totals:         0       8       0       0       0
   971 ;;Total ram usage:        8 bytes
   972 ;; Hardware stack levels used:    1
   973 ;; Hardware stack levels required when called:    7
   974 ;; This function calls:
   975 ;;		__calc_timer0_prescaler
   976 ;; This function is called by:
   977 ;;		_main
   978 ;; This function uses a non-reentrant model
   979 ;;
   980                           
   981                           
   982                           ;psect for function _vw_setup
   983  042C                     _vw_setup:	
   984                           
   985                           ;virtualwire.c: 125: uint16_t prescaler_value;
   986                           ;virtualwire.c: 126: uint8_t prescaler_bits;
   987                           ;virtualwire.c: 129: TRISB3 = 1;
   988                           
   989                           ;incstack = 0
   990                           ; Regs used in _vw_setup: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   991  042C  1683               	bsf	3,5	;RP0=1, select bank1
   992  042D  1303               	bcf	3,6	;RP1=0, select bank1
   993  042E  1586               	bsf	6,3	;volatile
   994                           
   995                           ;virtualwire.c: 130: TRISB4 = 0;
   996  042F  1206               	bcf	6,4	;volatile
   997                           
   998                           ;virtualwire.c: 133: RB4 = 0;
   999  0430  1283               	bcf	3,5	;RP0=0, select bank0
  1000  0431  1303               	bcf	3,6	;RP1=0, select bank0
  1001  0432  1206               	bcf	6,4	;volatile
  1002                           
  1003                           ;virtualwire.c: 136: _calc_timer0_prescaler(brate, &prescaler_value, &prescaler_bits, &v
      +                          w_tmr0_value);
  1004  0433  084A               	movf	vw_setup@brate+1,w
  1005  0434  00BA               	movwf	__calc_timer0_prescaler@brate+1
  1006  0435  0849               	movf	vw_setup@brate,w
  1007  0436  00B9               	movwf	__calc_timer0_prescaler@brate
  1008  0437  304E               	movlw	(low (vw_setup@prescaler_value| 0))& (0+255)
  1009  0438  00CB               	movwf	??_vw_setup
  1010  0439  084B               	movf	??_vw_setup,w
  1011  043A  00BB               	movwf	__calc_timer0_prescaler@prescaler_value
  1012  043B  3050               	movlw	(low (vw_setup@prescaler_bits| 0))& (0+255)
  1013  043C  00CC               	movwf	??_vw_setup+1
  1014  043D  084C               	movf	??_vw_setup+1,w
  1015  043E  00BC               	movwf	__calc_timer0_prescaler@prescaler_bits
  1016  043F  3067               	movlw	(low (_vw_tmr0_value| 0))& (0+255)
  1017  0440  00CD               	movwf	??_vw_setup+2
  1018  0441  084D               	movf	??_vw_setup+2,w
  1019  0442  00BD               	movwf	__calc_timer0_prescaler@k_tmr0
  1020  0443  118A  2289  118A   	fcall	__calc_timer0_prescaler
  1021                           
  1022                           ;virtualwire.c: 138: if (prescaler_value > 1)
  1023  0446  3000               	movlw	0
  1024  0447  1283               	bcf	3,5	;RP0=0, select bank0
  1025  0448  1303               	bcf	3,6	;RP1=0, select bank0
  1026  0449  024F               	subwf	vw_setup@prescaler_value+1,w
  1027  044A  3002               	movlw	2
  1028  044B  1903               	skipnz
  1029  044C  024E               	subwf	vw_setup@prescaler_value,w
  1030  044D  1C03               	skipc
  1031  044E  2C5D               	goto	l1595
  1032                           
  1033                           ;virtualwire.c: 139: {
  1034                           ;virtualwire.c: 141: OPTION_REG &= 0xF0;
  1035  044F  30F0               	movlw	240
  1036  0450  00CB               	movwf	??_vw_setup
  1037  0451  084B               	movf	??_vw_setup,w
  1038  0452  1683               	bsf	3,5	;RP0=1, select bank1
  1039  0453  1303               	bcf	3,6	;RP1=0, select bank1
  1040  0454  0581               	andwf	1,f	;volatile
  1041                           
  1042                           ;virtualwire.c: 142: OPTION_REG |= prescaler_bits;
  1043  0455  1283               	bcf	3,5	;RP0=0, select bank0
  1044  0456  1303               	bcf	3,6	;RP1=0, select bank0
  1045  0457  0850               	movf	vw_setup@prescaler_bits,w
  1046  0458  00CB               	movwf	??_vw_setup
  1047  0459  084B               	movf	??_vw_setup,w
  1048  045A  1683               	bsf	3,5	;RP0=1, select bank1
  1049  045B  1303               	bcf	3,6	;RP1=0, select bank1
  1050  045C  0481               	iorwf	1,f	;volatile
  1051  045D                     l1595:	
  1052                           
  1053                           ;virtualwire.c: 143: }
  1054                           ;virtualwire.c: 145: T0CS = 0;
  1055  045D  1683               	bsf	3,5	;RP0=1, select bank1
  1056  045E  1303               	bcf	3,6	;RP1=0, select bank1
  1057  045F  1281               	bcf	1,5	;volatile
  1058                           
  1059                           ;virtualwire.c: 146: TMR0 = (2 - vw_tmr0_value);
  1060  0460  1283               	bcf	3,5	;RP0=0, select bank0
  1061  0461  1303               	bcf	3,6	;RP1=0, select bank0
  1062  0462  0367               	decf	_vw_tmr0_value,w
  1063  0463  3AFF               	xorlw	255
  1064  0464  3E02               	addlw	2
  1065  0465  0081               	movwf	1	;volatile
  1066                           
  1067                           ;virtualwire.c: 148: TMR0IF = 0;
  1068  0466  110B               	bcf	11,2	;volatile
  1069                           
  1070                           ;virtualwire.c: 149: TMR0IE = 1;
  1071  0467  168B               	bsf	11,5	;volatile
  1072                           
  1073                           ;virtualwire.c: 150: GIE = PEIE = 1;
  1074  0468  170B               	bsf	11,6	;volatile
  1075  0469  1F0B               	btfss	11,6	;volatile
  1076  046A  2C6D               	goto	u1600
  1077  046B  178B               	bsf	11,7	;volatile
  1078  046C  0008               	return
  1079  046D                     u1600:	
  1080  046D  138B               	bcf	11,7	;volatile
  1081  046E  0008               	return
  1082  046F                     __end_of_vw_setup:	
  1083                           
  1084                           	psect	text2
  1085  0289                     __ptext2:	
  1086 ;; *************** function __calc_timer0_prescaler *****************
  1087 ;; Defined at:
  1088 ;;		line 97 in file "virtualwire.c"
  1089 ;; Parameters:    Size  Location     Type
  1090 ;;  brate           2   25[BANK0 ] unsigned int 
  1091 ;;  prescaler_va    1   27[BANK0 ] PTR unsigned int 
  1092 ;;		 -> vw_setup@prescaler_value(2), 
  1093 ;;  prescaler_bi    1   28[BANK0 ] PTR unsigned char 
  1094 ;;		 -> vw_setup@prescaler_bits(1), 
  1095 ;;  k_tmr0          1   29[BANK0 ] PTR unsigned char 
  1096 ;;		 -> vw_tmr0_value(1), 
  1097 ;; Auto vars:     Size  Location     Type
  1098 ;;  aux_tmr0        2   38[BANK0 ] unsigned int 
  1099 ;;  pindex          1   40[BANK0 ] unsigned char 
  1100 ;; Return value:  Size  Location     Type
  1101 ;;                  1    wreg      unsigned char 
  1102 ;; Registers used:
  1103 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1104 ;; Tracked objects:
  1105 ;;		On entry : 0/0
  1106 ;;		On exit  : 0/0
  1107 ;;		Unchanged: 0/0
  1108 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1109 ;;      Params:         0       5       0       0       0
  1110 ;;      Locals:         0       3       0       0       0
  1111 ;;      Temps:          0       8       0       0       0
  1112 ;;      Totals:         0      16       0       0       0
  1113 ;;Total ram usage:       16 bytes
  1114 ;; Hardware stack levels used:    1
  1115 ;; Hardware stack levels required when called:    6
  1116 ;; This function calls:
  1117 ;;		___aldiv
  1118 ;;		___wmul
  1119 ;; This function is called by:
  1120 ;;		_vw_setup
  1121 ;; This function uses a non-reentrant model
  1122 ;;
  1123                           
  1124                           
  1125                           ;psect for function __calc_timer0_prescaler
  1126  0289                     __calc_timer0_prescaler:	
  1127                           
  1128                           ;virtualwire.c: 99: const uint16_t prescaler_factor[] = {1, 2, 4, 8, 16, 32, 64, 128, 25
      +                          6};
  1129                           ;virtualwire.c: 100: uint8_t pindex;
  1130                           ;virtualwire.c: 101: uint16_t aux_tmr0;
  1131                           ;virtualwire.c: 103: for (pindex = 0; pindex < 8; pindex++)
  1132                           
  1133                           ;incstack = 0
  1134 ;; using string table level
  1135                           ; Regs used in __calc_timer0_prescaler: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cst
      +                          ack]
  1136  0289  1283               	bcf	3,5	;RP0=0, select bank0
  1137  028A  1303               	bcf	3,6	;RP1=0, select bank0
  1138  028B  01C8               	clrf	__calc_timer0_prescaler@pindex
  1139  028C                     L1:	
  1140  028C  3008               	movlw	8
  1141  028D  0248               	subwf	__calc_timer0_prescaler@pindex,w
  1142  028E  1803               	btfsc	3,0
  1143  028F  0008               	return
  1144                           
  1145                           ;virtualwire.c: 104: {
  1146                           ;virtualwire.c: 105: *prescaler_value = prescaler_factor[pindex];
  1147  0290  0848               	movf	__calc_timer0_prescaler@pindex,w
  1148  0291  00BE               	movwf	??__calc_timer0_prescaler
  1149  0292  073E               	addwf	??__calc_timer0_prescaler,w
  1150  0293  3E01               	addlw	low ((__calc_timer0_prescaler@prescaler_factor-__stringbase)| (0+32768))
  1151  0294  0084               	movwf	4
  1152  0295  118A  2383  118A   	fcall	stringdir
  1153  0298  00BF               	movwf	??__calc_timer0_prescaler+1
  1154  0299  118A  2383  118A   	fcall	stringdir
  1155  029C  00C0               	movwf	??__calc_timer0_prescaler+2
  1156  029D  083B               	movf	__calc_timer0_prescaler@prescaler_value,w
  1157  029E  0084               	movwf	4
  1158  029F  083F               	movf	??__calc_timer0_prescaler+1,w
  1159  02A0  1383               	bcf	3,7	;select IRP bank0
  1160  02A1  0080               	movwf	0
  1161  02A2  0A84               	incf	4,f
  1162  02A3  0840               	movf	??__calc_timer0_prescaler+2,w
  1163  02A4  0080               	movwf	0
  1164                           
  1165                           ;virtualwire.c: 106: aux_tmr0 = 12000000 / (4 * (*prescaler_value) * brate * 8);
  1166  02A5  083A               	movf	__calc_timer0_prescaler@brate+1,w
  1167  02A6  00A7               	movwf	___wmul@multiplicand+1
  1168  02A7  0839               	movf	__calc_timer0_prescaler@brate,w
  1169  02A8  00A6               	movwf	___wmul@multiplicand
  1170  02A9  083B               	movf	__calc_timer0_prescaler@prescaler_value,w
  1171  02AA  0084               	movwf	4
  1172  02AB  0800               	movf	0,w
  1173  02AC  00BE               	movwf	??__calc_timer0_prescaler
  1174  02AD  0A84               	incf	4,f
  1175  02AE  0800               	movf	0,w
  1176  02AF  00BF               	movwf	??__calc_timer0_prescaler+1
  1177  02B0  1003               	clrc
  1178  02B1  0DBE               	rlf	??__calc_timer0_prescaler,f
  1179  02B2  0DBF               	rlf	??__calc_timer0_prescaler+1,f
  1180  02B3  1003               	clrc
  1181  02B4  0DBE               	rlf	??__calc_timer0_prescaler,f
  1182  02B5  0DBF               	rlf	??__calc_timer0_prescaler+1,f
  1183  02B6  083E               	movf	??__calc_timer0_prescaler,w
  1184  02B7  00A4               	movwf	___wmul@multiplier
  1185  02B8  083F               	movf	??__calc_timer0_prescaler+1,w
  1186  02B9  00A5               	movwf	___wmul@multiplier+1
  1187  02BA  118A  24DC  118A   	fcall	___wmul
  1188  02BD  1283               	bcf	3,5	;RP0=0, select bank0
  1189  02BE  1303               	bcf	3,6	;RP1=0, select bank0
  1190  02BF  0824               	movf	?___wmul,w
  1191  02C0  00C0               	movwf	??__calc_timer0_prescaler+2
  1192  02C1  0825               	movf	?___wmul+1,w
  1193  02C2  00C1               	movwf	??__calc_timer0_prescaler+3
  1194  02C3  1003               	clrc
  1195  02C4  0DC0               	rlf	??__calc_timer0_prescaler+2,f
  1196  02C5  0DC1               	rlf	??__calc_timer0_prescaler+3,f
  1197  02C6  1003               	clrc
  1198  02C7  0DC0               	rlf	??__calc_timer0_prescaler+2,f
  1199  02C8  0DC1               	rlf	??__calc_timer0_prescaler+3,f
  1200  02C9  1003               	clrc
  1201  02CA  0DC0               	rlf	??__calc_timer0_prescaler+2,f
  1202  02CB  0DC1               	rlf	??__calc_timer0_prescaler+3,f
  1203  02CC  0840               	movf	??__calc_timer0_prescaler+2,w
  1204  02CD  00C2               	movwf	??__calc_timer0_prescaler+4
  1205  02CE  0841               	movf	??__calc_timer0_prescaler+3,w
  1206  02CF  00C3               	movwf	??__calc_timer0_prescaler+5
  1207  02D0  01C4               	clrf	??__calc_timer0_prescaler+6
  1208  02D1  01C5               	clrf	??__calc_timer0_prescaler+7
  1209  02D2  0845               	movf	??__calc_timer0_prescaler+7,w
  1210  02D3  00AD               	movwf	___aldiv@divisor+3
  1211  02D4  0844               	movf	??__calc_timer0_prescaler+6,w
  1212  02D5  00AC               	movwf	___aldiv@divisor+2
  1213  02D6  0843               	movf	??__calc_timer0_prescaler+5,w
  1214  02D7  00AB               	movwf	___aldiv@divisor+1
  1215  02D8  0842               	movf	??__calc_timer0_prescaler+4,w
  1216  02D9  00AA               	movwf	___aldiv@divisor
  1217  02DA  3000               	movlw	0
  1218  02DB  00B1               	movwf	___aldiv@dividend+3
  1219  02DC  30B7               	movlw	183
  1220  02DD  00B0               	movwf	___aldiv@dividend+2
  1221  02DE  301B               	movlw	27
  1222  02DF  00AF               	movwf	___aldiv@dividend+1
  1223  02E0  3000               	movlw	0
  1224  02E1  00AE               	movwf	___aldiv@dividend
  1225  02E2  118A  21FA  118A   	fcall	___aldiv
  1226  02E5  1283               	bcf	3,5	;RP0=0, select bank0
  1227  02E6  1303               	bcf	3,6	;RP1=0, select bank0
  1228  02E7  082B               	movf	?___aldiv+1,w
  1229  02E8  00C7               	movwf	__calc_timer0_prescaler@aux_tmr0+1
  1230  02E9  082A               	movf	?___aldiv,w
  1231  02EA  00C6               	movwf	__calc_timer0_prescaler@aux_tmr0
  1232                           
  1233                           ;virtualwire.c: 108: if (aux_tmr0 < 256)
  1234  02EB  3001               	movlw	1
  1235  02EC  0247               	subwf	__calc_timer0_prescaler@aux_tmr0+1,w
  1236  02ED  3000               	movlw	0
  1237  02EE  1903               	skipnz
  1238  02EF  0246               	subwf	__calc_timer0_prescaler@aux_tmr0,w
  1239  02F0  1803               	skipnc
  1240  02F1  2B04               	goto	l1421
  1241                           
  1242                           ;virtualwire.c: 109: {
  1243                           ;virtualwire.c: 110: *k_tmr0 = aux_tmr0;
  1244  02F2  0846               	movf	__calc_timer0_prescaler@aux_tmr0,w
  1245  02F3  00BE               	movwf	??__calc_timer0_prescaler
  1246  02F4  083D               	movf	__calc_timer0_prescaler@k_tmr0,w
  1247  02F5  0084               	movwf	4
  1248  02F6  083E               	movf	??__calc_timer0_prescaler,w
  1249  02F7  1383               	bcf	3,7	;select IRP bank0
  1250  02F8  0080               	movwf	0
  1251                           
  1252                           ;virtualwire.c: 111: if (pindex > 0)
  1253  02F9  0848               	movf	__calc_timer0_prescaler@pindex,w
  1254  02FA  1903               	btfsc	3,2
  1255  02FB  0008               	return
  1256                           
  1257                           ;virtualwire.c: 112: {
  1258                           ;virtualwire.c: 113: *prescaler_bits = pindex - 1;
  1259  02FC  0848               	movf	__calc_timer0_prescaler@pindex,w
  1260  02FD  3EFF               	addlw	255
  1261  02FE  00BE               	movwf	??__calc_timer0_prescaler
  1262  02FF  083C               	movf	__calc_timer0_prescaler@prescaler_bits,w
  1263  0300  0084               	movwf	4
  1264  0301  083E               	movf	??__calc_timer0_prescaler,w
  1265  0302  0080               	movwf	0
  1266                           
  1267                           ;virtualwire.c: 114: }
  1268                           ;virtualwire.c: 115: return 1;
  1269                           ;	Return value of __calc_timer0_prescaler is never used
  1270  0303  0008               	return
  1271  0304                     l1421:	
  1272  0304  3001               	movlw	1
  1273  0305  00BE               	movwf	??__calc_timer0_prescaler
  1274  0306  083E               	movf	??__calc_timer0_prescaler,w
  1275  0307  07C8               	addwf	__calc_timer0_prescaler@pindex,f
  1276  0308  2A8C               	goto	L1
  1277  0309                     __end_of__calc_timer0_prescaler:	
  1278                           ;virtualwire.c: 116: }
  1279                           ;virtualwire.c: 117: }
  1280                           ;virtualwire.c: 120: return 0;
  1281                           ;	Return value of __calc_timer0_prescaler is never used
  1282                           
  1283                           
  1284                           	psect	text3
  1285  04DC                     __ptext3:	
  1286 ;; *************** function ___wmul *****************
  1287 ;; Defined at:
  1288 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  1289 ;; Parameters:    Size  Location     Type
  1290 ;;  multiplier      2    4[BANK0 ] unsigned int 
  1291 ;;  multiplicand    2    6[BANK0 ] unsigned int 
  1292 ;; Auto vars:     Size  Location     Type
  1293 ;;  product         2    8[BANK0 ] unsigned int 
  1294 ;; Return value:  Size  Location     Type
  1295 ;;                  2    4[BANK0 ] unsigned int 
  1296 ;; Registers used:
  1297 ;;		wreg, status,2, status,0
  1298 ;; Tracked objects:
  1299 ;;		On entry : 0/0
  1300 ;;		On exit  : 0/0
  1301 ;;		Unchanged: 0/0
  1302 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1303 ;;      Params:         0       4       0       0       0
  1304 ;;      Locals:         0       2       0       0       0
  1305 ;;      Temps:          0       0       0       0       0
  1306 ;;      Totals:         0       6       0       0       0
  1307 ;;Total ram usage:        6 bytes
  1308 ;; Hardware stack levels used:    1
  1309 ;; Hardware stack levels required when called:    5
  1310 ;; This function calls:
  1311 ;;		Nothing
  1312 ;; This function is called by:
  1313 ;;		__calc_timer0_prescaler
  1314 ;; This function uses a non-reentrant model
  1315 ;;
  1316                           
  1317                           
  1318                           ;psect for function ___wmul
  1319  04DC                     ___wmul:	
  1320                           
  1321                           ;incstack = 0
  1322                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  1323  04DC  1283               	bcf	3,5	;RP0=0, select bank0
  1324  04DD  1303               	bcf	3,6	;RP1=0, select bank0
  1325  04DE  01A8               	clrf	___wmul@product
  1326  04DF  01A9               	clrf	___wmul@product+1
  1327  04E0                     l1339:	
  1328  04E0  1C24               	btfss	___wmul@multiplier,0
  1329  04E1  2CE8               	goto	l395
  1330  04E2  0826               	movf	___wmul@multiplicand,w
  1331  04E3  07A8               	addwf	___wmul@product,f
  1332  04E4  1803               	skipnc
  1333  04E5  0AA9               	incf	___wmul@product+1,f
  1334  04E6  0827               	movf	___wmul@multiplicand+1,w
  1335  04E7  07A9               	addwf	___wmul@product+1,f
  1336  04E8                     l395:	
  1337  04E8  3001               	movlw	1
  1338  04E9                     u1045:	
  1339  04E9  1003               	clrc
  1340  04EA  0DA6               	rlf	___wmul@multiplicand,f
  1341  04EB  0DA7               	rlf	___wmul@multiplicand+1,f
  1342  04EC  3EFF               	addlw	-1
  1343  04ED  1D03               	skipz
  1344  04EE  2CE9               	goto	u1045
  1345  04EF  3001               	movlw	1
  1346  04F0                     u1055:	
  1347  04F0  1003               	clrc
  1348  04F1  0CA5               	rrf	___wmul@multiplier+1,f
  1349  04F2  0CA4               	rrf	___wmul@multiplier,f
  1350  04F3  3EFF               	addlw	-1
  1351  04F4  1D03               	skipz
  1352  04F5  2CF0               	goto	u1055
  1353  04F6  0824               	movf	___wmul@multiplier,w
  1354  04F7  0425               	iorwf	___wmul@multiplier+1,w
  1355  04F8  1D03               	btfss	3,2
  1356  04F9  2CE0               	goto	l1339
  1357  04FA  0829               	movf	___wmul@product+1,w
  1358  04FB  00A5               	movwf	?___wmul+1
  1359  04FC  0828               	movf	___wmul@product,w
  1360  04FD  00A4               	movwf	?___wmul
  1361  04FE  0008               	return
  1362  04FF                     __end_of___wmul:	
  1363                           
  1364                           	psect	text4
  1365  01FA                     __ptext4:	
  1366 ;; *************** function ___aldiv *****************
  1367 ;; Defined at:
  1368 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\aldiv.c"
  1369 ;; Parameters:    Size  Location     Type
  1370 ;;  divisor         4   10[BANK0 ] long 
  1371 ;;  dividend        4   14[BANK0 ] long 
  1372 ;; Auto vars:     Size  Location     Type
  1373 ;;  quotient        4   21[BANK0 ] long 
  1374 ;;  sign            1   20[BANK0 ] unsigned char 
  1375 ;;  counter         1   19[BANK0 ] unsigned char 
  1376 ;; Return value:  Size  Location     Type
  1377 ;;                  4   10[BANK0 ] long 
  1378 ;; Registers used:
  1379 ;;		wreg, status,2, status,0
  1380 ;; Tracked objects:
  1381 ;;		On entry : 0/0
  1382 ;;		On exit  : 0/0
  1383 ;;		Unchanged: 0/0
  1384 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1385 ;;      Params:         0       8       0       0       0
  1386 ;;      Locals:         0       6       0       0       0
  1387 ;;      Temps:          0       1       0       0       0
  1388 ;;      Totals:         0      15       0       0       0
  1389 ;;Total ram usage:       15 bytes
  1390 ;; Hardware stack levels used:    1
  1391 ;; Hardware stack levels required when called:    5
  1392 ;; This function calls:
  1393 ;;		Nothing
  1394 ;; This function is called by:
  1395 ;;		__calc_timer0_prescaler
  1396 ;; This function uses a non-reentrant model
  1397 ;;
  1398                           
  1399                           
  1400                           ;psect for function ___aldiv
  1401  01FA                     ___aldiv:	
  1402                           
  1403                           ;incstack = 0
  1404                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  1405  01FA  1283               	bcf	3,5	;RP0=0, select bank0
  1406  01FB  1303               	bcf	3,6	;RP1=0, select bank0
  1407  01FC  01B4               	clrf	___aldiv@sign
  1408  01FD  1FAD               	btfss	___aldiv@divisor+3,7
  1409  01FE  2A0C               	goto	l450
  1410  01FF  09AA               	comf	___aldiv@divisor,f
  1411  0200  09AB               	comf	___aldiv@divisor+1,f
  1412  0201  09AC               	comf	___aldiv@divisor+2,f
  1413  0202  09AD               	comf	___aldiv@divisor+3,f
  1414  0203  0AAA               	incf	___aldiv@divisor,f
  1415  0204  1903               	skipnz
  1416  0205  0AAB               	incf	___aldiv@divisor+1,f
  1417  0206  1903               	skipnz
  1418  0207  0AAC               	incf	___aldiv@divisor+2,f
  1419  0208  1903               	skipnz
  1420  0209  0AAD               	incf	___aldiv@divisor+3,f
  1421  020A  01B4               	clrf	___aldiv@sign
  1422  020B  0AB4               	incf	___aldiv@sign,f
  1423  020C                     l450:	
  1424  020C  1FB1               	btfss	___aldiv@dividend+3,7
  1425  020D  2A1D               	goto	l1361
  1426  020E  09AE               	comf	___aldiv@dividend,f
  1427  020F  09AF               	comf	___aldiv@dividend+1,f
  1428  0210  09B0               	comf	___aldiv@dividend+2,f
  1429  0211  09B1               	comf	___aldiv@dividend+3,f
  1430  0212  0AAE               	incf	___aldiv@dividend,f
  1431  0213  1903               	skipnz
  1432  0214  0AAF               	incf	___aldiv@dividend+1,f
  1433  0215  1903               	skipnz
  1434  0216  0AB0               	incf	___aldiv@dividend+2,f
  1435  0217  1903               	skipnz
  1436  0218  0AB1               	incf	___aldiv@dividend+3,f
  1437  0219  3001               	movlw	1
  1438  021A  00B2               	movwf	??___aldiv
  1439  021B  0832               	movf	??___aldiv,w
  1440  021C  06B4               	xorwf	___aldiv@sign,f
  1441  021D                     l1361:	
  1442  021D  3000               	movlw	0
  1443  021E  00B8               	movwf	___aldiv@quotient+3
  1444  021F  3000               	movlw	0
  1445  0220  00B7               	movwf	___aldiv@quotient+2
  1446  0221  3000               	movlw	0
  1447  0222  00B6               	movwf	___aldiv@quotient+1
  1448  0223  3000               	movlw	0
  1449  0224  00B5               	movwf	___aldiv@quotient
  1450  0225  082D               	movf	___aldiv@divisor+3,w
  1451  0226  042C               	iorwf	___aldiv@divisor+2,w
  1452  0227  042B               	iorwf	___aldiv@divisor+1,w
  1453  0228  042A               	iorwf	___aldiv@divisor,w
  1454  0229  1903               	skipnz
  1455  022A  2A72               	goto	l1383
  1456  022B  01B3               	clrf	___aldiv@counter
  1457  022C  0AB3               	incf	___aldiv@counter,f
  1458  022D                     l1369:	
  1459  022D  1BAD               	btfsc	___aldiv@divisor+3,7
  1460  022E  2A3D               	goto	l1371
  1461  022F  3001               	movlw	1
  1462  0230  00B2               	movwf	??___aldiv
  1463  0231                     u1105:	
  1464  0231  1003               	clrc
  1465  0232  0DAA               	rlf	___aldiv@divisor,f
  1466  0233  0DAB               	rlf	___aldiv@divisor+1,f
  1467  0234  0DAC               	rlf	___aldiv@divisor+2,f
  1468  0235  0DAD               	rlf	___aldiv@divisor+3,f
  1469  0236  0BB2               	decfsz	??___aldiv,f
  1470  0237  2A31               	goto	u1105
  1471  0238  3001               	movlw	1
  1472  0239  00B2               	movwf	??___aldiv
  1473  023A  0832               	movf	??___aldiv,w
  1474  023B  07B3               	addwf	___aldiv@counter,f
  1475  023C  2A2D               	goto	l1369
  1476  023D                     l1371:	
  1477  023D  3001               	movlw	1
  1478  023E  00B2               	movwf	??___aldiv
  1479  023F                     u1125:	
  1480  023F  1003               	clrc
  1481  0240  0DB5               	rlf	___aldiv@quotient,f
  1482  0241  0DB6               	rlf	___aldiv@quotient+1,f
  1483  0242  0DB7               	rlf	___aldiv@quotient+2,f
  1484  0243  0DB8               	rlf	___aldiv@quotient+3,f
  1485  0244  0BB2               	decfsz	??___aldiv,f
  1486  0245  2A3F               	goto	u1125
  1487  0246  082D               	movf	___aldiv@divisor+3,w
  1488  0247  0231               	subwf	___aldiv@dividend+3,w
  1489  0248  1D03               	skipz
  1490  0249  2A54               	goto	u1135
  1491  024A  082C               	movf	___aldiv@divisor+2,w
  1492  024B  0230               	subwf	___aldiv@dividend+2,w
  1493  024C  1D03               	skipz
  1494  024D  2A54               	goto	u1135
  1495  024E  082B               	movf	___aldiv@divisor+1,w
  1496  024F  022F               	subwf	___aldiv@dividend+1,w
  1497  0250  1D03               	skipz
  1498  0251  2A54               	goto	u1135
  1499  0252  082A               	movf	___aldiv@divisor,w
  1500  0253  022E               	subwf	___aldiv@dividend,w
  1501  0254                     u1135:	
  1502  0254  1C03               	skipc
  1503  0255  2A65               	goto	l1379
  1504  0256  082A               	movf	___aldiv@divisor,w
  1505  0257  02AE               	subwf	___aldiv@dividend,f
  1506  0258  082B               	movf	___aldiv@divisor+1,w
  1507  0259  1C03               	skipc
  1508  025A  0F2B               	incfsz	___aldiv@divisor+1,w
  1509  025B  02AF               	subwf	___aldiv@dividend+1,f
  1510  025C  082C               	movf	___aldiv@divisor+2,w
  1511  025D  1C03               	skipc
  1512  025E  0F2C               	incfsz	___aldiv@divisor+2,w
  1513  025F  02B0               	subwf	___aldiv@dividend+2,f
  1514  0260  082D               	movf	___aldiv@divisor+3,w
  1515  0261  1C03               	skipc
  1516  0262  0F2D               	incfsz	___aldiv@divisor+3,w
  1517  0263  02B1               	subwf	___aldiv@dividend+3,f
  1518  0264  1435               	bsf	___aldiv@quotient,0
  1519  0265                     l1379:	
  1520  0265  3001               	movlw	1
  1521  0266                     u1145:	
  1522  0266  1003               	clrc
  1523  0267  0CAD               	rrf	___aldiv@divisor+3,f
  1524  0268  0CAC               	rrf	___aldiv@divisor+2,f
  1525  0269  0CAB               	rrf	___aldiv@divisor+1,f
  1526  026A  0CAA               	rrf	___aldiv@divisor,f
  1527  026B  3EFF               	addlw	-1
  1528  026C  1D03               	skipz
  1529  026D  2A66               	goto	u1145
  1530  026E  3001               	movlw	1
  1531  026F  02B3               	subwf	___aldiv@counter,f
  1532  0270  1D03               	btfss	3,2
  1533  0271  2A3D               	goto	l1371
  1534  0272                     l1383:	
  1535  0272  0834               	movf	___aldiv@sign,w
  1536  0273  1903               	btfsc	3,2
  1537  0274  2A80               	goto	l1387
  1538  0275  09B5               	comf	___aldiv@quotient,f
  1539  0276  09B6               	comf	___aldiv@quotient+1,f
  1540  0277  09B7               	comf	___aldiv@quotient+2,f
  1541  0278  09B8               	comf	___aldiv@quotient+3,f
  1542  0279  0AB5               	incf	___aldiv@quotient,f
  1543  027A  1903               	skipnz
  1544  027B  0AB6               	incf	___aldiv@quotient+1,f
  1545  027C  1903               	skipnz
  1546  027D  0AB7               	incf	___aldiv@quotient+2,f
  1547  027E  1903               	skipnz
  1548  027F  0AB8               	incf	___aldiv@quotient+3,f
  1549  0280                     l1387:	
  1550  0280  0838               	movf	___aldiv@quotient+3,w
  1551  0281  00AD               	movwf	?___aldiv+3
  1552  0282  0837               	movf	___aldiv@quotient+2,w
  1553  0283  00AC               	movwf	?___aldiv+2
  1554  0284  0836               	movf	___aldiv@quotient+1,w
  1555  0285  00AB               	movwf	?___aldiv+1
  1556  0286  0835               	movf	___aldiv@quotient,w
  1557  0287  00AA               	movwf	?___aldiv
  1558  0288  0008               	return
  1559  0289                     __end_of___aldiv:	
  1560                           
  1561                           	psect	text5
  1562  059A                     __ptext5:	
  1563 ;; *************** function _vw_rx_start *****************
  1564 ;; Defined at:
  1565 ;;		line 382 in file "virtualwire.c"
  1566 ;; Parameters:    Size  Location     Type
  1567 ;;		None
  1568 ;; Auto vars:     Size  Location     Type
  1569 ;;		None
  1570 ;; Return value:  Size  Location     Type
  1571 ;;                  1    wreg      void 
  1572 ;; Registers used:
  1573 ;;		None
  1574 ;; Tracked objects:
  1575 ;;		On entry : 0/0
  1576 ;;		On exit  : 0/0
  1577 ;;		Unchanged: 0/0
  1578 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1579 ;;      Params:         0       0       0       0       0
  1580 ;;      Locals:         0       0       0       0       0
  1581 ;;      Temps:          0       0       0       0       0
  1582 ;;      Totals:         0       0       0       0       0
  1583 ;;Total ram usage:        0 bytes
  1584 ;; Hardware stack levels used:    1
  1585 ;; Hardware stack levels required when called:    5
  1586 ;; This function calls:
  1587 ;;		Nothing
  1588 ;; This function is called by:
  1589 ;;		_main
  1590 ;; This function uses a non-reentrant model
  1591 ;;
  1592                           
  1593                           
  1594                           ;psect for function _vw_rx_start
  1595  059A                     _vw_rx_start:	
  1596                           
  1597                           ;virtualwire.c: 384: vw_rx_enabled = 1;
  1598                           
  1599                           ;incstack = 0
  1600                           ; Regs used in _vw_rx_start: []
  1601  059A  1283               	bcf	3,5	;RP0=0, select bank0
  1602  059B  1303               	bcf	3,6	;RP1=0, select bank0
  1603  059C  01DA               	clrf	_vw_rx_enabled
  1604  059D  0ADA               	incf	_vw_rx_enabled,f
  1605                           
  1606                           ;virtualwire.c: 385: vw_rx_enabled_last = 1;
  1607  059E  01DB               	clrf	_vw_rx_enabled_last
  1608  059F  0ADB               	incf	_vw_rx_enabled_last,f
  1609  05A0  0008               	return
  1610  05A1                     __end_of_vw_rx_start:	
  1611                           
  1612                           	psect	text6
  1613  046F                     __ptext6:	
  1614 ;; *************** function _vw_recv *****************
  1615 ;; Defined at:
  1616 ;;		line 353 in file "virtualwire.c"
  1617 ;; Parameters:    Size  Location     Type
  1618 ;;  buf             1    wreg     PTR unsigned char 
  1619 ;;		 -> text(8), 
  1620 ;;  len             1   26[BANK0 ] PTR unsigned char 
  1621 ;;		 -> main@len(1), 
  1622 ;; Auto vars:     Size  Location     Type
  1623 ;;  buf             1   30[BANK0 ] PTR unsigned char 
  1624 ;;		 -> text(8), 
  1625 ;;  rxlen           1   31[BANK0 ] unsigned char 
  1626 ;; Return value:  Size  Location     Type
  1627 ;;                  1    wreg      unsigned char 
  1628 ;; Registers used:
  1629 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1630 ;; Tracked objects:
  1631 ;;		On entry : 0/0
  1632 ;;		On exit  : 0/0
  1633 ;;		Unchanged: 0/0
  1634 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1635 ;;      Params:         0       1       0       0       0
  1636 ;;      Locals:         0       2       0       0       0
  1637 ;;      Temps:          0       3       0       0       0
  1638 ;;      Totals:         0       6       0       0       0
  1639 ;;Total ram usage:        6 bytes
  1640 ;; Hardware stack levels used:    1
  1641 ;; Hardware stack levels required when called:    7
  1642 ;; This function calls:
  1643 ;;		_memcpy
  1644 ;;		_vw_crc
  1645 ;; This function is called by:
  1646 ;;		_main
  1647 ;; This function uses a non-reentrant model
  1648 ;;
  1649                           
  1650                           
  1651                           ;psect for function _vw_recv
  1652  046F                     _vw_recv:	
  1653                           
  1654                           ;incstack = 0
  1655                           ; Regs used in _vw_recv: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1656                           ;vw_recv@buf stored from wreg
  1657  046F  1283               	bcf	3,5	;RP0=0, select bank0
  1658  0470  1303               	bcf	3,6	;RP1=0, select bank0
  1659  0471  00BE               	movwf	vw_recv@buf
  1660                           
  1661                           ;virtualwire.c: 355: uint8_t rxlen;
  1662                           ;virtualwire.c: 358: if (!vw_rx_done)
  1663  0472  0859               	movf	_vw_rx_done,w	;volatile
  1664  0473  1D03               	btfss	3,2
  1665  0474  2C77               	goto	l1615
  1666                           
  1667                           ;virtualwire.c: 359: return 0;
  1668  0475  3000               	movlw	0
  1669  0476  0008               	return
  1670  0477                     l1615:	
  1671                           
  1672                           ;virtualwire.c: 363: rxlen = vw_rx_len - 3;
  1673  0477  087D               	movf	_vw_rx_len,w
  1674  0478  3EFD               	addlw	253
  1675  0479  00BB               	movwf	??_vw_recv
  1676  047A  083B               	movf	??_vw_recv,w
  1677  047B  00BF               	movwf	vw_recv@rxlen
  1678                           
  1679                           ;virtualwire.c: 366: if (*len > rxlen)
  1680  047C  083A               	movf	vw_recv@len,w
  1681  047D  0084               	movwf	4
  1682  047E  1383               	bcf	3,7	;select IRP bank0
  1683  047F  0800               	movf	0,w
  1684  0480  023F               	subwf	vw_recv@rxlen,w
  1685  0481  1803               	skipnc
  1686  0482  2C89               	goto	l1621
  1687                           
  1688                           ;virtualwire.c: 367: *len = rxlen;
  1689  0483  083F               	movf	vw_recv@rxlen,w
  1690  0484  00BB               	movwf	??_vw_recv
  1691  0485  083A               	movf	vw_recv@len,w
  1692  0486  0084               	movwf	4
  1693  0487  083B               	movf	??_vw_recv,w
  1694  0488  0080               	movwf	0
  1695  0489                     l1621:	
  1696                           
  1697                           ;virtualwire.c: 368: memcpy(buf, vw_tx_buf + 1, *len);
  1698  0489  30C0               	movlw	(low ((_vw_tx_buf| 0+1)))& (0+255)
  1699  048A  00BB               	movwf	??_vw_recv
  1700  048B  083B               	movf	??_vw_recv,w
  1701  048C  00A4               	movwf	memcpy@src
  1702  048D  083A               	movf	vw_recv@len,w
  1703  048E  0084               	movwf	4
  1704  048F  0800               	movf	0,w
  1705  0490  00BC               	movwf	??_vw_recv+1
  1706  0491  01BD               	clrf	??_vw_recv+2
  1707  0492  083C               	movf	??_vw_recv+1,w
  1708  0493  00A5               	movwf	memcpy@n
  1709  0494  083D               	movf	??_vw_recv+2,w
  1710  0495  00A6               	movwf	memcpy@n+1
  1711  0496  083E               	movf	vw_recv@buf,w
  1712  0497  118A  251E  118A   	fcall	_memcpy
  1713                           
  1714                           ;virtualwire.c: 370: vw_rx_done = 0;
  1715  049A  1283               	bcf	3,5	;RP0=0, select bank0
  1716  049B  1303               	bcf	3,6	;RP1=0, select bank0
  1717  049C  01D9               	clrf	_vw_rx_done	;volatile
  1718                           
  1719                           ;virtualwire.c: 373: return (vw_crc(vw_tx_buf, vw_rx_len) == 0xf0b8);
  1720  049D  087D               	movf	_vw_rx_len,w
  1721  049E  00BB               	movwf	??_vw_recv
  1722  049F  083B               	movf	??_vw_recv,w
  1723  04A0  00B4               	movwf	vw_crc@count
  1724  04A1  30BF               	movlw	(low (_vw_tx_buf| 0))& (0+255)
  1725  04A2  118A  24B2  118A   	fcall	_vw_crc
  1726  04A5  30B8               	movlw	184
  1727  04A6  1283               	bcf	3,5	;RP0=0, select bank0
  1728  04A7  1303               	bcf	3,6	;RP1=0, select bank0
  1729  04A8  0634               	xorwf	?_vw_crc,w
  1730  04A9  30F0               	movlw	240
  1731  04AA  1903               	skipnz
  1732  04AB  0635               	xorwf	?_vw_crc+1,w
  1733  04AC  1D03               	btfss	3,2
  1734  04AD  2CB0               	goto	u1660
  1735  04AE  3001               	movlw	1
  1736  04AF  0008               	return
  1737  04B0                     u1660:	
  1738  04B0  3000               	movlw	0
  1739  04B1  0008               	return
  1740  04B2                     __end_of_vw_recv:	
  1741                           
  1742                           	psect	text7
  1743  04B2                     __ptext7:	
  1744 ;; *************** function _vw_crc *****************
  1745 ;; Defined at:
  1746 ;;		line 234 in file "virtualwire.c"
  1747 ;; Parameters:    Size  Location     Type
  1748 ;;  ptr             1    wreg     PTR unsigned char 
  1749 ;;		 -> vw_tx_buf(16), 
  1750 ;;  count           1   20[BANK0 ] unsigned char 
  1751 ;; Auto vars:     Size  Location     Type
  1752 ;;  ptr             1   23[BANK0 ] PTR unsigned char 
  1753 ;;		 -> vw_tx_buf(16), 
  1754 ;;  crc             2   24[BANK0 ] unsigned int 
  1755 ;; Return value:  Size  Location     Type
  1756 ;;                  2   20[BANK0 ] unsigned int 
  1757 ;; Registers used:
  1758 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1759 ;; Tracked objects:
  1760 ;;		On entry : 0/0
  1761 ;;		On exit  : 0/0
  1762 ;;		Unchanged: 0/0
  1763 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1764 ;;      Params:         0       2       0       0       0
  1765 ;;      Locals:         0       3       0       0       0
  1766 ;;      Temps:          0       1       0       0       0
  1767 ;;      Totals:         0       6       0       0       0
  1768 ;;Total ram usage:        6 bytes
  1769 ;; Hardware stack levels used:    1
  1770 ;; Hardware stack levels required when called:    6
  1771 ;; This function calls:
  1772 ;;		__crc_ccitt_update
  1773 ;; This function is called by:
  1774 ;;		_vw_recv
  1775 ;; This function uses a non-reentrant model
  1776 ;;
  1777                           
  1778                           
  1779                           ;psect for function _vw_crc
  1780  04B2                     _vw_crc:	
  1781                           
  1782                           ;incstack = 0
  1783                           ; Regs used in _vw_crc: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1784                           ;vw_crc@ptr stored from wreg
  1785  04B2  1283               	bcf	3,5	;RP0=0, select bank0
  1786  04B3  1303               	bcf	3,6	;RP1=0, select bank0
  1787  04B4  00B7               	movwf	vw_crc@ptr
  1788                           
  1789                           ;virtualwire.c: 236: uint16_t crc = 0xffff;
  1790  04B5  30FF               	movlw	255
  1791  04B6  00B8               	movwf	vw_crc@crc
  1792  04B7  30FF               	movlw	255
  1793  04B8  00B9               	movwf	vw_crc@crc+1
  1794  04B9                     l1435:	
  1795                           ;virtualwire.c: 238: while (count-- > 0)
  1796                           
  1797  04B9  3001               	movlw	1
  1798  04BA  02B4               	subwf	vw_crc@count,f
  1799  04BB  0A34               	incf	vw_crc@count,w
  1800  04BC  1903               	btfsc	3,2
  1801  04BD  2CD7               	goto	l1437
  1802                           
  1803                           ;virtualwire.c: 239: crc = _crc_ccitt_update(crc, *ptr++);
  1804  04BE  0839               	movf	vw_crc@crc+1,w
  1805  04BF  00A5               	movwf	__crc_ccitt_update@crc+1
  1806  04C0  0838               	movf	vw_crc@crc,w
  1807  04C1  00A4               	movwf	__crc_ccitt_update@crc
  1808  04C2  0837               	movf	vw_crc@ptr,w
  1809  04C3  0084               	movwf	4
  1810  04C4  1383               	bcf	3,7	;select IRP bank0
  1811  04C5  0800               	movf	0,w
  1812  04C6  00B6               	movwf	??_vw_crc
  1813  04C7  0836               	movf	??_vw_crc,w
  1814  04C8  00A6               	movwf	__crc_ccitt_update@data
  1815  04C9  118A  23E2  118A   	fcall	__crc_ccitt_update
  1816  04CC  1283               	bcf	3,5	;RP0=0, select bank0
  1817  04CD  1303               	bcf	3,6	;RP1=0, select bank0
  1818  04CE  0825               	movf	?__crc_ccitt_update+1,w
  1819  04CF  00B9               	movwf	vw_crc@crc+1
  1820  04D0  0824               	movf	?__crc_ccitt_update,w
  1821  04D1  00B8               	movwf	vw_crc@crc
  1822  04D2  3001               	movlw	1
  1823  04D3  00B6               	movwf	??_vw_crc
  1824  04D4  0836               	movf	??_vw_crc,w
  1825  04D5  07B7               	addwf	vw_crc@ptr,f
  1826  04D6  2CB9               	goto	l1435
  1827  04D7                     l1437:	
  1828                           
  1829                           ;virtualwire.c: 240: return crc;
  1830  04D7  0839               	movf	vw_crc@crc+1,w
  1831  04D8  00B5               	movwf	?_vw_crc+1
  1832  04D9  0838               	movf	vw_crc@crc,w
  1833  04DA  00B4               	movwf	?_vw_crc
  1834  04DB  0008               	return
  1835  04DC                     __end_of_vw_crc:	
  1836                           
  1837                           	psect	text8
  1838  03E2                     __ptext8:	
  1839 ;; *************** function __crc_ccitt_update *****************
  1840 ;; Defined at:
  1841 ;;		line 51 in file "../_libs/crc16.h"
  1842 ;; Parameters:    Size  Location     Type
  1843 ;;  crc             2    4[BANK0 ] unsigned int 
  1844 ;;  data            1    6[BANK0 ] unsigned char 
  1845 ;; Auto vars:     Size  Location     Type
  1846 ;;		None
  1847 ;; Return value:  Size  Location     Type
  1848 ;;                  2    4[BANK0 ] unsigned int 
  1849 ;; Registers used:
  1850 ;;		wreg, status,2, status,0, btemp+1
  1851 ;; Tracked objects:
  1852 ;;		On entry : 0/0
  1853 ;;		On exit  : 0/0
  1854 ;;		Unchanged: 0/0
  1855 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1856 ;;      Params:         0       3       0       0       0
  1857 ;;      Locals:         0       0       0       0       0
  1858 ;;      Temps:          0      13       0       0       0
  1859 ;;      Totals:         0      16       0       0       0
  1860 ;;Total ram usage:       16 bytes
  1861 ;; Hardware stack levels used:    1
  1862 ;; Hardware stack levels required when called:    5
  1863 ;; This function calls:
  1864 ;;		Nothing
  1865 ;; This function is called by:
  1866 ;;		_vw_crc
  1867 ;;		_vw_send
  1868 ;; This function uses a non-reentrant model
  1869 ;;
  1870                           
  1871                           
  1872                           ;psect for function __crc_ccitt_update
  1873  03E2                     __crc_ccitt_update:	
  1874                           
  1875                           ;crc16.h: 53: data ^= ((crc)&0xff);
  1876                           
  1877                           ;incstack = 0
  1878                           ; Regs used in __crc_ccitt_update: [wreg+status,2+status,0+btemp+1]
  1879  03E2  1283               	bcf	3,5	;RP0=0, select bank0
  1880  03E3  1303               	bcf	3,6	;RP1=0, select bank0
  1881  03E4  0824               	movf	__crc_ccitt_update@crc,w
  1882  03E5  00A7               	movwf	??__crc_ccitt_update
  1883  03E6  0827               	movf	??__crc_ccitt_update,w
  1884  03E7  06A6               	xorwf	__crc_ccitt_update@data,f
  1885                           
  1886                           ;crc16.h: 54: data ^= data << 4;
  1887  03E8  0826               	movf	__crc_ccitt_update@data,w
  1888  03E9  00A7               	movwf	??__crc_ccitt_update
  1889  03EA  3003               	movlw	3
  1890  03EB                     u985:	
  1891  03EB  1003               	clrc
  1892  03EC  0DA7               	rlf	??__crc_ccitt_update,f
  1893  03ED  3EFF               	addlw	-1
  1894  03EE  1D03               	skipz
  1895  03EF  2BEB               	goto	u985
  1896  03F0  1003               	clrc
  1897  03F1  0D27               	rlf	??__crc_ccitt_update,w
  1898  03F2  00A8               	movwf	??__crc_ccitt_update+1
  1899  03F3  0828               	movf	??__crc_ccitt_update+1,w
  1900  03F4  06A6               	xorwf	__crc_ccitt_update@data,f
  1901                           
  1902                           ;crc16.h: 56: return ((((uint16_t) data << 8) | ((crc)>>8)) ^ (uint8_t) (data >> 4)
  1903                           ;crc16.h: 57: ^ ((uint16_t) data << 3));
  1904  03F5  0826               	movf	__crc_ccitt_update@data,w
  1905  03F6  00A7               	movwf	??__crc_ccitt_update
  1906  03F7  01A8               	clrf	??__crc_ccitt_update+1
  1907  03F8  1003               	clrc
  1908  03F9  0DA7               	rlf	??__crc_ccitt_update,f
  1909  03FA  0DA8               	rlf	??__crc_ccitt_update+1,f
  1910  03FB  1003               	clrc
  1911  03FC  0DA7               	rlf	??__crc_ccitt_update,f
  1912  03FD  0DA8               	rlf	??__crc_ccitt_update+1,f
  1913  03FE  1003               	clrc
  1914  03FF  0DA7               	rlf	??__crc_ccitt_update,f
  1915  0400  0DA8               	rlf	??__crc_ccitt_update+1,f
  1916  0401  0826               	movf	__crc_ccitt_update@data,w
  1917  0402  00A9               	movwf	??__crc_ccitt_update+2
  1918  0403  3004               	movlw	4
  1919  0404                     u995:	
  1920  0404  1003               	clrc
  1921  0405  0CA9               	rrf	??__crc_ccitt_update+2,f
  1922  0406  3EFF               	addlw	-1
  1923  0407  1D03               	skipz
  1924  0408  2C04               	goto	u995
  1925  0409  0829               	movf	??__crc_ccitt_update+2,w
  1926  040A  00AA               	movwf	??__crc_ccitt_update+3
  1927  040B  01AB               	clrf	??__crc_ccitt_update+4
  1928  040C  0825               	movf	__crc_ccitt_update@crc+1,w
  1929  040D  00AD               	movwf	??__crc_ccitt_update+6
  1930  040E  0824               	movf	__crc_ccitt_update@crc,w
  1931  040F  00AC               	movwf	??__crc_ccitt_update+5
  1932  0410  082D               	movf	??__crc_ccitt_update+6,w
  1933  0411  00AC               	movwf	??__crc_ccitt_update+5
  1934  0412  01AD               	clrf	??__crc_ccitt_update+6
  1935  0413  0826               	movf	__crc_ccitt_update@data,w
  1936  0414  00AE               	movwf	??__crc_ccitt_update+7
  1937  0415  01AF               	clrf	??__crc_ccitt_update+8
  1938  0416  082E               	movf	??__crc_ccitt_update+7,w
  1939  0417  00AF               	movwf	??__crc_ccitt_update+8
  1940  0418  01AE               	clrf	??__crc_ccitt_update+7
  1941  0419  082C               	movf	??__crc_ccitt_update+5,w
  1942  041A  042E               	iorwf	??__crc_ccitt_update+7,w
  1943  041B  00B0               	movwf	??__crc_ccitt_update+9
  1944  041C  082D               	movf	??__crc_ccitt_update+6,w
  1945  041D  042F               	iorwf	??__crc_ccitt_update+8,w
  1946  041E  00B1               	movwf	??__crc_ccitt_update+10
  1947  041F  082A               	movf	??__crc_ccitt_update+3,w
  1948  0420  0630               	xorwf	??__crc_ccitt_update+9,w
  1949  0421  00B2               	movwf	??__crc_ccitt_update+11
  1950  0422  082B               	movf	??__crc_ccitt_update+4,w
  1951  0423  0631               	xorwf	??__crc_ccitt_update+10,w
  1952  0424  00B3               	movwf	??__crc_ccitt_update+12
  1953  0425  0827               	movf	??__crc_ccitt_update,w
  1954  0426  0632               	xorwf	??__crc_ccitt_update+11,w
  1955  0427  00A4               	movwf	?__crc_ccitt_update
  1956  0428  0828               	movf	??__crc_ccitt_update+1,w
  1957  0429  0633               	xorwf	??__crc_ccitt_update+12,w
  1958  042A  00A5               	movwf	?__crc_ccitt_update+1
  1959  042B  0008               	return
  1960  042C                     __end_of__crc_ccitt_update:	
  1961                           
  1962                           	psect	text9
  1963  051E                     __ptext9:	
  1964 ;; *************** function _memcpy *****************
  1965 ;; Defined at:
  1966 ;;		line 6 in file "../_libs/string.h"
  1967 ;; Parameters:    Size  Location     Type
  1968 ;;  dest            1    wreg     PTR unsigned char 
  1969 ;;		 -> text(8), 
  1970 ;;  src             1    4[BANK0 ] PTR unsigned char 
  1971 ;;		 -> vw_tx_buf(16), 
  1972 ;;  n               2    5[BANK0 ] unsigned int 
  1973 ;; Auto vars:     Size  Location     Type
  1974 ;;  dest            1   10[BANK0 ] PTR unsigned char 
  1975 ;;		 -> text(8), 
  1976 ;; Return value:  Size  Location     Type
  1977 ;;                  1    wreg      PTR unsigned char 
  1978 ;; Registers used:
  1979 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1980 ;; Tracked objects:
  1981 ;;		On entry : 0/0
  1982 ;;		On exit  : 0/0
  1983 ;;		Unchanged: 0/0
  1984 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1985 ;;      Params:         0       3       0       0       0
  1986 ;;      Locals:         0       1       0       0       0
  1987 ;;      Temps:          0       3       0       0       0
  1988 ;;      Totals:         0       7       0       0       0
  1989 ;;Total ram usage:        7 bytes
  1990 ;; Hardware stack levels used:    1
  1991 ;; Hardware stack levels required when called:    5
  1992 ;; This function calls:
  1993 ;;		Nothing
  1994 ;; This function is called by:
  1995 ;;		_vw_recv
  1996 ;; This function uses a non-reentrant model
  1997 ;;
  1998                           
  1999                           
  2000                           ;psect for function _memcpy
  2001  051E                     _memcpy:	
  2002                           
  2003                           ;incstack = 0
  2004                           ; Regs used in _memcpy: [wreg-fsr0h+status,2+status,0]
  2005                           ;memcpy@dest stored from wreg
  2006  051E  1283               	bcf	3,5	;RP0=0, select bank0
  2007  051F  1303               	bcf	3,6	;RP1=0, select bank0
  2008  0520  00AA               	movwf	memcpy@dest
  2009  0521                     l1399:	
  2010                           ;string.h: 16: while (n--)
  2011                           
  2012  0521  3001               	movlw	1
  2013  0522  02A5               	subwf	memcpy@n,f
  2014  0523  3000               	movlw	0
  2015  0524  1C03               	skipc
  2016  0525  03A6               	decf	memcpy@n+1,f
  2017  0526  02A6               	subwf	memcpy@n+1,f
  2018  0527  0A25               	incf	memcpy@n,w
  2019  0528  1903               	btfsc	3,2
  2020  0529  0A26               	incf	memcpy@n+1,w
  2021  052A  1903               	btfsc	3,2
  2022  052B  0008               	return
  2023                           
  2024                           ;string.h: 17: dest[n] = src[n];
  2025  052C  0825               	movf	memcpy@n,w
  2026  052D  0724               	addwf	memcpy@src,w
  2027  052E  00A7               	movwf	??_memcpy
  2028  052F  0827               	movf	??_memcpy,w
  2029  0530  0084               	movwf	4
  2030  0531  1383               	bcf	3,7	;select IRP bank0
  2031  0532  0800               	movf	0,w
  2032  0533  00A8               	movwf	??_memcpy+1
  2033  0534  0825               	movf	memcpy@n,w
  2034  0535  072A               	addwf	memcpy@dest,w
  2035  0536  00A9               	movwf	??_memcpy+2
  2036  0537  0829               	movf	??_memcpy+2,w
  2037  0538  0084               	movwf	4
  2038  0539  0828               	movf	??_memcpy+1,w
  2039  053A  0080               	movwf	0
  2040  053B  2D21               	goto	l1399
  2041  053C                     __end_of_memcpy:	
  2042                           ;string.h: 20: return dest;
  2043                           ;	Return value of _memcpy is never used
  2044                           
  2045                           
  2046                           	psect	text10
  2047  0589                     __ptext10:	
  2048 ;; *************** function _vw_have_message *****************
  2049 ;; Defined at:
  2050 ;;		line 348 in file "virtualwire.c"
  2051 ;; Parameters:    Size  Location     Type
  2052 ;;		None
  2053 ;; Auto vars:     Size  Location     Type
  2054 ;;		None
  2055 ;; Return value:  Size  Location     Type
  2056 ;;                  1    wreg      unsigned char 
  2057 ;; Registers used:
  2058 ;;		wreg, status,2, status,0
  2059 ;; Tracked objects:
  2060 ;;		On entry : 0/0
  2061 ;;		On exit  : 0/0
  2062 ;;		Unchanged: 0/0
  2063 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2064 ;;      Params:         0       0       0       0       0
  2065 ;;      Locals:         0       0       0       0       0
  2066 ;;      Temps:          0       0       0       0       0
  2067 ;;      Totals:         0       0       0       0       0
  2068 ;;Total ram usage:        0 bytes
  2069 ;; Hardware stack levels used:    1
  2070 ;; Hardware stack levels required when called:    5
  2071 ;; This function calls:
  2072 ;;		Nothing
  2073 ;; This function is called by:
  2074 ;;		_main
  2075 ;; This function uses a non-reentrant model
  2076 ;;
  2077                           
  2078                           
  2079                           ;psect for function _vw_have_message
  2080  0589                     _vw_have_message:	
  2081                           
  2082                           ;virtualwire.c: 350: return (vw_rx_done) ? 1 : 0;
  2083                           
  2084                           ;incstack = 0
  2085                           ; Regs used in _vw_have_message: [wreg+status,2+status,0]
  2086  0589  1283               	bcf	3,5	;RP0=0, select bank0
  2087  058A  1303               	bcf	3,6	;RP1=0, select bank0
  2088  058B  0859               	movf	_vw_rx_done,w	;volatile
  2089  058C  1903               	btfsc	3,2
  2090  058D  2D90               	goto	u1620
  2091  058E  3001               	movlw	1
  2092  058F  0008               	return
  2093  0590                     u1620:	
  2094  0590  3000               	movlw	0
  2095  0591  0008               	return
  2096  0592                     __end_of_vw_have_message:	
  2097                           
  2098                           	psect	text11
  2099  0309                     __ptext11:	
  2100 ;; *************** function _sprintf *****************
  2101 ;; Defined at:
  2102 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  2103 ;; Parameters:    Size  Location     Type
  2104 ;;  sp              1    wreg     PTR unsigned char 
  2105 ;;		 -> main@buffer(30), 
  2106 ;;  f               1    4[BANK0 ] PTR const unsigned char 
  2107 ;;		 -> STR_4(21), 
  2108 ;; Auto vars:     Size  Location     Type
  2109 ;;  sp              1   12[BANK0 ] PTR unsigned char 
  2110 ;;		 -> main@buffer(30), 
  2111 ;;  tmpval          4    0        struct .
  2112 ;;  cp              2   10[BANK0 ] PTR const unsigned char 
  2113 ;;		 -> STR_5(7), text(8), 
  2114 ;;  len             2    0        unsigned int 
  2115 ;;  val             2    0        unsigned int 
  2116 ;;  c               1    9[BANK0 ] char 
  2117 ;;  ap              1    8[BANK0 ] PTR void [1]
  2118 ;;		 -> ?_sprintf(2), 
  2119 ;;  flag            1    7[BANK0 ] unsigned char 
  2120 ;;  prec            1    0        char 
  2121 ;; Return value:  Size  Location     Type
  2122 ;;                  2    4[BANK0 ] int 
  2123 ;; Registers used:
  2124 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath
  2125 ;; Tracked objects:
  2126 ;;		On entry : 0/0
  2127 ;;		On exit  : 0/0
  2128 ;;		Unchanged: 0/0
  2129 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2130 ;;      Params:         0       2       0       0       0
  2131 ;;      Locals:         0       6       0       0       0
  2132 ;;      Temps:          0       1       0       0       0
  2133 ;;      Totals:         0       9       0       0       0
  2134 ;;Total ram usage:        9 bytes
  2135 ;; Hardware stack levels used:    1
  2136 ;; Hardware stack levels required when called:    5
  2137 ;; This function calls:
  2138 ;;		Nothing
  2139 ;; This function is called by:
  2140 ;;		_main
  2141 ;; This function uses a non-reentrant model
  2142 ;;
  2143                           
  2144                           
  2145                           ;psect for function _sprintf
  2146  0309                     _sprintf:	
  2147                           
  2148                           ;incstack = 0
  2149                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath]
  2150                           ;sprintf@sp stored from wreg
  2151  0309  1283               	bcf	3,5	;RP0=0, select bank0
  2152  030A  1303               	bcf	3,6	;RP1=0, select bank0
  2153  030B  00AC               	movwf	sprintf@sp
  2154                           
  2155                           ;doprnt.c: 494: va_list ap;
  2156                           ;doprnt.c: 499: signed char c;
  2157                           ;doprnt.c: 506: signed char prec;
  2158                           ;doprnt.c: 508: unsigned char flag;
  2159                           ;doprnt.c: 523: union {
  2160                           ;doprnt.c: 524: unsigned long vd;
  2161                           ;doprnt.c: 525: double integ;
  2162                           ;doprnt.c: 526: } tmpval;
  2163                           ;doprnt.c: 528: unsigned int val;
  2164                           ;doprnt.c: 529: unsigned len;
  2165                           ;doprnt.c: 530: const char * cp;
  2166                           ;doprnt.c: 533: *ap = __va_start();
  2167  030C  3025               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
  2168  030D  00A6               	movwf	??_sprintf
  2169  030E  0826               	movf	??_sprintf,w
  2170  030F  00A8               	movwf	sprintf@ap
  2171  0310                     l1659:	
  2172                           ;doprnt.c: 1422: {
  2173                           
  2174                           ;doprnt.c: 536: while(c = *f++) {
  2175                           
  2176  0310  3001               	movlw	1
  2177  0311  07A4               	addwf	sprintf@f,f
  2178  0312  30FF               	movlw	-1
  2179  0313  0724               	addwf	sprintf@f,w
  2180  0314  0084               	movwf	4
  2181  0315  118A  2383  118A   	fcall	stringdir
  2182  0318  00A6               	movwf	??_sprintf
  2183  0319  0826               	movf	??_sprintf,w
  2184  031A  00A9               	movwf	sprintf@c
  2185  031B  0829               	movf	sprintf@c,w
  2186  031C  1903               	btfsc	3,2
  2187  031D  2B74               	goto	l1661
  2188                           
  2189                           ;doprnt.c: 538: if(c != '%')
  2190  031E  3025               	movlw	37
  2191  031F  0629               	xorwf	sprintf@c,w
  2192  0320  1903               	btfsc	3,2
  2193  0321  2B2E               	goto	l1637
  2194                           
  2195                           ;doprnt.c: 540: {
  2196                           ;doprnt.c: 541: ((*sp++ = (c)));
  2197  0322  0829               	movf	sprintf@c,w
  2198  0323  00A6               	movwf	??_sprintf
  2199  0324  082C               	movf	sprintf@sp,w
  2200  0325  0084               	movwf	4
  2201  0326  0826               	movf	??_sprintf,w
  2202  0327  1383               	bcf	3,7	;select IRP bank0
  2203  0328  0080               	movwf	0
  2204  0329  3001               	movlw	1
  2205  032A  00A6               	movwf	??_sprintf
  2206  032B  0826               	movf	??_sprintf,w
  2207  032C  07AC               	addwf	sprintf@sp,f
  2208                           
  2209                           ;doprnt.c: 542: continue;
  2210  032D  2B10               	goto	l1659
  2211  032E                     l1637:	
  2212                           
  2213                           ;doprnt.c: 543: }
  2214                           ;doprnt.c: 548: flag = 0;
  2215  032E  01A7               	clrf	sprintf@flag
  2216                           
  2217                           ;doprnt.c: 635: switch(c = *f++) {
  2218  032F  2B63               	goto	l1657
  2219  0330                     l1639:	
  2220                           ;doprnt.c: 728: case 's':
  2221                           
  2222                           ;doprnt.c: 638: goto alldone;
  2223                           
  2224                           ;doprnt.c: 637: case 0:
  2225                           
  2226                           
  2227                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  2228  0330  0828               	movf	sprintf@ap,w
  2229  0331  0084               	movwf	4
  2230  0332  1383               	bcf	3,7	;select IRP bank0
  2231  0333  0800               	movf	0,w
  2232  0334  00AA               	movwf	sprintf@cp
  2233  0335  3000               	movlw	0
  2234  0336  00AB               	movwf	sprintf@cp+1
  2235  0337  3001               	movlw	1
  2236  0338  00A6               	movwf	??_sprintf
  2237  0339  0826               	movf	??_sprintf,w
  2238  033A  07A8               	addwf	sprintf@ap,f
  2239                           
  2240                           ;doprnt.c: 740: if(!cp)
  2241  033B  082A               	movf	sprintf@cp,w
  2242  033C  042B               	iorwf	sprintf@cp+1,w
  2243  033D  1D03               	btfss	3,2
  2244  033E  2B43               	goto	l1653
  2245                           
  2246                           ;doprnt.c: 741: cp = "(null)";
  2247  033F  3053               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
  2248  0340  00AA               	movwf	sprintf@cp
  2249  0341  3080               	movlw	128
  2250  0342  00AB               	movwf	sprintf@cp+1
  2251  0343                     l1653:	
  2252                           ;doprnt.c: 777: while(*cp)
  2253                           
  2254  0343  082B               	movf	sprintf@cp+1,w
  2255  0344  00FF               	movwf	127
  2256  0345  082A               	movf	sprintf@cp,w
  2257  0346  0084               	movwf	4
  2258  0347  118A  2379  118A   	fcall	stringtab
  2259  034A  3A00               	xorlw	0
  2260  034B  1903               	btfsc	3,2
  2261  034C  2B10               	goto	l1659
  2262                           
  2263                           ;doprnt.c: 778: ((*sp++ = (*cp++)));
  2264  034D  082B               	movf	sprintf@cp+1,w
  2265  034E  00FF               	movwf	127
  2266  034F  082A               	movf	sprintf@cp,w
  2267  0350  0084               	movwf	4
  2268  0351  118A  2379  118A   	fcall	stringtab
  2269  0354  00A6               	movwf	??_sprintf
  2270  0355  082C               	movf	sprintf@sp,w
  2271  0356  0084               	movwf	4
  2272  0357  0826               	movf	??_sprintf,w
  2273  0358  1383               	bcf	3,7	;select IRP bank0
  2274  0359  0080               	movwf	0
  2275  035A  3001               	movlw	1
  2276  035B  07AA               	addwf	sprintf@cp,f
  2277  035C  1803               	skipnc
  2278  035D  0AAB               	incf	sprintf@cp+1,f
  2279  035E  3001               	movlw	1
  2280  035F  00A6               	movwf	??_sprintf
  2281  0360  0826               	movf	??_sprintf,w
  2282  0361  07AC               	addwf	sprintf@sp,f
  2283  0362  2B43               	goto	l1653
  2284  0363                     l1657:	
  2285                           ;doprnt.c: 822: }
  2286                           
  2287                           ;doprnt.c: 813: continue;
  2288                           
  2289                           ;doprnt.c: 802: default:
  2290                           
  2291                           ;doprnt.c: 779: continue;
  2292                           
  2293  0363  3001               	movlw	1
  2294  0364  07A4               	addwf	sprintf@f,f
  2295  0365  30FF               	movlw	-1
  2296  0366  0724               	addwf	sprintf@f,w
  2297  0367  0084               	movwf	4
  2298  0368  118A  2383  118A   	fcall	stringdir
  2299  036B  00A9               	movwf	sprintf@c
  2300                           
  2301                           ; Switch size 1, requested type "space"
  2302                           ; Number of cases is 2, Range of values is 0 to 115
  2303                           ; switch strategies available:
  2304                           ; Name         Instructions Cycles
  2305                           ; simple_byte            7     4 (average)
  2306                           ; direct_byte          239     7 (fixed)
  2307                           ; jumptable            260     6 (fixed)
  2308                           ;	Chosen strategy is simple_byte
  2309  036C  3A00               	xorlw	0	; case 0
  2310  036D  1903               	skipnz
  2311  036E  2B74               	goto	l1661
  2312  036F  3A73               	xorlw	115	; case 115
  2313  0370  1903               	skipnz
  2314  0371  2B30               	goto	l1639
  2315  0372  2B10               	goto	l1659
  2316  0373  2B10               	goto	l1659
  2317  0374                     l1661:	
  2318                           ;doprnt.c: 1469: }
  2319                           ;doprnt.c: 1533: }
  2320                           ;doprnt.c: 1535: alldone:
  2321                           
  2322                           
  2323                           ;doprnt.c: 1538: *sp = 0;
  2324  0374  082C               	movf	sprintf@sp,w
  2325  0375  0084               	movwf	4
  2326  0376  1383               	bcf	3,7	;select IRP bank0
  2327  0377  0180               	clrf	0
  2328  0378  0008               	return
  2329  0379                     __end_of_sprintf:	
  2330                           ;doprnt.c: 1540: return 0;
  2331                           ;	Return value of _sprintf is never used
  2332                           
  2333                           
  2334                           	psect	text12
  2335  04FF                     __ptext12:	
  2336 ;; *************** function _UART_send_string *****************
  2337 ;; Defined at:
  2338 ;;		line 87 in file "uart.h"
  2339 ;; Parameters:    Size  Location     Type
  2340 ;;  str             2    5[BANK0 ] PTR unsigned char 
  2341 ;;		 -> main@buffer(30), STR_3(19), STR_2(19), STR_1(19), 
  2342 ;; Auto vars:     Size  Location     Type
  2343 ;;		None
  2344 ;; Return value:  Size  Location     Type
  2345 ;;                  1    wreg      void 
  2346 ;; Registers used:
  2347 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2348 ;; Tracked objects:
  2349 ;;		On entry : 0/0
  2350 ;;		On exit  : 0/0
  2351 ;;		Unchanged: 0/0
  2352 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2353 ;;      Params:         0       2       0       0       0
  2354 ;;      Locals:         0       0       0       0       0
  2355 ;;      Temps:          0       0       0       0       0
  2356 ;;      Totals:         0       2       0       0       0
  2357 ;;Total ram usage:        2 bytes
  2358 ;; Hardware stack levels used:    1
  2359 ;; Hardware stack levels required when called:    6
  2360 ;; This function calls:
  2361 ;;		_UART_send_byte
  2362 ;; This function is called by:
  2363 ;;		_main
  2364 ;; This function uses a non-reentrant model
  2365 ;;
  2366                           
  2367                           
  2368                           ;psect for function _UART_send_string
  2369  04FF                     _UART_send_string:	
  2370  04FF                     l1527:	
  2371                           ;uart.h: 99: while(*str){
  2372                           
  2373                           ;incstack = 0
  2374                           ; Regs used in _UART_send_string: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2375                           
  2376  04FF  1283               	bcf	3,5	;RP0=0, select bank0
  2377  0500  1303               	bcf	3,6	;RP1=0, select bank0
  2378  0501  0826               	movf	UART_send_string@str+1,w
  2379  0502  00FF               	movwf	127
  2380  0503  0825               	movf	UART_send_string@str,w
  2381  0504  0084               	movwf	4
  2382  0505  118A  2379  118A   	fcall	stringtab
  2383  0508  3A00               	xorlw	0
  2384  0509  1903               	btfsc	3,2
  2385  050A  0008               	return
  2386                           
  2387                           ;uart.h: 100: UART_send_byte(*str++);
  2388  050B  1283               	bcf	3,5	;RP0=0, select bank0
  2389  050C  1303               	bcf	3,6	;RP1=0, select bank0
  2390  050D  0826               	movf	UART_send_string@str+1,w
  2391  050E  00FF               	movwf	127
  2392  050F  0825               	movf	UART_send_string@str,w
  2393  0510  0084               	movwf	4
  2394  0511  118A  2379  118A   	fcall	stringtab
  2395  0514  118A  257D  118A   	fcall	_UART_send_byte
  2396  0517  3001               	movlw	1
  2397  0518  1283               	bcf	3,5	;RP0=0, select bank0
  2398  0519  1303               	bcf	3,6	;RP1=0, select bank0
  2399  051A  07A5               	addwf	UART_send_string@str,f
  2400  051B  1803               	skipnc
  2401  051C  0AA6               	incf	UART_send_string@str+1,f
  2402  051D  2CFF               	goto	l1527
  2403  051E                     __end_of_UART_send_string:	
  2404                           
  2405                           	psect	text13
  2406  057D                     __ptext13:	
  2407 ;; *************** function _UART_send_byte *****************
  2408 ;; Defined at:
  2409 ;;		line 43 in file "uart.h"
  2410 ;; Parameters:    Size  Location     Type
  2411 ;;  single_byte     1    wreg     unsigned char 
  2412 ;; Auto vars:     Size  Location     Type
  2413 ;;  single_byte     1    4[BANK0 ] unsigned char 
  2414 ;; Return value:  Size  Location     Type
  2415 ;;                  1    wreg      void 
  2416 ;; Registers used:
  2417 ;;		wreg
  2418 ;; Tracked objects:
  2419 ;;		On entry : 0/0
  2420 ;;		On exit  : 0/0
  2421 ;;		Unchanged: 0/0
  2422 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2423 ;;      Params:         0       0       0       0       0
  2424 ;;      Locals:         0       1       0       0       0
  2425 ;;      Temps:          0       0       0       0       0
  2426 ;;      Totals:         0       1       0       0       0
  2427 ;;Total ram usage:        1 bytes
  2428 ;; Hardware stack levels used:    1
  2429 ;; Hardware stack levels required when called:    5
  2430 ;; This function calls:
  2431 ;;		Nothing
  2432 ;; This function is called by:
  2433 ;;		_UART_send_string
  2434 ;;		_main
  2435 ;; This function uses a non-reentrant model
  2436 ;;
  2437                           
  2438                           
  2439                           ;psect for function _UART_send_byte
  2440  057D                     _UART_send_byte:	
  2441                           
  2442                           ;incstack = 0
  2443                           ; Regs used in _UART_send_byte: [wreg]
  2444                           ;UART_send_byte@single_byte stored from wreg
  2445  057D  1283               	bcf	3,5	;RP0=0, select bank0
  2446  057E  1303               	bcf	3,6	;RP1=0, select bank0
  2447  057F  00A4               	movwf	UART_send_byte@single_byte
  2448  0580                     l56:	
  2449                           ;uart.h: 46: while(! TRMT);
  2450                           
  2451  0580  1683               	bsf	3,5	;RP0=1, select bank1
  2452  0581  1303               	bcf	3,6	;RP1=0, select bank1
  2453  0582  1C98               	btfss	24,1	;volatile
  2454  0583  2D80               	goto	l56
  2455                           
  2456                           ;uart.h: 47: TXREG = single_byte;
  2457  0584  1283               	bcf	3,5	;RP0=0, select bank0
  2458  0585  1303               	bcf	3,6	;RP1=0, select bank0
  2459  0586  0824               	movf	UART_send_byte@single_byte,w
  2460  0587  0099               	movwf	25	;volatile
  2461  0588  0008               	return
  2462  0589                     __end_of_UART_send_byte:	
  2463                           
  2464                           	psect	text14
  2465  0557                     __ptext14:	
  2466 ;; *************** function _UART_Init *****************
  2467 ;; Defined at:
  2468 ;;		line 17 in file "uart.h"
  2469 ;; Parameters:    Size  Location     Type
  2470 ;;		None
  2471 ;; Auto vars:     Size  Location     Type
  2472 ;;		None
  2473 ;; Return value:  Size  Location     Type
  2474 ;;                  1    wreg      void 
  2475 ;; Registers used:
  2476 ;;		wreg
  2477 ;; Tracked objects:
  2478 ;;		On entry : 0/0
  2479 ;;		On exit  : 0/0
  2480 ;;		Unchanged: 0/0
  2481 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2482 ;;      Params:         0       0       0       0       0
  2483 ;;      Locals:         0       0       0       0       0
  2484 ;;      Temps:          0       0       0       0       0
  2485 ;;      Totals:         0       0       0       0       0
  2486 ;;Total ram usage:        0 bytes
  2487 ;; Hardware stack levels used:    1
  2488 ;; Hardware stack levels required when called:    5
  2489 ;; This function calls:
  2490 ;;		Nothing
  2491 ;; This function is called by:
  2492 ;;		_main
  2493 ;; This function uses a non-reentrant model
  2494 ;;
  2495                           
  2496                           
  2497                           ;psect for function _UART_Init
  2498  0557                     _UART_Init:	
  2499                           
  2500                           ;uart.h: 23: TRISB2 = 1;
  2501                           
  2502                           ;incstack = 0
  2503                           ; Regs used in _UART_Init: [wreg]
  2504  0557  1683               	bsf	3,5	;RP0=1, select bank1
  2505  0558  1303               	bcf	3,6	;RP1=0, select bank1
  2506  0559  1506               	bsf	6,2	;volatile
  2507                           
  2508                           ;uart.h: 24: TRISB5 = 0;
  2509  055A  1286               	bcf	6,5	;volatile
  2510                           
  2511                           ;uart.h: 27: BRGH = 1;
  2512  055B  1518               	bsf	24,2	;volatile
  2513                           
  2514                           ;uart.h: 28: SPBRG = 77;
  2515  055C  304D               	movlw	77
  2516  055D  0099               	movwf	25	;volatile
  2517                           
  2518                           ;uart.h: 31: SYNC = 0;
  2519  055E  1218               	bcf	24,4	;volatile
  2520                           
  2521                           ;uart.h: 32: SPEN = 1;
  2522  055F  1283               	bcf	3,5	;RP0=0, select bank0
  2523  0560  1303               	bcf	3,6	;RP1=0, select bank0
  2524  0561  1798               	bsf	24,7	;volatile
  2525                           
  2526                           ;uart.h: 35: TX9 = 0;
  2527  0562  1683               	bsf	3,5	;RP0=1, select bank1
  2528  0563  1303               	bcf	3,6	;RP1=0, select bank1
  2529  0564  1318               	bcf	24,6	;volatile
  2530                           
  2531                           ;uart.h: 36: TXEN = 1;
  2532  0565  1698               	bsf	24,5	;volatile
  2533                           
  2534                           ;uart.h: 39: RX9 = 0;
  2535  0566  1283               	bcf	3,5	;RP0=0, select bank0
  2536  0567  1303               	bcf	3,6	;RP1=0, select bank0
  2537  0568  1318               	bcf	24,6	;volatile
  2538                           
  2539                           ;uart.h: 40: CREN = 1;
  2540  0569  1618               	bsf	24,4	;volatile
  2541  056A  0008               	return
  2542  056B                     __end_of_UART_Init:	
  2543                           
  2544                           	psect	text15
  2545  056B                     __ptext15:	
  2546 ;; *************** function _global_isr *****************
  2547 ;; Defined at:
  2548 ;;		line 18 in file "main.c"
  2549 ;; Parameters:    Size  Location     Type
  2550 ;;		None
  2551 ;; Auto vars:     Size  Location     Type
  2552 ;;		None
  2553 ;; Return value:  Size  Location     Type
  2554 ;;                  1    wreg      void 
  2555 ;; Registers used:
  2556 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2557 ;; Tracked objects:
  2558 ;;		On entry : 0/0
  2559 ;;		On exit  : 0/0
  2560 ;;		Unchanged: 0/0
  2561 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2562 ;;      Params:         0       0       0       0       0
  2563 ;;      Locals:         0       0       0       0       0
  2564 ;;      Temps:          0       4       0       0       0
  2565 ;;      Totals:         0       4       0       0       0
  2566 ;;Total ram usage:        4 bytes
  2567 ;; Hardware stack levels used:    1
  2568 ;; Hardware stack levels required when called:    4
  2569 ;; This function calls:
  2570 ;;		_vw_isr_tmr0
  2571 ;; This function is called by:
  2572 ;;		Interrupt level 1
  2573 ;; This function uses a non-reentrant model
  2574 ;;
  2575                           
  2576                           
  2577                           ;psect for function _global_isr
  2578  056B                     _global_isr:	
  2579                           
  2580                           ;main.c: 19: if(TMR0IF)
  2581  056B  1D0B               	btfss	11,2	;volatile
  2582  056C  2D70               	goto	i1l83
  2583                           
  2584                           ;main.c: 20: vw_isr_tmr0();
  2585  056D  118A  2160  118A   	fcall	_vw_isr_tmr0
  2586  0570                     i1l83:	
  2587  0570  1283               	bcf	3,5	;RP0=0, select bank0
  2588  0571  1303               	bcf	3,6	;RP1=0, select bank0
  2589  0572  0823               	movf	??_global_isr+3,w
  2590  0573  00FF               	movwf	127
  2591  0574  0822               	movf	??_global_isr+2,w
  2592  0575  008A               	movwf	10
  2593  0576  0821               	movf	??_global_isr+1,w
  2594  0577  0084               	movwf	4
  2595  0578  0E20               	swapf	??_global_isr^0,w
  2596  0579  0083               	movwf	3
  2597  057A  0EFE               	swapf	126,f
  2598  057B  0E7E               	swapf	126,w
  2599  057C  0009               	retfie
  2600  057D                     __end_of_global_isr:	
  2601                           
  2602                           	psect	intentry
  2603  0004                     __pintentry:	
  2604                           ;incstack = 0
  2605                           ; Regs used in _global_isr: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2606                           
  2607  0004                     interrupt_function:	
  2608  007E                     saved_w	set	btemp
  2609  0004  00FE               	movwf	btemp
  2610  0005  0E03               	swapf	3,w
  2611  0006  1283               	bcf	3,5	;RP0=0, select bank0
  2612  0007  1303               	bcf	3,6	;RP1=0, select bank0
  2613  0008  00A0               	movwf	??_global_isr
  2614  0009  0804               	movf	4,w
  2615  000A  00A1               	movwf	??_global_isr+1
  2616  000B  080A               	movf	10,w
  2617  000C  00A2               	movwf	??_global_isr+2
  2618  000D  087F               	movf	btemp+1,w
  2619  000E  00A3               	movwf	??_global_isr+3
  2620  000F  118A  2D6B         	ljmp	_global_isr
  2621                           
  2622                           	psect	text16
  2623  0160                     __ptext16:	
  2624 ;; *************** function _vw_isr_tmr0 *****************
  2625 ;; Defined at:
  2626 ;;		line 388 in file "virtualwire.c"
  2627 ;; Parameters:    Size  Location     Type
  2628 ;;		None
  2629 ;; Auto vars:     Size  Location     Type
  2630 ;;		None
  2631 ;; Return value:  Size  Location     Type
  2632 ;;                  1    wreg      void 
  2633 ;; Registers used:
  2634 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2635 ;; Tracked objects:
  2636 ;;		On entry : 0/0
  2637 ;;		On exit  : 0/0
  2638 ;;		Unchanged: 0/0
  2639 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2640 ;;      Params:         0       0       0       0       0
  2641 ;;      Locals:         0       0       0       0       0
  2642 ;;      Temps:          2       0       0       0       0
  2643 ;;      Totals:         2       0       0       0       0
  2644 ;;Total ram usage:        2 bytes
  2645 ;; Hardware stack levels used:    1
  2646 ;; Hardware stack levels required when called:    3
  2647 ;; This function calls:
  2648 ;;		_vw_pll
  2649 ;;		_vw_tx_stop
  2650 ;; This function is called by:
  2651 ;;		_global_isr
  2652 ;; This function uses a non-reentrant model
  2653 ;;
  2654                           
  2655                           
  2656                           ;psect for function _vw_isr_tmr0
  2657  0160                     _vw_isr_tmr0:	
  2658                           
  2659                           ;virtualwire.c: 390: TMR0 += -vw_tmr0_value + 4;
  2660                           
  2661                           ;incstack = 0
  2662 ;; using string table level
  2663                           ; Regs used in _vw_isr_tmr0: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2664  0160  1283               	bcf	3,5	;RP0=0, select bank0
  2665  0161  1303               	bcf	3,6	;RP1=0, select bank0
  2666  0162  0367               	decf	_vw_tmr0_value,w
  2667  0163  3AFF               	xorlw	255
  2668  0164  3E04               	addlw	4
  2669  0165  00FB               	movwf	??_vw_isr_tmr0
  2670  0166  087B               	movf	??_vw_isr_tmr0,w
  2671  0167  0781               	addwf	1,f	;volatile
  2672                           
  2673                           ;virtualwire.c: 391: TMR0IF = 0;
  2674  0168  110B               	bcf	11,2	;volatile
  2675                           
  2676                           ;virtualwire.c: 393: if (vw_rx_enabled && !vw_tx_enabled)
  2677  0169  085A               	movf	_vw_rx_enabled,w
  2678  016A  1903               	btfsc	3,2
  2679  016B  297E               	goto	i1l1541
  2680  016C  0862               	movf	_vw_tx_enabled,w
  2681  016D  1D03               	btfss	3,2
  2682  016E  297E               	goto	i1l1541
  2683                           
  2684                           ;virtualwire.c: 395: if(vw_rx_inverted){
  2685  016F  085D               	movf	_vw_rx_inverted,w
  2686  0170  1903               	btfsc	3,2
  2687  0171  297A               	goto	i1l1539
  2688                           
  2689                           ;virtualwire.c: 396: vw_rx_sample = (RB3)? 0 : 1;
  2690  0172  1003               	clrc
  2691  0173  1D86               	btfss	6,3	;volatile
  2692  0174  1403               	setc
  2693  0175  3000               	movlw	0
  2694  0176  1803               	btfsc	3,0
  2695  0177  3001               	movlw	1
  2696  0178  00E0               	movwf	_vw_rx_sample
  2697                           
  2698                           ;virtualwire.c: 397: }
  2699  0179  297E               	goto	i1l1541
  2700  017A                     i1l1539:	
  2701                           
  2702                           ;virtualwire.c: 398: else{
  2703                           ;virtualwire.c: 399: vw_rx_sample = RB3;
  2704  017A  3000               	movlw	0
  2705  017B  1986               	btfsc	6,3	;volatile
  2706  017C  3001               	movlw	1
  2707  017D  00E0               	movwf	_vw_rx_sample
  2708  017E                     i1l1541:	
  2709                           
  2710                           ;virtualwire.c: 400: }
  2711                           ;virtualwire.c: 404: if (vw_tx_enabled && vw_tx_sample++ == 0)
  2712  017E  0862               	movf	_vw_tx_enabled,w
  2713  017F  1903               	btfsc	3,2
  2714  0180  29ED               	goto	i1l1577
  2715  0181  3001               	movlw	1
  2716  0182  00FB               	movwf	??_vw_isr_tmr0
  2717  0183  087B               	movf	??_vw_isr_tmr0,w
  2718  0184  07E6               	addwf	_vw_tx_sample,f
  2719  0185  0366               	decf	_vw_tx_sample,w
  2720  0186  1D03               	btfss	3,2
  2721  0187  29ED               	goto	i1l1577
  2722                           
  2723                           ;virtualwire.c: 405: {
  2724                           ;virtualwire.c: 406: if (vw_tx_header)
  2725  0188  0863               	movf	_vw_tx_header,w
  2726  0189  1903               	btfsc	3,2
  2727  018A  29BA               	goto	i1l1561
  2728                           
  2729                           ;virtualwire.c: 407: {
  2730                           ;virtualwire.c: 408: RB4 = (vw_tx_buf_header[vw_tx_index] & (1 << vw_tx_bit++)) ? 1 : 0;
  2731  018B  0864               	movf	_vw_tx_index,w
  2732  018C  3E23               	addlw	low ((_vw_tx_buf_header-__stringbase)| (0+32768))
  2733  018D  0084               	movwf	4
  2734  018E  118A  2383  118A   	fcall	stringdir
  2735  0191  00FB               	movwf	??_vw_isr_tmr0
  2736  0192  3001               	movlw	1
  2737  0193  00FC               	movwf	??_vw_isr_tmr0+1
  2738  0194  0A61               	incf	_vw_tx_bit,w
  2739  0195  2998               	goto	u146_24
  2740  0196                     u146_25:	
  2741  0196  1003               	clrc
  2742  0197  0DFC               	rlf	??_vw_isr_tmr0+1,f
  2743  0198                     u146_24:	
  2744  0198  3EFF               	addlw	-1
  2745  0199  1D03               	skipz
  2746  019A  2996               	goto	u146_25
  2747  019B  087C               	movf	??_vw_isr_tmr0+1,w
  2748  019C  057B               	andwf	??_vw_isr_tmr0,w
  2749  019D  1903               	btfsc	3,2
  2750  019E  29A3               	goto	u147_20
  2751  019F  1283               	bcf	3,5	;RP0=0, select bank0
  2752  01A0  1303               	bcf	3,6	;RP1=0, select bank0
  2753  01A1  1606               	bsf	6,4	;volatile
  2754  01A2  29A6               	goto	i1l1549
  2755  01A3                     u147_20:	
  2756  01A3  1283               	bcf	3,5	;RP0=0, select bank0
  2757  01A4  1303               	bcf	3,6	;RP1=0, select bank0
  2758  01A5  1206               	bcf	6,4	;volatile
  2759  01A6                     i1l1549:	
  2760  01A6  3001               	movlw	1
  2761  01A7  00FB               	movwf	??_vw_isr_tmr0
  2762  01A8  087B               	movf	??_vw_isr_tmr0,w
  2763  01A9  07E1               	addwf	_vw_tx_bit,f
  2764                           
  2765                           ;virtualwire.c: 409: if (vw_tx_bit >= 6)
  2766  01AA  3006               	movlw	6
  2767  01AB  0261               	subwf	_vw_tx_bit,w
  2768  01AC  1C03               	skipc
  2769  01AD  29B3               	goto	i1l1557
  2770                           
  2771                           ;virtualwire.c: 410: {
  2772                           ;virtualwire.c: 411: vw_tx_bit = 0;
  2773  01AE  01E1               	clrf	_vw_tx_bit
  2774                           
  2775                           ;virtualwire.c: 412: vw_tx_index++;
  2776  01AF  3001               	movlw	1
  2777  01B0  00FB               	movwf	??_vw_isr_tmr0
  2778  01B1  087B               	movf	??_vw_isr_tmr0,w
  2779  01B2  07E4               	addwf	_vw_tx_index,f
  2780  01B3                     i1l1557:	
  2781                           
  2782                           ;virtualwire.c: 413: }
  2783                           ;virtualwire.c: 415: if (vw_tx_index >= 8)
  2784  01B3  3008               	movlw	8
  2785  01B4  0264               	subwf	_vw_tx_index,w
  2786  01B5  1C03               	skipc
  2787  01B6  29ED               	goto	i1l1577
  2788                           
  2789                           ;virtualwire.c: 416: {
  2790                           ;virtualwire.c: 418: vw_tx_header = 0;
  2791  01B7  01E3               	clrf	_vw_tx_header
  2792                           
  2793                           ;virtualwire.c: 419: vw_tx_index = 0;
  2794  01B8  01E4               	clrf	_vw_tx_index
  2795                           
  2796                           ;virtualwire.c: 420: }
  2797                           ;virtualwire.c: 421: }
  2798  01B9  29ED               	goto	i1l1577
  2799  01BA                     i1l1561:	
  2800                           
  2801                           ;virtualwire.c: 422: else
  2802                           ;virtualwire.c: 423: {
  2803                           ;virtualwire.c: 428: if (vw_tx_index >= vw_tx_len)
  2804  01BA  0865               	movf	_vw_tx_len,w
  2805  01BB  0264               	subwf	_vw_tx_index,w
  2806  01BC  1C03               	skipc
  2807  01BD  29C8               	goto	i1l1567
  2808                           
  2809                           ;virtualwire.c: 429: {
  2810                           ;virtualwire.c: 430: vw_tx_stop();
  2811  01BE  118A  25A1  118A   	fcall	_vw_tx_stop
  2812                           
  2813                           ;virtualwire.c: 431: vw_rx_enabled = vw_rx_enabled_last;
  2814  01C1  1283               	bcf	3,5	;RP0=0, select bank0
  2815  01C2  1303               	bcf	3,6	;RP1=0, select bank0
  2816  01C3  085B               	movf	_vw_rx_enabled_last,w
  2817  01C4  00FB               	movwf	??_vw_isr_tmr0
  2818  01C5  087B               	movf	??_vw_isr_tmr0,w
  2819  01C6  00DA               	movwf	_vw_rx_enabled
  2820                           
  2821                           ;virtualwire.c: 432: }
  2822  01C7  29ED               	goto	i1l1577
  2823  01C8                     i1l1567:	
  2824                           
  2825                           ;virtualwire.c: 433: else
  2826                           ;virtualwire.c: 434: {
  2827                           ;virtualwire.c: 435: RB4 = (vw_tx_buf[vw_tx_index] & (1 << vw_tx_bit++)) ? 1 : 0;
  2828  01C8  0864               	movf	_vw_tx_index,w
  2829  01C9  3EBF               	addlw	(low (_vw_tx_buf| 0))& (0+255)
  2830  01CA  0084               	movwf	4
  2831  01CB  3001               	movlw	1
  2832  01CC  00FB               	movwf	??_vw_isr_tmr0
  2833  01CD  0A61               	incf	_vw_tx_bit,w
  2834  01CE  29D1               	goto	u152_24
  2835  01CF                     u152_25:	
  2836  01CF  1003               	clrc
  2837  01D0  0DFB               	rlf	??_vw_isr_tmr0,f
  2838  01D1                     u152_24:	
  2839  01D1  3EFF               	addlw	-1
  2840  01D2  1D03               	skipz
  2841  01D3  29CF               	goto	u152_25
  2842  01D4  087B               	movf	??_vw_isr_tmr0,w
  2843  01D5  1383               	bcf	3,7	;select IRP bank1
  2844  01D6  0500               	andwf	0,w
  2845  01D7  1903               	btfsc	3,2
  2846  01D8  29DD               	goto	u153_20
  2847  01D9  1283               	bcf	3,5	;RP0=0, select bank0
  2848  01DA  1303               	bcf	3,6	;RP1=0, select bank0
  2849  01DB  1606               	bsf	6,4	;volatile
  2850  01DC  29E0               	goto	i1l1569
  2851  01DD                     u153_20:	
  2852  01DD  1283               	bcf	3,5	;RP0=0, select bank0
  2853  01DE  1303               	bcf	3,6	;RP1=0, select bank0
  2854  01DF  1206               	bcf	6,4	;volatile
  2855  01E0                     i1l1569:	
  2856  01E0  3001               	movlw	1
  2857  01E1  00FB               	movwf	??_vw_isr_tmr0
  2858  01E2  087B               	movf	??_vw_isr_tmr0,w
  2859  01E3  07E1               	addwf	_vw_tx_bit,f
  2860                           
  2861                           ;virtualwire.c: 436: if (vw_tx_bit >= 6)
  2862  01E4  3006               	movlw	6
  2863  01E5  0261               	subwf	_vw_tx_bit,w
  2864  01E6  1C03               	skipc
  2865  01E7  29ED               	goto	i1l1577
  2866                           
  2867                           ;virtualwire.c: 437: {
  2868                           ;virtualwire.c: 438: vw_tx_bit = 0;
  2869  01E8  01E1               	clrf	_vw_tx_bit
  2870                           
  2871                           ;virtualwire.c: 439: vw_tx_index++;
  2872  01E9  3001               	movlw	1
  2873  01EA  00FB               	movwf	??_vw_isr_tmr0
  2874  01EB  087B               	movf	??_vw_isr_tmr0,w
  2875  01EC  07E4               	addwf	_vw_tx_index,f
  2876  01ED                     i1l1577:	
  2877                           
  2878                           ;virtualwire.c: 440: }
  2879                           ;virtualwire.c: 441: }
  2880                           ;virtualwire.c: 442: }
  2881                           ;virtualwire.c: 444: }
  2882                           ;virtualwire.c: 446: if (vw_tx_sample > 7)
  2883  01ED  3008               	movlw	8
  2884  01EE  0266               	subwf	_vw_tx_sample,w
  2885  01EF  1803               	btfsc	3,0
  2886                           
  2887                           ;virtualwire.c: 447: vw_tx_sample = 0;
  2888  01F0  01E6               	clrf	_vw_tx_sample
  2889                           
  2890                           ;virtualwire.c: 451: if (vw_rx_enabled && !vw_tx_enabled)
  2891  01F1  085A               	movf	_vw_rx_enabled,w
  2892  01F2  1903               	btfsc	3,2
  2893  01F3  0008               	return
  2894  01F4  0862               	movf	_vw_tx_enabled,w
  2895  01F5  1D03               	btfss	3,2
  2896  01F6  0008               	return
  2897                           
  2898                           ;virtualwire.c: 452: vw_pll();
  2899  01F7  118A  20C2         	fcall	_vw_pll
  2900  01F9  0008               	return
  2901  01FA                     __end_of_vw_isr_tmr0:	
  2902                           
  2903                           	psect	text17
  2904  05A1                     __ptext17:	
  2905 ;; *************** function _vw_tx_stop *****************
  2906 ;; Defined at:
  2907 ;;		line 162 in file "virtualwire.c"
  2908 ;; Parameters:    Size  Location     Type
  2909 ;;		None
  2910 ;; Auto vars:     Size  Location     Type
  2911 ;;		None
  2912 ;; Return value:  Size  Location     Type
  2913 ;;                  1    wreg      void 
  2914 ;; Registers used:
  2915 ;;		status,2
  2916 ;; Tracked objects:
  2917 ;;		On entry : 0/0
  2918 ;;		On exit  : 0/0
  2919 ;;		Unchanged: 0/0
  2920 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2921 ;;      Params:         0       0       0       0       0
  2922 ;;      Locals:         0       0       0       0       0
  2923 ;;      Temps:          0       0       0       0       0
  2924 ;;      Totals:         0       0       0       0       0
  2925 ;;Total ram usage:        0 bytes
  2926 ;; Hardware stack levels used:    1
  2927 ;; This function calls:
  2928 ;;		Nothing
  2929 ;; This function is called by:
  2930 ;;		_vw_isr_tmr0
  2931 ;; This function uses a non-reentrant model
  2932 ;;
  2933                           
  2934                           
  2935                           ;psect for function _vw_tx_stop
  2936  05A1                     _vw_tx_stop:	
  2937                           
  2938                           ;virtualwire.c: 164: RB4 = 0;
  2939                           
  2940                           ;incstack = 0
  2941                           ; Regs used in _vw_tx_stop: [status,2]
  2942  05A1  1283               	bcf	3,5	;RP0=0, select bank0
  2943  05A2  1303               	bcf	3,6	;RP1=0, select bank0
  2944  05A3  1206               	bcf	6,4	;volatile
  2945                           
  2946                           ;virtualwire.c: 165: vw_tx_enabled = 0;
  2947  05A4  01E2               	clrf	_vw_tx_enabled
  2948  05A5  0008               	return
  2949  05A6                     __end_of_vw_tx_stop:	
  2950                           
  2951                           	psect	text18
  2952  00C2                     __ptext18:	
  2953 ;; *************** function _vw_pll *****************
  2954 ;; Defined at:
  2955 ;;		line 262 in file "virtualwire.c"
  2956 ;; Parameters:    Size  Location     Type
  2957 ;;		None
  2958 ;; Auto vars:     Size  Location     Type
  2959 ;;  this_byte       1   10[COMMON] unsigned char 
  2960 ;; Return value:  Size  Location     Type
  2961 ;;                  1    wreg      void 
  2962 ;; Registers used:
  2963 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2964 ;; Tracked objects:
  2965 ;;		On entry : 0/0
  2966 ;;		On exit  : 0/0
  2967 ;;		Unchanged: 0/0
  2968 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2969 ;;      Params:         0       0       0       0       0
  2970 ;;      Locals:         3       0       0       0       0
  2971 ;;      Temps:          5       0       0       0       0
  2972 ;;      Totals:         8       0       0       0       0
  2973 ;;Total ram usage:        8 bytes
  2974 ;; Hardware stack levels used:    1
  2975 ;; Hardware stack levels required when called:    2
  2976 ;; This function calls:
  2977 ;;		_vw_symbol_6to4
  2978 ;; This function is called by:
  2979 ;;		_vw_isr_tmr0
  2980 ;; This function uses a non-reentrant model
  2981 ;;
  2982                           
  2983                           
  2984                           ;psect for function _vw_pll
  2985  00C2                     _vw_pll:	
  2986                           
  2987                           ;virtualwire.c: 265: if (vw_rx_sample)
  2988                           
  2989                           ;incstack = 0
  2990                           ; Regs used in _vw_pll: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2991  00C2  1283               	bcf	3,5	;RP0=0, select bank0
  2992  00C3  1303               	bcf	3,6	;RP1=0, select bank0
  2993  00C4  0860               	movf	_vw_rx_sample,w
  2994  00C5  1903               	btfsc	3,2
  2995  00C6  28CB               	goto	i1l1445
  2996                           
  2997                           ;virtualwire.c: 266: vw_rx_integrator++;
  2998  00C7  3001               	movlw	1
  2999  00C8  00F3               	movwf	??_vw_pll
  3000  00C9  0873               	movf	??_vw_pll,w
  3001  00CA  07DC               	addwf	_vw_rx_integrator,f
  3002  00CB                     i1l1445:	
  3003                           
  3004                           ;virtualwire.c: 268: if (vw_rx_sample != vw_rx_last_sample)
  3005  00CB  0860               	movf	_vw_rx_sample,w
  3006  00CC  065E               	xorwf	_vw_rx_last_sample,w
  3007  00CD  1903               	skipnz
  3008  00CE  28E2               	goto	i1l1457
  3009                           
  3010                           ;virtualwire.c: 269: {
  3011                           ;virtualwire.c: 271: vw_rx_pll_ramp += ((vw_rx_pll_ramp < 160/2)
  3012                           ;virtualwire.c: 272: ? ((160/8)-9)
  3013                           ;virtualwire.c: 273: : ((160/8)+9));
  3014  00CF  3050               	movlw	80
  3015  00D0  025F               	subwf	_vw_rx_pll_ramp,w
  3016  00D1  1C03               	skipc
  3017  00D2  28D5               	goto	i1l1451
  3018  00D3  301D               	movlw	29
  3019  00D4  28D6               	goto	L2
  3020  00D5                     i1l1451:	
  3021  00D5  300B               	movlw	11
  3022  00D6                     L2:	
  3023  00D6  00F8               	movwf	_vw_pll$233
  3024  00D7  3000               	movlw	0
  3025  00D8  00F9               	movwf	_vw_pll$233+1
  3026  00D9  0878               	movf	_vw_pll$233,w
  3027  00DA  00F3               	movwf	??_vw_pll
  3028  00DB  0873               	movf	??_vw_pll,w
  3029  00DC  07DF               	addwf	_vw_rx_pll_ramp,f
  3030                           
  3031                           ;virtualwire.c: 274: vw_rx_last_sample = vw_rx_sample;
  3032  00DD  0860               	movf	_vw_rx_sample,w
  3033  00DE  00F3               	movwf	??_vw_pll
  3034  00DF  0873               	movf	??_vw_pll,w
  3035  00E0  00DE               	movwf	_vw_rx_last_sample
  3036                           
  3037                           ;virtualwire.c: 275: }
  3038  00E1  28E6               	goto	i1l1459
  3039  00E2                     i1l1457:	
  3040                           
  3041                           ;virtualwire.c: 276: else
  3042                           ;virtualwire.c: 277: {
  3043                           ;virtualwire.c: 280: vw_rx_pll_ramp += (160/8);
  3044  00E2  3014               	movlw	20
  3045  00E3  00F3               	movwf	??_vw_pll
  3046  00E4  0873               	movf	??_vw_pll,w
  3047  00E5  07DF               	addwf	_vw_rx_pll_ramp,f
  3048  00E6                     i1l1459:	
  3049                           
  3050                           ;virtualwire.c: 281: }
  3051                           ;virtualwire.c: 282: if (vw_rx_pll_ramp >= 160)
  3052  00E6  30A0               	movlw	160
  3053  00E7  025F               	subwf	_vw_rx_pll_ramp,w
  3054  00E8  1C03               	skipc
  3055  00E9  0008               	return
  3056                           
  3057                           ;virtualwire.c: 283: {
  3058                           ;virtualwire.c: 286: vw_rx_bits >>= 1;
  3059  00EA  3001               	movlw	1
  3060  00EB                     u128_25:	
  3061  00EB  1003               	clrc
  3062  00EC  0CD5               	rrf	_vw_rx_bits+1,f
  3063  00ED  0CD4               	rrf	_vw_rx_bits,f
  3064  00EE  3EFF               	addlw	-1
  3065  00EF  1D03               	skipz
  3066  00F0  28EB               	goto	u128_25
  3067                           
  3068                           ;virtualwire.c: 290: if (vw_rx_integrator >= 5)
  3069  00F1  3005               	movlw	5
  3070  00F2  025C               	subwf	_vw_rx_integrator,w
  3071  00F3  1803               	btfsc	3,0
  3072                           
  3073                           ;virtualwire.c: 291: vw_rx_bits |= 0x800;
  3074  00F4  15D5               	bsf	_vw_rx_bits+1,3
  3075                           
  3076                           ;virtualwire.c: 293: vw_rx_pll_ramp -= 160;
  3077  00F5  30A0               	movlw	160
  3078  00F6  02DF               	subwf	_vw_rx_pll_ramp,f
  3079                           
  3080                           ;virtualwire.c: 294: vw_rx_integrator = 0;
  3081  00F7  01DC               	clrf	_vw_rx_integrator
  3082                           
  3083                           ;virtualwire.c: 296: if (vw_rx_active)
  3084  00F8  0856               	movf	_vw_rx_active,w
  3085  00F9  1903               	btfsc	3,2
  3086  00FA  2953               	goto	i1l1499
  3087                           
  3088                           ;virtualwire.c: 297: {
  3089                           ;virtualwire.c: 300: if (++vw_rx_bit_count >= 12)
  3090  00FB  3001               	movlw	1
  3091  00FC  00F3               	movwf	??_vw_pll
  3092  00FD  0873               	movf	??_vw_pll,w
  3093  00FE  07D7               	addwf	_vw_rx_bit_count,f
  3094  00FF  300C               	movlw	12
  3095  0100  0257               	subwf	_vw_rx_bit_count,w
  3096  0101  1C03               	skipc
  3097  0102  0008               	return
  3098                           
  3099                           ;virtualwire.c: 301: {
  3100                           ;virtualwire.c: 305: uint8_t this_byte =
  3101                           ;virtualwire.c: 306: (vw_symbol_6to4(vw_rx_bits & 0x3f)) << 4
  3102                           ;virtualwire.c: 307: | vw_symbol_6to4(vw_rx_bits >> 6);
  3103  0103  0855               	movf	_vw_rx_bits+1,w
  3104  0104  00F4               	movwf	??_vw_pll+1
  3105  0105  0854               	movf	_vw_rx_bits,w
  3106  0106  00F3               	movwf	??_vw_pll
  3107  0107  3006               	movlw	6
  3108  0108                     u132_25:	
  3109  0108  1003               	clrc
  3110  0109  0CF4               	rrf	??_vw_pll+1,f
  3111  010A  0CF3               	rrf	??_vw_pll,f
  3112  010B  3EFF               	addlw	-1
  3113  010C  1D03               	skipz
  3114  010D  2908               	goto	u132_25
  3115  010E  0873               	movf	??_vw_pll,w
  3116  010F  118A  253C  118A   	fcall	_vw_symbol_6to4
  3117  0112  00F5               	movwf	??_vw_pll+2
  3118  0113  1283               	bcf	3,5	;RP0=0, select bank0
  3119  0114  1303               	bcf	3,6	;RP1=0, select bank0
  3120  0115  0854               	movf	_vw_rx_bits,w
  3121  0116  393F               	andlw	63
  3122  0117  118A  253C  118A   	fcall	_vw_symbol_6to4
  3123  011A  00F6               	movwf	??_vw_pll+3
  3124  011B  3003               	movlw	3
  3125  011C                     u133_25:	
  3126  011C  1003               	clrc
  3127  011D  0DF6               	rlf	??_vw_pll+3,f
  3128  011E  3EFF               	addlw	-1
  3129  011F  1D03               	skipz
  3130  0120  291C               	goto	u133_25
  3131  0121  1003               	clrc
  3132  0122  0D76               	rlf	??_vw_pll+3,w
  3133  0123  0475               	iorwf	??_vw_pll+2,w
  3134  0124  00F7               	movwf	??_vw_pll+4
  3135  0125  0877               	movf	??_vw_pll+4,w
  3136  0126  00FA               	movwf	vw_pll@this_byte
  3137                           
  3138                           ;virtualwire.c: 312: if (vw_rx_len == 0)
  3139  0127  087D               	movf	_vw_rx_len,w
  3140  0128  1D03               	btfss	3,2
  3141  0129  293A               	goto	i1l1487
  3142                           
  3143                           ;virtualwire.c: 313: {
  3144                           ;virtualwire.c: 317: vw_rx_count = this_byte;
  3145  012A  087A               	movf	vw_pll@this_byte,w
  3146  012B  00F3               	movwf	??_vw_pll
  3147  012C  0873               	movf	??_vw_pll,w
  3148  012D  1283               	bcf	3,5	;RP0=0, select bank0
  3149  012E  1303               	bcf	3,6	;RP1=0, select bank0
  3150  012F  00D8               	movwf	_vw_rx_count
  3151                           
  3152                           ;virtualwire.c: 318: if (vw_rx_count < 4 || vw_rx_count > 8)
  3153  0130  3004               	movlw	4
  3154  0131  0258               	subwf	_vw_rx_count,w
  3155  0132  1C03               	skipc
  3156  0133  2938               	goto	i1l1483
  3157  0134  3009               	movlw	9
  3158  0135  0258               	subwf	_vw_rx_count,w
  3159  0136  1C03               	skipc
  3160  0137  293A               	goto	i1l1487
  3161  0138                     i1l1483:	
  3162                           
  3163                           ;virtualwire.c: 319: {
  3164                           ;virtualwire.c: 321: vw_rx_active = 0;
  3165  0138  01D6               	clrf	_vw_rx_active
  3166                           
  3167                           ;virtualwire.c: 322: return;
  3168  0139  0008               	return
  3169  013A                     i1l1487:	
  3170                           
  3171                           ;virtualwire.c: 323: }
  3172                           ;virtualwire.c: 324: }
  3173                           ;virtualwire.c: 325: vw_tx_buf[vw_rx_len++] = this_byte;
  3174  013A  087A               	movf	vw_pll@this_byte,w
  3175  013B  00F3               	movwf	??_vw_pll
  3176  013C  087D               	movf	_vw_rx_len,w
  3177  013D  3EBF               	addlw	(low (_vw_tx_buf| 0))& (0+255)
  3178  013E  0084               	movwf	4
  3179  013F  0873               	movf	??_vw_pll,w
  3180  0140  1383               	bcf	3,7	;select IRP bank1
  3181  0141  0080               	movwf	0
  3182  0142  3001               	movlw	1
  3183  0143  00F3               	movwf	??_vw_pll
  3184  0144  0873               	movf	??_vw_pll,w
  3185  0145  07FD               	addwf	_vw_rx_len,f
  3186                           
  3187                           ;virtualwire.c: 327: if (vw_rx_len >= vw_rx_count)
  3188  0146  1283               	bcf	3,5	;RP0=0, select bank0
  3189  0147  1303               	bcf	3,6	;RP1=0, select bank0
  3190  0148  0858               	movf	_vw_rx_count,w
  3191  0149  027D               	subwf	_vw_rx_len,w
  3192  014A  1C03               	skipc
  3193  014B  2951               	goto	i1l1497
  3194                           
  3195                           ;virtualwire.c: 328: {
  3196                           ;virtualwire.c: 330: vw_rx_active = 0;
  3197  014C  01D6               	clrf	_vw_rx_active
  3198                           
  3199                           ;virtualwire.c: 331: vw_rx_done = 1;
  3200  014D  3001               	movlw	1
  3201  014E  00F3               	movwf	??_vw_pll
  3202  014F  0873               	movf	??_vw_pll,w
  3203  0150  00D9               	movwf	_vw_rx_done	;volatile
  3204  0151                     i1l1497:	
  3205                           
  3206                           ;virtualwire.c: 332: }
  3207                           ;virtualwire.c: 333: vw_rx_bit_count = 0;
  3208  0151  01D7               	clrf	_vw_rx_bit_count
  3209                           
  3210                           ;virtualwire.c: 334: }
  3211                           ;virtualwire.c: 335: }
  3212  0152  0008               	return
  3213  0153                     i1l1499:	
  3214                           
  3215                           ;virtualwire.c: 337: else if (vw_rx_bits == 0xb38)
  3216  0153  3038               	movlw	56
  3217  0154  0654               	xorwf	_vw_rx_bits,w
  3218  0155  300B               	movlw	11
  3219  0156  1903               	skipnz
  3220  0157  0655               	xorwf	_vw_rx_bits+1,w
  3221  0158  1D03               	btfss	3,2
  3222  0159  0008               	return
  3223                           
  3224                           ;virtualwire.c: 338: {
  3225                           ;virtualwire.c: 340: vw_rx_active = 1;
  3226  015A  01D6               	clrf	_vw_rx_active
  3227  015B  0AD6               	incf	_vw_rx_active,f
  3228                           
  3229                           ;virtualwire.c: 341: vw_rx_bit_count = 0;
  3230  015C  01D7               	clrf	_vw_rx_bit_count
  3231                           
  3232                           ;virtualwire.c: 342: vw_rx_len = 0;
  3233  015D  01FD               	clrf	_vw_rx_len
  3234                           
  3235                           ;virtualwire.c: 343: vw_rx_done = 0;
  3236  015E  01D9               	clrf	_vw_rx_done	;volatile
  3237  015F  0008               	return
  3238  0160                     __end_of_vw_pll:	
  3239                           
  3240                           	psect	text19
  3241  053C                     __ptext19:	
  3242 ;; *************** function _vw_symbol_6to4 *****************
  3243 ;; Defined at:
  3244 ;;		line 245 in file "virtualwire.c"
  3245 ;; Parameters:    Size  Location     Type
  3246 ;;  symbol          1    wreg     unsigned char 
  3247 ;; Auto vars:     Size  Location     Type
  3248 ;;  symbol          1    1[COMMON] unsigned char 
  3249 ;;  i               1    2[COMMON] unsigned char 
  3250 ;; Return value:  Size  Location     Type
  3251 ;;                  1    wreg      unsigned char 
  3252 ;; Registers used:
  3253 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  3254 ;; Tracked objects:
  3255 ;;		On entry : 0/0
  3256 ;;		On exit  : 0/0
  3257 ;;		Unchanged: 0/0
  3258 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3259 ;;      Params:         0       0       0       0       0
  3260 ;;      Locals:         2       0       0       0       0
  3261 ;;      Temps:          1       0       0       0       0
  3262 ;;      Totals:         3       0       0       0       0
  3263 ;;Total ram usage:        3 bytes
  3264 ;; Hardware stack levels used:    2
  3265 ;; This function calls:
  3266 ;;		Nothing
  3267 ;; This function is called by:
  3268 ;;		_vw_pll
  3269 ;; This function uses a non-reentrant model
  3270 ;;
  3271                           
  3272                           
  3273                           ;psect for function _vw_symbol_6to4
  3274  053C                     _vw_symbol_6to4:	
  3275                           
  3276                           ;incstack = 0
  3277 ;; using string table level
  3278                           ; Regs used in _vw_symbol_6to4: [wreg-fsr0h+status,2+status,0+pclath]
  3279                           ;vw_symbol_6to4@symbol stored from wreg
  3280  053C  00F1               	movwf	vw_symbol_6to4@symbol
  3281                           
  3282                           ;virtualwire.c: 247: uint8_t i;
  3283                           ;virtualwire.c: 250: for (i = 0; i < 16; i++)
  3284  053D  01F2               	clrf	vw_symbol_6to4@i
  3285  053E  3010               	movlw	16
  3286  053F  0272               	subwf	vw_symbol_6to4@i,w
  3287  0540  1803               	btfsc	3,0
  3288  0541  2D55               	goto	i1l1333
  3289  0542                     i1l1323:	
  3290                           
  3291                           ;virtualwire.c: 251: if (symbol == symbols[i])
  3292  0542  0872               	movf	vw_symbol_6to4@i,w
  3293  0543  3E13               	addlw	low ((_symbols-__stringbase)| (0+32768))
  3294  0544  0084               	movwf	4
  3295  0545  118A  2383  118A   	fcall	stringdir
  3296  0548  0671               	xorwf	vw_symbol_6to4@symbol,w
  3297  0549  1D03               	skipz
  3298  054A  2D4D               	goto	i1l1329
  3299                           
  3300                           ;virtualwire.c: 252: return i;
  3301  054B  0872               	movf	vw_symbol_6to4@i,w
  3302  054C  0008               	return
  3303  054D                     i1l1329:	
  3304  054D  3001               	movlw	1
  3305  054E  00F0               	movwf	??_vw_symbol_6to4
  3306  054F  0870               	movf	??_vw_symbol_6to4,w
  3307  0550  07F2               	addwf	vw_symbol_6to4@i,f
  3308  0551  3010               	movlw	16
  3309  0552  0272               	subwf	vw_symbol_6to4@i,w
  3310  0553  1C03               	skipc
  3311  0554  2D42               	goto	i1l1323
  3312  0555                     i1l1333:	
  3313                           
  3314                           ;virtualwire.c: 254: return 0;
  3315  0555  3000               	movlw	0
  3316  0556  0008               	return
  3317  0557                     __end_of_vw_symbol_6to4:	
  3318  007E                     btemp	set	126	;btemp
  3319  007E                     wtemp0	set	126


Data Sizes:
    Strings     47
    Constant    42
    Data        0
    BSS         45
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      14
    BANK0            80     52      72
    BANK1            80     31      55
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 21
		 -> STR_4(CODE[21]), 

    sprintf@cp	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_5(CODE[7]), text(BANK1[8]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 30
		 -> main@buffer(BANK1[30]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    vw_recv@buf	PTR unsigned char  size(1) Largest target is 8
		 -> text(BANK1[8]), 

    vw_recv@len	PTR unsigned char  size(1) Largest target is 1
		 -> main@len(BANK1[1]), 

    vw_crc@ptr	PTR unsigned char  size(1) Largest target is 16
		 -> vw_tx_buf(BANK1[16]), 

    _calc_timer0_prescaler@prescaler_bits	PTR unsigned char  size(1) Largest target is 1
		 -> vw_setup@prescaler_bits(BANK0[1]), 

    _calc_timer0_prescaler@k_tmr0	PTR unsigned char  size(1) Largest target is 1
		 -> vw_tmr0_value(BANK0[1]), 

    _calc_timer0_prescaler@prescaler_value	PTR unsigned int  size(1) Largest target is 2
		 -> vw_setup@prescaler_value(BANK0[2]), 

    sp__memcpy	PTR unsigned char  size(1) Largest target is 8
		 -> text(BANK1[8]), 

    memcpy@src	PTR unsigned char  size(1) Largest target is 16
		 -> vw_tx_buf(BANK1[16]), 

    memcpy@dest	PTR unsigned char  size(1) Largest target is 8
		 -> text(BANK1[8]), 

    UART_send_string@str	PTR unsigned char  size(2) Largest target is 30
		 -> main@buffer(BANK1[30]), STR_3(CODE[19]), STR_2(CODE[19]), STR_1(CODE[19]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _global_isr in COMMON

    _global_isr->_vw_isr_tmr0
    _vw_isr_tmr0->_vw_pll
    _vw_pll->_vw_symbol_6to4

Critical Paths under _main in BANK0

    _main->_vw_setup
    _vw_setup->__calc_timer0_prescaler
    __calc_timer0_prescaler->___aldiv
    ___aldiv->___wmul
    _vw_recv->_vw_crc
    _vw_crc->__crc_ccitt_update
    _UART_send_string->_UART_send_byte

Critical Paths under _global_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _global_isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _global_isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _global_isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                36    36      0    3048
                                             49 BANK0      3     3      0
                                              0 BANK1     31    31      0
                          _UART_Init
                     _UART_send_byte
                   _UART_send_string
                            _sprintf
                    _vw_have_message
                            _vw_recv
                        _vw_rx_start
                           _vw_setup
 ---------------------------------------------------------------------------------
 (1) _vw_setup                                             8     6      2    1251
                                             41 BANK0      8     6      2
             __calc_timer0_prescaler
 ---------------------------------------------------------------------------------
 (2) __calc_timer0_prescaler                              16    11      5    1083
                                             25 BANK0     16    11      5
                            ___aldiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     198
                                              4 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___aldiv                                             15     7      8     406
                                             10 BANK0     15     7      8
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _vw_rx_start                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _vw_recv                                              6     5      1    1085
                                             26 BANK0      6     5      1
                             _memcpy
                             _vw_crc
 ---------------------------------------------------------------------------------
 (2) _vw_crc                                               6     4      2     623
                                             20 BANK0      6     4      2
                  __crc_ccitt_update
 ---------------------------------------------------------------------------------
 (3) __crc_ccitt_update                                   16    13      3     452
                                              4 BANK0     16    13      3
 ---------------------------------------------------------------------------------
 (2) _memcpy                                               7     4      3     249
                                              4 BANK0      7     4      3
 ---------------------------------------------------------------------------------
 (1) _vw_have_message                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             18    16      2     332
                                              4 BANK0      9     7      2
 ---------------------------------------------------------------------------------
 (1) _UART_send_string                                     2     0      2     279
                                              5 BANK0      2     0      2
                     _UART_send_byte
 ---------------------------------------------------------------------------------
 (2) _UART_send_byte                                       1     1      0      22
                                              4 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _UART_Init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _global_isr                                           4     4      0     181
                                              0 BANK0      4     4      0
                        _vw_isr_tmr0
 ---------------------------------------------------------------------------------
 (5) _vw_isr_tmr0                                          2     2      0     181
                                             11 COMMON     2     2      0
                             _vw_pll
                         _vw_tx_stop
 ---------------------------------------------------------------------------------
 (6) _vw_tx_stop                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _vw_pll                                               8     8      0     181
                                              3 COMMON     8     8      0
                     _vw_symbol_6to4
 ---------------------------------------------------------------------------------
 (8) _vw_symbol_6to4                                       3     3      0     112
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _UART_Init
   _UART_send_byte
   _UART_send_string
     _UART_send_byte
   _sprintf
   _vw_have_message
   _vw_recv
     _memcpy
     _vw_crc
       __crc_ccitt_update
   _vw_rx_start
   _vw_setup
     __calc_timer0_prescaler
       ___aldiv
         ___wmul (ARG)
       ___wmul

 _global_isr (ROOT)
   _vw_isr_tmr0
     _vw_pll
       _vw_symbol_6to4
     _vw_tx_stop

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      D       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      8D       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     34      48       5       90.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50     1F      37       7       68.8%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      8D      12        0.0%


Microchip Technology PIC Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Fri Apr 20 10:30:39 2018

                                              pc 0002                                      __CFG_CP$OFF 0000  
                        ?__calc_timer0_prescaler 0039                                               l56 0580  
                                             fsr 0004                              ___wmul@multiplicand 0026  
                                            l450 020C                                              l395 04E8  
                                            _GIE 005F                                              _RB3 0033  
                                            _RB4 0034                                     __CFG_CPD$OFF 0000  
                                            _RX9 00C6                                              u985 03EB  
                                            _TX9 04C6                                              u995 0404  
                                            fsr0 0004                                              indf 0000  
                      __end_of__crc_ccitt_update 042C                                     __CFG_IESO$ON 0000  
                                   __CFG_FOSC$HS 0000                                     __CFG_LVP$OFF 0000  
                                           l1421 0304                                             l1361 021D  
                                           l1435 04B9                                             l1371 023D  
                                           l1339 04E0                                             l1437 04D7  
                                           l1621 0489                                             l1527 04FF  
                                           l1615 0477                                             l1383 0272  
                                           l1369 022D                                             l1387 0280  
                                           l1379 0265                                             l1653 0343  
                                           l1661 0374                                             l1637 032E  
                                           l1709 0087                                             l1639 0330  
                                           l1399 0521                                             l1657 0363  
                                           l1659 0310                                             l1595 045D  
                                           STR_1 03C8                                             STR_2 03C8  
                                           STR_3 03C8                                             STR_4 03B3  
                                           STR_5 03DB                                             _BRGH 04C2  
                                           _CREN 00C4                                             _T0CS 040D  
                                           u1105 0231                                             u1125 023F  
                                           u1045 04E9                                             u1135 0254  
                                           u1055 04F0                                             u1145 0266  
                                           u1600 046D                                             u1620 0590  
                                           u1660 04B0                                             u1817 004E  
                                           u1827 006D                                             _PEIE 005E  
                                           _RCIF 0065                                             i1l83 0570  
                                           _TMR0 0001                                             _SPEN 00C7  
                                           _TRMT 04C1                                             _TXEN 04C5  
                                           _SYNC 04C4                                     __CFG_WRT$OFF 0000  
                                  __CFG_FCMEN$ON 0000                                             _main 0023  
                                           _text 00CF                                             btemp 007E  
                                  __CFG_BOREN$ON 0000                                             start 0011  
                 __end_of__calc_timer0_prescaler 0309                        __size_of_UART_send_string 001F  
                                    _vw_isr_tmr0 0160                                  __end_of___aldiv 0289  
                                          ?_main 0070                                    __CFG_WDTE$OFF 0000  
                                          _RCREG 001A                                            _SPBRG 0099  
                                          _PORTB 0006                                            _TRISB 0086  
                         __crc_ccitt_update@data 0026                                            _TXREG 0019  
                                 __CFG_CCPMX$RB0 0000                                      _vw_rx_count 0058  
                             __size_of_UART_Init 0014                                      _vw_rx_start 059A  
                        __end_of_vw_have_message 0592                                      _vw_tx_index 0064  
                                          pclath 000A                                            status 0003  
                                          wtemp0 007E                                  __end_of_sprintf 0379  
                                __end_of_vw_recv 04B2                                  __end_of_symbols 03AB  
                                 __CFG_MCLRE$OFF 0000                                  __initialization 0013  
                                   __end_of_main 00C2                                 _vw_rx_integrator 005C  
                __calc_timer0_prescaler@aux_tmr0 0046                                           ??_main 0051  
                         vw_setup@prescaler_bits 0050                       __size_of__crc_ccitt_update 004A  
                                         i1l1323 0542                                           i1l1333 0555  
                                         i1l1329 054D                                           i1l1451 00D5  
                                         i1l1445 00CB                                           i1l1541 017E  
                                         i1l1457 00E2                                           i1l1561 01BA  
                                         i1l1483 0138                                           i1l1459 00E6  
                                         i1l1539 017A                                           i1l1557 01B3  
                                         i1l1549 01A6                                           i1l1487 013A  
                                         i1l1567 01C8                                           i1l1497 0151  
                                         i1l1569 01E0                                           i1l1577 01ED  
                                         i1l1499 0153                                           u132_25 0108  
                                         u133_25 011C                                           u152_24 01D1  
                                         u128_25 00EB                                           u152_25 01CF  
                                         u153_20 01DD                                           u146_24 0198  
                                         u146_25 0196                                           u147_20 01A3  
                                         _TMR0IE 005D                                           _TMR0IF 005A  
                                         _TRISB2 0432                                           _TRISB3 0433  
                                         _TRISB4 0434                                           _TRISB5 0435  
                                   _vw_rx_active 0056                                   __CFG_PWRTE$OFF 0000  
                                   _vw_rx_sample 0060                                     _vw_tx_header 0063  
                              __end_of_UART_Init 056B                                        ??___aldiv 0032  
                                         ___wmul 04DC                                     _vw_tx_sample 0066  
                               _vw_tx_buf_header 03AB                                           _memcpy 051E  
                                         _vw_crc 04B2                                           _vw_pll 00C2  
                               ??_vw_symbol_6to4 0070                                           saved_w 007E  
                               ?_vw_have_message 0070                                        ??_sprintf 0026  
                                      ??_vw_recv 003B                                _vw_rx_last_sample 005E  
                               __end_of_vw_setup 046F                               _vw_rx_enabled_last 005B  
                        __end_of__initialization 0020                                   __pcstackCOMMON 0070  
                               _UART_send_string 04FF                                       __pbssBANK0 0054  
                                     __pbssBANK1 00BF                          vw_setup@prescaler_value 004E  
                                     __pmaintext 0023                                    _vw_tmr0_value 0067  
                                        ?___wmul 0024                                       __pintentry 0004  
                                        ?_memcpy 0024                                     ?_vw_isr_tmr0 0070  
                                        ?_vw_crc 0034                                          ?_vw_pll 0070  
                                   ?_vw_rx_start 0070                          __size_of_UART_send_byte 000C  
                                     __stringtab 0379                                       _global_isr 056B  
                                  _vw_rx_enabled 005A                     __calc_timer0_prescaler@brate 0039  
                                  _vw_tx_enabled 0062                                          ___aldiv 01FA  
                                __size_of___wmul 0023                                  __size_of_memcpy 001E  
                                        __ptext1 042C                                          __ptext2 0289  
                                        __ptext3 04DC                                          __ptext4 01FA  
                                        __ptext5 059A                                          __ptext6 046F  
                                        __ptext7 04B2                                          __ptext8 03E2  
                                        __ptext9 051E                                        ?_vw_setup 0049  
                                __size_of_vw_crc 002A                                  __size_of_vw_pll 009E  
                               ___aldiv@dividend 002E                                          main@len 00BE  
                                        _sprintf 0309                                          clrloop0 0593  
                       __end_of_vw_tx_buf_header 03B3                                          _vw_recv 046F  
                                        _symbols 039B                             end_of_initialization 0020  
                                   vw_recv@rxlen 003F                                          memcpy@n 0025  
                                vw_symbol_6to4@i 0072                                        _RCSTAbits 0018  
                               ___aldiv@quotient 0035                                        _UART_Init 0557  
                                     ??_vw_setup 004B                             vw_symbol_6to4@symbol 0071  
                       __end_of_UART_send_string 051E                                      ?_global_isr 0070  
                                     main@buffer 00A0                         ??__calc_timer0_prescaler 003E  
                                _vw_rx_bit_count 0057                                       _vw_pll$233 0078  
                                 __end_of___wmul 04FF                            __crc_ccitt_update@crc 0024  
                                     _vw_rx_bits 0054                                       ?_UART_Init 0070  
                                     _vw_rx_done 0059                                       _vw_tx_stop 05A1  
                                 __end_of_memcpy 053C                             __size_of_vw_isr_tmr0 009A  
                                vw_pll@this_byte 007A                                   __end_of_vw_crc 04DC  
                                 __end_of_vw_pll 0160  __end_of__calc_timer0_prescaler@prescaler_factor 039B  
        __calc_timer0_prescaler@prescaler_factor 0389                              start_initialization 0013  
                                 _UART_send_byte 057D                             __size_of_vw_rx_start 0007  
                       __size_of_vw_have_message 0009            __calc_timer0_prescaler@prescaler_bits 003C  
                                     memcpy@dest 002A                                         ??___wmul 0028  
                                       ??_memcpy 0027                              __size_of_global_isr 0012  
                                       ??_vw_crc 0036                                         ??_vw_pll 0073  
                         __end_of_UART_send_byte 0589                                      __pbssCOMMON 007D  
                                      ___latbits 0001                                    __pcstackBANK0 0020  
                                  __pcstackBANK1 00A0                          __size_of_vw_symbol_6to4 001B  
                                    sprintf@flag 0027                  __size_of__calc_timer0_prescaler 0080  
                                    vw_crc@count 0034                                         ?___aldiv 002A  
                                    ??_UART_Init 0024                                        __pstrings 0379  
                                    ?_vw_tx_stop 0070                              UART_send_string@str 0025  
                                ?_UART_send_byte 0070                                __size_of_vw_setup 0043  
                                       ?_sprintf 0024                                         ?_vw_recv 003A  
                                ___aldiv@divisor 002A                                interrupt_function 0004  
                                ___aldiv@counter 0033                                   ___wmul@product 0028  
                                      clear_ram0 0592                                ??_vw_have_message 0024  
                                    __stringbase 0388                                ___wmul@multiplier 0024  
                         __calc_timer0_prescaler 0289                        UART_send_byte@single_byte 0024  
                                      _vw_rx_len 007D                                        _vw_tx_bit 0061  
                                      _vw_tx_buf 00BF                                        _vw_tx_len 0065  
                              ?_UART_send_string 0025                                     ??_global_isr 0020  
         __calc_timer0_prescaler@prescaler_value 003B                    __calc_timer0_prescaler@k_tmr0 003D  
                             ??_UART_send_string 0027                                   _vw_rx_inverted 005D  
                            __size_of_vw_tx_stop 0005                    __calc_timer0_prescaler@pindex 0048  
                                 _vw_rx_pll_ramp 005F                                        memcpy@src 0024  
                               __size_of___aldiv 008F                               __end_of__stringtab 0389  
                             __end_of_global_isr 057D                                         __ptext10 0589  
                                       __ptext11 0309                                         __ptext12 04FF  
                                       __ptext13 057D                                         __ptext14 0557  
                                       __ptext15 056B                                         __ptext16 0160  
                                       __ptext17 05A1                                         __ptext18 00C2  
                                       __ptext19 053C                                   _vw_symbol_6to4 053C  
                               __size_of_sprintf 0070                                 __size_of_vw_recv 0043  
                                  __size_of_main 009F                                       vw_recv@buf 003E  
                                     vw_recv@len 003A                                    ??_vw_isr_tmr0 007B  
                                       _vw_setup 042C                                    ??_vw_rx_start 0024  
                         __end_of_vw_symbol_6to4 0557                                         intlevel1 0000  
                                      sprintf@ap 0028                                        sprintf@cp 002A  
                                      sprintf@sp 002C                                        vw_crc@crc 0038  
                                      vw_crc@ptr 0037                                        stringcode 0383  
                               ??_UART_send_byte 0024                                     ??_vw_tx_stop 0070  
                                     _OPTION_REG 0081                                         sprintf@c 0029  
                                       sprintf@f 0024                              __end_of_vw_isr_tmr0 01FA  
                                       stringdir 0383                                         stringtab 0379  
                                   ___aldiv@sign 0034                                  ?_vw_symbol_6to4 0070  
                              __crc_ccitt_update 03E2                               ?__crc_ccitt_update 0024  
                            __end_of_vw_rx_start 05A1                                  _vw_have_message 0589  
                             __end_of_vw_tx_stop 05A6                              ??__crc_ccitt_update 0027  
                                  vw_setup@brate 0049  
