Version 3.2 HI-TECH Software Intermediate Code
"2407 C:\Program Files (x86)\Microchip\xc8\v1.40\include\pic16f88.h
[v _TRISB3 `Vb ~T0 @X0 0 e@1075 ]
"2409
[v _TRISB4 `Vb ~T0 @X0 0 e@1076 ]
"2271
[v _RB4 `Vb ~T0 @X0 0 e@52 ]
"986
[v _OPTION_REG `Vuc ~T0 @X0 0 e@129 ]
"2341
[v _T0CS `Vb ~T0 @X0 0 e@1037 ]
"55
[v _TMR0 `Vuc ~T0 @X0 0 e@1 ]
"2361
[v _TMR0IF `Vb ~T0 @X0 0 e@90 ]
"2359
[v _TMR0IE `Vb ~T0 @X0 0 e@93 ]
"2193
[v _GIE `Vb ~T0 @X0 0 e@95 ]
"2237
[v _PEIE `Vb ~T0 @X0 0 e@94 ]
"2269
[v _RB3 `Vb ~T0 @X0 0 e@51 ]
[; ;htc.h: 26: extern const char __xc8_OPTIM_SPEED;
[; ;htc.h: 28: extern double __fpnormalize(double);
[; ;xc8debug.h: 14: extern void __builtin_software_breakpoint(void);
[; ;pic16f88.h: 49: extern volatile unsigned char INDF @ 0x000;
"51 C:\Program Files (x86)\Microchip\xc8\v1.40\include\pic16f88.h
[; ;pic16f88.h: 51: asm("INDF equ 00h");
[; <" INDF equ 00h ;# ">
[; ;pic16f88.h: 55: extern volatile unsigned char TMR0 @ 0x001;
"57
[; ;pic16f88.h: 57: asm("TMR0 equ 01h");
[; <" TMR0 equ 01h ;# ">
[; ;pic16f88.h: 61: extern volatile unsigned char PCL @ 0x002;
"63
[; ;pic16f88.h: 63: asm("PCL equ 02h");
[; <" PCL equ 02h ;# ">
[; ;pic16f88.h: 67: extern volatile unsigned char STATUS @ 0x003;
"69
[; ;pic16f88.h: 69: asm("STATUS equ 03h");
[; <" STATUS equ 03h ;# ">
[; ;pic16f88.h: 72: typedef union {
[; ;pic16f88.h: 73: struct {
[; ;pic16f88.h: 74: unsigned C :1;
[; ;pic16f88.h: 75: unsigned DC :1;
[; ;pic16f88.h: 76: unsigned Z :1;
[; ;pic16f88.h: 77: unsigned nPD :1;
[; ;pic16f88.h: 78: unsigned nTO :1;
[; ;pic16f88.h: 79: unsigned RP :2;
[; ;pic16f88.h: 80: unsigned IRP :1;
[; ;pic16f88.h: 81: };
[; ;pic16f88.h: 82: struct {
[; ;pic16f88.h: 83: unsigned :5;
[; ;pic16f88.h: 84: unsigned RP0 :1;
[; ;pic16f88.h: 85: unsigned RP1 :1;
[; ;pic16f88.h: 86: };
[; ;pic16f88.h: 87: struct {
[; ;pic16f88.h: 88: unsigned CARRY :1;
[; ;pic16f88.h: 89: unsigned :1;
[; ;pic16f88.h: 90: unsigned ZERO :1;
[; ;pic16f88.h: 91: };
[; ;pic16f88.h: 92: } STATUSbits_t;
[; ;pic16f88.h: 93: extern volatile STATUSbits_t STATUSbits @ 0x003;
[; ;pic16f88.h: 152: extern volatile unsigned char FSR @ 0x004;
"154
[; ;pic16f88.h: 154: asm("FSR equ 04h");
[; <" FSR equ 04h ;# ">
[; ;pic16f88.h: 158: extern volatile unsigned char PORTA @ 0x005;
"160
[; ;pic16f88.h: 160: asm("PORTA equ 05h");
[; <" PORTA equ 05h ;# ">
[; ;pic16f88.h: 163: typedef union {
[; ;pic16f88.h: 164: struct {
[; ;pic16f88.h: 165: unsigned RA0 :1;
[; ;pic16f88.h: 166: unsigned RA1 :1;
[; ;pic16f88.h: 167: unsigned RA2 :1;
[; ;pic16f88.h: 168: unsigned RA3 :1;
[; ;pic16f88.h: 169: unsigned RA4 :1;
[; ;pic16f88.h: 170: unsigned RA5 :1;
[; ;pic16f88.h: 171: unsigned RA6 :1;
[; ;pic16f88.h: 172: unsigned RA7 :1;
[; ;pic16f88.h: 173: };
[; ;pic16f88.h: 174: } PORTAbits_t;
[; ;pic16f88.h: 175: extern volatile PORTAbits_t PORTAbits @ 0x005;
[; ;pic16f88.h: 219: extern volatile unsigned char PORTB @ 0x006;
"221
[; ;pic16f88.h: 221: asm("PORTB equ 06h");
[; <" PORTB equ 06h ;# ">
[; ;pic16f88.h: 224: typedef union {
[; ;pic16f88.h: 225: struct {
[; ;pic16f88.h: 226: unsigned RB0 :1;
[; ;pic16f88.h: 227: unsigned RB1 :1;
[; ;pic16f88.h: 228: unsigned RB2 :1;
[; ;pic16f88.h: 229: unsigned RB3 :1;
[; ;pic16f88.h: 230: unsigned RB4 :1;
[; ;pic16f88.h: 231: unsigned RB5 :1;
[; ;pic16f88.h: 232: unsigned RB6 :1;
[; ;pic16f88.h: 233: unsigned RB7 :1;
[; ;pic16f88.h: 234: };
[; ;pic16f88.h: 235: } PORTBbits_t;
[; ;pic16f88.h: 236: extern volatile PORTBbits_t PORTBbits @ 0x006;
[; ;pic16f88.h: 280: extern volatile unsigned char PCLATH @ 0x00A;
"282
[; ;pic16f88.h: 282: asm("PCLATH equ 0Ah");
[; <" PCLATH equ 0Ah ;# ">
[; ;pic16f88.h: 285: typedef union {
[; ;pic16f88.h: 286: struct {
[; ;pic16f88.h: 287: unsigned PCLATH :5;
[; ;pic16f88.h: 288: };
[; ;pic16f88.h: 289: } PCLATHbits_t;
[; ;pic16f88.h: 290: extern volatile PCLATHbits_t PCLATHbits @ 0x00A;
[; ;pic16f88.h: 299: extern volatile unsigned char INTCON @ 0x00B;
"301
[; ;pic16f88.h: 301: asm("INTCON equ 0Bh");
[; <" INTCON equ 0Bh ;# ">
[; ;pic16f88.h: 304: typedef union {
[; ;pic16f88.h: 305: struct {
[; ;pic16f88.h: 306: unsigned RBIF :1;
[; ;pic16f88.h: 307: unsigned INT0IF :1;
[; ;pic16f88.h: 308: unsigned TMR0IF :1;
[; ;pic16f88.h: 309: unsigned RBIE :1;
[; ;pic16f88.h: 310: unsigned INT0IE :1;
[; ;pic16f88.h: 311: unsigned TMR0IE :1;
[; ;pic16f88.h: 312: unsigned PEIE :1;
[; ;pic16f88.h: 313: unsigned GIE :1;
[; ;pic16f88.h: 314: };
[; ;pic16f88.h: 315: struct {
[; ;pic16f88.h: 316: unsigned :1;
[; ;pic16f88.h: 317: unsigned INTF :1;
[; ;pic16f88.h: 318: unsigned :2;
[; ;pic16f88.h: 319: unsigned INTE :1;
[; ;pic16f88.h: 320: };
[; ;pic16f88.h: 321: } INTCONbits_t;
[; ;pic16f88.h: 322: extern volatile INTCONbits_t INTCONbits @ 0x00B;
[; ;pic16f88.h: 376: extern volatile unsigned char PIR1 @ 0x00C;
"378
[; ;pic16f88.h: 378: asm("PIR1 equ 0Ch");
[; <" PIR1 equ 0Ch ;# ">
[; ;pic16f88.h: 381: typedef union {
[; ;pic16f88.h: 382: struct {
[; ;pic16f88.h: 383: unsigned TMR1IF :1;
[; ;pic16f88.h: 384: unsigned TMR2IF :1;
[; ;pic16f88.h: 385: unsigned CCP1IF :1;
[; ;pic16f88.h: 386: unsigned SSPIF :1;
[; ;pic16f88.h: 387: unsigned TXIF :1;
[; ;pic16f88.h: 388: unsigned RCIF :1;
[; ;pic16f88.h: 389: unsigned ADIF :1;
[; ;pic16f88.h: 390: };
[; ;pic16f88.h: 391: } PIR1bits_t;
[; ;pic16f88.h: 392: extern volatile PIR1bits_t PIR1bits @ 0x00C;
[; ;pic16f88.h: 431: extern volatile unsigned char PIR2 @ 0x00D;
"433
[; ;pic16f88.h: 433: asm("PIR2 equ 0Dh");
[; <" PIR2 equ 0Dh ;# ">
[; ;pic16f88.h: 436: typedef union {
[; ;pic16f88.h: 437: struct {
[; ;pic16f88.h: 438: unsigned :4;
[; ;pic16f88.h: 439: unsigned EEIF :1;
[; ;pic16f88.h: 440: unsigned :1;
[; ;pic16f88.h: 441: unsigned CMIF :1;
[; ;pic16f88.h: 442: unsigned OSFIF :1;
[; ;pic16f88.h: 443: };
[; ;pic16f88.h: 444: } PIR2bits_t;
[; ;pic16f88.h: 445: extern volatile PIR2bits_t PIR2bits @ 0x00D;
[; ;pic16f88.h: 464: extern volatile unsigned short TMR1 @ 0x00E;
"466
[; ;pic16f88.h: 466: asm("TMR1 equ 0Eh");
[; <" TMR1 equ 0Eh ;# ">
[; ;pic16f88.h: 470: extern volatile unsigned char TMR1L @ 0x00E;
"472
[; ;pic16f88.h: 472: asm("TMR1L equ 0Eh");
[; <" TMR1L equ 0Eh ;# ">
[; ;pic16f88.h: 476: extern volatile unsigned char TMR1H @ 0x00F;
"478
[; ;pic16f88.h: 478: asm("TMR1H equ 0Fh");
[; <" TMR1H equ 0Fh ;# ">
[; ;pic16f88.h: 482: extern volatile unsigned char T1CON @ 0x010;
"484
[; ;pic16f88.h: 484: asm("T1CON equ 010h");
[; <" T1CON equ 010h ;# ">
[; ;pic16f88.h: 487: typedef union {
[; ;pic16f88.h: 488: struct {
[; ;pic16f88.h: 489: unsigned TMR1ON :1;
[; ;pic16f88.h: 490: unsigned TMR1CS :1;
[; ;pic16f88.h: 491: unsigned nT1SYNC :1;
[; ;pic16f88.h: 492: unsigned T1OSCEN :1;
[; ;pic16f88.h: 493: unsigned T1CKPS :2;
[; ;pic16f88.h: 494: unsigned T1RUN :1;
[; ;pic16f88.h: 495: };
[; ;pic16f88.h: 496: struct {
[; ;pic16f88.h: 497: unsigned :2;
[; ;pic16f88.h: 498: unsigned T1INSYNC :1;
[; ;pic16f88.h: 499: unsigned :1;
[; ;pic16f88.h: 500: unsigned T1CKPS0 :1;
[; ;pic16f88.h: 501: unsigned T1CKPS1 :1;
[; ;pic16f88.h: 502: };
[; ;pic16f88.h: 503: } T1CONbits_t;
[; ;pic16f88.h: 504: extern volatile T1CONbits_t T1CONbits @ 0x010;
[; ;pic16f88.h: 553: extern volatile unsigned char TMR2 @ 0x011;
"555
[; ;pic16f88.h: 555: asm("TMR2 equ 011h");
[; <" TMR2 equ 011h ;# ">
[; ;pic16f88.h: 559: extern volatile unsigned char T2CON @ 0x012;
"561
[; ;pic16f88.h: 561: asm("T2CON equ 012h");
[; <" T2CON equ 012h ;# ">
[; ;pic16f88.h: 564: typedef union {
[; ;pic16f88.h: 565: struct {
[; ;pic16f88.h: 566: unsigned T2CKPS :2;
[; ;pic16f88.h: 567: unsigned TMR2ON :1;
[; ;pic16f88.h: 568: unsigned TOUTPS :4;
[; ;pic16f88.h: 569: };
[; ;pic16f88.h: 570: struct {
[; ;pic16f88.h: 571: unsigned T2CKPS0 :1;
[; ;pic16f88.h: 572: unsigned T2CKPS1 :1;
[; ;pic16f88.h: 573: unsigned :1;
[; ;pic16f88.h: 574: unsigned TOUTPS0 :1;
[; ;pic16f88.h: 575: unsigned TOUTPS1 :1;
[; ;pic16f88.h: 576: unsigned TOUTPS2 :1;
[; ;pic16f88.h: 577: unsigned TOUTPS3 :1;
[; ;pic16f88.h: 578: };
[; ;pic16f88.h: 579: } T2CONbits_t;
[; ;pic16f88.h: 580: extern volatile T2CONbits_t T2CONbits @ 0x012;
[; ;pic16f88.h: 629: extern volatile unsigned char SSPBUF @ 0x013;
"631
[; ;pic16f88.h: 631: asm("SSPBUF equ 013h");
[; <" SSPBUF equ 013h ;# ">
[; ;pic16f88.h: 635: extern volatile unsigned char SSPCON @ 0x014;
"637
[; ;pic16f88.h: 637: asm("SSPCON equ 014h");
[; <" SSPCON equ 014h ;# ">
[; ;pic16f88.h: 640: typedef union {
[; ;pic16f88.h: 641: struct {
[; ;pic16f88.h: 642: unsigned SSPM :4;
[; ;pic16f88.h: 643: unsigned CKP :1;
[; ;pic16f88.h: 644: unsigned SSPEN :1;
[; ;pic16f88.h: 645: unsigned SSPOV :1;
[; ;pic16f88.h: 646: unsigned WCOL :1;
[; ;pic16f88.h: 647: };
[; ;pic16f88.h: 648: struct {
[; ;pic16f88.h: 649: unsigned SSPM0 :1;
[; ;pic16f88.h: 650: unsigned SSPM1 :1;
[; ;pic16f88.h: 651: unsigned SSPM2 :1;
[; ;pic16f88.h: 652: unsigned SSPM3 :1;
[; ;pic16f88.h: 653: };
[; ;pic16f88.h: 654: } SSPCONbits_t;
[; ;pic16f88.h: 655: extern volatile SSPCONbits_t SSPCONbits @ 0x014;
[; ;pic16f88.h: 704: extern volatile unsigned short CCPR1 @ 0x015;
"706
[; ;pic16f88.h: 706: asm("CCPR1 equ 015h");
[; <" CCPR1 equ 015h ;# ">
[; ;pic16f88.h: 710: extern volatile unsigned char CCPR1L @ 0x015;
"712
[; ;pic16f88.h: 712: asm("CCPR1L equ 015h");
[; <" CCPR1L equ 015h ;# ">
[; ;pic16f88.h: 716: extern volatile unsigned char CCPR1H @ 0x016;
"718
[; ;pic16f88.h: 718: asm("CCPR1H equ 016h");
[; <" CCPR1H equ 016h ;# ">
[; ;pic16f88.h: 722: extern volatile unsigned char CCP1CON @ 0x017;
"724
[; ;pic16f88.h: 724: asm("CCP1CON equ 017h");
[; <" CCP1CON equ 017h ;# ">
[; ;pic16f88.h: 727: typedef union {
[; ;pic16f88.h: 728: struct {
[; ;pic16f88.h: 729: unsigned CCP1M :4;
[; ;pic16f88.h: 730: unsigned CCP1Y :1;
[; ;pic16f88.h: 731: unsigned CCP1X :1;
[; ;pic16f88.h: 732: };
[; ;pic16f88.h: 733: struct {
[; ;pic16f88.h: 734: unsigned CCP1M0 :1;
[; ;pic16f88.h: 735: unsigned CCP1M1 :1;
[; ;pic16f88.h: 736: unsigned CCP1M2 :1;
[; ;pic16f88.h: 737: unsigned CCP1M3 :1;
[; ;pic16f88.h: 738: };
[; ;pic16f88.h: 739: } CCP1CONbits_t;
[; ;pic16f88.h: 740: extern volatile CCP1CONbits_t CCP1CONbits @ 0x017;
[; ;pic16f88.h: 779: extern volatile unsigned char RCSTA @ 0x018;
"781
[; ;pic16f88.h: 781: asm("RCSTA equ 018h");
[; <" RCSTA equ 018h ;# ">
[; ;pic16f88.h: 784: typedef union {
[; ;pic16f88.h: 785: struct {
[; ;pic16f88.h: 786: unsigned RX9D :1;
[; ;pic16f88.h: 787: unsigned OERR :1;
[; ;pic16f88.h: 788: unsigned FERR :1;
[; ;pic16f88.h: 789: unsigned ADDEN :1;
[; ;pic16f88.h: 790: unsigned CREN :1;
[; ;pic16f88.h: 791: unsigned SREN :1;
[; ;pic16f88.h: 792: unsigned RX9 :1;
[; ;pic16f88.h: 793: unsigned SPEN :1;
[; ;pic16f88.h: 794: };
[; ;pic16f88.h: 795: struct {
[; ;pic16f88.h: 796: unsigned RCD8 :1;
[; ;pic16f88.h: 797: unsigned :5;
[; ;pic16f88.h: 798: unsigned RC9 :1;
[; ;pic16f88.h: 799: };
[; ;pic16f88.h: 800: struct {
[; ;pic16f88.h: 801: unsigned :6;
[; ;pic16f88.h: 802: unsigned nRC8 :1;
[; ;pic16f88.h: 803: };
[; ;pic16f88.h: 804: struct {
[; ;pic16f88.h: 805: unsigned :6;
[; ;pic16f88.h: 806: unsigned RC8_9 :1;
[; ;pic16f88.h: 807: };
[; ;pic16f88.h: 808: } RCSTAbits_t;
[; ;pic16f88.h: 809: extern volatile RCSTAbits_t RCSTAbits @ 0x018;
[; ;pic16f88.h: 873: extern volatile unsigned char TXREG @ 0x019;
"875
[; ;pic16f88.h: 875: asm("TXREG equ 019h");
[; <" TXREG equ 019h ;# ">
[; ;pic16f88.h: 879: extern volatile unsigned char RCREG @ 0x01A;
"881
[; ;pic16f88.h: 881: asm("RCREG equ 01Ah");
[; <" RCREG equ 01Ah ;# ">
[; ;pic16f88.h: 885: extern volatile unsigned char ADRESH @ 0x01E;
"887
[; ;pic16f88.h: 887: asm("ADRESH equ 01Eh");
[; <" ADRESH equ 01Eh ;# ">
[; ;pic16f88.h: 891: extern volatile unsigned char ADCON0 @ 0x01F;
"893
[; ;pic16f88.h: 893: asm("ADCON0 equ 01Fh");
[; <" ADCON0 equ 01Fh ;# ">
[; ;pic16f88.h: 896: typedef union {
[; ;pic16f88.h: 897: struct {
[; ;pic16f88.h: 898: unsigned ADON :1;
[; ;pic16f88.h: 899: unsigned :1;
[; ;pic16f88.h: 900: unsigned GO_nDONE :1;
[; ;pic16f88.h: 901: unsigned CHS :3;
[; ;pic16f88.h: 902: unsigned ADCS :2;
[; ;pic16f88.h: 903: };
[; ;pic16f88.h: 904: struct {
[; ;pic16f88.h: 905: unsigned :2;
[; ;pic16f88.h: 906: unsigned GO :1;
[; ;pic16f88.h: 907: unsigned CHS0 :1;
[; ;pic16f88.h: 908: unsigned CHS1 :1;
[; ;pic16f88.h: 909: unsigned CHS2 :1;
[; ;pic16f88.h: 910: unsigned ADCS0 :1;
[; ;pic16f88.h: 911: unsigned ADCS1 :1;
[; ;pic16f88.h: 912: };
[; ;pic16f88.h: 913: struct {
[; ;pic16f88.h: 914: unsigned :2;
[; ;pic16f88.h: 915: unsigned nDONE :1;
[; ;pic16f88.h: 916: };
[; ;pic16f88.h: 917: struct {
[; ;pic16f88.h: 918: unsigned :2;
[; ;pic16f88.h: 919: unsigned GO_DONE :1;
[; ;pic16f88.h: 920: };
[; ;pic16f88.h: 921: } ADCON0bits_t;
[; ;pic16f88.h: 922: extern volatile ADCON0bits_t ADCON0bits @ 0x01F;
[; ;pic16f88.h: 986: extern volatile unsigned char OPTION_REG @ 0x081;
"988
[; ;pic16f88.h: 988: asm("OPTION_REG equ 081h");
[; <" OPTION_REG equ 081h ;# ">
[; ;pic16f88.h: 991: typedef union {
[; ;pic16f88.h: 992: struct {
[; ;pic16f88.h: 993: unsigned PS :3;
[; ;pic16f88.h: 994: unsigned PSA :1;
[; ;pic16f88.h: 995: unsigned T0SE :1;
[; ;pic16f88.h: 996: unsigned T0CS :1;
[; ;pic16f88.h: 997: unsigned INTEDG :1;
[; ;pic16f88.h: 998: unsigned nRBPU :1;
[; ;pic16f88.h: 999: };
[; ;pic16f88.h: 1000: struct {
[; ;pic16f88.h: 1001: unsigned PS0 :1;
[; ;pic16f88.h: 1002: unsigned PS1 :1;
[; ;pic16f88.h: 1003: unsigned PS2 :1;
[; ;pic16f88.h: 1004: };
[; ;pic16f88.h: 1005: } OPTION_REGbits_t;
[; ;pic16f88.h: 1006: extern volatile OPTION_REGbits_t OPTION_REGbits @ 0x081;
[; ;pic16f88.h: 1055: extern volatile unsigned char TRISA @ 0x085;
"1057
[; ;pic16f88.h: 1057: asm("TRISA equ 085h");
[; <" TRISA equ 085h ;# ">
[; ;pic16f88.h: 1060: typedef union {
[; ;pic16f88.h: 1061: struct {
[; ;pic16f88.h: 1062: unsigned TRISA0 :1;
[; ;pic16f88.h: 1063: unsigned TRISA1 :1;
[; ;pic16f88.h: 1064: unsigned TRISA2 :1;
[; ;pic16f88.h: 1065: unsigned TRISA3 :1;
[; ;pic16f88.h: 1066: unsigned TRISA4 :1;
[; ;pic16f88.h: 1067: unsigned TRISA5 :1;
[; ;pic16f88.h: 1068: unsigned TRISA6 :1;
[; ;pic16f88.h: 1069: unsigned TRISA7 :1;
[; ;pic16f88.h: 1070: };
[; ;pic16f88.h: 1071: } TRISAbits_t;
[; ;pic16f88.h: 1072: extern volatile TRISAbits_t TRISAbits @ 0x085;
[; ;pic16f88.h: 1116: extern volatile unsigned char TRISB @ 0x086;
"1118
[; ;pic16f88.h: 1118: asm("TRISB equ 086h");
[; <" TRISB equ 086h ;# ">
[; ;pic16f88.h: 1121: typedef union {
[; ;pic16f88.h: 1122: struct {
[; ;pic16f88.h: 1123: unsigned TRISB0 :1;
[; ;pic16f88.h: 1124: unsigned TRISB1 :1;
[; ;pic16f88.h: 1125: unsigned TRISB2 :1;
[; ;pic16f88.h: 1126: unsigned TRISB3 :1;
[; ;pic16f88.h: 1127: unsigned TRISB4 :1;
[; ;pic16f88.h: 1128: unsigned TRISB5 :1;
[; ;pic16f88.h: 1129: unsigned TRISB6 :1;
[; ;pic16f88.h: 1130: unsigned TRISB7 :1;
[; ;pic16f88.h: 1131: };
[; ;pic16f88.h: 1132: } TRISBbits_t;
[; ;pic16f88.h: 1133: extern volatile TRISBbits_t TRISBbits @ 0x086;
[; ;pic16f88.h: 1177: extern volatile unsigned char PIE1 @ 0x08C;
"1179
[; ;pic16f88.h: 1179: asm("PIE1 equ 08Ch");
[; <" PIE1 equ 08Ch ;# ">
[; ;pic16f88.h: 1182: typedef union {
[; ;pic16f88.h: 1183: struct {
[; ;pic16f88.h: 1184: unsigned TMR1IE :1;
[; ;pic16f88.h: 1185: unsigned TMR2IE :1;
[; ;pic16f88.h: 1186: unsigned CCP1IE :1;
[; ;pic16f88.h: 1187: unsigned SSPIE :1;
[; ;pic16f88.h: 1188: unsigned TXIE :1;
[; ;pic16f88.h: 1189: unsigned RCIE :1;
[; ;pic16f88.h: 1190: unsigned ADIE :1;
[; ;pic16f88.h: 1191: };
[; ;pic16f88.h: 1192: } PIE1bits_t;
[; ;pic16f88.h: 1193: extern volatile PIE1bits_t PIE1bits @ 0x08C;
[; ;pic16f88.h: 1232: extern volatile unsigned char PIE2 @ 0x08D;
"1234
[; ;pic16f88.h: 1234: asm("PIE2 equ 08Dh");
[; <" PIE2 equ 08Dh ;# ">
[; ;pic16f88.h: 1237: typedef union {
[; ;pic16f88.h: 1238: struct {
[; ;pic16f88.h: 1239: unsigned :4;
[; ;pic16f88.h: 1240: unsigned EEIE :1;
[; ;pic16f88.h: 1241: unsigned :1;
[; ;pic16f88.h: 1242: unsigned CMIE :1;
[; ;pic16f88.h: 1243: unsigned OSFIE :1;
[; ;pic16f88.h: 1244: };
[; ;pic16f88.h: 1245: } PIE2bits_t;
[; ;pic16f88.h: 1246: extern volatile PIE2bits_t PIE2bits @ 0x08D;
[; ;pic16f88.h: 1265: extern volatile unsigned char PCON @ 0x08E;
"1267
[; ;pic16f88.h: 1267: asm("PCON equ 08Eh");
[; <" PCON equ 08Eh ;# ">
[; ;pic16f88.h: 1270: typedef union {
[; ;pic16f88.h: 1271: struct {
[; ;pic16f88.h: 1272: unsigned nBOR :1;
[; ;pic16f88.h: 1273: unsigned nPOR :1;
[; ;pic16f88.h: 1274: };
[; ;pic16f88.h: 1275: struct {
[; ;pic16f88.h: 1276: unsigned nBO :1;
[; ;pic16f88.h: 1277: };
[; ;pic16f88.h: 1278: } PCONbits_t;
[; ;pic16f88.h: 1279: extern volatile PCONbits_t PCONbits @ 0x08E;
[; ;pic16f88.h: 1298: extern volatile unsigned char OSCCON @ 0x08F;
"1300
[; ;pic16f88.h: 1300: asm("OSCCON equ 08Fh");
[; <" OSCCON equ 08Fh ;# ">
[; ;pic16f88.h: 1303: typedef union {
[; ;pic16f88.h: 1304: struct {
[; ;pic16f88.h: 1305: unsigned SCS :2;
[; ;pic16f88.h: 1306: unsigned IOFS :1;
[; ;pic16f88.h: 1307: unsigned OSTS :1;
[; ;pic16f88.h: 1308: unsigned IRCF :3;
[; ;pic16f88.h: 1309: };
[; ;pic16f88.h: 1310: struct {
[; ;pic16f88.h: 1311: unsigned SCS0 :1;
[; ;pic16f88.h: 1312: unsigned SCS1 :1;
[; ;pic16f88.h: 1313: unsigned :2;
[; ;pic16f88.h: 1314: unsigned IRCF0 :1;
[; ;pic16f88.h: 1315: unsigned IRCF1 :1;
[; ;pic16f88.h: 1316: unsigned IRCF2 :1;
[; ;pic16f88.h: 1317: };
[; ;pic16f88.h: 1318: } OSCCONbits_t;
[; ;pic16f88.h: 1319: extern volatile OSCCONbits_t OSCCONbits @ 0x08F;
[; ;pic16f88.h: 1368: extern volatile unsigned char OSCTUNE @ 0x090;
"1370
[; ;pic16f88.h: 1370: asm("OSCTUNE equ 090h");
[; <" OSCTUNE equ 090h ;# ">
[; ;pic16f88.h: 1373: typedef union {
[; ;pic16f88.h: 1374: struct {
[; ;pic16f88.h: 1375: unsigned TUN :6;
[; ;pic16f88.h: 1376: };
[; ;pic16f88.h: 1377: struct {
[; ;pic16f88.h: 1378: unsigned TUN0 :1;
[; ;pic16f88.h: 1379: unsigned TUN1 :1;
[; ;pic16f88.h: 1380: unsigned TUN2 :1;
[; ;pic16f88.h: 1381: unsigned TUN3 :1;
[; ;pic16f88.h: 1382: unsigned TUN4 :1;
[; ;pic16f88.h: 1383: unsigned TUN5 :1;
[; ;pic16f88.h: 1384: };
[; ;pic16f88.h: 1385: } OSCTUNEbits_t;
[; ;pic16f88.h: 1386: extern volatile OSCTUNEbits_t OSCTUNEbits @ 0x090;
[; ;pic16f88.h: 1425: extern volatile unsigned char PR2 @ 0x092;
"1427
[; ;pic16f88.h: 1427: asm("PR2 equ 092h");
[; <" PR2 equ 092h ;# ">
[; ;pic16f88.h: 1431: extern volatile unsigned char SSPADD @ 0x093;
"1433
[; ;pic16f88.h: 1433: asm("SSPADD equ 093h");
[; <" SSPADD equ 093h ;# ">
[; ;pic16f88.h: 1437: extern volatile unsigned char SSPSTAT @ 0x094;
"1439
[; ;pic16f88.h: 1439: asm("SSPSTAT equ 094h");
[; <" SSPSTAT equ 094h ;# ">
[; ;pic16f88.h: 1442: typedef union {
[; ;pic16f88.h: 1443: struct {
[; ;pic16f88.h: 1444: unsigned BF :1;
[; ;pic16f88.h: 1445: unsigned UA :1;
[; ;pic16f88.h: 1446: unsigned R_nW :1;
[; ;pic16f88.h: 1447: unsigned S :1;
[; ;pic16f88.h: 1448: unsigned P :1;
[; ;pic16f88.h: 1449: unsigned D_nA :1;
[; ;pic16f88.h: 1450: unsigned CKE :1;
[; ;pic16f88.h: 1451: unsigned SMP :1;
[; ;pic16f88.h: 1452: };
[; ;pic16f88.h: 1453: struct {
[; ;pic16f88.h: 1454: unsigned :2;
[; ;pic16f88.h: 1455: unsigned R :1;
[; ;pic16f88.h: 1456: unsigned :2;
[; ;pic16f88.h: 1457: unsigned D :1;
[; ;pic16f88.h: 1458: };
[; ;pic16f88.h: 1459: struct {
[; ;pic16f88.h: 1460: unsigned :2;
[; ;pic16f88.h: 1461: unsigned I2C_READ :1;
[; ;pic16f88.h: 1462: unsigned I2C_START :1;
[; ;pic16f88.h: 1463: unsigned I2C_STOP :1;
[; ;pic16f88.h: 1464: unsigned I2C_DATA :1;
[; ;pic16f88.h: 1465: };
[; ;pic16f88.h: 1466: struct {
[; ;pic16f88.h: 1467: unsigned :2;
[; ;pic16f88.h: 1468: unsigned nW :1;
[; ;pic16f88.h: 1469: unsigned :2;
[; ;pic16f88.h: 1470: unsigned nA :1;
[; ;pic16f88.h: 1471: };
[; ;pic16f88.h: 1472: struct {
[; ;pic16f88.h: 1473: unsigned :2;
[; ;pic16f88.h: 1474: unsigned nWRITE :1;
[; ;pic16f88.h: 1475: unsigned :2;
[; ;pic16f88.h: 1476: unsigned nADDRESS :1;
[; ;pic16f88.h: 1477: };
[; ;pic16f88.h: 1478: struct {
[; ;pic16f88.h: 1479: unsigned :2;
[; ;pic16f88.h: 1480: unsigned R_W :1;
[; ;pic16f88.h: 1481: unsigned :2;
[; ;pic16f88.h: 1482: unsigned D_A :1;
[; ;pic16f88.h: 1483: };
[; ;pic16f88.h: 1484: struct {
[; ;pic16f88.h: 1485: unsigned :2;
[; ;pic16f88.h: 1486: unsigned READ_WRITE :1;
[; ;pic16f88.h: 1487: unsigned :2;
[; ;pic16f88.h: 1488: unsigned DATA_ADDRESS :1;
[; ;pic16f88.h: 1489: };
[; ;pic16f88.h: 1490: } SSPSTATbits_t;
[; ;pic16f88.h: 1491: extern volatile SSPSTATbits_t SSPSTATbits @ 0x094;
[; ;pic16f88.h: 1605: extern volatile unsigned char TXSTA @ 0x098;
"1607
[; ;pic16f88.h: 1607: asm("TXSTA equ 098h");
[; <" TXSTA equ 098h ;# ">
[; ;pic16f88.h: 1610: typedef union {
[; ;pic16f88.h: 1611: struct {
[; ;pic16f88.h: 1612: unsigned TX9D :1;
[; ;pic16f88.h: 1613: unsigned TRMT :1;
[; ;pic16f88.h: 1614: unsigned BRGH :1;
[; ;pic16f88.h: 1615: unsigned :1;
[; ;pic16f88.h: 1616: unsigned SYNC :1;
[; ;pic16f88.h: 1617: unsigned TXEN :1;
[; ;pic16f88.h: 1618: unsigned TX9 :1;
[; ;pic16f88.h: 1619: unsigned CSRC :1;
[; ;pic16f88.h: 1620: };
[; ;pic16f88.h: 1621: struct {
[; ;pic16f88.h: 1622: unsigned TXD8 :1;
[; ;pic16f88.h: 1623: unsigned :5;
[; ;pic16f88.h: 1624: unsigned nTX8 :1;
[; ;pic16f88.h: 1625: };
[; ;pic16f88.h: 1626: struct {
[; ;pic16f88.h: 1627: unsigned :6;
[; ;pic16f88.h: 1628: unsigned TX8_9 :1;
[; ;pic16f88.h: 1629: };
[; ;pic16f88.h: 1630: } TXSTAbits_t;
[; ;pic16f88.h: 1631: extern volatile TXSTAbits_t TXSTAbits @ 0x098;
[; ;pic16f88.h: 1685: extern volatile unsigned char SPBRG @ 0x099;
"1687
[; ;pic16f88.h: 1687: asm("SPBRG equ 099h");
[; <" SPBRG equ 099h ;# ">
[; ;pic16f88.h: 1691: extern volatile unsigned char ANSEL @ 0x09B;
"1693
[; ;pic16f88.h: 1693: asm("ANSEL equ 09Bh");
[; <" ANSEL equ 09Bh ;# ">
[; ;pic16f88.h: 1696: typedef union {
[; ;pic16f88.h: 1697: struct {
[; ;pic16f88.h: 1698: unsigned ANS0 :1;
[; ;pic16f88.h: 1699: unsigned ANS1 :1;
[; ;pic16f88.h: 1700: unsigned ANS2 :1;
[; ;pic16f88.h: 1701: unsigned ANS3 :1;
[; ;pic16f88.h: 1702: unsigned ANS4 :1;
[; ;pic16f88.h: 1703: unsigned ANS5 :1;
[; ;pic16f88.h: 1704: unsigned ANS6 :1;
[; ;pic16f88.h: 1705: };
[; ;pic16f88.h: 1706: } ANSELbits_t;
[; ;pic16f88.h: 1707: extern volatile ANSELbits_t ANSELbits @ 0x09B;
[; ;pic16f88.h: 1746: extern volatile unsigned char CMCON @ 0x09C;
"1748
[; ;pic16f88.h: 1748: asm("CMCON equ 09Ch");
[; <" CMCON equ 09Ch ;# ">
[; ;pic16f88.h: 1751: typedef union {
[; ;pic16f88.h: 1752: struct {
[; ;pic16f88.h: 1753: unsigned CM :3;
[; ;pic16f88.h: 1754: unsigned CIS :1;
[; ;pic16f88.h: 1755: unsigned C1INV :1;
[; ;pic16f88.h: 1756: unsigned C2INV :1;
[; ;pic16f88.h: 1757: unsigned C1OUT :1;
[; ;pic16f88.h: 1758: unsigned C2OUT :1;
[; ;pic16f88.h: 1759: };
[; ;pic16f88.h: 1760: struct {
[; ;pic16f88.h: 1761: unsigned CM0 :1;
[; ;pic16f88.h: 1762: unsigned CM1 :1;
[; ;pic16f88.h: 1763: unsigned CM2 :1;
[; ;pic16f88.h: 1764: };
[; ;pic16f88.h: 1765: } CMCONbits_t;
[; ;pic16f88.h: 1766: extern volatile CMCONbits_t CMCONbits @ 0x09C;
[; ;pic16f88.h: 1815: extern volatile unsigned char CVRCON @ 0x09D;
"1817
[; ;pic16f88.h: 1817: asm("CVRCON equ 09Dh");
[; <" CVRCON equ 09Dh ;# ">
[; ;pic16f88.h: 1820: typedef union {
[; ;pic16f88.h: 1821: struct {
[; ;pic16f88.h: 1822: unsigned CVR :4;
[; ;pic16f88.h: 1823: unsigned :1;
[; ;pic16f88.h: 1824: unsigned CVRR :1;
[; ;pic16f88.h: 1825: unsigned CVROE :1;
[; ;pic16f88.h: 1826: unsigned CVREN :1;
[; ;pic16f88.h: 1827: };
[; ;pic16f88.h: 1828: struct {
[; ;pic16f88.h: 1829: unsigned CVR0 :1;
[; ;pic16f88.h: 1830: unsigned CVR1 :1;
[; ;pic16f88.h: 1831: unsigned CVR2 :1;
[; ;pic16f88.h: 1832: unsigned CVR3 :1;
[; ;pic16f88.h: 1833: };
[; ;pic16f88.h: 1834: } CVRCONbits_t;
[; ;pic16f88.h: 1835: extern volatile CVRCONbits_t CVRCONbits @ 0x09D;
[; ;pic16f88.h: 1879: extern volatile unsigned char ADRESL @ 0x09E;
"1881
[; ;pic16f88.h: 1881: asm("ADRESL equ 09Eh");
[; <" ADRESL equ 09Eh ;# ">
[; ;pic16f88.h: 1885: extern volatile unsigned char ADCON1 @ 0x09F;
"1887
[; ;pic16f88.h: 1887: asm("ADCON1 equ 09Fh");
[; <" ADCON1 equ 09Fh ;# ">
[; ;pic16f88.h: 1890: typedef union {
[; ;pic16f88.h: 1891: struct {
[; ;pic16f88.h: 1892: unsigned :4;
[; ;pic16f88.h: 1893: unsigned VCFG :2;
[; ;pic16f88.h: 1894: unsigned ADCS2 :1;
[; ;pic16f88.h: 1895: unsigned ADFM :1;
[; ;pic16f88.h: 1896: };
[; ;pic16f88.h: 1897: struct {
[; ;pic16f88.h: 1898: unsigned :4;
[; ;pic16f88.h: 1899: unsigned VCFG0 :1;
[; ;pic16f88.h: 1900: unsigned VCFG1 :1;
[; ;pic16f88.h: 1901: };
[; ;pic16f88.h: 1902: } ADCON1bits_t;
[; ;pic16f88.h: 1903: extern volatile ADCON1bits_t ADCON1bits @ 0x09F;
[; ;pic16f88.h: 1932: extern volatile unsigned char WDTCON @ 0x105;
"1934
[; ;pic16f88.h: 1934: asm("WDTCON equ 0105h");
[; <" WDTCON equ 0105h ;# ">
[; ;pic16f88.h: 1937: typedef union {
[; ;pic16f88.h: 1938: struct {
[; ;pic16f88.h: 1939: unsigned SWDTEN :1;
[; ;pic16f88.h: 1940: unsigned WDTPS :4;
[; ;pic16f88.h: 1941: };
[; ;pic16f88.h: 1942: struct {
[; ;pic16f88.h: 1943: unsigned SWDTE :1;
[; ;pic16f88.h: 1944: unsigned WDTPS0 :1;
[; ;pic16f88.h: 1945: unsigned WDTPS1 :1;
[; ;pic16f88.h: 1946: unsigned WDTPS2 :1;
[; ;pic16f88.h: 1947: unsigned WDTPS3 :1;
[; ;pic16f88.h: 1948: };
[; ;pic16f88.h: 1949: } WDTCONbits_t;
[; ;pic16f88.h: 1950: extern volatile WDTCONbits_t WDTCONbits @ 0x105;
[; ;pic16f88.h: 1989: extern volatile unsigned char EEDATA @ 0x10C;
"1991
[; ;pic16f88.h: 1991: asm("EEDATA equ 010Ch");
[; <" EEDATA equ 010Ch ;# ">
[; ;pic16f88.h: 1995: extern volatile unsigned char EEADR @ 0x10D;
"1997
[; ;pic16f88.h: 1997: asm("EEADR equ 010Dh");
[; <" EEADR equ 010Dh ;# ">
[; ;pic16f88.h: 2001: extern volatile unsigned char EEDATH @ 0x10E;
"2003
[; ;pic16f88.h: 2003: asm("EEDATH equ 010Eh");
[; <" EEDATH equ 010Eh ;# ">
[; ;pic16f88.h: 2007: extern volatile unsigned char EEADRH @ 0x10F;
"2009
[; ;pic16f88.h: 2009: asm("EEADRH equ 010Fh");
[; <" EEADRH equ 010Fh ;# ">
[; ;pic16f88.h: 2013: extern volatile unsigned char EECON1 @ 0x18C;
"2015
[; ;pic16f88.h: 2015: asm("EECON1 equ 018Ch");
[; <" EECON1 equ 018Ch ;# ">
[; ;pic16f88.h: 2018: typedef union {
[; ;pic16f88.h: 2019: struct {
[; ;pic16f88.h: 2020: unsigned RD :1;
[; ;pic16f88.h: 2021: unsigned WR :1;
[; ;pic16f88.h: 2022: unsigned WREN :1;
[; ;pic16f88.h: 2023: unsigned WRERR :1;
[; ;pic16f88.h: 2024: unsigned FREE :1;
[; ;pic16f88.h: 2025: unsigned :2;
[; ;pic16f88.h: 2026: unsigned EEPGD :1;
[; ;pic16f88.h: 2027: };
[; ;pic16f88.h: 2028: } EECON1bits_t;
[; ;pic16f88.h: 2029: extern volatile EECON1bits_t EECON1bits @ 0x18C;
[; ;pic16f88.h: 2063: extern volatile unsigned char EECON2 @ 0x18D;
"2065
[; ;pic16f88.h: 2065: asm("EECON2 equ 018Dh");
[; <" EECON2 equ 018Dh ;# ">
[; ;pic16f88.h: 2075: extern volatile __bit ADCS0 @ (((unsigned) &ADCON0)*8) + 6;
[; ;pic16f88.h: 2077: extern volatile __bit ADCS1 @ (((unsigned) &ADCON0)*8) + 7;
[; ;pic16f88.h: 2079: extern volatile __bit ADCS2 @ (((unsigned) &ADCON1)*8) + 6;
[; ;pic16f88.h: 2081: extern volatile __bit ADDEN @ (((unsigned) &RCSTA)*8) + 3;
[; ;pic16f88.h: 2083: extern volatile __bit ADFM @ (((unsigned) &ADCON1)*8) + 7;
[; ;pic16f88.h: 2085: extern volatile __bit ADIE @ (((unsigned) &PIE1)*8) + 6;
[; ;pic16f88.h: 2087: extern volatile __bit ADIF @ (((unsigned) &PIR1)*8) + 6;
[; ;pic16f88.h: 2089: extern volatile __bit ADON @ (((unsigned) &ADCON0)*8) + 0;
[; ;pic16f88.h: 2091: extern volatile __bit ANS0 @ (((unsigned) &ANSEL)*8) + 0;
[; ;pic16f88.h: 2093: extern volatile __bit ANS1 @ (((unsigned) &ANSEL)*8) + 1;
[; ;pic16f88.h: 2095: extern volatile __bit ANS2 @ (((unsigned) &ANSEL)*8) + 2;
[; ;pic16f88.h: 2097: extern volatile __bit ANS3 @ (((unsigned) &ANSEL)*8) + 3;
[; ;pic16f88.h: 2099: extern volatile __bit ANS4 @ (((unsigned) &ANSEL)*8) + 4;
[; ;pic16f88.h: 2101: extern volatile __bit ANS5 @ (((unsigned) &ANSEL)*8) + 5;
[; ;pic16f88.h: 2103: extern volatile __bit ANS6 @ (((unsigned) &ANSEL)*8) + 6;
[; ;pic16f88.h: 2105: extern volatile __bit BF @ (((unsigned) &SSPSTAT)*8) + 0;
[; ;pic16f88.h: 2107: extern volatile __bit BRGH @ (((unsigned) &TXSTA)*8) + 2;
[; ;pic16f88.h: 2109: extern volatile __bit C1INV @ (((unsigned) &CMCON)*8) + 4;
[; ;pic16f88.h: 2111: extern volatile __bit C1OUT @ (((unsigned) &CMCON)*8) + 6;
[; ;pic16f88.h: 2113: extern volatile __bit C2INV @ (((unsigned) &CMCON)*8) + 5;
[; ;pic16f88.h: 2115: extern volatile __bit C2OUT @ (((unsigned) &CMCON)*8) + 7;
[; ;pic16f88.h: 2117: extern volatile __bit CARRY @ (((unsigned) &STATUS)*8) + 0;
[; ;pic16f88.h: 2119: extern volatile __bit CCP1IE @ (((unsigned) &PIE1)*8) + 2;
[; ;pic16f88.h: 2121: extern volatile __bit CCP1IF @ (((unsigned) &PIR1)*8) + 2;
[; ;pic16f88.h: 2123: extern volatile __bit CCP1M0 @ (((unsigned) &CCP1CON)*8) + 0;
[; ;pic16f88.h: 2125: extern volatile __bit CCP1M1 @ (((unsigned) &CCP1CON)*8) + 1;
[; ;pic16f88.h: 2127: extern volatile __bit CCP1M2 @ (((unsigned) &CCP1CON)*8) + 2;
[; ;pic16f88.h: 2129: extern volatile __bit CCP1M3 @ (((unsigned) &CCP1CON)*8) + 3;
[; ;pic16f88.h: 2131: extern volatile __bit CCP1X @ (((unsigned) &CCP1CON)*8) + 5;
[; ;pic16f88.h: 2133: extern volatile __bit CCP1Y @ (((unsigned) &CCP1CON)*8) + 4;
[; ;pic16f88.h: 2135: extern volatile __bit CHS0 @ (((unsigned) &ADCON0)*8) + 3;
[; ;pic16f88.h: 2137: extern volatile __bit CHS1 @ (((unsigned) &ADCON0)*8) + 4;
[; ;pic16f88.h: 2139: extern volatile __bit CHS2 @ (((unsigned) &ADCON0)*8) + 5;
[; ;pic16f88.h: 2141: extern volatile __bit CIS @ (((unsigned) &CMCON)*8) + 3;
[; ;pic16f88.h: 2143: extern volatile __bit CKE @ (((unsigned) &SSPSTAT)*8) + 6;
[; ;pic16f88.h: 2145: extern volatile __bit CKP @ (((unsigned) &SSPCON)*8) + 4;
[; ;pic16f88.h: 2147: extern volatile __bit CM0 @ (((unsigned) &CMCON)*8) + 0;
[; ;pic16f88.h: 2149: extern volatile __bit CM1 @ (((unsigned) &CMCON)*8) + 1;
[; ;pic16f88.h: 2151: extern volatile __bit CM2 @ (((unsigned) &CMCON)*8) + 2;
[; ;pic16f88.h: 2153: extern volatile __bit CMIE @ (((unsigned) &PIE2)*8) + 6;
[; ;pic16f88.h: 2155: extern volatile __bit CMIF @ (((unsigned) &PIR2)*8) + 6;
[; ;pic16f88.h: 2157: extern volatile __bit CREN @ (((unsigned) &RCSTA)*8) + 4;
[; ;pic16f88.h: 2159: extern volatile __bit CSRC @ (((unsigned) &TXSTA)*8) + 7;
[; ;pic16f88.h: 2161: extern volatile __bit CVR0 @ (((unsigned) &CVRCON)*8) + 0;
[; ;pic16f88.h: 2163: extern volatile __bit CVR1 @ (((unsigned) &CVRCON)*8) + 1;
[; ;pic16f88.h: 2165: extern volatile __bit CVR2 @ (((unsigned) &CVRCON)*8) + 2;
[; ;pic16f88.h: 2167: extern volatile __bit CVR3 @ (((unsigned) &CVRCON)*8) + 3;
[; ;pic16f88.h: 2169: extern volatile __bit CVREN @ (((unsigned) &CVRCON)*8) + 7;
[; ;pic16f88.h: 2171: extern volatile __bit CVROE @ (((unsigned) &CVRCON)*8) + 6;
[; ;pic16f88.h: 2173: extern volatile __bit CVRR @ (((unsigned) &CVRCON)*8) + 5;
[; ;pic16f88.h: 2175: extern volatile __bit DATA_ADDRESS @ (((unsigned) &SSPSTAT)*8) + 5;
[; ;pic16f88.h: 2177: extern volatile __bit DC @ (((unsigned) &STATUS)*8) + 1;
[; ;pic16f88.h: 2179: extern volatile __bit D_A @ (((unsigned) &SSPSTAT)*8) + 5;
[; ;pic16f88.h: 2181: extern volatile __bit D_nA @ (((unsigned) &SSPSTAT)*8) + 5;
[; ;pic16f88.h: 2183: extern volatile __bit EEIE @ (((unsigned) &PIE2)*8) + 4;
[; ;pic16f88.h: 2185: extern volatile __bit EEIF @ (((unsigned) &PIR2)*8) + 4;
[; ;pic16f88.h: 2187: extern volatile __bit EEPGD @ (((unsigned) &EECON1)*8) + 7;
[; ;pic16f88.h: 2189: extern volatile __bit FERR @ (((unsigned) &RCSTA)*8) + 2;
[; ;pic16f88.h: 2191: extern volatile __bit FREE @ (((unsigned) &EECON1)*8) + 4;
[; ;pic16f88.h: 2193: extern volatile __bit GIE @ (((unsigned) &INTCON)*8) + 7;
[; ;pic16f88.h: 2195: extern volatile __bit GO @ (((unsigned) &ADCON0)*8) + 2;
[; ;pic16f88.h: 2197: extern volatile __bit GO_DONE @ (((unsigned) &ADCON0)*8) + 2;
[; ;pic16f88.h: 2199: extern volatile __bit GO_nDONE @ (((unsigned) &ADCON0)*8) + 2;
[; ;pic16f88.h: 2201: extern volatile __bit I2C_DATA @ (((unsigned) &SSPSTAT)*8) + 5;
[; ;pic16f88.h: 2203: extern volatile __bit I2C_READ @ (((unsigned) &SSPSTAT)*8) + 2;
[; ;pic16f88.h: 2205: extern volatile __bit I2C_START @ (((unsigned) &SSPSTAT)*8) + 3;
[; ;pic16f88.h: 2207: extern volatile __bit I2C_STOP @ (((unsigned) &SSPSTAT)*8) + 4;
[; ;pic16f88.h: 2209: extern volatile __bit INT0IE @ (((unsigned) &INTCON)*8) + 4;
[; ;pic16f88.h: 2211: extern volatile __bit INT0IF @ (((unsigned) &INTCON)*8) + 1;
[; ;pic16f88.h: 2213: extern volatile __bit INTE @ (((unsigned) &INTCON)*8) + 4;
[; ;pic16f88.h: 2215: extern volatile __bit INTEDG @ (((unsigned) &OPTION_REG)*8) + 6;
[; ;pic16f88.h: 2217: extern volatile __bit INTF @ (((unsigned) &INTCON)*8) + 1;
[; ;pic16f88.h: 2219: extern volatile __bit IOFS @ (((unsigned) &OSCCON)*8) + 2;
[; ;pic16f88.h: 2221: extern volatile __bit IRCF0 @ (((unsigned) &OSCCON)*8) + 4;
[; ;pic16f88.h: 2223: extern volatile __bit IRCF1 @ (((unsigned) &OSCCON)*8) + 5;
[; ;pic16f88.h: 2225: extern volatile __bit IRCF2 @ (((unsigned) &OSCCON)*8) + 6;
[; ;pic16f88.h: 2227: extern volatile __bit IRP @ (((unsigned) &STATUS)*8) + 7;
[; ;pic16f88.h: 2229: extern volatile __bit OERR @ (((unsigned) &RCSTA)*8) + 1;
[; ;pic16f88.h: 2231: extern volatile __bit OSFIE @ (((unsigned) &PIE2)*8) + 7;
[; ;pic16f88.h: 2233: extern volatile __bit OSFIF @ (((unsigned) &PIR2)*8) + 7;
[; ;pic16f88.h: 2235: extern volatile __bit OSTS @ (((unsigned) &OSCCON)*8) + 3;
[; ;pic16f88.h: 2237: extern volatile __bit PEIE @ (((unsigned) &INTCON)*8) + 6;
[; ;pic16f88.h: 2239: extern volatile __bit PS0 @ (((unsigned) &OPTION_REG)*8) + 0;
[; ;pic16f88.h: 2241: extern volatile __bit PS1 @ (((unsigned) &OPTION_REG)*8) + 1;
[; ;pic16f88.h: 2243: extern volatile __bit PS2 @ (((unsigned) &OPTION_REG)*8) + 2;
[; ;pic16f88.h: 2245: extern volatile __bit PSA @ (((unsigned) &OPTION_REG)*8) + 3;
[; ;pic16f88.h: 2247: extern volatile __bit RA0 @ (((unsigned) &PORTA)*8) + 0;
[; ;pic16f88.h: 2249: extern volatile __bit RA1 @ (((unsigned) &PORTA)*8) + 1;
[; ;pic16f88.h: 2251: extern volatile __bit RA2 @ (((unsigned) &PORTA)*8) + 2;
[; ;pic16f88.h: 2253: extern volatile __bit RA3 @ (((unsigned) &PORTA)*8) + 3;
[; ;pic16f88.h: 2255: extern volatile __bit RA4 @ (((unsigned) &PORTA)*8) + 4;
[; ;pic16f88.h: 2257: extern volatile __bit RA5 @ (((unsigned) &PORTA)*8) + 5;
[; ;pic16f88.h: 2259: extern volatile __bit RA6 @ (((unsigned) &PORTA)*8) + 6;
[; ;pic16f88.h: 2261: extern volatile __bit RA7 @ (((unsigned) &PORTA)*8) + 7;
[; ;pic16f88.h: 2263: extern volatile __bit RB0 @ (((unsigned) &PORTB)*8) + 0;
[; ;pic16f88.h: 2265: extern volatile __bit RB1 @ (((unsigned) &PORTB)*8) + 1;
[; ;pic16f88.h: 2267: extern volatile __bit RB2 @ (((unsigned) &PORTB)*8) + 2;
[; ;pic16f88.h: 2269: extern volatile __bit RB3 @ (((unsigned) &PORTB)*8) + 3;
[; ;pic16f88.h: 2271: extern volatile __bit RB4 @ (((unsigned) &PORTB)*8) + 4;
[; ;pic16f88.h: 2273: extern volatile __bit RB5 @ (((unsigned) &PORTB)*8) + 5;
[; ;pic16f88.h: 2275: extern volatile __bit RB6 @ (((unsigned) &PORTB)*8) + 6;
[; ;pic16f88.h: 2277: extern volatile __bit RB7 @ (((unsigned) &PORTB)*8) + 7;
[; ;pic16f88.h: 2279: extern volatile __bit RBIE @ (((unsigned) &INTCON)*8) + 3;
[; ;pic16f88.h: 2281: extern volatile __bit RBIF @ (((unsigned) &INTCON)*8) + 0;
[; ;pic16f88.h: 2283: extern volatile __bit RC8_9 @ (((unsigned) &RCSTA)*8) + 6;
[; ;pic16f88.h: 2285: extern volatile __bit RC9 @ (((unsigned) &RCSTA)*8) + 6;
[; ;pic16f88.h: 2287: extern volatile __bit RCD8 @ (((unsigned) &RCSTA)*8) + 0;
[; ;pic16f88.h: 2289: extern volatile __bit RCIE @ (((unsigned) &PIE1)*8) + 5;
[; ;pic16f88.h: 2291: extern volatile __bit RCIF @ (((unsigned) &PIR1)*8) + 5;
[; ;pic16f88.h: 2293: extern volatile __bit RD @ (((unsigned) &EECON1)*8) + 0;
[; ;pic16f88.h: 2295: extern volatile __bit READ_WRITE @ (((unsigned) &SSPSTAT)*8) + 2;
[; ;pic16f88.h: 2297: extern volatile __bit RP0 @ (((unsigned) &STATUS)*8) + 5;
[; ;pic16f88.h: 2299: extern volatile __bit RP1 @ (((unsigned) &STATUS)*8) + 6;
[; ;pic16f88.h: 2301: extern volatile __bit RX9 @ (((unsigned) &RCSTA)*8) + 6;
[; ;pic16f88.h: 2303: extern volatile __bit RX9D @ (((unsigned) &RCSTA)*8) + 0;
[; ;pic16f88.h: 2305: extern volatile __bit R_W @ (((unsigned) &SSPSTAT)*8) + 2;
[; ;pic16f88.h: 2307: extern volatile __bit R_nW @ (((unsigned) &SSPSTAT)*8) + 2;
[; ;pic16f88.h: 2309: extern volatile __bit SCS0 @ (((unsigned) &OSCCON)*8) + 0;
[; ;pic16f88.h: 2311: extern volatile __bit SCS1 @ (((unsigned) &OSCCON)*8) + 1;
[; ;pic16f88.h: 2313: extern volatile __bit SMP @ (((unsigned) &SSPSTAT)*8) + 7;
[; ;pic16f88.h: 2315: extern volatile __bit SPEN @ (((unsigned) &RCSTA)*8) + 7;
[; ;pic16f88.h: 2317: extern volatile __bit SREN @ (((unsigned) &RCSTA)*8) + 5;
[; ;pic16f88.h: 2319: extern volatile __bit SSPEN @ (((unsigned) &SSPCON)*8) + 5;
[; ;pic16f88.h: 2321: extern volatile __bit SSPIE @ (((unsigned) &PIE1)*8) + 3;
[; ;pic16f88.h: 2323: extern volatile __bit SSPIF @ (((unsigned) &PIR1)*8) + 3;
[; ;pic16f88.h: 2325: extern volatile __bit SSPM0 @ (((unsigned) &SSPCON)*8) + 0;
[; ;pic16f88.h: 2327: extern volatile __bit SSPM1 @ (((unsigned) &SSPCON)*8) + 1;
[; ;pic16f88.h: 2329: extern volatile __bit SSPM2 @ (((unsigned) &SSPCON)*8) + 2;
[; ;pic16f88.h: 2331: extern volatile __bit SSPM3 @ (((unsigned) &SSPCON)*8) + 3;
[; ;pic16f88.h: 2333: extern volatile __bit SSPOV @ (((unsigned) &SSPCON)*8) + 6;
[; ;pic16f88.h: 2335: extern volatile __bit SWDTE @ (((unsigned) &WDTCON)*8) + 0;
[; ;pic16f88.h: 2337: extern volatile __bit SWDTEN @ (((unsigned) &WDTCON)*8) + 0;
[; ;pic16f88.h: 2339: extern volatile __bit SYNC @ (((unsigned) &TXSTA)*8) + 4;
[; ;pic16f88.h: 2341: extern volatile __bit T0CS @ (((unsigned) &OPTION_REG)*8) + 5;
[; ;pic16f88.h: 2343: extern volatile __bit T0SE @ (((unsigned) &OPTION_REG)*8) + 4;
[; ;pic16f88.h: 2345: extern volatile __bit T1CKPS0 @ (((unsigned) &T1CON)*8) + 4;
[; ;pic16f88.h: 2347: extern volatile __bit T1CKPS1 @ (((unsigned) &T1CON)*8) + 5;
[; ;pic16f88.h: 2349: extern volatile __bit T1INSYNC @ (((unsigned) &T1CON)*8) + 2;
[; ;pic16f88.h: 2351: extern volatile __bit T1OSCEN @ (((unsigned) &T1CON)*8) + 3;
[; ;pic16f88.h: 2353: extern volatile __bit T1RUN @ (((unsigned) &T1CON)*8) + 6;
[; ;pic16f88.h: 2355: extern volatile __bit T2CKPS0 @ (((unsigned) &T2CON)*8) + 0;
[; ;pic16f88.h: 2357: extern volatile __bit T2CKPS1 @ (((unsigned) &T2CON)*8) + 1;
[; ;pic16f88.h: 2359: extern volatile __bit TMR0IE @ (((unsigned) &INTCON)*8) + 5;
[; ;pic16f88.h: 2361: extern volatile __bit TMR0IF @ (((unsigned) &INTCON)*8) + 2;
[; ;pic16f88.h: 2363: extern volatile __bit TMR1CS @ (((unsigned) &T1CON)*8) + 1;
[; ;pic16f88.h: 2365: extern volatile __bit TMR1IE @ (((unsigned) &PIE1)*8) + 0;
[; ;pic16f88.h: 2367: extern volatile __bit TMR1IF @ (((unsigned) &PIR1)*8) + 0;
[; ;pic16f88.h: 2369: extern volatile __bit TMR1ON @ (((unsigned) &T1CON)*8) + 0;
[; ;pic16f88.h: 2371: extern volatile __bit TMR2IE @ (((unsigned) &PIE1)*8) + 1;
[; ;pic16f88.h: 2373: extern volatile __bit TMR2IF @ (((unsigned) &PIR1)*8) + 1;
[; ;pic16f88.h: 2375: extern volatile __bit TMR2ON @ (((unsigned) &T2CON)*8) + 2;
[; ;pic16f88.h: 2377: extern volatile __bit TOUTPS0 @ (((unsigned) &T2CON)*8) + 3;
[; ;pic16f88.h: 2379: extern volatile __bit TOUTPS1 @ (((unsigned) &T2CON)*8) + 4;
[; ;pic16f88.h: 2381: extern volatile __bit TOUTPS2 @ (((unsigned) &T2CON)*8) + 5;
[; ;pic16f88.h: 2383: extern volatile __bit TOUTPS3 @ (((unsigned) &T2CON)*8) + 6;
[; ;pic16f88.h: 2385: extern volatile __bit TRISA0 @ (((unsigned) &TRISA)*8) + 0;
[; ;pic16f88.h: 2387: extern volatile __bit TRISA1 @ (((unsigned) &TRISA)*8) + 1;
[; ;pic16f88.h: 2389: extern volatile __bit TRISA2 @ (((unsigned) &TRISA)*8) + 2;
[; ;pic16f88.h: 2391: extern volatile __bit TRISA3 @ (((unsigned) &TRISA)*8) + 3;
[; ;pic16f88.h: 2393: extern volatile __bit TRISA4 @ (((unsigned) &TRISA)*8) + 4;
[; ;pic16f88.h: 2395: extern volatile __bit TRISA5 @ (((unsigned) &TRISA)*8) + 5;
[; ;pic16f88.h: 2397: extern volatile __bit TRISA6 @ (((unsigned) &TRISA)*8) + 6;
[; ;pic16f88.h: 2399: extern volatile __bit TRISA7 @ (((unsigned) &TRISA)*8) + 7;
[; ;pic16f88.h: 2401: extern volatile __bit TRISB0 @ (((unsigned) &TRISB)*8) + 0;
[; ;pic16f88.h: 2403: extern volatile __bit TRISB1 @ (((unsigned) &TRISB)*8) + 1;
[; ;pic16f88.h: 2405: extern volatile __bit TRISB2 @ (((unsigned) &TRISB)*8) + 2;
[; ;pic16f88.h: 2407: extern volatile __bit TRISB3 @ (((unsigned) &TRISB)*8) + 3;
[; ;pic16f88.h: 2409: extern volatile __bit TRISB4 @ (((unsigned) &TRISB)*8) + 4;
[; ;pic16f88.h: 2411: extern volatile __bit TRISB5 @ (((unsigned) &TRISB)*8) + 5;
[; ;pic16f88.h: 2413: extern volatile __bit TRISB6 @ (((unsigned) &TRISB)*8) + 6;
[; ;pic16f88.h: 2415: extern volatile __bit TRISB7 @ (((unsigned) &TRISB)*8) + 7;
[; ;pic16f88.h: 2417: extern volatile __bit TRMT @ (((unsigned) &TXSTA)*8) + 1;
[; ;pic16f88.h: 2419: extern volatile __bit TUN0 @ (((unsigned) &OSCTUNE)*8) + 0;
[; ;pic16f88.h: 2421: extern volatile __bit TUN1 @ (((unsigned) &OSCTUNE)*8) + 1;
[; ;pic16f88.h: 2423: extern volatile __bit TUN2 @ (((unsigned) &OSCTUNE)*8) + 2;
[; ;pic16f88.h: 2425: extern volatile __bit TUN3 @ (((unsigned) &OSCTUNE)*8) + 3;
[; ;pic16f88.h: 2427: extern volatile __bit TUN4 @ (((unsigned) &OSCTUNE)*8) + 4;
[; ;pic16f88.h: 2429: extern volatile __bit TUN5 @ (((unsigned) &OSCTUNE)*8) + 5;
[; ;pic16f88.h: 2431: extern volatile __bit TX8_9 @ (((unsigned) &TXSTA)*8) + 6;
[; ;pic16f88.h: 2433: extern volatile __bit TX9 @ (((unsigned) &TXSTA)*8) + 6;
[; ;pic16f88.h: 2435: extern volatile __bit TX9D @ (((unsigned) &TXSTA)*8) + 0;
[; ;pic16f88.h: 2437: extern volatile __bit TXD8 @ (((unsigned) &TXSTA)*8) + 0;
[; ;pic16f88.h: 2439: extern volatile __bit TXEN @ (((unsigned) &TXSTA)*8) + 5;
[; ;pic16f88.h: 2441: extern volatile __bit TXIE @ (((unsigned) &PIE1)*8) + 4;
[; ;pic16f88.h: 2443: extern volatile __bit TXIF @ (((unsigned) &PIR1)*8) + 4;
[; ;pic16f88.h: 2445: extern volatile __bit UA @ (((unsigned) &SSPSTAT)*8) + 1;
[; ;pic16f88.h: 2447: extern volatile __bit VCFG0 @ (((unsigned) &ADCON1)*8) + 4;
[; ;pic16f88.h: 2449: extern volatile __bit VCFG1 @ (((unsigned) &ADCON1)*8) + 5;
[; ;pic16f88.h: 2451: extern volatile __bit WCOL @ (((unsigned) &SSPCON)*8) + 7;
[; ;pic16f88.h: 2453: extern volatile __bit WDTPS0 @ (((unsigned) &WDTCON)*8) + 1;
[; ;pic16f88.h: 2455: extern volatile __bit WDTPS1 @ (((unsigned) &WDTCON)*8) + 2;
[; ;pic16f88.h: 2457: extern volatile __bit WDTPS2 @ (((unsigned) &WDTCON)*8) + 3;
[; ;pic16f88.h: 2459: extern volatile __bit WDTPS3 @ (((unsigned) &WDTCON)*8) + 4;
[; ;pic16f88.h: 2461: extern volatile __bit WR @ (((unsigned) &EECON1)*8) + 1;
[; ;pic16f88.h: 2463: extern volatile __bit WREN @ (((unsigned) &EECON1)*8) + 2;
[; ;pic16f88.h: 2465: extern volatile __bit WRERR @ (((unsigned) &EECON1)*8) + 3;
[; ;pic16f88.h: 2467: extern volatile __bit ZERO @ (((unsigned) &STATUS)*8) + 2;
[; ;pic16f88.h: 2469: extern volatile __bit nA @ (((unsigned) &SSPSTAT)*8) + 5;
[; ;pic16f88.h: 2471: extern volatile __bit nADDRESS @ (((unsigned) &SSPSTAT)*8) + 5;
[; ;pic16f88.h: 2473: extern volatile __bit nBO @ (((unsigned) &PCON)*8) + 0;
[; ;pic16f88.h: 2475: extern volatile __bit nBOR @ (((unsigned) &PCON)*8) + 0;
[; ;pic16f88.h: 2477: extern volatile __bit nDONE @ (((unsigned) &ADCON0)*8) + 2;
[; ;pic16f88.h: 2479: extern volatile __bit nPD @ (((unsigned) &STATUS)*8) + 3;
[; ;pic16f88.h: 2481: extern volatile __bit nPOR @ (((unsigned) &PCON)*8) + 1;
[; ;pic16f88.h: 2483: extern volatile __bit nRBPU @ (((unsigned) &OPTION_REG)*8) + 7;
[; ;pic16f88.h: 2485: extern volatile __bit nRC8 @ (((unsigned) &RCSTA)*8) + 6;
[; ;pic16f88.h: 2487: extern volatile __bit nT1SYNC @ (((unsigned) &T1CON)*8) + 2;
[; ;pic16f88.h: 2489: extern volatile __bit nTO @ (((unsigned) &STATUS)*8) + 4;
[; ;pic16f88.h: 2491: extern volatile __bit nTX8 @ (((unsigned) &TXSTA)*8) + 6;
[; ;pic16f88.h: 2493: extern volatile __bit nW @ (((unsigned) &SSPSTAT)*8) + 2;
[; ;pic16f88.h: 2495: extern volatile __bit nWRITE @ (((unsigned) &SSPSTAT)*8) + 2;
[; ;pic.h: 28: extern void __nop(void);
[; ;pic.h: 77: extern unsigned int flash_read(unsigned short addr);
[; ;eeprom_routines.h: 114: extern void eeprom_write(unsigned char addr, unsigned char value);
[; ;eeprom_routines.h: 115: extern unsigned char eeprom_read(unsigned char addr);
[; ;eeprom_routines.h: 116: extern void eecpymem(volatile unsigned char *to, __eeprom unsigned char *from, unsigned char size);
[; ;eeprom_routines.h: 117: extern void memcpyee(__eeprom unsigned char *to, const unsigned char *from, unsigned char size);
[; ;pic.h: 152: extern __nonreentrant void _delay(unsigned long);
[; ;pic.h: 154: extern __nonreentrant void _delaywdt(unsigned long);
[; ;pic.h: 192: extern unsigned char __resetbits;
[; ;pic.h: 193: extern __bit __powerdown;
[; ;pic.h: 194: extern __bit __timeout;
"12 config.h
[p x FOSC=HS ]
"13
[p x WDTE=OFF ]
"14
[p x PWRTE=OFF ]
"15
[p x MCLRE=OFF ]
"16
[p x BOREN=ON ]
"17
[p x LVP=OFF ]
"18
[p x CPD=OFF ]
"19
[p x WRT=OFF ]
"20
[p x CCPMX=RB0 ]
"21
[p x CP=OFF ]
"24
[p x FCMEN=ON ]
"25
[p x IESO=ON ]
[; ;stdint.h: 4: typedef char int8_t;
[; ;stdint.h: 5: typedef int int16_t;
[; ;stdint.h: 6: typedef long int32_t;
[; ;stdint.h: 8: typedef unsigned char uint8_t;
[; ;stdint.h: 9: typedef unsigned int uint16_t;
[; ;stdint.h: 10: typedef unsigned long uint32_t;
[; ;stdint.h: 13: typedef unsigned char boolean;
[; ;virtualwire.h: 42: void vw_setup(uint16_t brate);
[; ;virtualwire.h: 43: boolean vw_send(const char *buf, uint8_t len);
[; ;virtualwire.h: 44: void vw_wait_tx(void);
[; ;virtualwire.h: 46: boolean vw_have_message(void);
[; ;virtualwire.h: 47: boolean vw_recv(uint8_t *buf, uint8_t *len);
[; ;virtualwire.h: 49: void vw_rx_stop(void);
[; ;virtualwire.h: 50: void vw_rx_start(void);
[; ;virtualwire.h: 52: void vw_isr_tmr0(void);
[; ;virtualwire.h: 54: void vw_set_rx_inverted(void);
[; ;virtualwire.h: 55: boolean vw_is_rx_inverted(void);
"11 ../_libs/crc16.h
[v _crc16_update `(ui ~T0 @X0 1 ef2`ui`uc ]
{
[; ;crc16.h: 11: uint16_t crc16_update(uint16_t crc, uint8_t a){
[e :U _crc16_update ]
[v _crc `ui ~T0 @X0 1 r1 ]
[v _a `uc ~T0 @X0 1 r2 ]
[f ]
"13
[v _i `i ~T0 @X0 1 a ]
[; ;crc16.h: 13: int i;
[; ;crc16.h: 15: crc ^= a;
"15
[e =^ _crc -> _a `ui ]
[; ;crc16.h: 17: for (i = 0; i < 8; ++i){
"17
{
[e = _i -> 0 `i ]
[e $ < _i -> 8 `i 89  ]
[e $U 90  ]
[e :U 89 ]
{
[; ;crc16.h: 19: if (crc & 1){
"19
[e $ ! != & _crc -> -> 1 `i `ui -> -> 0 `i `ui 92  ]
{
[; ;crc16.h: 20: crc = (crc >> 1) ^ 0xA001;
"20
[e = _crc ^ >> _crc -> 1 `i -> 40961 `ui ]
"21
}
[; ;crc16.h: 21: }
[e $U 93  ]
"23
[e :U 92 ]
[; ;crc16.h: 23: else{
{
[; ;crc16.h: 24: crc = (crc >> 1);
"24
[e = _crc >> _crc -> 1 `i ]
"25
}
[e :U 93 ]
"27
}
"17
[e =+ _i -> 1 `i ]
[e $ < _i -> 8 `i 89  ]
[e :U 90 ]
"27
}
[; ;crc16.h: 25: }
[; ;crc16.h: 27: }
[; ;crc16.h: 29: return crc;
"29
[e ) _crc ]
[e $UE 88  ]
[; ;crc16.h: 30: }
"30
[e :UE 88 ]
}
"32
[v _crc_xmodem_update `(ui ~T0 @X0 1 ef2`ui`uc ]
{
[; ;crc16.h: 32: uint16_t crc_xmodem_update (uint16_t crc, uint8_t data){
[e :U _crc_xmodem_update ]
[v _crc `ui ~T0 @X0 1 r1 ]
[v _data `uc ~T0 @X0 1 r2 ]
[f ]
"34
[v _i `i ~T0 @X0 1 a ]
[; ;crc16.h: 34: int i;
[; ;crc16.h: 36: crc = crc ^ ((uint16_t)data << 8);
"36
[e = _crc ^ _crc << -> _data `ui -> 8 `i ]
[; ;crc16.h: 38: for (i=0; i<8; i++){
"38
{
[e = _i -> 0 `i ]
[e $ < _i -> 8 `i 95  ]
[e $U 96  ]
[e :U 95 ]
{
[; ;crc16.h: 40: if (crc & 0x8000)
"40
[e $ ! != & _crc -> 32768 `ui -> -> 0 `i `ui 98  ]
[; ;crc16.h: 41: crc = (crc << 1) ^ 0x1021;
"41
[e = _crc ^ << _crc -> 1 `i -> -> 4129 `i `ui ]
[e $U 99  ]
"43
[e :U 98 ]
[; ;crc16.h: 43: else
[; ;crc16.h: 44: crc <<= 1;
"44
[e =<< _crc -> 1 `i ]
[e :U 99 ]
"45
}
"38
[e ++ _i -> 1 `i ]
[e $ < _i -> 8 `i 95  ]
[e :U 96 ]
"45
}
[; ;crc16.h: 45: }
[; ;crc16.h: 47: return crc;
"47
[e ) _crc ]
[e $UE 94  ]
[; ;crc16.h: 48: }
"48
[e :UE 94 ]
}
"51
[v __crc_ccitt_update `(ui ~T0 @X0 1 ef2`ui`uc ]
{
[; ;crc16.h: 51: uint16_t _crc_ccitt_update (uint16_t crc, uint8_t data){
[e :U __crc_ccitt_update ]
[v _crc `ui ~T0 @X0 1 r1 ]
[v _data `uc ~T0 @X0 1 r2 ]
[f ]
[; ;crc16.h: 53: data ^= ((crc)&0xff);
"53
[e =^ _data -> & _crc -> -> 255 `i `ui `uc ]
[; ;crc16.h: 54: data ^= data << 4;
"54
[e =^ _data -> << -> _data `i -> 4 `i `uc ]
[; ;crc16.h: 56: return ((((uint16_t) data << 8) | ((crc)>>8)) ^ (uint8_t) (data >> 4)
[; ;crc16.h: 57: ^ ((uint16_t) data << 3));
"57
[e ) ^ ^ | << -> _data `ui -> 8 `i >> _crc -> 8 `i -> -> >> -> _data `i -> 4 `i `uc `ui << -> _data `ui -> 3 `i ]
[e $UE 100  ]
[; ;crc16.h: 59: }
"59
[e :UE 100 ]
}
"62
[v __crc_ibutton_update `(uc ~T0 @X0 1 ef2`uc`uc ]
{
[; ;crc16.h: 62: uint8_t _crc_ibutton_update(uint8_t crc, uint8_t data){
[e :U __crc_ibutton_update ]
[v _crc `uc ~T0 @X0 1 r1 ]
[v _data `uc ~T0 @X0 1 r2 ]
[f ]
"64
[v _i `uc ~T0 @X0 1 a ]
[; ;crc16.h: 64: uint8_t i;
[; ;crc16.h: 66: crc = crc ^ data;
"66
[e = _crc -> ^ -> _crc `i -> _data `i `uc ]
[; ;crc16.h: 68: for (i = 0; i < 8; i++){
"68
{
[e = _i -> -> 0 `i `uc ]
[e $ < -> _i `i -> 8 `i 102  ]
[e $U 103  ]
[e :U 102 ]
{
[; ;crc16.h: 70: if (crc & 0x01)
"70
[e $ ! != & -> _crc `i -> 1 `i -> 0 `i 105  ]
[; ;crc16.h: 71: crc = (crc >> 1) ^ 0x8C;
"71
[e = _crc -> ^ >> -> _crc `i -> 1 `i -> 140 `i `uc ]
[e $U 106  ]
"73
[e :U 105 ]
[; ;crc16.h: 73: else
[; ;crc16.h: 74: crc >>= 1;
"74
[e =>> _crc -> 1 `i ]
[e :U 106 ]
"75
}
"68
[e ++ _i -> -> 1 `i `uc ]
[e $ < -> _i `i -> 8 `i 102  ]
[e :U 103 ]
"75
}
[; ;crc16.h: 75: }
[; ;crc16.h: 77: return crc;
"77
[e ) _crc ]
[e $UE 101  ]
[; ;crc16.h: 78: }
"78
[e :UE 101 ]
}
"6 ../_libs/string.h
[v _memcpy `(*uc ~T0 @X0 1 ef3`*uc`*uc`ui ]
{
[; ;string.h: 6: unsigned char *memcpy(unsigned char *dest, unsigned char *src, unsigned int n){
[e :U _memcpy ]
[v _dest `*uc ~T0 @X0 1 r1 ]
[v _src `*uc ~T0 @X0 1 r2 ]
[v _n `ui ~T0 @X0 1 r3 ]
[f ]
[; ;string.h: 16: while (n--)
"16
[e $U 108  ]
[e :U 109 ]
[; ;string.h: 17: dest[n] = src[n];
"17
[e = *U + _dest * -> _n `ux -> -> # *U _dest `ui `ux *U + _src * -> _n `ux -> -> # *U _src `ui `ux ]
[e :U 108 ]
"16
[e $ != -- _n -> -> 1 `i `ui -> -> 0 `i `ui 109  ]
[e :U 110 ]
[; ;string.h: 20: return dest;
"20
[e ) _dest ]
[e $UE 107  ]
[; ;string.h: 22: }
"22
[e :UE 107 ]
}
"28 virtualwire.c
[v _vw_tx_len `uc ~T0 @X0 1 s ]
[i _vw_tx_len
-> -> 0 `i `uc
]
[; ;virtualwire.c: 28: static uint8_t vw_tx_len = 0;
"29
[v _vw_tx_index `uc ~T0 @X0 1 s ]
[i _vw_tx_index
-> -> 0 `i `uc
]
[; ;virtualwire.c: 29: static uint8_t vw_tx_index = 0;
"30
[v _vw_tx_header `uc ~T0 @X0 1 s ]
[; ;virtualwire.c: 30: static boolean vw_tx_header;
"32
[v _vw_tx_sample `uc ~T0 @X0 1 s ]
[i _vw_tx_sample
-> -> 0 `i `uc
]
[; ;virtualwire.c: 32: static uint8_t vw_tx_sample = 0;
"33
[v _vw_tx_bit `uc ~T0 @X0 1 s ]
[i _vw_tx_bit
-> -> 0 `i `uc
]
[; ;virtualwire.c: 33: static uint8_t vw_tx_bit = 0;
"34
[v _vw_tx_enabled `uc ~T0 @X0 1 s ]
[i _vw_tx_enabled
-> -> 0 `i `uc
]
[; ;virtualwire.c: 34: static boolean vw_tx_enabled = 0;
"36
[v _vw_tmr0_value `uc ~T0 @X0 1 s ]
[; ;virtualwire.c: 36: static uint8_t vw_tmr0_value;
"41
[v _vw_rx_done `Vuc ~T0 @X0 1 s ]
[i _vw_rx_done
-> -> 0 `i `uc
]
[; ;virtualwire.c: 41: static volatile boolean vw_rx_done = 0;
"42
[v _vw_rx_bits `ui ~T0 @X0 1 s ]
[i _vw_rx_bits
-> -> 0 `i `ui
]
[; ;virtualwire.c: 42: static uint16_t vw_rx_bits = 0;
"43
[v _vw_rx_enabled `uc ~T0 @X0 1 s ]
[i _vw_rx_enabled
-> -> 0 `i `uc
]
[; ;virtualwire.c: 43: static boolean vw_rx_enabled = 0;
"44
[v _vw_rx_enabled_last `uc ~T0 @X0 1 s ]
[i _vw_rx_enabled_last
-> -> 0 `i `uc
]
[; ;virtualwire.c: 44: static boolean vw_rx_enabled_last = 0;
"45
[v _vw_rx_bit_count `uc ~T0 @X0 1 s ]
[i _vw_rx_bit_count
-> -> 0 `i `uc
]
[; ;virtualwire.c: 45: static uint8_t vw_rx_bit_count = 0;
"46
[v _vw_rx_count `uc ~T0 @X0 1 s ]
[i _vw_rx_count
-> -> 0 `i `uc
]
[; ;virtualwire.c: 46: static uint8_t vw_rx_count = 0;
"47
[v _vw_rx_len `uc ~T0 @X0 1 s ]
[i _vw_rx_len
-> -> 0 `i `uc
]
[; ;virtualwire.c: 47: static uint8_t vw_rx_len = 0;
"49
[v _vw_rx_sample `uc ~T0 @X0 1 s ]
[i _vw_rx_sample
-> -> 0 `i `uc
]
[; ;virtualwire.c: 49: static uint8_t vw_rx_sample = 0;
"50
[v _vw_rx_last_sample `uc ~T0 @X0 1 s ]
[i _vw_rx_last_sample
-> -> 0 `i `uc
]
[; ;virtualwire.c: 50: static uint8_t vw_rx_last_sample = 0;
"51
[v _vw_rx_active `uc ~T0 @X0 1 s ]
[i _vw_rx_active
-> -> 0 `i `uc
]
[; ;virtualwire.c: 51: static boolean vw_rx_active = 0;
"53
[v _vw_rx_inverted `uc ~T0 @X0 1 s ]
[i _vw_rx_inverted
-> -> 0 `i `uc
]
[; ;virtualwire.c: 53: static boolean vw_rx_inverted = 0;
"77
[v _vw_rx_pll_ramp `uc ~T0 @X0 1 s ]
[i _vw_rx_pll_ramp
-> -> 0 `i `uc
]
[; ;virtualwire.c: 77: static uint8_t vw_rx_pll_ramp = 0;
"78
[v _vw_rx_integrator `uc ~T0 @X0 1 s ]
[i _vw_rx_integrator
-> -> 0 `i `uc
]
[; ;virtualwire.c: 78: static uint8_t vw_rx_integrator = 0;
"84
[v _symbols `Cuc ~T0 @X0 -> 0 `x e ]
[i _symbols
:U ..
"85
-> -> 13 `i `uc
-> -> 14 `i `uc
-> -> 19 `i `uc
-> -> 21 `i `uc
-> -> 22 `i `uc
-> -> 25 `i `uc
-> -> 26 `i `uc
-> -> 28 `i `uc
"86
-> -> 35 `i `uc
-> -> 37 `i `uc
-> -> 38 `i `uc
-> -> 41 `i `uc
-> -> 42 `i `uc
-> -> 44 `i `uc
-> -> 50 `i `uc
"87
-> -> 52 `i `uc
..
]
[; ;virtualwire.c: 84: const uint8_t symbols[] = {
[; ;virtualwire.c: 85: 0xd, 0xe, 0x13, 0x15, 0x16, 0x19, 0x1a, 0x1c,
[; ;virtualwire.c: 86: 0x23, 0x25, 0x26, 0x29, 0x2a, 0x2c, 0x32, 0x34
[; ;virtualwire.c: 87: };
"92
[v _vw_tx_buf_header `Cuc ~T0 @X0 -> 8 `i e ]
[i _vw_tx_buf_header
:U ..
"93
-> -> 42 `i `uc
-> -> 42 `i `uc
-> -> 42 `i `uc
-> -> 42 `i `uc
-> -> 42 `i `uc
-> -> 42 `i `uc
-> -> 56 `i `uc
-> -> 44 `i `uc
..
]
[; ;virtualwire.c: 92: const uint8_t vw_tx_buf_header[8]
[; ;virtualwire.c: 93: = {0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x38, 0x2c};
"95
[v _vw_tx_buf `Xuc ~T0 @X0 * -> 8 `i -> 2 `i s ]
[; ;virtualwire.c: 95: static bank1 uint8_t vw_tx_buf[8 * 2];
"97
[v __calc_timer0_prescaler `(uc ~T0 @X0 1 sf4`ui`*ui`*uc`*uc ]
"98
{
[; ;virtualwire.c: 97: static boolean _calc_timer0_prescaler(uint16_t brate, uint16_t *prescaler_value, uint8_t *prescaler_bits, uint8_t *k_tmr0)
[; ;virtualwire.c: 98: {
[e :U __calc_timer0_prescaler ]
"97
[v _brate `ui ~T0 @X0 1 r1 ]
[v _prescaler_value `*ui ~T0 @X0 1 r2 ]
[v _prescaler_bits `*uc ~T0 @X0 1 r3 ]
[v _k_tmr0 `*uc ~T0 @X0 1 r4 ]
"98
[f ]
"99
[v F1061 `Cui ~T0 @X0 -> 0 `x s prescaler_factor ]
[i F1061
:U ..
-> -> 1 `i `ui
-> -> 2 `i `ui
-> -> 4 `i `ui
-> -> 8 `i `ui
-> -> 16 `i `ui
-> -> 32 `i `ui
-> -> 64 `i `ui
-> -> 128 `i `ui
-> -> 256 `i `ui
..
]
"100
[v _pindex `uc ~T0 @X0 1 a ]
"101
[v _aux_tmr0 `ui ~T0 @X0 1 a ]
[; ;virtualwire.c: 99: const uint16_t prescaler_factor[] = {1, 2, 4, 8, 16, 32, 64, 128, 256};
[; ;virtualwire.c: 100: uint8_t pindex;
[; ;virtualwire.c: 101: uint16_t aux_tmr0;
[; ;virtualwire.c: 103: for (pindex = 0; pindex < 8; pindex++)
"103
{
[e = _pindex -> -> 0 `i `uc ]
[e $ < -> _pindex `i -> 8 `i 112  ]
[e $U 113  ]
"104
[e :U 112 ]
[; ;virtualwire.c: 104: {
{
[; ;virtualwire.c: 105: *prescaler_value = prescaler_factor[pindex];
"105
[e = *U _prescaler_value *U + &U F1061 * -> _pindex `ux -> -> # *U &U F1061 `ui `ux ]
[; ;virtualwire.c: 106: aux_tmr0 = 12000000 / (4 * (*prescaler_value) * brate * 8);
"106
[e = _aux_tmr0 -> / -> 12000000 `l -> * * * -> -> 4 `i `ui *U _prescaler_value _brate -> -> 8 `i `ui `l `ui ]
[; ;virtualwire.c: 108: if (aux_tmr0 < 256)
"108
[e $ ! < _aux_tmr0 -> -> 256 `i `ui 115  ]
[; ;virtualwire.c: 109: {
"109
{
[; ;virtualwire.c: 110: *k_tmr0 = aux_tmr0;
"110
[e = *U _k_tmr0 -> _aux_tmr0 `uc ]
[; ;virtualwire.c: 111: if (pindex > 0)
"111
[e $ ! > -> _pindex `i -> 0 `i 116  ]
[; ;virtualwire.c: 112: {
"112
{
[; ;virtualwire.c: 113: *prescaler_bits = pindex - 1;
"113
[e = *U _prescaler_bits -> - -> _pindex `i -> 1 `i `uc ]
"114
}
[e :U 116 ]
[; ;virtualwire.c: 114: }
[; ;virtualwire.c: 115: return 1;
"115
[e ) -> -> 1 `i `uc ]
[e $UE 111  ]
"116
}
[e :U 115 ]
"117
}
"103
[e ++ _pindex -> -> 1 `i `uc ]
[e $ < -> _pindex `i -> 8 `i 112  ]
[e :U 113 ]
"117
}
[; ;virtualwire.c: 116: }
[; ;virtualwire.c: 117: }
[; ;virtualwire.c: 120: return 0;
"120
[e ) -> -> 0 `i `uc ]
[e $UE 111  ]
[; ;virtualwire.c: 121: }
"121
[e :UE 111 ]
}
"123
[v _vw_setup `(v ~T0 @X0 1 ef1`ui ]
"124
{
[; ;virtualwire.c: 123: void vw_setup(uint16_t brate)
[; ;virtualwire.c: 124: {
[e :U _vw_setup ]
"123
[v _brate `ui ~T0 @X0 1 r1 ]
"124
[f ]
"125
[v _prescaler_value `ui ~T0 @X0 1 a ]
"126
[v _prescaler_bits `uc ~T0 @X0 1 a ]
[; ;virtualwire.c: 125: uint16_t prescaler_value;
[; ;virtualwire.c: 126: uint8_t prescaler_bits;
[; ;virtualwire.c: 129: TRISB3 = 1;
"129
[e = _TRISB3 -> -> 1 `i `b ]
[; ;virtualwire.c: 130: TRISB4 = 0;
"130
[e = _TRISB4 -> -> 0 `i `b ]
[; ;virtualwire.c: 133: RB4 = 0;
"133
[e = _RB4 -> -> 0 `i `b ]
[; ;virtualwire.c: 136: _calc_timer0_prescaler(brate, &prescaler_value, &prescaler_bits, &vw_tmr0_value);
"136
[e ( __calc_timer0_prescaler (4 , , , _brate &U _prescaler_value &U _prescaler_bits &U _vw_tmr0_value ]
[; ;virtualwire.c: 138: if (prescaler_value > 1)
"138
[e $ ! > _prescaler_value -> -> 1 `i `ui 118  ]
[; ;virtualwire.c: 139: {
"139
{
[; ;virtualwire.c: 141: OPTION_REG &= 0xF0;
"141
[e =& _OPTION_REG -> -> 240 `i `uc ]
[; ;virtualwire.c: 142: OPTION_REG |= prescaler_bits;
"142
[e =| _OPTION_REG _prescaler_bits ]
"143
}
[e :U 118 ]
[; ;virtualwire.c: 143: }
[; ;virtualwire.c: 145: T0CS = 0;
"145
[e = _T0CS -> -> 0 `i `b ]
[; ;virtualwire.c: 146: TMR0 = (2 - vw_tmr0_value);
"146
[e = _TMR0 -> - -> 2 `i -> _vw_tmr0_value `i `uc ]
[; ;virtualwire.c: 148: TMR0IF = 0;
"148
[e = _TMR0IF -> -> 0 `i `b ]
[; ;virtualwire.c: 149: TMR0IE = 1;
"149
[e = _TMR0IE -> -> 1 `i `b ]
[; ;virtualwire.c: 150: GIE = PEIE = 1;
"150
[e = _GIE = _PEIE -> -> 1 `i `b ]
[; ;virtualwire.c: 151: }
"151
[e :UE 117 ]
}
"157
[v _vw_wait_tx `(v ~T0 @X0 1 ef ]
"158
{
[; ;virtualwire.c: 157: void vw_wait_tx(void)
[; ;virtualwire.c: 158: {
[e :U _vw_wait_tx ]
[f ]
[; ;virtualwire.c: 159: while (vw_tx_enabled);
"159
[e $U 120  ]
[e :U 121 ]
[e :U 120 ]
[e $ != -> _vw_tx_enabled `i -> -> -> 0 `i `uc `i 121  ]
[e :U 122 ]
[; ;virtualwire.c: 160: }
"160
[e :UE 119 ]
}
"162
[v _vw_tx_stop `(v ~T0 @X0 1 ef ]
"163
{
[; ;virtualwire.c: 162: void vw_tx_stop(void)
[; ;virtualwire.c: 163: {
[e :U _vw_tx_stop ]
[f ]
[; ;virtualwire.c: 164: RB4 = 0;
"164
[e = _RB4 -> -> 0 `i `b ]
[; ;virtualwire.c: 165: vw_tx_enabled = 0;
"165
[e = _vw_tx_enabled -> -> 0 `i `uc ]
[; ;virtualwire.c: 166: }
"166
[e :UE 123 ]
}
"168
[v _vw_tx_start `(v ~T0 @X0 1 ef ]
"169
{
[; ;virtualwire.c: 168: void vw_tx_start(void)
[; ;virtualwire.c: 169: {
[e :U _vw_tx_start ]
[f ]
[; ;virtualwire.c: 170: vw_tx_index = 0;
"170
[e = _vw_tx_index -> -> 0 `i `uc ]
[; ;virtualwire.c: 171: vw_tx_bit = 0;
"171
[e = _vw_tx_bit -> -> 0 `i `uc ]
[; ;virtualwire.c: 172: vw_tx_sample = 0;
"172
[e = _vw_tx_sample -> -> 0 `i `uc ]
[; ;virtualwire.c: 174: vw_tx_header = 1;
"174
[e = _vw_tx_header -> -> 1 `i `uc ]
[; ;virtualwire.c: 177: vw_tx_enabled = 1;
"177
[e = _vw_tx_enabled -> -> 1 `i `uc ]
[; ;virtualwire.c: 178: }
"178
[e :UE 124 ]
}
"180
[v _vw_send `(uc ~T0 @X0 1 ef2`*Cuc`uc ]
"181
{
[; ;virtualwire.c: 180: boolean vw_send(const char *buf, uint8_t len)
[; ;virtualwire.c: 181: {
[e :U _vw_send ]
"180
[v _buf `*Cuc ~T0 @X0 1 r1 ]
[v _len `uc ~T0 @X0 1 r2 ]
"181
[f ]
"182
[v _i `uc ~T0 @X0 1 a ]
"183
[v _index `uc ~T0 @X0 1 a ]
[; ;virtualwire.c: 182: uint8_t i;
[; ;virtualwire.c: 183: uint8_t index = 0;
[e = _index -> -> 0 `i `uc ]
"184
[v _crc `ui ~T0 @X0 1 a ]
[; ;virtualwire.c: 184: uint16_t crc = 0xffff;
[e = _crc -> 65535 `ui ]
"185
[v _p `*uc ~T0 @X0 1 a ]
[; ;virtualwire.c: 185: uint8_t *p = vw_tx_buf;
[e = _p -> &U _vw_tx_buf `*uc ]
"186
[v _count `uc ~T0 @X0 1 a ]
[; ;virtualwire.c: 186: uint8_t count = len + 3;
[e = _count -> + -> _len `i -> 3 `i `uc ]
[; ;virtualwire.c: 188: if (len > 8-3)
"188
[e $ ! > -> _len `i - -> 8 `i -> 3 `i 126  ]
[; ;virtualwire.c: 189: return 0;
"189
[e ) -> -> 0 `i `uc ]
[e $UE 125  ]
[e :U 126 ]
[; ;virtualwire.c: 192: vw_wait_tx();
"192
[e ( _vw_wait_tx ..  ]
[; ;virtualwire.c: 193: vw_rx_enabled = 0;
"193
[e = _vw_rx_enabled -> -> 0 `i `uc ]
[; ;virtualwire.c: 196: crc = _crc_ccitt_update(crc, count);
"196
[e = _crc ( __crc_ccitt_update (2 , _crc _count ]
[; ;virtualwire.c: 197: p[index++] = symbols[count >> 4];
"197
[e = *U + _p * -> ++ _index -> -> 1 `i `uc `ux -> -> # *U _p `ui `ux *U + &U _symbols * -> -> >> -> _count `i -> 4 `i `ui `ux -> -> # *U &U _symbols `ui `ux ]
[; ;virtualwire.c: 198: p[index++] = symbols[count & 0xf];
"198
[e = *U + _p * -> ++ _index -> -> 1 `i `uc `ux -> -> # *U _p `ui `ux *U + &U _symbols * -> -> & -> _count `i -> 15 `i `ui `ux -> -> # *U &U _symbols `ui `ux ]
[; ;virtualwire.c: 202: for (i = 0; i < len; i++)
"202
{
[e = _i -> -> 0 `i `uc ]
[e $U 130  ]
"203
[e :U 127 ]
[; ;virtualwire.c: 203: {
{
[; ;virtualwire.c: 204: crc = _crc_ccitt_update(crc, buf[i]);
"204
[e = _crc ( __crc_ccitt_update (2 , _crc *U + _buf * -> _i `ux -> -> # *U _buf `ui `ux ]
[; ;virtualwire.c: 205: p[index++] = symbols[buf[i] >> 4];
"205
[e = *U + _p * -> ++ _index -> -> 1 `i `uc `ux -> -> # *U _p `ui `ux *U + &U _symbols * -> -> >> -> *U + _buf * -> _i `ux -> -> # *U _buf `ui `ux `i -> 4 `i `ui `ux -> -> # *U &U _symbols `ui `ux ]
[; ;virtualwire.c: 206: p[index++] = symbols[buf[i] & 0xf];
"206
[e = *U + _p * -> ++ _index -> -> 1 `i `uc `ux -> -> # *U _p `ui `ux *U + &U _symbols * -> -> & -> *U + _buf * -> _i `ux -> -> # *U _buf `ui `ux `i -> 15 `i `ui `ux -> -> # *U &U _symbols `ui `ux ]
"207
}
"202
[e ++ _i -> -> 1 `i `uc ]
[e :U 130 ]
[e $ < -> _i `i -> _len `i 127  ]
[e :U 128 ]
"207
}
[; ;virtualwire.c: 207: }
[; ;virtualwire.c: 212: crc = ~crc;
"212
[e = _crc ~ _crc ]
[; ;virtualwire.c: 213: p[index++] = symbols[(crc >> 4) & 0xf];
"213
[e = *U + _p * -> ++ _index -> -> 1 `i `uc `ux -> -> # *U _p `ui `ux *U + &U _symbols * -> & >> _crc -> 4 `i -> -> 15 `i `ui `ux -> -> # *U &U _symbols `ui `ux ]
[; ;virtualwire.c: 214: p[index++] = symbols[crc & 0xf];
"214
[e = *U + _p * -> ++ _index -> -> 1 `i `uc `ux -> -> # *U _p `ui `ux *U + &U _symbols * -> & _crc -> -> 15 `i `ui `ux -> -> # *U &U _symbols `ui `ux ]
[; ;virtualwire.c: 215: p[index++] = symbols[(crc >> 12) & 0xf];
"215
[e = *U + _p * -> ++ _index -> -> 1 `i `uc `ux -> -> # *U _p `ui `ux *U + &U _symbols * -> & >> _crc -> 12 `i -> -> 15 `i `ui `ux -> -> # *U &U _symbols `ui `ux ]
[; ;virtualwire.c: 216: p[index++] = symbols[(crc >> 8) & 0xf];
"216
[e = *U + _p * -> ++ _index -> -> 1 `i `uc `ux -> -> # *U _p `ui `ux *U + &U _symbols * -> & >> _crc -> 8 `i -> -> 15 `i `ui `ux -> -> # *U &U _symbols `ui `ux ]
[; ;virtualwire.c: 219: vw_tx_len = index + 8;
"219
[e = _vw_tx_len -> + -> _index `i -> 8 `i `uc ]
[; ;virtualwire.c: 222: vw_tx_start();
"222
[e ( _vw_tx_start ..  ]
[; ;virtualwire.c: 224: return 1;
"224
[e ) -> -> 1 `i `uc ]
[e $UE 125  ]
[; ;virtualwire.c: 225: }
"225
[e :UE 125 ]
}
"234
[v _vw_crc `(ui ~T0 @X0 1 ef2`*uc`uc ]
"235
{
[; ;virtualwire.c: 234: uint16_t vw_crc(uint8_t *ptr, uint8_t count)
[; ;virtualwire.c: 235: {
[e :U _vw_crc ]
"234
[v _ptr `*uc ~T0 @X0 1 r1 ]
[v _count `uc ~T0 @X0 1 r2 ]
"235
[f ]
"236
[v _crc `ui ~T0 @X0 1 a ]
[; ;virtualwire.c: 236: uint16_t crc = 0xffff;
[e = _crc -> 65535 `ui ]
[; ;virtualwire.c: 238: while (count-- > 0)
"238
[e $U 132  ]
[e :U 133 ]
[; ;virtualwire.c: 239: crc = _crc_ccitt_update(crc, *ptr++);
"239
[e = _crc ( __crc_ccitt_update (2 , _crc *U ++ _ptr * -> -> 1 `i `x -> -> # *U _ptr `i `x ]
[e :U 132 ]
"238
[e $ > -> -- _count -> -> 1 `i `uc `i -> 0 `i 133  ]
[e :U 134 ]
[; ;virtualwire.c: 240: return crc;
"240
[e ) _crc ]
[e $UE 131  ]
[; ;virtualwire.c: 241: }
"241
[e :UE 131 ]
}
"245
[v _vw_symbol_6to4 `(uc ~T0 @X0 1 ef1`uc ]
"246
{
[; ;virtualwire.c: 245: uint8_t vw_symbol_6to4(uint8_t symbol)
[; ;virtualwire.c: 246: {
[e :U _vw_symbol_6to4 ]
"245
[v _symbol `uc ~T0 @X0 1 r1 ]
"246
[f ]
"247
[v _i `uc ~T0 @X0 1 a ]
[; ;virtualwire.c: 247: uint8_t i;
[; ;virtualwire.c: 250: for (i = 0; i < 16; i++)
"250
{
[e = _i -> -> 0 `i `uc ]
[e $ < -> _i `i -> 16 `i 136  ]
[e $U 137  ]
"251
[e :U 136 ]
[; ;virtualwire.c: 251: if (symbol == symbols[i])
[e $ ! == -> _symbol `i -> *U + &U _symbols * -> _i `ux -> -> # *U &U _symbols `ui `ux `i 139  ]
[; ;virtualwire.c: 252: return i;
"252
[e ) _i ]
[e $UE 135  ]
[e :U 139 ]
"250
[e ++ _i -> -> 1 `i `uc ]
[e $ < -> _i `i -> 16 `i 136  ]
[e :U 137 ]
"254
}
[; ;virtualwire.c: 254: return 0;
[e ) -> -> 0 `i `uc ]
[e $UE 135  ]
[; ;virtualwire.c: 255: }
"255
[e :UE 135 ]
}
"262
[v _vw_pll `(v ~T0 @X0 1 ef ]
"263
{
[; ;virtualwire.c: 262: void vw_pll(void)
[; ;virtualwire.c: 263: {
[e :U _vw_pll ]
[f ]
[; ;virtualwire.c: 265: if (vw_rx_sample)
"265
[e $ ! != -> _vw_rx_sample `i -> -> -> 0 `i `uc `i 141  ]
[; ;virtualwire.c: 266: vw_rx_integrator++;
"266
[e ++ _vw_rx_integrator -> -> 1 `i `uc ]
[e :U 141 ]
[; ;virtualwire.c: 268: if (vw_rx_sample != vw_rx_last_sample)
"268
[e $ ! != -> _vw_rx_sample `i -> _vw_rx_last_sample `i 142  ]
[; ;virtualwire.c: 269: {
"269
{
[; ;virtualwire.c: 271: vw_rx_pll_ramp += ((vw_rx_pll_ramp < 160/2)
[; ;virtualwire.c: 272: ? ((160/8)-9)
[; ;virtualwire.c: 273: : ((160/8)+9));
"273
[e =+ _vw_rx_pll_ramp -> ? < -> _vw_rx_pll_ramp `i / -> 160 `i -> 2 `i : - / -> 160 `i -> 8 `i -> 9 `i + / -> 160 `i -> 8 `i -> 9 `i `uc ]
[; ;virtualwire.c: 274: vw_rx_last_sample = vw_rx_sample;
"274
[e = _vw_rx_last_sample _vw_rx_sample ]
"275
}
[; ;virtualwire.c: 275: }
[e $U 143  ]
"276
[e :U 142 ]
[; ;virtualwire.c: 276: else
[; ;virtualwire.c: 277: {
"277
{
[; ;virtualwire.c: 280: vw_rx_pll_ramp += (160/8);
"280
[e =+ _vw_rx_pll_ramp -> / -> 160 `i -> 8 `i `uc ]
"281
}
[e :U 143 ]
[; ;virtualwire.c: 281: }
[; ;virtualwire.c: 282: if (vw_rx_pll_ramp >= 160)
"282
[e $ ! >= -> _vw_rx_pll_ramp `i -> 160 `i 144  ]
[; ;virtualwire.c: 283: {
"283
{
[; ;virtualwire.c: 286: vw_rx_bits >>= 1;
"286
[e =>> _vw_rx_bits -> 1 `i ]
[; ;virtualwire.c: 290: if (vw_rx_integrator >= 5)
"290
[e $ ! >= -> _vw_rx_integrator `i -> 5 `i 145  ]
[; ;virtualwire.c: 291: vw_rx_bits |= 0x800;
"291
[e =| _vw_rx_bits -> -> 2048 `i `ui ]
[e :U 145 ]
[; ;virtualwire.c: 293: vw_rx_pll_ramp -= 160;
"293
[e =- _vw_rx_pll_ramp -> -> 160 `i `uc ]
[; ;virtualwire.c: 294: vw_rx_integrator = 0;
"294
[e = _vw_rx_integrator -> -> 0 `i `uc ]
[; ;virtualwire.c: 296: if (vw_rx_active)
"296
[e $ ! != -> _vw_rx_active `i -> -> -> 0 `i `uc `i 146  ]
[; ;virtualwire.c: 297: {
"297
{
[; ;virtualwire.c: 300: if (++vw_rx_bit_count >= 12)
"300
[e $ ! >= -> =+ _vw_rx_bit_count -> -> 1 `i `uc `i -> 12 `i 147  ]
[; ;virtualwire.c: 301: {
"301
{
"305
[v _this_byte `uc ~T0 @X0 1 a ]
[; ;virtualwire.c: 305: uint8_t this_byte =
[; ;virtualwire.c: 306: (vw_symbol_6to4(vw_rx_bits & 0x3f)) << 4
[; ;virtualwire.c: 307: | vw_symbol_6to4(vw_rx_bits >> 6);
"307
[e = _this_byte -> | << -> ( _vw_symbol_6to4 (1 -> & _vw_rx_bits -> -> 63 `i `ui `uc `i -> 4 `i -> ( _vw_symbol_6to4 (1 -> >> _vw_rx_bits -> 6 `i `uc `i `uc ]
[; ;virtualwire.c: 312: if (vw_rx_len == 0)
"312
[e $ ! == -> _vw_rx_len `i -> 0 `i 148  ]
[; ;virtualwire.c: 313: {
"313
{
[; ;virtualwire.c: 317: vw_rx_count = this_byte;
"317
[e = _vw_rx_count _this_byte ]
[; ;virtualwire.c: 318: if (vw_rx_count < 4 || vw_rx_count > 8)
"318
[e $ ! || < -> _vw_rx_count `i -> 4 `i > -> _vw_rx_count `i -> 8 `i 149  ]
[; ;virtualwire.c: 319: {
"319
{
[; ;virtualwire.c: 321: vw_rx_active = 0;
"321
[e = _vw_rx_active -> -> 0 `i `uc ]
[; ;virtualwire.c: 322: return;
"322
[e $UE 140  ]
"323
}
[e :U 149 ]
"324
}
[e :U 148 ]
[; ;virtualwire.c: 323: }
[; ;virtualwire.c: 324: }
[; ;virtualwire.c: 325: vw_tx_buf[vw_rx_len++] = this_byte;
"325
[e = *U + &U _vw_tx_buf * -> ++ _vw_rx_len -> -> 1 `i `uc `ux -> -> # *U &U _vw_tx_buf `ui `ux _this_byte ]
[; ;virtualwire.c: 327: if (vw_rx_len >= vw_rx_count)
"327
[e $ ! >= -> _vw_rx_len `i -> _vw_rx_count `i 150  ]
[; ;virtualwire.c: 328: {
"328
{
[; ;virtualwire.c: 330: vw_rx_active = 0;
"330
[e = _vw_rx_active -> -> 0 `i `uc ]
[; ;virtualwire.c: 331: vw_rx_done = 1;
"331
[e = _vw_rx_done -> -> 1 `i `uc ]
"332
}
[e :U 150 ]
[; ;virtualwire.c: 332: }
[; ;virtualwire.c: 333: vw_rx_bit_count = 0;
"333
[e = _vw_rx_bit_count -> -> 0 `i `uc ]
"334
}
[e :U 147 ]
"335
}
[; ;virtualwire.c: 334: }
[; ;virtualwire.c: 335: }
[e $U 151  ]
"337
[e :U 146 ]
[; ;virtualwire.c: 337: else if (vw_rx_bits == 0xb38)
[e $ ! == _vw_rx_bits -> -> 2872 `i `ui 152  ]
[; ;virtualwire.c: 338: {
"338
{
[; ;virtualwire.c: 340: vw_rx_active = 1;
"340
[e = _vw_rx_active -> -> 1 `i `uc ]
[; ;virtualwire.c: 341: vw_rx_bit_count = 0;
"341
[e = _vw_rx_bit_count -> -> 0 `i `uc ]
[; ;virtualwire.c: 342: vw_rx_len = 0;
"342
[e = _vw_rx_len -> -> 0 `i `uc ]
[; ;virtualwire.c: 343: vw_rx_done = 0;
"343
[e = _vw_rx_done -> -> 0 `i `uc ]
"344
}
[e :U 152 ]
"345
[e :U 151 ]
}
[e :U 144 ]
[; ;virtualwire.c: 344: }
[; ;virtualwire.c: 345: }
[; ;virtualwire.c: 346: }
"346
[e :UE 140 ]
}
"348
[v _vw_have_message `(uc ~T0 @X0 1 ef ]
"349
{
[; ;virtualwire.c: 348: boolean vw_have_message(void)
[; ;virtualwire.c: 349: {
[e :U _vw_have_message ]
[f ]
[; ;virtualwire.c: 350: return (vw_rx_done) ? 1 : 0;
"350
[e ) -> ? != -> _vw_rx_done `i -> -> -> 0 `i `Vuc `i : -> 1 `i -> 0 `i `uc ]
[e $UE 153  ]
[; ;virtualwire.c: 351: }
"351
[e :UE 153 ]
}
"353
[v _vw_recv `(uc ~T0 @X0 1 ef2`*uc`*uc ]
"354
{
[; ;virtualwire.c: 353: boolean vw_recv(uint8_t *buf, uint8_t *len)
[; ;virtualwire.c: 354: {
[e :U _vw_recv ]
"353
[v _buf `*uc ~T0 @X0 1 r1 ]
[v _len `*uc ~T0 @X0 1 r2 ]
"354
[f ]
"355
[v _rxlen `uc ~T0 @X0 1 a ]
[; ;virtualwire.c: 355: uint8_t rxlen;
[; ;virtualwire.c: 358: if (!vw_rx_done)
"358
[e $ ! ! != -> _vw_rx_done `i -> -> -> 0 `i `Vuc `i 155  ]
[; ;virtualwire.c: 359: return 0;
"359
[e ) -> -> 0 `i `uc ]
[e $UE 154  ]
[e :U 155 ]
[; ;virtualwire.c: 363: rxlen = vw_rx_len - 3;
"363
[e = _rxlen -> - -> _vw_rx_len `i -> 3 `i `uc ]
[; ;virtualwire.c: 366: if (*len > rxlen)
"366
[e $ ! > -> *U _len `i -> _rxlen `i 156  ]
[; ;virtualwire.c: 367: *len = rxlen;
"367
[e = *U _len _rxlen ]
[e :U 156 ]
[; ;virtualwire.c: 368: memcpy(buf, vw_tx_buf + 1, *len);
"368
[e ( _memcpy (3 , , _buf -> + &U _vw_tx_buf * -> -> 1 `i `x -> -> # *U &U _vw_tx_buf `i `x `*uc -> *U _len `ui ]
[; ;virtualwire.c: 370: vw_rx_done = 0;
"370
[e = _vw_rx_done -> -> 0 `i `uc ]
[; ;virtualwire.c: 373: return (vw_crc(vw_tx_buf, vw_rx_len) == 0xf0b8);
"373
[e ) -> -> == ( _vw_crc (2 , -> &U _vw_tx_buf `*uc _vw_rx_len -> 61624 `ui `i `uc ]
[e $UE 154  ]
[; ;virtualwire.c: 374: }
"374
[e :UE 154 ]
}
"376
[v _vw_rx_stop `(v ~T0 @X0 1 ef ]
"377
{
[; ;virtualwire.c: 376: void vw_rx_stop(void)
[; ;virtualwire.c: 377: {
[e :U _vw_rx_stop ]
[f ]
[; ;virtualwire.c: 378: vw_rx_enabled = 0;
"378
[e = _vw_rx_enabled -> -> 0 `i `uc ]
[; ;virtualwire.c: 379: vw_rx_enabled_last = 0;
"379
[e = _vw_rx_enabled_last -> -> 0 `i `uc ]
[; ;virtualwire.c: 380: }
"380
[e :UE 157 ]
}
"382
[v _vw_rx_start `(v ~T0 @X0 1 ef ]
"383
{
[; ;virtualwire.c: 382: void vw_rx_start(void)
[; ;virtualwire.c: 383: {
[e :U _vw_rx_start ]
[f ]
[; ;virtualwire.c: 384: vw_rx_enabled = 1;
"384
[e = _vw_rx_enabled -> -> 1 `i `uc ]
[; ;virtualwire.c: 385: vw_rx_enabled_last = 1;
"385
[e = _vw_rx_enabled_last -> -> 1 `i `uc ]
[; ;virtualwire.c: 386: }
"386
[e :UE 158 ]
}
"388
[v _vw_isr_tmr0 `(v ~T0 @X0 1 ef ]
"389
{
[; ;virtualwire.c: 388: void vw_isr_tmr0(void)
[; ;virtualwire.c: 389: {
[e :U _vw_isr_tmr0 ]
[f ]
[; ;virtualwire.c: 390: TMR0 += -vw_tmr0_value + 4;
"390
[e =+ _TMR0 -> + -U -> _vw_tmr0_value `i -> 4 `i `uc ]
[; ;virtualwire.c: 391: TMR0IF = 0;
"391
[e = _TMR0IF -> -> 0 `i `b ]
[; ;virtualwire.c: 393: if (vw_rx_enabled && !vw_tx_enabled)
"393
[e $ ! && != -> _vw_rx_enabled `i -> -> -> 0 `i `uc `i ! != -> _vw_tx_enabled `i -> -> -> 0 `i `uc `i 160  ]
[; ;virtualwire.c: 395: if(vw_rx_inverted){
"395
[e $ ! != -> _vw_rx_inverted `i -> -> -> 0 `i `uc `i 161  ]
{
[; ;virtualwire.c: 396: vw_rx_sample = (RB3)? 0 : 1;
"396
[e = _vw_rx_sample -> ? _RB3 : -> 0 `i -> 1 `i `uc ]
"397
}
[; ;virtualwire.c: 397: }
[e $U 162  ]
"398
[e :U 161 ]
[; ;virtualwire.c: 398: else{
{
[; ;virtualwire.c: 399: vw_rx_sample = RB3;
"399
[e = _vw_rx_sample -> -> _RB3 `i `uc ]
"400
}
[e :U 162 ]
[e :U 160 ]
[; ;virtualwire.c: 400: }
[; ;virtualwire.c: 404: if (vw_tx_enabled && vw_tx_sample++ == 0)
"404
[e $ ! && != -> _vw_tx_enabled `i -> -> -> 0 `i `uc `i == -> ++ _vw_tx_sample -> -> 1 `i `uc `i -> 0 `i 163  ]
[; ;virtualwire.c: 405: {
"405
{
[; ;virtualwire.c: 406: if (vw_tx_header)
"406
[e $ ! != -> _vw_tx_header `i -> -> -> 0 `i `uc `i 164  ]
[; ;virtualwire.c: 407: {
"407
{
[; ;virtualwire.c: 408: RB4 = (vw_tx_buf_header[vw_tx_index] & (1 << vw_tx_bit++)) ? 1 : 0;
"408
[e = _RB4 -> ? != & -> *U + &U _vw_tx_buf_header * -> _vw_tx_index `ux -> -> # *U &U _vw_tx_buf_header `ui `ux `i << -> 1 `i ++ _vw_tx_bit -> -> 1 `i `uc -> 0 `i : -> 1 `i -> 0 `i `b ]
[; ;virtualwire.c: 409: if (vw_tx_bit >= 6)
"409
[e $ ! >= -> _vw_tx_bit `i -> 6 `i 165  ]
[; ;virtualwire.c: 410: {
"410
{
[; ;virtualwire.c: 411: vw_tx_bit = 0;
"411
[e = _vw_tx_bit -> -> 0 `i `uc ]
[; ;virtualwire.c: 412: vw_tx_index++;
"412
[e ++ _vw_tx_index -> -> 1 `i `uc ]
"413
}
[e :U 165 ]
[; ;virtualwire.c: 413: }
[; ;virtualwire.c: 415: if (vw_tx_index >= 8)
"415
[e $ ! >= -> _vw_tx_index `i -> 8 `i 166  ]
[; ;virtualwire.c: 416: {
"416
{
[; ;virtualwire.c: 418: vw_tx_header = 0;
"418
[e = _vw_tx_header -> -> 0 `i `uc ]
[; ;virtualwire.c: 419: vw_tx_index = 0;
"419
[e = _vw_tx_index -> -> 0 `i `uc ]
"420
}
[e :U 166 ]
"421
}
[; ;virtualwire.c: 420: }
[; ;virtualwire.c: 421: }
[e $U 167  ]
"422
[e :U 164 ]
[; ;virtualwire.c: 422: else
[; ;virtualwire.c: 423: {
"423
{
[; ;virtualwire.c: 428: if (vw_tx_index >= vw_tx_len)
"428
[e $ ! >= -> _vw_tx_index `i -> _vw_tx_len `i 168  ]
[; ;virtualwire.c: 429: {
"429
{
[; ;virtualwire.c: 430: vw_tx_stop();
"430
[e ( _vw_tx_stop ..  ]
[; ;virtualwire.c: 431: vw_rx_enabled = vw_rx_enabled_last;
"431
[e = _vw_rx_enabled _vw_rx_enabled_last ]
"432
}
[; ;virtualwire.c: 432: }
[e $U 169  ]
"433
[e :U 168 ]
[; ;virtualwire.c: 433: else
[; ;virtualwire.c: 434: {
"434
{
[; ;virtualwire.c: 435: RB4 = (vw_tx_buf[vw_tx_index] & (1 << vw_tx_bit++)) ? 1 : 0;
"435
[e = _RB4 -> ? != & -> *U + &U _vw_tx_buf * -> _vw_tx_index `ux -> -> # *U &U _vw_tx_buf `ui `ux `i << -> 1 `i ++ _vw_tx_bit -> -> 1 `i `uc -> 0 `i : -> 1 `i -> 0 `i `b ]
[; ;virtualwire.c: 436: if (vw_tx_bit >= 6)
"436
[e $ ! >= -> _vw_tx_bit `i -> 6 `i 170  ]
[; ;virtualwire.c: 437: {
"437
{
[; ;virtualwire.c: 438: vw_tx_bit = 0;
"438
[e = _vw_tx_bit -> -> 0 `i `uc ]
[; ;virtualwire.c: 439: vw_tx_index++;
"439
[e ++ _vw_tx_index -> -> 1 `i `uc ]
"440
}
[e :U 170 ]
"441
}
[e :U 169 ]
"442
}
[e :U 167 ]
"444
}
[e :U 163 ]
[; ;virtualwire.c: 440: }
[; ;virtualwire.c: 441: }
[; ;virtualwire.c: 442: }
[; ;virtualwire.c: 444: }
[; ;virtualwire.c: 446: if (vw_tx_sample > 7)
"446
[e $ ! > -> _vw_tx_sample `i -> 7 `i 171  ]
[; ;virtualwire.c: 447: vw_tx_sample = 0;
"447
[e = _vw_tx_sample -> -> 0 `i `uc ]
[e :U 171 ]
[; ;virtualwire.c: 451: if (vw_rx_enabled && !vw_tx_enabled)
"451
[e $ ! && != -> _vw_rx_enabled `i -> -> -> 0 `i `uc `i ! != -> _vw_tx_enabled `i -> -> -> 0 `i `uc `i 172  ]
[; ;virtualwire.c: 452: vw_pll();
"452
[e ( _vw_pll ..  ]
[e :U 172 ]
[; ;virtualwire.c: 453: }
"453
[e :UE 159 ]
}
"456
[v _vw_set_rx_inverted `(v ~T0 @X0 1 ef ]
{
[; ;virtualwire.c: 456: void vw_set_rx_inverted(void){
[e :U _vw_set_rx_inverted ]
[f ]
[; ;virtualwire.c: 457: vw_rx_inverted = 1;
"457
[e = _vw_rx_inverted -> -> 1 `i `uc ]
[; ;virtualwire.c: 458: }
"458
[e :UE 173 ]
}
"460
[v _vw_is_rx_inverted `(uc ~T0 @X0 1 ef ]
{
[; ;virtualwire.c: 460: boolean vw_is_rx_inverted(void){
[e :U _vw_is_rx_inverted ]
[f ]
[; ;virtualwire.c: 461: return vw_rx_inverted;
"461
[e ) _vw_rx_inverted ]
[e $UE 174  ]
[; ;virtualwire.c: 462: }
"462
[e :UE 174 ]
}
