

Microchip Technology PIC LITE Macro Assembler V1.40 build -251452761 
                                                                                               Tue Sep 26 19:47:20 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	12F675
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2
    10                           	psect	text2,local,class=CODE,merge=1,delta=2
    11                           	psect	text3,local,class=CODE,merge=1,delta=2
    12                           	psect	text4,local,class=CODE,merge=1,delta=2
    13                           	psect	text5,local,class=CODE,merge=1,delta=2
    14                           	psect	text6,local,class=CODE,merge=1,delta=2
    15                           	psect	text7,local,class=CODE,merge=1,delta=2
    16                           	psect	text8,local,class=CODE,merge=1,delta=2
    17                           	psect	text9,local,class=CODE,merge=1,delta=2
    18                           	psect	text10,local,class=CODE,merge=1,delta=2
    19                           	psect	intentry,global,class=CODE,delta=2
    20                           	psect	text11,local,class=CODE,merge=1,delta=2
    21                           	psect	swtext1,local,class=CONST,delta=2
    22                           	psect	text12,local,class=CODE,merge=1,delta=2
    23                           	psect	text13,local,class=CODE,merge=1,delta=2
    24                           	psect	text14,local,class=CODE,merge=1,delta=2
    25                           	psect	text15,local,class=CODE,merge=1,delta=2
    26                           	psect	text16,local,class=CODE,merge=1,delta=2
    27                           	psect	text17,local,class=CODE,merge=1,delta=2
    28                           	psect	text18,local,class=CODE,merge=1,delta=2
    29                           	psect	text19,local,class=CODE,merge=1,delta=2
    30                           	psect	text20,local,class=CODE,merge=1,delta=2
    31                           	psect	text21,local,class=CODE,merge=1,delta=2
    32                           	psect	functab,global,reloc=256,class=CODE,delta=2
    33                           	psect	strings,global,class=STRING,delta=2
    34                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
    35                           	dabs	1,0x5E,2
    36  0000                     
    37                           ; Version 1.40
    38                           ; Generated 01/12/2016 GMT
    39                           ; 
    40                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    41                           ; All rights reserved.
    42                           ; 
    43                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    44                           ; 
    45                           ; Redistribution and use in source and binary forms, with or without modification, are
    46                           ; permitted provided that the following conditions are met:
    47                           ; 
    48                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    49                           ;        conditions and the following disclaimer.
    50                           ; 
    51                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    52                           ;        of conditions and the following disclaimer in the documentation and/or other
    53                           ;        materials provided with the distribution.
    54                           ; 
    55                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    56                           ;        software without specific prior written permission.
    57                           ; 
    58                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    59                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    60                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    61                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    62                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    63                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    64                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    65                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    66                           ; 
    67                           ; 
    68                           ; Code-generator required, PIC12F675 Definitions
    69                           ; 
    70                           ; SFR Addresses
    71  0000                     	;# 
    72  0001                     	;# 
    73  0002                     	;# 
    74  0003                     	;# 
    75  0004                     	;# 
    76  0005                     	;# 
    77  000A                     	;# 
    78  000B                     	;# 
    79  000C                     	;# 
    80  000E                     	;# 
    81  000E                     	;# 
    82  000F                     	;# 
    83  0010                     	;# 
    84  0019                     	;# 
    85  001E                     	;# 
    86  001F                     	;# 
    87  0081                     	;# 
    88  0085                     	;# 
    89  008C                     	;# 
    90  008E                     	;# 
    91  0090                     	;# 
    92  0095                     	;# 
    93  0096                     	;# 
    94  0096                     	;# 
    95  0099                     	;# 
    96  009A                     	;# 
    97  009A                     	;# 
    98  009B                     	;# 
    99  009C                     	;# 
   100  009D                     	;# 
   101  009E                     	;# 
   102  009F                     	;# 
   103  001F                     _ADCON0bits	set	31
   104  001E                     _ADRESH	set	30
   105  0005                     _GPIO	set	5
   106  0001                     _TMR0	set	1
   107  00FF                     _ADFM	set	255
   108  00F8                     _ADON	set	248
   109  00FA                     _CHS0	set	250
   110  00FB                     _CHS1	set	251
   111  005F                     _GIE	set	95
   112  00F9                     _GO_nDONE	set	249
   113  0029                     _GP1	set	41
   114  002C                     _GP4	set	44
   115  002D                     _GP5	set	45
   116  005D                     _T0IE	set	93
   117  005A                     _T0IF	set	90
   118  00FE                     _VCFG	set	254
   119  009F                     _ANSELbits	set	159
   120  0085                     _TRISIO	set	133
   121  04FC                     _ADCS0	set	1276
   122  04FD                     _ADCS1	set	1277
   123  04FE                     _ADCS2	set	1278
   124  0408                     _PS0	set	1032
   125  0409                     _PS1	set	1033
   126  040A                     _PS2	set	1034
   127  040B                     _PSA	set	1035
   128  040D                     _T0CS	set	1037
   129                           
   130                           ; #config settings
   131  0000                     
   132                           	psect	cinit
   133  0010                     start_initialization:	
   134  0010                     __initialization:	
   135                           
   136                           ; Clear objects allocated to BANK0
   137  0010  1283               	bcf	3,5	;RP0=0, select bank0
   138  0011  01B6               	clrf	__pbssBANK0& (0+127)
   139  0012  01B7               	clrf	(__pbssBANK0+1)& (0+127)
   140  0013  01B8               	clrf	(__pbssBANK0+2)& (0+127)
   141  0014  01B9               	clrf	(__pbssBANK0+3)& (0+127)
   142  0015                     end_of_initialization:	
   143                           ;End of C runtime variable initialization code
   144                           
   145  0015                     __end_of__initialization:	
   146  0015  0183               	clrf	3
   147  0016  2857               	ljmp	_main	;jump to C main() function
   148                           
   149                           	psect	bssBANK0
   150  0036                     __pbssBANK0:	
   151  0036                     _TMR0_count:	
   152  0036                     	ds	1
   153  0037                     _TMR0_start_count:	
   154  0037                     	ds	1
   155  0038                     _blink_count:	
   156  0038                     	ds	1
   157  0039                     _k:	
   158  0039                     	ds	1
   159                           
   160                           	psect	cstackCOMMON
   161  0000                     __pcstackCOMMON:	
   162  0000                     ??_TMR0_Init:	
   163  0000                     ??_TMR0_setTMR0:	
   164                           ; 1 bytes @ 0x0
   165                           
   166  0000                     ??_TMR0_checkTimeout:	
   167                           ; 1 bytes @ 0x0
   168                           
   169  0000                     ??_ADC_Init:	
   170                           ; 1 bytes @ 0x0
   171                           
   172                           
   173                           	psect	cstackBANK0
   174  0020                     __pcstackBANK0:	
   175                           ; 1 bytes @ 0x0
   176                           
   177  0020                     ?_TMR0_Init:	
   178  0020                     ?_TMR0_setTMR0:	
   179                           ; 1 bytes @ 0x0
   180                           
   181  0020                     ?_TMR0_checkTimeout:	
   182                           ; 1 bytes @ 0x0
   183                           
   184  0020                     ?_ADC_Init:	
   185                           ; 1 bytes @ 0x0
   186                           
   187  0020                     ?_KeypadConstructor:	
   188                           ; 1 bytes @ 0x0
   189                           
   190  0020                     ?_keypad_read:	
   191                           ; 1 bytes @ 0x0
   192                           
   193  0020                     ?_keypad_access:	
   194                           ; 1 bytes @ 0x0
   195                           
   196  0020                     ?_ISR:	
   197                           ; 1 bytes @ 0x0
   198                           
   199  0020                     ?_main:	
   200                           ; 1 bytes @ 0x0
   201                           
   202  0020                     ?i1_Keypad_START:	
   203                           ; 1 bytes @ 0x0
   204                           
   205  0020                     ?i1_Keypad_STATE_WAITING_FOR_A_OR_HASH:	
   206                           ; 1 bytes @ 0x0
   207                           
   208  0020                     ?i1_Keypad_STATE_WAITING_FOR_B:	
   209                           ; 1 bytes @ 0x0
   210                           
   211  0020                     ?i1_Keypad_STATE_WAITING_FOR_C:	
   212                           ; 1 bytes @ 0x0
   213                           
   214  0020                     ?i1_Keypad_STATE_WAITING_FOR_D:	
   215                           ; 1 bytes @ 0x0
   216                           
   217  0020                     ?i1_Keypad_STATE_WAITING_FOR_STAR:	
   218                           ; 1 bytes @ 0x0
   219                           
   220  0020                     ?_ADC_Read_8_bits:	
   221                           ; 1 bytes @ 0x0
   222                           
   223  0020                     TMR0_setTMR0@val:	
   224                           ; 2 bytes @ 0x0
   225                           
   226  0020                     i1Keypad_START@this:	
   227                           ; 1 bytes @ 0x0
   228                           
   229  0020                     i1Keypad_STATE_WAITING_FOR_A_OR_HASH@this:	
   230                           ; 1 bytes @ 0x0
   231                           
   232  0020                     i1Keypad_STATE_WAITING_FOR_B@this:	
   233                           ; 1 bytes @ 0x0
   234                           
   235  0020                     i1Keypad_STATE_WAITING_FOR_C@this:	
   236                           ; 1 bytes @ 0x0
   237                           
   238  0020                     i1Keypad_STATE_WAITING_FOR_D@this:	
   239                           ; 1 bytes @ 0x0
   240                           
   241  0020                     i1Keypad_STATE_WAITING_FOR_STAR@this:	
   242                           ; 1 bytes @ 0x0
   243                           
   244                           
   245                           ; 1 bytes @ 0x0
   246  0020                     	ds	1
   247  0021                     i1Keypad_START@event:	
   248  0021                     i1Keypad_STATE_WAITING_FOR_A_OR_HASH@event:	
   249                           ; 2 bytes @ 0x1
   250                           
   251  0021                     i1Keypad_STATE_WAITING_FOR_B@event:	
   252                           ; 2 bytes @ 0x1
   253                           
   254  0021                     i1Keypad_STATE_WAITING_FOR_C@event:	
   255                           ; 2 bytes @ 0x1
   256                           
   257  0021                     i1Keypad_STATE_WAITING_FOR_D@event:	
   258                           ; 2 bytes @ 0x1
   259                           
   260  0021                     i1Keypad_STATE_WAITING_FOR_STAR@event:	
   261                           ; 2 bytes @ 0x1
   262                           
   263                           
   264                           ; 2 bytes @ 0x1
   265  0021                     	ds	1
   266  0022                     ??_ADC_Read_8_bits:	
   267                           
   268                           ; 1 bytes @ 0x2
   269  0022                     	ds	1
   270  0023                     ??i1_Keypad_START:	
   271  0023                     ??i1_Keypad_STATE_WAITING_FOR_A_OR_HASH:	
   272                           ; 1 bytes @ 0x3
   273                           
   274  0023                     ??i1_Keypad_STATE_WAITING_FOR_B:	
   275                           ; 1 bytes @ 0x3
   276                           
   277  0023                     ??i1_Keypad_STATE_WAITING_FOR_C:	
   278                           ; 1 bytes @ 0x3
   279                           
   280  0023                     ??i1_Keypad_STATE_WAITING_FOR_D:	
   281                           ; 1 bytes @ 0x3
   282                           
   283  0023                     ??i1_Keypad_STATE_WAITING_FOR_STAR:	
   284                           ; 1 bytes @ 0x3
   285                           
   286                           
   287                           ; 1 bytes @ 0x3
   288  0023                     	ds	1
   289  0024                     ??_keypad_read:	
   290                           
   291                           ; 1 bytes @ 0x4
   292  0024                     	ds	1
   293  0025                     keypad_read@adc_result:	
   294                           
   295                           ; 1 bytes @ 0x5
   296  0025                     	ds	1
   297  0026                     ??_keypad_access:	
   298                           
   299                           ; 1 bytes @ 0x6
   300  0026                     	ds	1
   301  0027                     keypad_access@k:	
   302                           
   303                           ; 1 bytes @ 0x7
   304  0027                     	ds	1
   305  0028                     keypad_access@ke:	
   306                           
   307                           ; 2 bytes @ 0x8
   308  0028                     	ds	2
   309  002A                     ??_ISR:	
   310                           
   311                           ; 1 bytes @ 0xA
   312  002A                     	ds	5
   313  002F                     ?_Keypad_START:	
   314  002F                     ?_Keypad_STATE_WAITING_FOR_A_OR_HASH:	
   315                           ; 1 bytes @ 0xF
   316                           
   317  002F                     ?_Keypad_STATE_WAITING_FOR_B:	
   318                           ; 1 bytes @ 0xF
   319                           
   320  002F                     ?_Keypad_STATE_WAITING_FOR_STAR:	
   321                           ; 1 bytes @ 0xF
   322                           
   323  002F                     ?_Keypad_STATE_WAITING_FOR_C:	
   324                           ; 1 bytes @ 0xF
   325                           
   326  002F                     ?_Keypad_STATE_WAITING_FOR_D:	
   327                           ; 1 bytes @ 0xF
   328                           
   329  002F                     ??_KeypadConstructor:	
   330                           ; 1 bytes @ 0xF
   331                           
   332  002F                     Keypad_START@this:	
   333                           ; 1 bytes @ 0xF
   334                           
   335  002F                     Keypad_STATE_WAITING_FOR_A_OR_HASH@this:	
   336                           ; 1 bytes @ 0xF
   337                           
   338  002F                     Keypad_STATE_WAITING_FOR_B@this:	
   339                           ; 1 bytes @ 0xF
   340                           
   341  002F                     Keypad_STATE_WAITING_FOR_C@this:	
   342                           ; 1 bytes @ 0xF
   343                           
   344  002F                     Keypad_STATE_WAITING_FOR_D@this:	
   345                           ; 1 bytes @ 0xF
   346                           
   347  002F                     Keypad_STATE_WAITING_FOR_STAR@this:	
   348                           ; 1 bytes @ 0xF
   349                           
   350                           
   351                           ; 1 bytes @ 0xF
   352  002F                     	ds	1
   353  0030                     KeypadConstructor@me:	
   354  0030                     Keypad_START@event:	
   355                           ; 1 bytes @ 0x10
   356                           
   357  0030                     Keypad_STATE_WAITING_FOR_A_OR_HASH@event:	
   358                           ; 2 bytes @ 0x10
   359                           
   360  0030                     Keypad_STATE_WAITING_FOR_B@event:	
   361                           ; 2 bytes @ 0x10
   362                           
   363  0030                     Keypad_STATE_WAITING_FOR_C@event:	
   364                           ; 2 bytes @ 0x10
   365                           
   366  0030                     Keypad_STATE_WAITING_FOR_D@event:	
   367                           ; 2 bytes @ 0x10
   368                           
   369  0030                     Keypad_STATE_WAITING_FOR_STAR@event:	
   370                           ; 2 bytes @ 0x10
   371                           
   372                           
   373                           ; 2 bytes @ 0x10
   374  0030                     	ds	2
   375  0032                     ??_Keypad_START:	
   376  0032                     ??_Keypad_STATE_WAITING_FOR_A_OR_HASH:	
   377                           ; 1 bytes @ 0x12
   378                           
   379  0032                     ??_Keypad_STATE_WAITING_FOR_B:	
   380                           ; 1 bytes @ 0x12
   381                           
   382  0032                     ??_Keypad_STATE_WAITING_FOR_STAR:	
   383                           ; 1 bytes @ 0x12
   384                           
   385  0032                     ??_Keypad_STATE_WAITING_FOR_C:	
   386                           ; 1 bytes @ 0x12
   387                           
   388  0032                     ??_Keypad_STATE_WAITING_FOR_D:	
   389                           ; 1 bytes @ 0x12
   390                           
   391                           
   392                           ; 1 bytes @ 0x12
   393  0032                     	ds	3
   394  0035                     ??_main:	
   395                           
   396                           ; 1 bytes @ 0x15
   397  0035                     	ds	1
   398                           
   399                           	psect	maintext
   400  0057                     __pmaintext:	
   401 ;;
   402 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   403 ;;
   404 ;; *************** function _main *****************
   405 ;; Defined at:
   406 ;;		line 46 in file "main.c"
   407 ;; Parameters:    Size  Location     Type
   408 ;;		None
   409 ;; Auto vars:     Size  Location     Type
   410 ;;		None
   411 ;; Return value:  Size  Location     Type
   412 ;;                  1    wreg      void 
   413 ;; Registers used:
   414 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   415 ;; Tracked objects:
   416 ;;		On entry : B00/0
   417 ;;		On exit  : 0/0
   418 ;;		Unchanged: 0/0
   419 ;; Data sizes:     COMMON   BANK0
   420 ;;      Params:         0       0
   421 ;;      Locals:         0       0
   422 ;;      Temps:          0       1
   423 ;;      Totals:         0       1
   424 ;;Total ram usage:        1 bytes
   425 ;; Hardware stack levels required when called:    5
   426 ;; This function calls:
   427 ;;		_ADC_Init
   428 ;;		_KeypadConstructor
   429 ;;		_Keypad_START
   430 ;;		_Keypad_STATE_WAITING_FOR_A_OR_HASH
   431 ;;		_Keypad_STATE_WAITING_FOR_B
   432 ;;		_Keypad_STATE_WAITING_FOR_C
   433 ;;		_Keypad_STATE_WAITING_FOR_D
   434 ;;		_Keypad_STATE_WAITING_FOR_STAR
   435 ;;		_TMR0_Init
   436 ;; This function is called by:
   437 ;;		Startup code after reset
   438 ;; This function uses a non-reentrant model
   439 ;;
   440                           
   441                           
   442                           ;psect for function _main
   443  0057                     _main:	
   444                           
   445                           ;main.c: 47: ANSELbits.ANS0 = 1;
   446                           
   447                           ;incstack = 0
   448                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   449  0057  1683               	bsf	3,5	;RP0=1, select bank1
   450  0058  141F               	bsf	31,0	;volatile
   451                           
   452                           ;main.c: 48: ANSELbits.ANS1 = 0;
   453  0059  109F               	bcf	31,1	;volatile
   454                           
   455                           ;main.c: 49: ANSELbits.ANS2 = 0;
   456  005A  111F               	bcf	31,2	;volatile
   457                           
   458                           ;main.c: 50: ANSELbits.ANS3 = 0;
   459  005B  119F               	bcf	31,3	;volatile
   460                           
   461                           ;main.c: 52: TRISIO = 0x01;
   462  005C  3001               	movlw	1
   463  005D  0085               	movwf	5	;volatile
   464                           
   465                           ;main.c: 53: GPIO = 0;
   466  005E  1283               	bcf	3,5	;RP0=0, select bank0
   467  005F  0185               	clrf	5	;volatile
   468                           
   469                           ;main.c: 55: TMR0_Init();
   470  0060  23EF               	fcall	_TMR0_Init
   471                           
   472                           ;main.c: 56: ADC_Init();
   473  0061  20A3               	fcall	_ADC_Init
   474                           
   475                           ;main.c: 59: KeypadConstructor(&k);
   476  0062  3039               	movlw	(low (_k| 0))& (0+255)
   477  0063  20AE               	fcall	_KeypadConstructor
   478                           
   479                           ;main.c: 60: (* ((Fsm *) &k)->fsmState)((Fsm *) &k, 0);
   480  0064  3039               	movlw	(low (_k| 0))& (0+255)
   481  0065  1283               	bcf	3,5	;RP0=0, select bank0
   482  0066  00B5               	movwf	??_main
   483  0067  0835               	movf	??_main,w
   484  0068  00AF               	movwf	Keypad_STATE_WAITING_FOR_D@this
   485  0069  3000               	movlw	0
   486  006A  00B0               	movwf	Keypad_STATE_WAITING_FOR_D@event
   487  006B  00B1               	movwf	Keypad_STATE_WAITING_FOR_D@event+1
   488  006C  0839               	movf	_k,w
   489  006D  2100               	fcall	fptable
   490  006E                     l192:	
   491                           ;main.c: 63: while(1){
   492                           
   493  006E  286E               	goto	l192
   494  006F                     __end_of_main:	
   495                           ;main.c: 70: }
   496                           ;main.c: 71: return;
   497                           
   498                           
   499                           	psect	text1
   500  03EF                     __ptext1:	
   501 ;; *************** function _TMR0_Init *****************
   502 ;; Defined at:
   503 ;;		line 9 in file "tmr0.h"
   504 ;; Parameters:    Size  Location     Type
   505 ;;		None
   506 ;; Auto vars:     Size  Location     Type
   507 ;;		None
   508 ;; Return value:  Size  Location     Type
   509 ;;                  1    wreg      void 
   510 ;; Registers used:
   511 ;;		None
   512 ;; Tracked objects:
   513 ;;		On entry : 0/0
   514 ;;		On exit  : 0/0
   515 ;;		Unchanged: 0/0
   516 ;; Data sizes:     COMMON   BANK0
   517 ;;      Params:         0       0
   518 ;;      Locals:         0       0
   519 ;;      Temps:          0       0
   520 ;;      Totals:         0       0
   521 ;;Total ram usage:        0 bytes
   522 ;; Hardware stack levels used:    1
   523 ;; Hardware stack levels required when called:    4
   524 ;; This function calls:
   525 ;;		Nothing
   526 ;; This function is called by:
   527 ;;		_main
   528 ;; This function uses a non-reentrant model
   529 ;;
   530                           
   531                           
   532                           ;psect for function _TMR0_Init
   533  03EF                     _TMR0_Init:	
   534                           
   535                           ;tmr0.h: 10: T0IF = 0;
   536                           
   537                           ;incstack = 0
   538                           ; Regs used in _TMR0_Init: []
   539  03EF  110B               	bcf	11,2	;volatile
   540                           
   541                           ;tmr0.h: 11: GIE = T0IE = 1;
   542  03F0  168B               	bsf	11,5	;volatile
   543  03F1  1E8B               	btfss	11,5	;volatile
   544  03F2  2BF5               	goto	u380
   545  03F3  178B               	bsf	11,7	;volatile
   546  03F4  2BF6               	goto	u394
   547  03F5                     u380:	
   548  03F5  138B               	bcf	11,7	;volatile
   549  03F6                     u394:	
   550                           
   551                           ;tmr0.h: 13: T0CS = 0;
   552  03F6  1683               	bsf	3,5	;RP0=1, select bank1
   553  03F7  1281               	bcf	1,5	;volatile
   554                           
   555                           ;tmr0.h: 14: PSA = 0;
   556  03F8  1181               	bcf	1,3	;volatile
   557                           
   558                           ;tmr0.h: 15: PS2 = 1; PS1 = 1; PS0 = 1;
   559  03F9  1501               	bsf	1,2	;volatile
   560  03FA  1481               	bsf	1,1	;volatile
   561  03FB  1401               	bsf	1,0	;volatile
   562  03FC  0008               	return
   563  03FD                     __end_of_TMR0_Init:	
   564                           
   565                           	psect	text2
   566  01D2                     __ptext2:	
   567 ;; *************** function _Keypad_STATE_WAITING_FOR_D *****************
   568 ;; Defined at:
   569 ;;		line 118 in file "keypad_fsm.h"
   570 ;; Parameters:    Size  Location     Type
   571 ;;  this            1   15[BANK0 ] PTR struct _Keypad
   572 ;;		 -> k(1), 
   573 ;;  event           2   16[BANK0 ] PTR const struct _Event
   574 ;;		 -> ROM(1024), keypad_access@ke(2), 
   575 ;; Auto vars:     Size  Location     Type
   576 ;;		None
   577 ;; Return value:  Size  Location     Type
   578 ;;                  1    wreg      void 
   579 ;; Registers used:
   580 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath
   581 ;; Tracked objects:
   582 ;;		On entry : 0/0
   583 ;;		On exit  : 0/0
   584 ;;		Unchanged: 0/0
   585 ;; Data sizes:     COMMON   BANK0
   586 ;;      Params:         0       3
   587 ;;      Locals:         0       0
   588 ;;      Temps:          0       3
   589 ;;      Totals:         0       6
   590 ;;Total ram usage:        6 bytes
   591 ;; Hardware stack levels used:    1
   592 ;; Hardware stack levels required when called:    4
   593 ;; This function calls:
   594 ;;		Nothing
   595 ;; This function is called by:
   596 ;;		_Keypad_STATE_WAITING_FOR_C
   597 ;;		_keypad_access
   598 ;;		_main
   599 ;; This function uses a non-reentrant model
   600 ;;
   601                           
   602                           
   603                           ;psect for function _Keypad_STATE_WAITING_FOR_D
   604  01D2                     _Keypad_STATE_WAITING_FOR_D:	
   605                           
   606                           ;keypad_fsm.h: 119: switch(event->eventSignal){
   607                           
   608                           ;incstack = 0
   609                           ; Regs used in _Keypad_STATE_WAITING_FOR_D: [wreg-fsr0h+status,2+status,0+btemp+1+pclath
      +                          ]
   610  01D2  2A04               	goto	l1277
   611  01D3                     l1263:	
   612                           ;keypad_fsm.h: 120: case TIMEOUT:
   613                           
   614                           
   615                           ;keypad_fsm.h: 121: (((Fsm *) this)->fsmState = (State) & Keypad_STATE_WAITING_FOR_A_OR_
      +                          HASH);
   616  01D3  3005               	movlw	(low (fp__Keypad_STATE_WAITING_FOR_A_OR_HASH-fpbase))& (0+255)
   617  01D4  1283               	bcf	3,5	;RP0=0, select bank0
   618  01D5  00B2               	movwf	??_Keypad_STATE_WAITING_FOR_D
   619  01D6  082F               	movf	Keypad_STATE_WAITING_FOR_D@this,w
   620  01D7  0084               	movwf	4
   621  01D8  0832               	movf	??_Keypad_STATE_WAITING_FOR_D,w
   622  01D9  1383               	bcf	3,7	;select IRP bank0
   623  01DA  0080               	movwf	0
   624                           
   625                           ;keypad_fsm.h: 122: break;
   626  01DB  0008               	return
   627  01DC                     l128:	
   628                           ;keypad_fsm.h: 123: case KEY_D_PRESSED:
   629                           
   630                           
   631                           ;keypad_fsm.h: 124: GP5 = 1;
   632  01DC  1685               	bsf	5,5	;volatile
   633                           
   634                           ;keypad_fsm.h: 125: _delay((unsigned long)((1000)*(4000000/4000.0)));
   635  01DD  3006               	movlw	6
   636  01DE  00B4               	movwf	??_Keypad_STATE_WAITING_FOR_D+2
   637  01DF  3013               	movlw	19
   638  01E0  00B3               	movwf	??_Keypad_STATE_WAITING_FOR_D+1
   639  01E1  30AD               	movlw	173
   640  01E2  00B2               	movwf	??_Keypad_STATE_WAITING_FOR_D
   641  01E3                     u477:	
   642  01E3  0BB2               	decfsz	??_Keypad_STATE_WAITING_FOR_D,f
   643  01E4  29E3               	goto	u477
   644  01E5  0BB3               	decfsz	??_Keypad_STATE_WAITING_FOR_D+1,f
   645  01E6  29E3               	goto	u477
   646  01E7  0BB4               	decfsz	??_Keypad_STATE_WAITING_FOR_D+2,f
   647  01E8  29E3               	goto	u477
   648  01E9  29EA               	nop2
   649                           
   650                           ;keypad_fsm.h: 126: GP5 = 0;
   651  01EA  1283               	bcf	3,5	;RP0=0, select bank0
   652  01EB  1285               	bcf	5,5	;volatile
   653                           
   654                           ;keypad_fsm.h: 128: (((Fsm *) this)->fsmState = (State) & Keypad_STATE_WAITING_FOR_A_OR_
      +                          HASH);
   655  01EC  3005               	movlw	(low (fp__Keypad_STATE_WAITING_FOR_A_OR_HASH-fpbase))& (0+255)
   656  01ED  00B2               	movwf	??_Keypad_STATE_WAITING_FOR_D
   657  01EE  082F               	movf	Keypad_STATE_WAITING_FOR_D@this,w
   658  01EF  0084               	movwf	4
   659  01F0  0832               	movf	??_Keypad_STATE_WAITING_FOR_D,w
   660  01F1  1383               	bcf	3,7	;select IRP bank0
   661  01F2  0080               	movwf	0
   662                           
   663                           ;keypad_fsm.h: 129: break;
   664  01F3  0008               	return
   665  01F4                     l1271:	
   666                           ;keypad_fsm.h: 130: case KEY_HASH_PRESSED:
   667                           
   668                           
   669                           ;keypad_fsm.h: 131: (((Fsm *) this)->fsmState = (State) & Keypad_STATE_WAITING_FOR_STAR)
      +                          ;
   670  01F4  3001               	movlw	(low (fp__Keypad_STATE_WAITING_FOR_STAR-fpbase))& (0+255)
   671  01F5  00B2               	movwf	??_Keypad_STATE_WAITING_FOR_D
   672  01F6  082F               	movf	Keypad_STATE_WAITING_FOR_D@this,w
   673  01F7  0084               	movwf	4
   674  01F8  0832               	movf	??_Keypad_STATE_WAITING_FOR_D,w
   675  01F9  1383               	bcf	3,7	;select IRP bank0
   676  01FA  0080               	movwf	0
   677                           
   678                           ;keypad_fsm.h: 132: break;
   679  01FB  0008               	return
   680  01FC                     l1273:	
   681                           ;keypad_fsm.h: 133: default:
   682                           
   683                           
   684                           ;keypad_fsm.h: 134: (((Fsm *) this)->fsmState = (State) & Keypad_STATE_WAITING_FOR_A_OR_
      +                          HASH);
   685  01FC  3005               	movlw	(low (fp__Keypad_STATE_WAITING_FOR_A_OR_HASH-fpbase))& (0+255)
   686  01FD  00B2               	movwf	??_Keypad_STATE_WAITING_FOR_D
   687  01FE  082F               	movf	Keypad_STATE_WAITING_FOR_D@this,w
   688  01FF  0084               	movwf	4
   689  0200  0832               	movf	??_Keypad_STATE_WAITING_FOR_D,w
   690  0201  1383               	bcf	3,7	;select IRP bank0
   691  0202  0080               	movwf	0
   692                           
   693                           ;keypad_fsm.h: 136: }
   694                           
   695                           ;keypad_fsm.h: 135: break;
   696  0203  0008               	return
   697  0204                     l1277:	
   698  0204  1283               	bcf	3,5	;RP0=0, select bank0
   699  0205  0831               	movf	Keypad_STATE_WAITING_FOR_D@event+1,w
   700  0206  00DF               	movwf	95
   701  0207  0830               	movf	Keypad_STATE_WAITING_FOR_D@event,w
   702  0208  0084               	movwf	4
   703  0209  2085               	fcall	stringtab
   704                           
   705                           ; Switch size 1, requested type "space"
   706                           ; Number of cases is 3, Range of values is 3 to 7
   707                           ; switch strategies available:
   708                           ; Name         Instructions Cycles
   709                           ; simple_byte           10     6 (average)
   710                           ; direct_byte           14     9 (fixed)
   711                           ; jumptable            263     9 (fixed)
   712                           ;	Chosen strategy is simple_byte
   713  020A  3A03               	xorlw	3	; case 3
   714  020B  1903               	skipnz
   715  020C  29DC               	goto	l128
   716  020D  3A07               	xorlw	7	; case 4
   717  020E  1903               	skipnz
   718  020F  29F4               	goto	l1271
   719  0210  3A03               	xorlw	3	; case 7
   720  0211  1903               	skipnz
   721  0212  29D3               	goto	l1263
   722  0213  29FC               	goto	l1273
   723  0214  0008               	return
   724  0215                     __end_of_Keypad_STATE_WAITING_FOR_D:	
   725                           
   726                           	psect	text3
   727  02DE                     __ptext3:	
   728 ;; *************** function _Keypad_STATE_WAITING_FOR_C *****************
   729 ;; Defined at:
   730 ;;		line 98 in file "keypad_fsm.h"
   731 ;; Parameters:    Size  Location     Type
   732 ;;  this            1   15[BANK0 ] PTR struct _Keypad
   733 ;;		 -> k(1), 
   734 ;;  event           2   16[BANK0 ] PTR const struct _Event
   735 ;;		 -> ROM(1024), keypad_access@ke(2), 
   736 ;; Auto vars:     Size  Location     Type
   737 ;;		None
   738 ;; Return value:  Size  Location     Type
   739 ;;                  1    wreg      void 
   740 ;; Registers used:
   741 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath
   742 ;; Tracked objects:
   743 ;;		On entry : 0/0
   744 ;;		On exit  : 0/0
   745 ;;		Unchanged: 0/0
   746 ;; Data sizes:     COMMON   BANK0
   747 ;;      Params:         0       3
   748 ;;      Locals:         0       0
   749 ;;      Temps:          0       1
   750 ;;      Totals:         0       4
   751 ;;Total ram usage:        4 bytes
   752 ;; Hardware stack levels used:    1
   753 ;; Hardware stack levels required when called:    4
   754 ;; This function calls:
   755 ;;		Nothing
   756 ;; This function is called by:
   757 ;;		_Keypad_STATE_WAITING_FOR_B
   758 ;;		_keypad_access
   759 ;;		_main
   760 ;; This function uses a non-reentrant model
   761 ;;
   762                           
   763                           
   764                           ;psect for function _Keypad_STATE_WAITING_FOR_C
   765  02DE                     _Keypad_STATE_WAITING_FOR_C:	
   766                           
   767                           ;keypad_fsm.h: 99: switch(event->eventSignal){
   768                           
   769                           ;incstack = 0
   770                           ; Regs used in _Keypad_STATE_WAITING_FOR_C: [wreg-fsr0h+status,2+status,0+btemp+1+pclath
      +                          ]
   771  02DE  2B08               	goto	l1259
   772  02DF                     l1247:	
   773                           ;keypad_fsm.h: 100: case TIMEOUT:
   774                           
   775                           
   776                           ;keypad_fsm.h: 101: (((Fsm *) this)->fsmState = (State) & Keypad_STATE_WAITING_FOR_A_OR_
      +                          HASH);
   777  02DF  3005               	movlw	(low (fp__Keypad_STATE_WAITING_FOR_A_OR_HASH-fpbase))& (0+255)
   778  02E0  1283               	bcf	3,5	;RP0=0, select bank0
   779  02E1  00B2               	movwf	??_Keypad_STATE_WAITING_FOR_C
   780  02E2  082F               	movf	Keypad_STATE_WAITING_FOR_C@this,w
   781  02E3  0084               	movwf	4
   782  02E4  0832               	movf	??_Keypad_STATE_WAITING_FOR_C,w
   783  02E5  1383               	bcf	3,7	;select IRP bank0
   784  02E6  0080               	movwf	0
   785                           
   786                           ;keypad_fsm.h: 102: break;
   787  02E7  0008               	return
   788  02E8                     l1249:	
   789                           ;keypad_fsm.h: 103: case KEY_C_PRESSED:
   790                           
   791                           
   792                           ;keypad_fsm.h: 104: (((Fsm *) this)->fsmState = (State) & Keypad_STATE_WAITING_FOR_D);
   793  02E8  3002               	movlw	(low (fp__Keypad_STATE_WAITING_FOR_D-fpbase))& (0+255)
   794  02E9  00B2               	movwf	??_Keypad_STATE_WAITING_FOR_C
   795  02EA  082F               	movf	Keypad_STATE_WAITING_FOR_C@this,w
   796  02EB  0084               	movwf	4
   797  02EC  0832               	movf	??_Keypad_STATE_WAITING_FOR_C,w
   798  02ED  1383               	bcf	3,7	;select IRP bank0
   799  02EE  0080               	movwf	0
   800                           
   801                           ;keypad_fsm.h: 105: break;
   802  02EF  0008               	return
   803  02F0                     l1251:	
   804                           ;keypad_fsm.h: 106: case KEY_A_PRESSED:
   805                           
   806                           
   807                           ;keypad_fsm.h: 107: (((Fsm *) this)->fsmState = (State) & Keypad_STATE_WAITING_FOR_B);
   808  02F0  3004               	movlw	(low (fp__Keypad_STATE_WAITING_FOR_B-fpbase))& (0+255)
   809  02F1  00B2               	movwf	??_Keypad_STATE_WAITING_FOR_C
   810  02F2  082F               	movf	Keypad_STATE_WAITING_FOR_C@this,w
   811  02F3  0084               	movwf	4
   812  02F4  0832               	movf	??_Keypad_STATE_WAITING_FOR_C,w
   813  02F5  1383               	bcf	3,7	;select IRP bank0
   814  02F6  0080               	movwf	0
   815                           
   816                           ;keypad_fsm.h: 108: break;
   817  02F7  0008               	return
   818  02F8                     l1253:	
   819                           ;keypad_fsm.h: 109: case KEY_HASH_PRESSED:
   820                           
   821                           
   822                           ;keypad_fsm.h: 110: (((Fsm *) this)->fsmState = (State) & Keypad_STATE_WAITING_FOR_STAR)
      +                          ;
   823  02F8  3001               	movlw	(low (fp__Keypad_STATE_WAITING_FOR_STAR-fpbase))& (0+255)
   824  02F9  00B2               	movwf	??_Keypad_STATE_WAITING_FOR_C
   825  02FA  082F               	movf	Keypad_STATE_WAITING_FOR_C@this,w
   826  02FB  0084               	movwf	4
   827  02FC  0832               	movf	??_Keypad_STATE_WAITING_FOR_C,w
   828  02FD  1383               	bcf	3,7	;select IRP bank0
   829  02FE  0080               	movwf	0
   830                           
   831                           ;keypad_fsm.h: 111: break;
   832  02FF  0008               	return
   833  0300                     l1255:	
   834                           ;keypad_fsm.h: 112: default:
   835                           
   836                           
   837                           ;keypad_fsm.h: 113: (((Fsm *) this)->fsmState = (State) & Keypad_STATE_WAITING_FOR_A_OR_
      +                          HASH);
   838  0300  3005               	movlw	(low (fp__Keypad_STATE_WAITING_FOR_A_OR_HASH-fpbase))& (0+255)
   839  0301  00B2               	movwf	??_Keypad_STATE_WAITING_FOR_C
   840  0302  082F               	movf	Keypad_STATE_WAITING_FOR_C@this,w
   841  0303  0084               	movwf	4
   842  0304  0832               	movf	??_Keypad_STATE_WAITING_FOR_C,w
   843  0305  1383               	bcf	3,7	;select IRP bank0
   844  0306  0080               	movwf	0
   845                           
   846                           ;keypad_fsm.h: 115: }
   847                           
   848                           ;keypad_fsm.h: 114: break;
   849  0307  0008               	return
   850  0308                     l1259:	
   851  0308  1283               	bcf	3,5	;RP0=0, select bank0
   852  0309  0831               	movf	Keypad_STATE_WAITING_FOR_C@event+1,w
   853  030A  00DF               	movwf	95
   854  030B  0830               	movf	Keypad_STATE_WAITING_FOR_C@event,w
   855  030C  0084               	movwf	4
   856  030D  2085               	fcall	stringtab
   857                           
   858                           ; Switch size 1, requested type "space"
   859                           ; Number of cases is 4, Range of values is 0 to 7
   860                           ; switch strategies available:
   861                           ; Name         Instructions Cycles
   862                           ; simple_byte           13     7 (average)
   863                           ; direct_byte           14     6 (fixed)
   864                           ; jumptable            260     6 (fixed)
   865                           ;	Chosen strategy is simple_byte
   866  030E  3A00               	xorlw	0	; case 0
   867  030F  1903               	skipnz
   868  0310  2AF0               	goto	l1251
   869  0311  3A02               	xorlw	2	; case 2
   870  0312  1903               	skipnz
   871  0313  2AE8               	goto	l1249
   872  0314  3A06               	xorlw	6	; case 4
   873  0315  1903               	skipnz
   874  0316  2AF8               	goto	l1253
   875  0317  3A03               	xorlw	3	; case 7
   876  0318  1903               	skipnz
   877  0319  2ADF               	goto	l1247
   878  031A  2B00               	goto	l1255
   879  031B  0008               	return
   880  031C                     __end_of_Keypad_STATE_WAITING_FOR_C:	
   881                           
   882                           	psect	text4
   883  035A                     __ptext4:	
   884 ;; *************** function _Keypad_STATE_WAITING_FOR_B *****************
   885 ;; Defined at:
   886 ;;		line 79 in file "keypad_fsm.h"
   887 ;; Parameters:    Size  Location     Type
   888 ;;  this            1   15[BANK0 ] PTR struct _Keypad
   889 ;;		 -> k(1), 
   890 ;;  event           2   16[BANK0 ] PTR const struct _Event
   891 ;;		 -> ROM(1024), keypad_access@ke(2), 
   892 ;; Auto vars:     Size  Location     Type
   893 ;;		None
   894 ;; Return value:  Size  Location     Type
   895 ;;                  1    wreg      void 
   896 ;; Registers used:
   897 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath
   898 ;; Tracked objects:
   899 ;;		On entry : 0/0
   900 ;;		On exit  : 0/0
   901 ;;		Unchanged: 0/0
   902 ;; Data sizes:     COMMON   BANK0
   903 ;;      Params:         0       3
   904 ;;      Locals:         0       0
   905 ;;      Temps:          0       1
   906 ;;      Totals:         0       4
   907 ;;Total ram usage:        4 bytes
   908 ;; Hardware stack levels used:    1
   909 ;; Hardware stack levels required when called:    4
   910 ;; This function calls:
   911 ;;		Nothing
   912 ;; This function is called by:
   913 ;;		_Keypad_STATE_WAITING_FOR_A_OR_HASH
   914 ;;		_Keypad_STATE_WAITING_FOR_C
   915 ;;		_Keypad_STATE_WAITING_FOR_STAR
   916 ;;		_keypad_access
   917 ;;		_main
   918 ;; This function uses a non-reentrant model
   919 ;;
   920                           
   921                           
   922                           ;psect for function _Keypad_STATE_WAITING_FOR_B
   923  035A                     _Keypad_STATE_WAITING_FOR_B:	
   924                           
   925                           ;keypad_fsm.h: 80: switch(event->eventSignal){
   926                           
   927                           ;incstack = 0
   928                           ; Regs used in _Keypad_STATE_WAITING_FOR_B: [wreg-fsr0h+status,2+status,0+btemp+1+pclath
      +                          ]
   929  035A  2B7C               	goto	l1243
   930  035B                     l1233:	
   931                           ;keypad_fsm.h: 81: case TIMEOUT:
   932                           
   933                           
   934                           ;keypad_fsm.h: 82: (((Fsm *) this)->fsmState = (State) & Keypad_STATE_WAITING_FOR_A_OR_H
      +                          ASH);
   935  035B  3005               	movlw	(low (fp__Keypad_STATE_WAITING_FOR_A_OR_HASH-fpbase))& (0+255)
   936  035C  1283               	bcf	3,5	;RP0=0, select bank0
   937  035D  00B2               	movwf	??_Keypad_STATE_WAITING_FOR_B
   938  035E  082F               	movf	Keypad_STATE_WAITING_FOR_B@this,w
   939  035F  0084               	movwf	4
   940  0360  0832               	movf	??_Keypad_STATE_WAITING_FOR_B,w
   941  0361  1383               	bcf	3,7	;select IRP bank0
   942  0362  0080               	movwf	0
   943                           
   944                           ;keypad_fsm.h: 83: break;
   945  0363  0008               	return
   946  0364                     l1235:	
   947                           ;keypad_fsm.h: 84: case KEY_B_PRESSED:
   948                           
   949                           
   950                           ;keypad_fsm.h: 85: (((Fsm *) this)->fsmState = (State) & Keypad_STATE_WAITING_FOR_C);
   951  0364  3003               	movlw	(low (fp__Keypad_STATE_WAITING_FOR_C-fpbase))& (0+255)
   952  0365  00B2               	movwf	??_Keypad_STATE_WAITING_FOR_B
   953  0366  082F               	movf	Keypad_STATE_WAITING_FOR_B@this,w
   954  0367  0084               	movwf	4
   955  0368  0832               	movf	??_Keypad_STATE_WAITING_FOR_B,w
   956  0369  1383               	bcf	3,7	;select IRP bank0
   957  036A  0080               	movwf	0
   958                           
   959                           ;keypad_fsm.h: 88: break;
   960                           
   961                           ;keypad_fsm.h: 87: case KEY_A_PRESSED:
   962                           
   963                           ;keypad_fsm.h: 86: break;
   964  036B  0008               	return
   965  036C                     l1237:	
   966                           ;keypad_fsm.h: 89: case KEY_HASH_PRESSED:
   967                           
   968                           
   969                           ;keypad_fsm.h: 90: (((Fsm *) this)->fsmState = (State) & Keypad_STATE_WAITING_FOR_STAR);
   970  036C  3001               	movlw	(low (fp__Keypad_STATE_WAITING_FOR_STAR-fpbase))& (0+255)
   971  036D  00B2               	movwf	??_Keypad_STATE_WAITING_FOR_B
   972  036E  082F               	movf	Keypad_STATE_WAITING_FOR_B@this,w
   973  036F  0084               	movwf	4
   974  0370  0832               	movf	??_Keypad_STATE_WAITING_FOR_B,w
   975  0371  1383               	bcf	3,7	;select IRP bank0
   976  0372  0080               	movwf	0
   977                           
   978                           ;keypad_fsm.h: 91: break;
   979  0373  0008               	return
   980  0374                     l1239:	
   981                           ;keypad_fsm.h: 92: default:
   982                           
   983                           
   984                           ;keypad_fsm.h: 93: (((Fsm *) this)->fsmState = (State) & Keypad_STATE_WAITING_FOR_A_OR_H
      +                          ASH);
   985  0374  3005               	movlw	(low (fp__Keypad_STATE_WAITING_FOR_A_OR_HASH-fpbase))& (0+255)
   986  0375  00B2               	movwf	??_Keypad_STATE_WAITING_FOR_B
   987  0376  082F               	movf	Keypad_STATE_WAITING_FOR_B@this,w
   988  0377  0084               	movwf	4
   989  0378  0832               	movf	??_Keypad_STATE_WAITING_FOR_B,w
   990  0379  1383               	bcf	3,7	;select IRP bank0
   991  037A  0080               	movwf	0
   992                           
   993                           ;keypad_fsm.h: 95: }
   994                           
   995                           ;keypad_fsm.h: 94: break;
   996  037B  0008               	return
   997  037C                     l1243:	
   998  037C  1283               	bcf	3,5	;RP0=0, select bank0
   999  037D  0831               	movf	Keypad_STATE_WAITING_FOR_B@event+1,w
  1000  037E  00DF               	movwf	95
  1001  037F  0830               	movf	Keypad_STATE_WAITING_FOR_B@event,w
  1002  0380  0084               	movwf	4
  1003  0381  2085               	fcall	stringtab
  1004                           
  1005                           ; Switch size 1, requested type "space"
  1006                           ; Number of cases is 4, Range of values is 0 to 7
  1007                           ; switch strategies available:
  1008                           ; Name         Instructions Cycles
  1009                           ; simple_byte           13     7 (average)
  1010                           ; direct_byte           14     6 (fixed)
  1011                           ; jumptable            260     6 (fixed)
  1012                           ;	Chosen strategy is simple_byte
  1013  0382  3A00               	xorlw	0	; case 0
  1014  0383  1903               	skipnz
  1015  0384  2B8F               	goto	l112
  1016  0385  3A01               	xorlw	1	; case 1
  1017  0386  1903               	skipnz
  1018  0387  2B64               	goto	l1235
  1019  0388  3A05               	xorlw	5	; case 4
  1020  0389  1903               	skipnz
  1021  038A  2B6C               	goto	l1237
  1022  038B  3A03               	xorlw	3	; case 7
  1023  038C  1903               	skipnz
  1024  038D  2B5B               	goto	l1233
  1025  038E  2B74               	goto	l1239
  1026  038F                     l112:	
  1027  038F  0008               	return
  1028  0390                     __end_of_Keypad_STATE_WAITING_FOR_B:	
  1029                           
  1030                           	psect	text5
  1031  0017                     __ptext5:	
  1032 ;; *************** function _Keypad_STATE_WAITING_FOR_A_OR_HASH *****************
  1033 ;; Defined at:
  1034 ;;		line 65 in file "keypad_fsm.h"
  1035 ;; Parameters:    Size  Location     Type
  1036 ;;  this            1   15[BANK0 ] PTR struct _Keypad
  1037 ;;		 -> k(1), 
  1038 ;;  event           2   16[BANK0 ] PTR const struct _Event
  1039 ;;		 -> ROM(1024), keypad_access@ke(2), 
  1040 ;; Auto vars:     Size  Location     Type
  1041 ;;		None
  1042 ;; Return value:  Size  Location     Type
  1043 ;;                  1    wreg      void 
  1044 ;; Registers used:
  1045 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath
  1046 ;; Tracked objects:
  1047 ;;		On entry : 0/0
  1048 ;;		On exit  : 0/0
  1049 ;;		Unchanged: 0/0
  1050 ;; Data sizes:     COMMON   BANK0
  1051 ;;      Params:         0       3
  1052 ;;      Locals:         0       0
  1053 ;;      Temps:          0       1
  1054 ;;      Totals:         0       4
  1055 ;;Total ram usage:        4 bytes
  1056 ;; Hardware stack levels used:    1
  1057 ;; Hardware stack levels required when called:    4
  1058 ;; This function calls:
  1059 ;;		Nothing
  1060 ;; This function is called by:
  1061 ;;		_Keypad_START
  1062 ;;		_Keypad_STATE_WAITING_FOR_B
  1063 ;;		_Keypad_STATE_WAITING_FOR_C
  1064 ;;		_Keypad_STATE_WAITING_FOR_D
  1065 ;;		_Keypad_STATE_WAITING_FOR_STAR
  1066 ;;		_keypad_access
  1067 ;;		_main
  1068 ;; This function uses a non-reentrant model
  1069 ;;
  1070                           
  1071                           
  1072                           ;psect for function _Keypad_STATE_WAITING_FOR_A_OR_HASH
  1073  0017                     _Keypad_STATE_WAITING_FOR_A_OR_HASH:	
  1074                           
  1075                           ;keypad_fsm.h: 66: switch(event->eventSignal){
  1076                           
  1077                           ;incstack = 0
  1078                           ; Regs used in _Keypad_STATE_WAITING_FOR_A_OR_HASH: [wreg-fsr0h+status,2+status,0+btemp+
      +                          1+pclath]
  1079  0017  2829               	goto	l1229
  1080  0018                     l1223:	
  1081                           ;keypad_fsm.h: 68: case KEY_A_PRESSED:
  1082                           
  1083                           
  1084                           ;keypad_fsm.h: 69: (((Fsm *) this)->fsmState = (State) & Keypad_STATE_WAITING_FOR_B);
  1085  0018  3004               	movlw	(low (fp__Keypad_STATE_WAITING_FOR_B-fpbase))& (0+255)
  1086  0019  1283               	bcf	3,5	;RP0=0, select bank0
  1087  001A  00B2               	movwf	??_Keypad_STATE_WAITING_FOR_A_OR_HASH
  1088  001B  082F               	movf	Keypad_STATE_WAITING_FOR_A_OR_HASH@this,w
  1089  001C  0084               	movwf	4
  1090  001D  0832               	movf	??_Keypad_STATE_WAITING_FOR_A_OR_HASH,w
  1091  001E  1383               	bcf	3,7	;select IRP bank0
  1092  001F  0080               	movwf	0
  1093                           
  1094                           ;keypad_fsm.h: 70: break;
  1095  0020  0008               	return
  1096  0021                     l1225:	
  1097                           ;keypad_fsm.h: 71: case KEY_HASH_PRESSED:
  1098                           
  1099                           
  1100                           ;keypad_fsm.h: 72: (((Fsm *) this)->fsmState = (State) & Keypad_STATE_WAITING_FOR_STAR);
  1101  0021  3001               	movlw	(low (fp__Keypad_STATE_WAITING_FOR_STAR-fpbase))& (0+255)
  1102  0022  00B2               	movwf	??_Keypad_STATE_WAITING_FOR_A_OR_HASH
  1103  0023  082F               	movf	Keypad_STATE_WAITING_FOR_A_OR_HASH@this,w
  1104  0024  0084               	movwf	4
  1105  0025  0832               	movf	??_Keypad_STATE_WAITING_FOR_A_OR_HASH,w
  1106  0026  1383               	bcf	3,7	;select IRP bank0
  1107  0027  0080               	movwf	0
  1108                           
  1109                           ;keypad_fsm.h: 76: }
  1110                           
  1111                           ;keypad_fsm.h: 75: break;
  1112                           
  1113                           ;keypad_fsm.h: 74: default:
  1114                           
  1115                           ;keypad_fsm.h: 73: break;
  1116  0028  0008               	return
  1117  0029                     l1229:	
  1118  0029  1283               	bcf	3,5	;RP0=0, select bank0
  1119  002A  0831               	movf	Keypad_STATE_WAITING_FOR_A_OR_HASH@event+1,w
  1120  002B  00DF               	movwf	95
  1121  002C  0830               	movf	Keypad_STATE_WAITING_FOR_A_OR_HASH@event,w
  1122  002D  0084               	movwf	4
  1123  002E  2085               	fcall	stringtab
  1124                           
  1125                           ; Switch size 1, requested type "space"
  1126                           ; Number of cases is 2, Range of values is 0 to 4
  1127                           ; switch strategies available:
  1128                           ; Name         Instructions Cycles
  1129                           ; simple_byte            7     4 (average)
  1130                           ; direct_byte           11     6 (fixed)
  1131                           ; jumptable            260     6 (fixed)
  1132                           ;	Chosen strategy is simple_byte
  1133  002F  3A00               	xorlw	0	; case 0
  1134  0030  1903               	skipnz
  1135  0031  2818               	goto	l1223
  1136  0032  3A04               	xorlw	4	; case 4
  1137  0033  1903               	skipnz
  1138  0034  2821               	goto	l1225
  1139  0035  2836               	goto	l102
  1140  0036                     l102:	
  1141  0036  0008               	return
  1142  0037                     __end_of_Keypad_STATE_WAITING_FOR_A_OR_HASH:	
  1143                           
  1144                           	psect	text6
  1145  00B8                     __ptext6:	
  1146 ;; *************** function _Keypad_START *****************
  1147 ;; Defined at:
  1148 ;;		line 61 in file "keypad_fsm.h"
  1149 ;; Parameters:    Size  Location     Type
  1150 ;;  this            1   15[BANK0 ] PTR struct _Keypad
  1151 ;;		 -> k(1), 
  1152 ;;  event           2   16[BANK0 ] PTR const struct _Event
  1153 ;;		 -> ROM(1024), keypad_access@ke(2), 
  1154 ;; Auto vars:     Size  Location     Type
  1155 ;;		None
  1156 ;; Return value:  Size  Location     Type
  1157 ;;                  1    wreg      void 
  1158 ;; Registers used:
  1159 ;;		wreg, fsr0l, fsr0h
  1160 ;; Tracked objects:
  1161 ;;		On entry : 0/0
  1162 ;;		On exit  : 0/0
  1163 ;;		Unchanged: 0/0
  1164 ;; Data sizes:     COMMON   BANK0
  1165 ;;      Params:         0       3
  1166 ;;      Locals:         0       0
  1167 ;;      Temps:          0       1
  1168 ;;      Totals:         0       4
  1169 ;;Total ram usage:        4 bytes
  1170 ;; Hardware stack levels used:    1
  1171 ;; Hardware stack levels required when called:    4
  1172 ;; This function calls:
  1173 ;;		Nothing
  1174 ;; This function is called by:
  1175 ;;		_KeypadConstructor
  1176 ;;		_keypad_access
  1177 ;;		_main
  1178 ;; This function uses a non-reentrant model
  1179 ;;
  1180                           
  1181                           
  1182                           ;psect for function _Keypad_START
  1183  00B8                     _Keypad_START:	
  1184                           
  1185                           ;keypad_fsm.h: 62: (((Fsm *) this)->fsmState = (State) & Keypad_STATE_WAITING_FOR_A_OR_H
      +                          ASH);
  1186                           
  1187                           ;incstack = 0
  1188                           ; Regs used in _Keypad_START: [wregfsr0]
  1189  00B8  3005               	movlw	(low (fp__Keypad_STATE_WAITING_FOR_A_OR_HASH-fpbase))& (0+255)
  1190  00B9  1283               	bcf	3,5	;RP0=0, select bank0
  1191  00BA  00B2               	movwf	??_Keypad_START
  1192  00BB  082F               	movf	Keypad_START@this,w
  1193  00BC  0084               	movwf	4
  1194  00BD  0832               	movf	??_Keypad_START,w
  1195  00BE  1383               	bcf	3,7	;select IRP bank0
  1196  00BF  0080               	movwf	0
  1197  00C0  0008               	return
  1198  00C1                     __end_of_Keypad_START:	
  1199                           
  1200                           	psect	text7
  1201  0215                     __ptext7:	
  1202 ;; *************** function _Keypad_STATE_WAITING_FOR_STAR *****************
  1203 ;; Defined at:
  1204 ;;		line 139 in file "keypad_fsm.h"
  1205 ;; Parameters:    Size  Location     Type
  1206 ;;  this            1   15[BANK0 ] PTR struct _Keypad
  1207 ;;		 -> k(1), 
  1208 ;;  event           2   16[BANK0 ] PTR const struct _Event
  1209 ;;		 -> ROM(1024), keypad_access@ke(2), 
  1210 ;; Auto vars:     Size  Location     Type
  1211 ;;		None
  1212 ;; Return value:  Size  Location     Type
  1213 ;;                  1    wreg      void 
  1214 ;; Registers used:
  1215 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath
  1216 ;; Tracked objects:
  1217 ;;		On entry : 0/0
  1218 ;;		On exit  : 0/0
  1219 ;;		Unchanged: 0/0
  1220 ;; Data sizes:     COMMON   BANK0
  1221 ;;      Params:         0       3
  1222 ;;      Locals:         0       0
  1223 ;;      Temps:          0       3
  1224 ;;      Totals:         0       6
  1225 ;;Total ram usage:        6 bytes
  1226 ;; Hardware stack levels used:    1
  1227 ;; Hardware stack levels required when called:    4
  1228 ;; This function calls:
  1229 ;;		Nothing
  1230 ;; This function is called by:
  1231 ;;		_Keypad_STATE_WAITING_FOR_A_OR_HASH
  1232 ;;		_Keypad_STATE_WAITING_FOR_B
  1233 ;;		_Keypad_STATE_WAITING_FOR_C
  1234 ;;		_Keypad_STATE_WAITING_FOR_D
  1235 ;;		_keypad_access
  1236 ;;		_main
  1237 ;; This function uses a non-reentrant model
  1238 ;;
  1239                           
  1240                           
  1241                           ;psect for function _Keypad_STATE_WAITING_FOR_STAR
  1242  0215                     _Keypad_STATE_WAITING_FOR_STAR:	
  1243                           
  1244                           ;keypad_fsm.h: 140: switch(event->eventSignal){
  1245                           
  1246                           ;incstack = 0
  1247                           ; Regs used in _Keypad_STATE_WAITING_FOR_STAR: [wreg-fsr0h+status,2+status,0+btemp+1+pcl
      +                          ath]
  1248  0215  2A47               	goto	l1295
  1249  0216                     l1281:	
  1250                           ;keypad_fsm.h: 141: case TIMEOUT:
  1251                           
  1252                           
  1253                           ;keypad_fsm.h: 142: (((Fsm *) this)->fsmState = (State) & Keypad_STATE_WAITING_FOR_A_OR_
      +                          HASH);
  1254  0216  3005               	movlw	(low (fp__Keypad_STATE_WAITING_FOR_A_OR_HASH-fpbase))& (0+255)
  1255  0217  1283               	bcf	3,5	;RP0=0, select bank0
  1256  0218  00B2               	movwf	??_Keypad_STATE_WAITING_FOR_STAR
  1257  0219  082F               	movf	Keypad_STATE_WAITING_FOR_STAR@this,w
  1258  021A  0084               	movwf	4
  1259  021B  0832               	movf	??_Keypad_STATE_WAITING_FOR_STAR,w
  1260  021C  1383               	bcf	3,7	;select IRP bank0
  1261  021D  0080               	movwf	0
  1262                           
  1263                           ;keypad_fsm.h: 143: break;
  1264  021E  0008               	return
  1265  021F                     l137:	
  1266                           ;keypad_fsm.h: 144: case KEY_STAR_PRESSED:
  1267                           
  1268                           
  1269                           ;keypad_fsm.h: 145: GP4 = 1;
  1270  021F  1605               	bsf	5,4	;volatile
  1271                           
  1272                           ;keypad_fsm.h: 146: _delay((unsigned long)((1000)*(4000000/4000.0)));
  1273  0220  3006               	movlw	6
  1274  0221  00B4               	movwf	??_Keypad_STATE_WAITING_FOR_STAR+2
  1275  0222  3013               	movlw	19
  1276  0223  00B3               	movwf	??_Keypad_STATE_WAITING_FOR_STAR+1
  1277  0224  30AD               	movlw	173
  1278  0225  00B2               	movwf	??_Keypad_STATE_WAITING_FOR_STAR
  1279  0226                     u487:	
  1280  0226  0BB2               	decfsz	??_Keypad_STATE_WAITING_FOR_STAR,f
  1281  0227  2A26               	goto	u487
  1282  0228  0BB3               	decfsz	??_Keypad_STATE_WAITING_FOR_STAR+1,f
  1283  0229  2A26               	goto	u487
  1284  022A  0BB4               	decfsz	??_Keypad_STATE_WAITING_FOR_STAR+2,f
  1285  022B  2A26               	goto	u487
  1286  022C  2A2D               	nop2
  1287                           
  1288                           ;keypad_fsm.h: 147: GP4 = 0;
  1289  022D  1283               	bcf	3,5	;RP0=0, select bank0
  1290  022E  1205               	bcf	5,4	;volatile
  1291                           
  1292                           ;keypad_fsm.h: 149: (((Fsm *) this)->fsmState = (State) & Keypad_STATE_WAITING_FOR_A_OR_
      +                          HASH);
  1293  022F  3005               	movlw	(low (fp__Keypad_STATE_WAITING_FOR_A_OR_HASH-fpbase))& (0+255)
  1294  0230  00B2               	movwf	??_Keypad_STATE_WAITING_FOR_STAR
  1295  0231  082F               	movf	Keypad_STATE_WAITING_FOR_STAR@this,w
  1296  0232  0084               	movwf	4
  1297  0233  0832               	movf	??_Keypad_STATE_WAITING_FOR_STAR,w
  1298  0234  1383               	bcf	3,7	;select IRP bank0
  1299  0235  0080               	movwf	0
  1300                           
  1301                           ;keypad_fsm.h: 150: break;
  1302  0236  0008               	return
  1303  0237                     l1289:	
  1304                           ;keypad_fsm.h: 151: case KEY_A_PRESSED:
  1305                           
  1306                           
  1307                           ;keypad_fsm.h: 152: (((Fsm *) this)->fsmState = (State) & Keypad_STATE_WAITING_FOR_B);
  1308  0237  3004               	movlw	(low (fp__Keypad_STATE_WAITING_FOR_B-fpbase))& (0+255)
  1309  0238  00B2               	movwf	??_Keypad_STATE_WAITING_FOR_STAR
  1310  0239  082F               	movf	Keypad_STATE_WAITING_FOR_STAR@this,w
  1311  023A  0084               	movwf	4
  1312  023B  0832               	movf	??_Keypad_STATE_WAITING_FOR_STAR,w
  1313  023C  1383               	bcf	3,7	;select IRP bank0
  1314  023D  0080               	movwf	0
  1315                           
  1316                           ;keypad_fsm.h: 153: break;
  1317  023E  0008               	return
  1318  023F                     l1291:	
  1319                           ;keypad_fsm.h: 154: default:
  1320                           
  1321                           
  1322                           ;keypad_fsm.h: 155: (((Fsm *) this)->fsmState = (State) & Keypad_STATE_WAITING_FOR_A_OR_
      +                          HASH);
  1323  023F  3005               	movlw	(low (fp__Keypad_STATE_WAITING_FOR_A_OR_HASH-fpbase))& (0+255)
  1324  0240  00B2               	movwf	??_Keypad_STATE_WAITING_FOR_STAR
  1325  0241  082F               	movf	Keypad_STATE_WAITING_FOR_STAR@this,w
  1326  0242  0084               	movwf	4
  1327  0243  0832               	movf	??_Keypad_STATE_WAITING_FOR_STAR,w
  1328  0244  1383               	bcf	3,7	;select IRP bank0
  1329  0245  0080               	movwf	0
  1330                           
  1331                           ;keypad_fsm.h: 157: }
  1332                           
  1333                           ;keypad_fsm.h: 156: break;
  1334  0246  0008               	return
  1335  0247                     l1295:	
  1336  0247  1283               	bcf	3,5	;RP0=0, select bank0
  1337  0248  0831               	movf	Keypad_STATE_WAITING_FOR_STAR@event+1,w
  1338  0249  00DF               	movwf	95
  1339  024A  0830               	movf	Keypad_STATE_WAITING_FOR_STAR@event,w
  1340  024B  0084               	movwf	4
  1341  024C  2085               	fcall	stringtab
  1342                           
  1343                           ; Switch size 1, requested type "space"
  1344                           ; Number of cases is 3, Range of values is 0 to 7
  1345                           ; switch strategies available:
  1346                           ; Name         Instructions Cycles
  1347                           ; simple_byte           10     6 (average)
  1348                           ; direct_byte           14     6 (fixed)
  1349                           ; jumptable            260     6 (fixed)
  1350                           ;	Chosen strategy is simple_byte
  1351  024D  3A00               	xorlw	0	; case 0
  1352  024E  1903               	skipnz
  1353  024F  2A37               	goto	l1289
  1354  0250  3A05               	xorlw	5	; case 5
  1355  0251  1903               	skipnz
  1356  0252  2A1F               	goto	l137
  1357  0253  3A02               	xorlw	2	; case 7
  1358  0254  1903               	skipnz
  1359  0255  2A16               	goto	l1281
  1360  0256  2A3F               	goto	l1291
  1361  0257  0008               	return
  1362  0258                     __end_of_Keypad_STATE_WAITING_FOR_STAR:	
  1363                           
  1364                           	psect	text8
  1365  00AE                     __ptext8:	
  1366 ;; *************** function _KeypadConstructor *****************
  1367 ;; Defined at:
  1368 ;;		line 57 in file "keypad_fsm.h"
  1369 ;; Parameters:    Size  Location     Type
  1370 ;;  me              1    wreg     PTR struct _Keypad
  1371 ;;		 -> k(1), 
  1372 ;; Auto vars:     Size  Location     Type
  1373 ;;  me              1   16[BANK0 ] PTR struct _Keypad
  1374 ;;		 -> k(1), 
  1375 ;; Return value:  Size  Location     Type
  1376 ;;                  1    wreg      void 
  1377 ;; Registers used:
  1378 ;;		wreg, fsr0l, fsr0h
  1379 ;; Tracked objects:
  1380 ;;		On entry : 0/0
  1381 ;;		On exit  : 0/0
  1382 ;;		Unchanged: 0/0
  1383 ;; Data sizes:     COMMON   BANK0
  1384 ;;      Params:         0       0
  1385 ;;      Locals:         0       1
  1386 ;;      Temps:          0       1
  1387 ;;      Totals:         0       2
  1388 ;;Total ram usage:        2 bytes
  1389 ;; Hardware stack levels used:    1
  1390 ;; Hardware stack levels required when called:    4
  1391 ;; This function calls:
  1392 ;;		Nothing
  1393 ;; This function is called by:
  1394 ;;		_main
  1395 ;; This function uses a non-reentrant model
  1396 ;;
  1397                           
  1398                           
  1399                           ;psect for function _KeypadConstructor
  1400  00AE                     _KeypadConstructor:	
  1401                           
  1402                           ;incstack = 0
  1403                           ; Regs used in _KeypadConstructor: [wregfsr0]
  1404                           ;KeypadConstructor@me stored from wreg
  1405  00AE  1283               	bcf	3,5	;RP0=0, select bank0
  1406  00AF  00B0               	movwf	KeypadConstructor@me
  1407                           
  1408                           ;keypad_fsm.h: 58: ((& me->super_)->fsmState = (State) & Keypad_START);
  1409  00B0  3006               	movlw	(low (fp__Keypad_START-fpbase))& (0+255)
  1410  00B1  00AF               	movwf	??_KeypadConstructor
  1411  00B2  0830               	movf	KeypadConstructor@me,w
  1412  00B3  0084               	movwf	4
  1413  00B4  082F               	movf	??_KeypadConstructor,w
  1414  00B5  1383               	bcf	3,7	;select IRP bank0
  1415  00B6  0080               	movwf	0
  1416  00B7  0008               	return
  1417  00B8                     __end_of_KeypadConstructor:	
  1418                           
  1419                           	psect	text9
  1420  00A3                     __ptext9:	
  1421 ;; *************** function _ADC_Init *****************
  1422 ;; Defined at:
  1423 ;;		line 9 in file "adc.h"
  1424 ;; Parameters:    Size  Location     Type
  1425 ;;		None
  1426 ;; Auto vars:     Size  Location     Type
  1427 ;;		None
  1428 ;; Return value:  Size  Location     Type
  1429 ;;                  1    wreg      void 
  1430 ;; Registers used:
  1431 ;;		None
  1432 ;; Tracked objects:
  1433 ;;		On entry : 0/0
  1434 ;;		On exit  : 0/0
  1435 ;;		Unchanged: 0/0
  1436 ;; Data sizes:     COMMON   BANK0
  1437 ;;      Params:         0       0
  1438 ;;      Locals:         0       0
  1439 ;;      Temps:          0       0
  1440 ;;      Totals:         0       0
  1441 ;;Total ram usage:        0 bytes
  1442 ;; Hardware stack levels used:    1
  1443 ;; Hardware stack levels required when called:    4
  1444 ;; This function calls:
  1445 ;;		Nothing
  1446 ;; This function is called by:
  1447 ;;		_main
  1448 ;; This function uses a non-reentrant model
  1449 ;;
  1450                           
  1451                           
  1452                           ;psect for function _ADC_Init
  1453  00A3                     _ADC_Init:	
  1454                           
  1455                           ;adc.h: 10: ADCS2 = 1; ADCS1 = 0; ADCS0 = 0;
  1456                           
  1457                           ;incstack = 0
  1458                           ; Regs used in _ADC_Init: []
  1459  00A3  1683               	bsf	3,5	;RP0=1, select bank1
  1460  00A4  171F               	bsf	31,6	;volatile
  1461  00A5  129F               	bcf	31,5	;volatile
  1462  00A6  121F               	bcf	31,4	;volatile
  1463                           
  1464                           ;adc.h: 12: ADFM = 0;
  1465  00A7  1283               	bcf	3,5	;RP0=0, select bank0
  1466  00A8  139F               	bcf	31,7	;volatile
  1467                           
  1468                           ;adc.h: 13: VCFG = 0;
  1469  00A9  131F               	bcf	31,6	;volatile
  1470                           
  1471                           ;adc.h: 14: CHS1 = 0; CHS0 = 0;
  1472  00AA  119F               	bcf	31,3	;volatile
  1473  00AB  111F               	bcf	31,2	;volatile
  1474                           
  1475                           ;adc.h: 16: ADON = 1;
  1476  00AC  141F               	bsf	31,0	;volatile
  1477  00AD  0008               	return
  1478  00AE                     __end_of_ADC_Init:	
  1479                           
  1480                           	psect	text10
  1481  03C6                     __ptext10:	
  1482 ;; *************** function _ISR *****************
  1483 ;; Defined at:
  1484 ;;		line 19 in file "main.c"
  1485 ;; Parameters:    Size  Location     Type
  1486 ;;		None
  1487 ;; Auto vars:     Size  Location     Type
  1488 ;;		None
  1489 ;; Return value:  Size  Location     Type
  1490 ;;                  1    wreg      void 
  1491 ;; Registers used:
  1492 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1493 ;; Tracked objects:
  1494 ;;		On entry : 0/0
  1495 ;;		On exit  : 0/0
  1496 ;;		Unchanged: 0/0
  1497 ;; Data sizes:     COMMON   BANK0
  1498 ;;      Params:         0       0
  1499 ;;      Locals:         0       0
  1500 ;;      Temps:          0       5
  1501 ;;      Totals:         0       5
  1502 ;;Total ram usage:        5 bytes
  1503 ;; Hardware stack levels used:    1
  1504 ;; Hardware stack levels required when called:    3
  1505 ;; This function calls:
  1506 ;;		_keypad_access
  1507 ;; This function is called by:
  1508 ;;		Interrupt level 1
  1509 ;; This function uses a non-reentrant model
  1510 ;;
  1511                           
  1512                           
  1513                           ;psect for function _ISR
  1514  03C6                     _ISR:	
  1515                           
  1516                           ;main.c: 20: if(T0IE && T0IF){
  1517  03C6  1A8B               	btfsc	11,5	;volatile
  1518  03C7  1D0B               	btfss	11,2	;volatile
  1519  03C8  2BE3               	goto	i1l189
  1520                           
  1521                           ;main.c: 21: T0IF = 0;
  1522  03C9  110B               	bcf	11,2	;volatile
  1523                           
  1524                           ;main.c: 24: ++blink_count;
  1525  03CA  3001               	movlw	1
  1526  03CB  00AA               	movwf	??_ISR
  1527  03CC  082A               	movf	??_ISR,w
  1528  03CD  07B8               	addwf	_blink_count,f
  1529                           
  1530                           ;main.c: 25: if(blink_count < 3){
  1531  03CE  3003               	movlw	3
  1532  03CF  0238               	subwf	_blink_count,w
  1533  03D0  1803               	skipnc
  1534  03D1  2BD4               	goto	i1l1357
  1535                           
  1536                           ;main.c: 26: GP1 = 0;
  1537  03D2  1085               	bcf	5,1	;volatile
  1538                           
  1539                           ;main.c: 27: }
  1540  03D3  2BDA               	goto	i1l1363
  1541  03D4                     i1l1357:	
  1542                           
  1543                           ;main.c: 28: else if(blink_count >= 6){
  1544  03D4  3006               	movlw	6
  1545  03D5  0238               	subwf	_blink_count,w
  1546  03D6  1C03               	skipc
  1547  03D7  2BDA               	goto	i1l1363
  1548                           
  1549                           ;main.c: 29: blink_count = 0;
  1550  03D8  01B8               	clrf	_blink_count
  1551                           
  1552                           ;main.c: 30: GP1 = 1;
  1553  03D9  1485               	bsf	5,1	;volatile
  1554  03DA                     i1l1363:	
  1555                           
  1556                           ;main.c: 31: }
  1557                           ;main.c: 37: if(TMR0_start_count){
  1558  03DA  0837               	movf	_TMR0_start_count,w
  1559  03DB  1903               	btfsc	3,2
  1560  03DC  2BE1               	goto	i1l1367
  1561                           
  1562                           ;main.c: 38: ++TMR0_count;
  1563  03DD  3001               	movlw	1
  1564  03DE  00AA               	movwf	??_ISR
  1565  03DF  082A               	movf	??_ISR,w
  1566  03E0  07B6               	addwf	_TMR0_count,f
  1567  03E1                     i1l1367:	
  1568                           
  1569                           ;main.c: 39: }
  1570                           ;main.c: 41: keypad_access(&k);
  1571  03E1  3039               	movlw	(low (_k| 0))& (0+255)
  1572  03E2  2176               	fcall	_keypad_access
  1573  03E3                     i1l189:	
  1574  03E3  1283               	bcf	3,5	;RP0=0, select bank0
  1575  03E4  082E               	movf	??_ISR+4,w
  1576  03E5  00DF               	movwf	95
  1577  03E6  082D               	movf	??_ISR+3,w
  1578  03E7  008A               	movwf	10
  1579  03E8  082C               	movf	??_ISR+2,w
  1580  03E9  0084               	movwf	4
  1581  03EA  0E2B               	swapf	(??_ISR+1)^0,w
  1582  03EB  0083               	movwf	3
  1583  03EC  0EDE               	swapf	94,f
  1584  03ED  0E5E               	swapf	94,w
  1585  03EE  0009               	retfie
  1586  03EF                     __end_of_ISR:	
  1587                           
  1588                           	psect	intentry
  1589  0004                     __pintentry:	
  1590                           ;incstack = 0
  1591                           ; Regs used in _ISR: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1592                           
  1593  0004                     interrupt_function:	
  1594  005E                     saved_w	set	btemp
  1595  0004  00DE               	movwf	btemp
  1596  0005  0E03               	swapf	3,w
  1597  0006  1283               	bcf	3,5	;RP0=0, select bank0
  1598  0007  00AB               	movwf	??_ISR+1
  1599  0008  0804               	movf	4,w
  1600  0009  00AC               	movwf	??_ISR+2
  1601  000A  080A               	movf	10,w
  1602  000B  00AD               	movwf	??_ISR+3
  1603  000C  085F               	movf	btemp+1,w
  1604  000D  00AE               	movwf	??_ISR+4
  1605  000E  2BC6               	ljmp	_ISR
  1606                           
  1607                           	psect	text11
  1608  0176                     __ptext11:	
  1609 ;; *************** function _keypad_access *****************
  1610 ;; Defined at:
  1611 ;;		line 98 in file "keypad_access.h"
  1612 ;; Parameters:    Size  Location     Type
  1613 ;;  k               1    wreg     PTR const struct _Keypad
  1614 ;;		 -> k(1), 
  1615 ;; Auto vars:     Size  Location     Type
  1616 ;;  k               1    7[BANK0 ] PTR const struct _Keypad
  1617 ;;		 -> k(1), 
  1618 ;;  ke              2    8[BANK0 ] struct _KeypadEvent
  1619 ;; Return value:  Size  Location     Type
  1620 ;;                  1    wreg      void 
  1621 ;; Registers used:
  1622 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1623 ;; Tracked objects:
  1624 ;;		On entry : 0/0
  1625 ;;		On exit  : 0/0
  1626 ;;		Unchanged: 0/0
  1627 ;; Data sizes:     COMMON   BANK0
  1628 ;;      Params:         0       0
  1629 ;;      Locals:         0       3
  1630 ;;      Temps:          0       1
  1631 ;;      Totals:         0       4
  1632 ;;Total ram usage:        4 bytes
  1633 ;; Hardware stack levels used:    1
  1634 ;; Hardware stack levels required when called:    2
  1635 ;; This function calls:
  1636 ;;		_TMR0_checkTimeout
  1637 ;;		_keypad_read
  1638 ;;		i1_Keypad_START
  1639 ;;		i1_Keypad_STATE_WAITING_FOR_A_OR_HASH
  1640 ;;		i1_Keypad_STATE_WAITING_FOR_B
  1641 ;;		i1_Keypad_STATE_WAITING_FOR_C
  1642 ;;		i1_Keypad_STATE_WAITING_FOR_D
  1643 ;;		i1_Keypad_STATE_WAITING_FOR_STAR
  1644 ;; This function is called by:
  1645 ;;		_ISR
  1646 ;; This function uses a non-reentrant model
  1647 ;;
  1648                           
  1649                           
  1650                           ;psect for function _keypad_access
  1651  0176                     _keypad_access:	
  1652                           
  1653                           ;incstack = 0
  1654                           ; Regs used in _keypad_access: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1655                           ;keypad_access@k stored from wreg
  1656  0176  1283               	bcf	3,5	;RP0=0, select bank0
  1657  0177  00A7               	movwf	keypad_access@k
  1658                           
  1659                           ;keypad_access.h: 100: KeypadEvent ke;
  1660                           ;keypad_access.h: 103: if(TMR0_count >= 3 * 15){
  1661  0178  302D               	movlw	45
  1662  0179  0236               	subwf	_TMR0_count,w
  1663  017A  1C03               	skipc
  1664  017B  2990               	goto	i1l1307
  1665                           
  1666                           ;keypad_access.h: 104: TMR0_start_count = 0;
  1667  017C  01B7               	clrf	_TMR0_start_count
  1668                           
  1669                           ;keypad_access.h: 105: TMR0_count = 0;
  1670  017D  01B6               	clrf	_TMR0_count
  1671                           
  1672                           ;keypad_access.h: 107: ke.super_.eventSignal = TIMEOUT;
  1673  017E  3007               	movlw	7
  1674  017F  00A6               	movwf	??_keypad_access
  1675  0180  0826               	movf	??_keypad_access,w
  1676  0181  00A8               	movwf	keypad_access@ke
  1677                           
  1678                           ;keypad_access.h: 108: (* ((Fsm *) k)->fsmState)((Fsm *) k, (Event *) &ke);
  1679  0182  0827               	movf	keypad_access@k,w
  1680  0183  00A6               	movwf	??_keypad_access
  1681  0184  0826               	movf	??_keypad_access,w
  1682  0185  00A0               	movwf	i1Keypad_STATE_WAITING_FOR_D@this
  1683  0186  3028               	movlw	(low (keypad_access@ke| 0))& (0+255)
  1684  0187  00A1               	movwf	i1Keypad_STATE_WAITING_FOR_D@event
  1685  0188  3000               	movlw	0
  1686  0189  00A2               	movwf	i1Keypad_STATE_WAITING_FOR_D@event+1
  1687  018A  0827               	movf	keypad_access@k,w
  1688  018B  0084               	movwf	4
  1689  018C  1383               	bcf	3,7	;select IRP bank0
  1690  018D  0800               	movf	0,w
  1691  018E  210C               	fcall	i1fptable
  1692                           
  1693                           ;keypad_access.h: 110: return;
  1694  018F  0008               	return
  1695  0190                     i1l1307:	
  1696                           
  1697                           ;keypad_access.h: 111: }
  1698                           ;keypad_access.h: 116: ke.code = keypad_read();
  1699  0190  2118               	fcall	_keypad_read
  1700  0191  1283               	bcf	3,5	;RP0=0, select bank0
  1701  0192  00A6               	movwf	??_keypad_access
  1702  0193  0826               	movf	??_keypad_access,w
  1703  0194  00A9               	movwf	keypad_access@ke+1
  1704                           
  1705                           ;keypad_access.h: 118: if(ke.code == 0x0C){
  1706  0195  300C               	movlw	12
  1707  0196  0629               	xorwf	keypad_access@ke+1,w
  1708  0197  1903               	btfsc	3,2
  1709  0198  0008               	return
  1710  0199  29B8               	goto	i1l1335
  1711  019A                     i1l1313:	
  1712                           ;keypad_access.h: 124: case 0x00:
  1713                           
  1714                           ;keypad_access.h: 120: }
  1715                           ;keypad_access.h: 123: switch(ke.code){
  1716                           
  1717                           ;keypad_access.h: 119: return;
  1718                           
  1719                           
  1720                           ;keypad_access.h: 125: ke.super_.eventSignal = KEY_A_PRESSED;
  1721  019A  01A8               	clrf	keypad_access@ke
  1722                           
  1723                           ;keypad_access.h: 126: TMR0_checkTimeout();
  1724  019B  20D3               	fcall	_TMR0_checkTimeout
  1725                           
  1726                           ;keypad_access.h: 127: break;
  1727  019C  29C3               	goto	i1l1337
  1728  019D                     i1l168:	
  1729                           ;keypad_access.h: 128: case 0x01:
  1730                           
  1731                           
  1732                           ;keypad_access.h: 129: ke.super_.eventSignal = KEY_B_PRESSED;
  1733  019D  01A8               	clrf	keypad_access@ke
  1734  019E  0AA8               	incf	keypad_access@ke,f
  1735                           
  1736                           ;keypad_access.h: 130: TMR0_checkTimeout();
  1737  019F  20D3               	fcall	_TMR0_checkTimeout
  1738                           
  1739                           ;keypad_access.h: 131: break;
  1740  01A0  29C3               	goto	i1l1337
  1741  01A1                     i1l1319:	
  1742                           ;keypad_access.h: 132: case 0x02:
  1743                           
  1744                           
  1745                           ;keypad_access.h: 133: ke.super_.eventSignal = KEY_C_PRESSED;
  1746  01A1  3002               	movlw	2
  1747  01A2  1283               	bcf	3,5	;RP0=0, select bank0
  1748  01A3  00A6               	movwf	??_keypad_access
  1749  01A4  0826               	movf	??_keypad_access,w
  1750  01A5  00A8               	movwf	keypad_access@ke
  1751                           
  1752                           ;keypad_access.h: 134: TMR0_checkTimeout();
  1753  01A6  20D3               	fcall	_TMR0_checkTimeout
  1754                           
  1755                           ;keypad_access.h: 135: break;
  1756  01A7  29C3               	goto	i1l1337
  1757  01A8                     i1l1323:	
  1758                           ;keypad_access.h: 136: case 0x03:
  1759                           
  1760                           
  1761                           ;keypad_access.h: 137: ke.super_.eventSignal = KEY_D_PRESSED;
  1762  01A8  3003               	movlw	3
  1763  01A9  29B1               	goto	L1
  1764  01AA                     i1l1325:	
  1765                           ;keypad_access.h: 141: case 0x0A:
  1766                           
  1767                           ;keypad_access.h: 139: break;
  1768                           
  1769                           
  1770                           ;keypad_access.h: 142: ke.super_.eventSignal = KEY_HASH_PRESSED;
  1771  01AA  3004               	movlw	4
  1772  01AB  00A6               	movwf	??_keypad_access
  1773  01AC  0826               	movf	??_keypad_access,w
  1774  01AD  00A8               	movwf	keypad_access@ke
  1775                           
  1776                           ;keypad_access.h: 143: TMR0_checkTimeout();
  1777  01AE  20D3               	fcall	_TMR0_checkTimeout
  1778                           
  1779                           ;keypad_access.h: 144: break;
  1780  01AF  29C3               	goto	i1l1337
  1781  01B0                     i1l1329:	
  1782                           ;keypad_access.h: 146: case 0x0B:
  1783                           
  1784                           
  1785                           ;keypad_access.h: 147: ke.super_.eventSignal = KEY_STAR_PRESSED;
  1786  01B0  3005               	movlw	5
  1787  01B1                     L1:	
  1788  01B1  1283               	bcf	3,5	;RP0=0, select bank0
  1789  01B2  29B4               	goto	L2
  1790  01B3                     i1l1331:	
  1791                           ;keypad_access.h: 151: default:
  1792                           
  1793                           ;keypad_access.h: 149: break;
  1794                           
  1795                           
  1796                           ;keypad_access.h: 152: ke.super_.eventSignal = OTHER_KEY_PRESSED;
  1797  01B3  3006               	movlw	6
  1798  01B4                     L2:	
  1799  01B4  00A6               	movwf	??_keypad_access
  1800  01B5  0826               	movf	??_keypad_access,w
  1801  01B6  00A8               	movwf	keypad_access@ke
  1802                           
  1803                           ;keypad_access.h: 154: }
  1804                           
  1805                           ;keypad_access.h: 153: break;
  1806  01B7  29C3               	goto	i1l1337
  1807  01B8                     i1l1335:	
  1808  01B8  0829               	movf	keypad_access@ke+1,w
  1809                           
  1810                           ; Switch size 1, requested type "space"
  1811                           ; Number of cases is 6, Range of values is 0 to 11
  1812                           ; switch strategies available:
  1813                           ; Name         Instructions Cycles
  1814                           ; direct_byte           18     6 (fixed)
  1815                           ; simple_byte           19    10 (average)
  1816                           ; jumptable            260     6 (fixed)
  1817                           ;	Chosen strategy is direct_byte
  1818  01B9  0084               	movwf	4
  1819  01BA  300C               	movlw	12
  1820  01BB  0204               	subwf	4,w
  1821  01BC  1803               	skipnc
  1822  01BD  29B3               	goto	i1l1331
  1823  01BE  3000               	movlw	high i1S1403
  1824  01BF  008A               	movwf	10
  1825  01C0  3097               	movlw	low i1S1403
  1826  01C1  0704               	addwf	4,w
  1827  01C2  0082               	movwf	2
  1828  01C3                     i1l1337:	
  1829                           
  1830                           ;keypad_access.h: 156: (* ((Fsm *) k)->fsmState)((Fsm *) k, (Event *) &ke);
  1831  01C3  1283               	bcf	3,5	;RP0=0, select bank0
  1832  01C4  0827               	movf	keypad_access@k,w
  1833  01C5  00A6               	movwf	??_keypad_access
  1834  01C6  0826               	movf	??_keypad_access,w
  1835  01C7  00A0               	movwf	i1Keypad_STATE_WAITING_FOR_D@this
  1836  01C8  3028               	movlw	(low (keypad_access@ke| 0))& (0+255)
  1837  01C9  00A1               	movwf	i1Keypad_STATE_WAITING_FOR_D@event
  1838  01CA  3000               	movlw	0
  1839  01CB  00A2               	movwf	i1Keypad_STATE_WAITING_FOR_D@event+1
  1840  01CC  0827               	movf	keypad_access@k,w
  1841  01CD  0084               	movwf	4
  1842  01CE  1383               	bcf	3,7	;select IRP bank0
  1843  01CF  0800               	movf	0,w
  1844  01D0  210C               	fcall	i1fptable
  1845  01D1  0008               	return
  1846  01D2                     __end_of_keypad_access:	
  1847                           ;keypad_access.h: 158: return;
  1848                           
  1849                           
  1850                           	psect	swtext1
  1851  0097                     __pswtext1:	
  1852  0097                     i1S1403:	
  1853  0097  299A               	ljmp	i1l1313
  1854  0098  299D               	ljmp	i1l168
  1855  0099  29A1               	ljmp	i1l1319
  1856  009A  29A8               	ljmp	i1l1323
  1857  009B  29B3               	ljmp	i1l1331
  1858  009C  29B3               	ljmp	i1l1331
  1859  009D  29B3               	ljmp	i1l1331
  1860  009E  29B3               	ljmp	i1l1331
  1861  009F  29B3               	ljmp	i1l1331
  1862  00A0  29B3               	ljmp	i1l1331
  1863  00A1  29AA               	ljmp	i1l1325
  1864  00A2  29B0               	ljmp	i1l1329
  1865                           
  1866                           	psect	text12
  1867  0258                     __ptext12:	
  1868 ;; *************** function i1_Keypad_STATE_WAITING_FOR_D *****************
  1869 ;; Defined at:
  1870 ;;		line 118 in file "keypad_fsm.h"
  1871 ;; Parameters:    Size  Location     Type
  1872 ;;  this            1    0[BANK0 ] PTR struct _Keypad
  1873 ;;		 -> k(1), 
  1874 ;;  event           2    1[BANK0 ] PTR const struct _Event
  1875 ;;		 -> ROM(1024), keypad_access@ke(2), 
  1876 ;; Auto vars:     Size  Location     Type
  1877 ;;		None
  1878 ;; Return value:  Size  Location     Type
  1879 ;;                  1    wreg      void 
  1880 ;; Registers used:
  1881 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath
  1882 ;; Tracked objects:
  1883 ;;		On entry : 0/0
  1884 ;;		On exit  : 0/0
  1885 ;;		Unchanged: 0/0
  1886 ;; Data sizes:     COMMON   BANK0
  1887 ;;      Params:         0       3
  1888 ;;      Locals:         0       0
  1889 ;;      Temps:          0       3
  1890 ;;      Totals:         0       6
  1891 ;;Total ram usage:        6 bytes
  1892 ;; Hardware stack levels used:    2
  1893 ;; This function calls:
  1894 ;;		Nothing
  1895 ;; This function is called by:
  1896 ;;		i1_Keypad_STATE_WAITING_FOR_C
  1897 ;; This function uses a non-reentrant model
  1898 ;;
  1899                           
  1900                           
  1901                           ;psect for function i1_Keypad_STATE_WAITING_FOR_D
  1902  0258                     i1_Keypad_STATE_WAITING_FOR_D:	
  1903                           
  1904                           ;keypad_fsm.h: 119: switch(event->eventSignal){
  1905                           
  1906                           ;incstack = 0
  1907                           ; Regs used in i1_Keypad_STATE_WAITING_FOR_D: [wreg-fsr0h+status,2+status,0+btemp+1+pcla
      +                          th]
  1908  0258  2A8A               	goto	i1l1193
  1909  0259                     i1l1179:	
  1910                           ;keypad_fsm.h: 120: case TIMEOUT:
  1911                           
  1912                           
  1913                           ;keypad_fsm.h: 121: (((Fsm *) this)->fsmState = (State) & Keypad_STATE_WAITING_FOR_A_OR_
      +                          HASH);
  1914  0259  3005               	movlw	(low (fp_i1_Keypad_STATE_WAITING_FOR_A_OR_HASH-i1fpbase))& (0+255)
  1915  025A  1283               	bcf	3,5	;RP0=0, select bank0
  1916  025B  00A3               	movwf	??i1_Keypad_STATE_WAITING_FOR_D
  1917  025C  0820               	movf	i1Keypad_STATE_WAITING_FOR_D@this,w
  1918  025D  0084               	movwf	4
  1919  025E  0823               	movf	??i1_Keypad_STATE_WAITING_FOR_D,w
  1920  025F  1383               	bcf	3,7	;select IRP bank0
  1921  0260  0080               	movwf	0
  1922                           
  1923                           ;keypad_fsm.h: 122: break;
  1924  0261  0008               	return
  1925  0262                     i1l128:	
  1926                           ;keypad_fsm.h: 123: case KEY_D_PRESSED:
  1927                           
  1928                           
  1929                           ;keypad_fsm.h: 124: GP5 = 1;
  1930  0262  1685               	bsf	5,5	;volatile
  1931                           
  1932                           ;keypad_fsm.h: 125: _delay((unsigned long)((1000)*(4000000/4000.0)));
  1933  0263  3006               	movlw	6
  1934  0264  00A5               	movwf	??i1_Keypad_STATE_WAITING_FOR_D+2
  1935  0265  3013               	movlw	19
  1936  0266  00A4               	movwf	??i1_Keypad_STATE_WAITING_FOR_D+1
  1937  0267  30AD               	movlw	173
  1938  0268  00A3               	movwf	??i1_Keypad_STATE_WAITING_FOR_D
  1939  0269                     u49_27:	
  1940  0269  0BA3               	decfsz	??i1_Keypad_STATE_WAITING_FOR_D,f
  1941  026A  2A69               	goto	u49_27
  1942  026B  0BA4               	decfsz	??i1_Keypad_STATE_WAITING_FOR_D+1,f
  1943  026C  2A69               	goto	u49_27
  1944  026D  0BA5               	decfsz	??i1_Keypad_STATE_WAITING_FOR_D+2,f
  1945  026E  2A69               	goto	u49_27
  1946  026F  2A70               	nop2
  1947                           
  1948                           ;keypad_fsm.h: 126: GP5 = 0;
  1949  0270  1283               	bcf	3,5	;RP0=0, select bank0
  1950  0271  1285               	bcf	5,5	;volatile
  1951                           
  1952                           ;keypad_fsm.h: 128: (((Fsm *) this)->fsmState = (State) & Keypad_STATE_WAITING_FOR_A_OR_
      +                          HASH);
  1953  0272  3005               	movlw	(low (fp_i1_Keypad_STATE_WAITING_FOR_A_OR_HASH-i1fpbase))& (0+255)
  1954  0273  00A3               	movwf	??i1_Keypad_STATE_WAITING_FOR_D
  1955  0274  0820               	movf	i1Keypad_STATE_WAITING_FOR_D@this,w
  1956  0275  0084               	movwf	4
  1957  0276  0823               	movf	??i1_Keypad_STATE_WAITING_FOR_D,w
  1958  0277  1383               	bcf	3,7	;select IRP bank0
  1959  0278  0080               	movwf	0
  1960                           
  1961                           ;keypad_fsm.h: 129: break;
  1962  0279  0008               	return
  1963  027A                     i1l1187:	
  1964                           ;keypad_fsm.h: 130: case KEY_HASH_PRESSED:
  1965                           
  1966                           
  1967                           ;keypad_fsm.h: 131: (((Fsm *) this)->fsmState = (State) & Keypad_STATE_WAITING_FOR_STAR)
      +                          ;
  1968  027A  3001               	movlw	(low (fp_i1_Keypad_STATE_WAITING_FOR_STAR-i1fpbase))& (0+255)
  1969  027B  00A3               	movwf	??i1_Keypad_STATE_WAITING_FOR_D
  1970  027C  0820               	movf	i1Keypad_STATE_WAITING_FOR_D@this,w
  1971  027D  0084               	movwf	4
  1972  027E  0823               	movf	??i1_Keypad_STATE_WAITING_FOR_D,w
  1973  027F  1383               	bcf	3,7	;select IRP bank0
  1974  0280  0080               	movwf	0
  1975                           
  1976                           ;keypad_fsm.h: 132: break;
  1977  0281  0008               	return
  1978  0282                     i1l1189:	
  1979                           ;keypad_fsm.h: 133: default:
  1980                           
  1981                           
  1982                           ;keypad_fsm.h: 134: (((Fsm *) this)->fsmState = (State) & Keypad_STATE_WAITING_FOR_A_OR_
      +                          HASH);
  1983  0282  3005               	movlw	(low (fp_i1_Keypad_STATE_WAITING_FOR_A_OR_HASH-i1fpbase))& (0+255)
  1984  0283  00A3               	movwf	??i1_Keypad_STATE_WAITING_FOR_D
  1985  0284  0820               	movf	i1Keypad_STATE_WAITING_FOR_D@this,w
  1986  0285  0084               	movwf	4
  1987  0286  0823               	movf	??i1_Keypad_STATE_WAITING_FOR_D,w
  1988  0287  1383               	bcf	3,7	;select IRP bank0
  1989  0288  0080               	movwf	0
  1990                           
  1991                           ;keypad_fsm.h: 136: }
  1992                           
  1993                           ;keypad_fsm.h: 135: break;
  1994  0289  0008               	return
  1995  028A                     i1l1193:	
  1996  028A  1283               	bcf	3,5	;RP0=0, select bank0
  1997  028B  0822               	movf	i1Keypad_STATE_WAITING_FOR_D@event+1,w
  1998  028C  00DF               	movwf	95
  1999  028D  0821               	movf	i1Keypad_STATE_WAITING_FOR_D@event,w
  2000  028E  0084               	movwf	4
  2001  028F  2085               	fcall	stringtab
  2002                           
  2003                           ; Switch size 1, requested type "space"
  2004                           ; Number of cases is 3, Range of values is 3 to 7
  2005                           ; switch strategies available:
  2006                           ; Name         Instructions Cycles
  2007                           ; simple_byte           10     6 (average)
  2008                           ; direct_byte           14     9 (fixed)
  2009                           ; jumptable            263     9 (fixed)
  2010                           ;	Chosen strategy is simple_byte
  2011  0290  3A03               	xorlw	3	; case 3
  2012  0291  1903               	skipnz
  2013  0292  2A62               	goto	i1l128
  2014  0293  3A07               	xorlw	7	; case 4
  2015  0294  1903               	skipnz
  2016  0295  2A7A               	goto	i1l1187
  2017  0296  3A03               	xorlw	3	; case 7
  2018  0297  1903               	skipnz
  2019  0298  2A59               	goto	i1l1179
  2020  0299  2A82               	goto	i1l1189
  2021  029A  0008               	return
  2022  029B                     __end_ofi1_Keypad_STATE_WAITING_FOR_D:	
  2023                           
  2024                           	psect	text13
  2025  031C                     __ptext13:	
  2026 ;; *************** function i1_Keypad_STATE_WAITING_FOR_C *****************
  2027 ;; Defined at:
  2028 ;;		line 98 in file "keypad_fsm.h"
  2029 ;; Parameters:    Size  Location     Type
  2030 ;;  this            1    0[BANK0 ] PTR struct _Keypad
  2031 ;;		 -> k(1), 
  2032 ;;  event           2    1[BANK0 ] PTR const struct _Event
  2033 ;;		 -> ROM(1024), keypad_access@ke(2), 
  2034 ;; Auto vars:     Size  Location     Type
  2035 ;;		None
  2036 ;; Return value:  Size  Location     Type
  2037 ;;                  1    wreg      void 
  2038 ;; Registers used:
  2039 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath
  2040 ;; Tracked objects:
  2041 ;;		On entry : 0/0
  2042 ;;		On exit  : 0/0
  2043 ;;		Unchanged: 0/0
  2044 ;; Data sizes:     COMMON   BANK0
  2045 ;;      Params:         0       3
  2046 ;;      Locals:         0       0
  2047 ;;      Temps:          0       1
  2048 ;;      Totals:         0       4
  2049 ;;Total ram usage:        4 bytes
  2050 ;; Hardware stack levels used:    2
  2051 ;; This function calls:
  2052 ;;		Nothing
  2053 ;; This function is called by:
  2054 ;;		i1_Keypad_STATE_WAITING_FOR_B
  2055 ;; This function uses a non-reentrant model
  2056 ;;
  2057                           
  2058                           
  2059                           ;psect for function i1_Keypad_STATE_WAITING_FOR_C
  2060  031C                     i1_Keypad_STATE_WAITING_FOR_C:	
  2061                           
  2062                           ;keypad_fsm.h: 99: switch(event->eventSignal){
  2063                           
  2064                           ;incstack = 0
  2065                           ; Regs used in i1_Keypad_STATE_WAITING_FOR_C: [wreg-fsr0h+status,2+status,0+btemp+1+pcla
      +                          th]
  2066  031C  2B46               	goto	i1l1175
  2067  031D                     i1l1163:	
  2068                           ;keypad_fsm.h: 100: case TIMEOUT:
  2069                           
  2070                           
  2071                           ;keypad_fsm.h: 101: (((Fsm *) this)->fsmState = (State) & Keypad_STATE_WAITING_FOR_A_OR_
      +                          HASH);
  2072  031D  3005               	movlw	(low (fp_i1_Keypad_STATE_WAITING_FOR_A_OR_HASH-i1fpbase))& (0+255)
  2073  031E  1283               	bcf	3,5	;RP0=0, select bank0
  2074  031F  00A3               	movwf	??i1_Keypad_STATE_WAITING_FOR_C
  2075  0320  0820               	movf	i1Keypad_STATE_WAITING_FOR_C@this,w
  2076  0321  0084               	movwf	4
  2077  0322  0823               	movf	??i1_Keypad_STATE_WAITING_FOR_C,w
  2078  0323  1383               	bcf	3,7	;select IRP bank0
  2079  0324  0080               	movwf	0
  2080                           
  2081                           ;keypad_fsm.h: 102: break;
  2082  0325  0008               	return
  2083  0326                     i1l1165:	
  2084                           ;keypad_fsm.h: 103: case KEY_C_PRESSED:
  2085                           
  2086                           
  2087                           ;keypad_fsm.h: 104: (((Fsm *) this)->fsmState = (State) & Keypad_STATE_WAITING_FOR_D);
  2088  0326  3002               	movlw	(low (fp_i1_Keypad_STATE_WAITING_FOR_D-i1fpbase))& (0+255)
  2089  0327  00A3               	movwf	??i1_Keypad_STATE_WAITING_FOR_C
  2090  0328  0820               	movf	i1Keypad_STATE_WAITING_FOR_C@this,w
  2091  0329  0084               	movwf	4
  2092  032A  0823               	movf	??i1_Keypad_STATE_WAITING_FOR_C,w
  2093  032B  1383               	bcf	3,7	;select IRP bank0
  2094  032C  0080               	movwf	0
  2095                           
  2096                           ;keypad_fsm.h: 105: break;
  2097  032D  0008               	return
  2098  032E                     i1l1167:	
  2099                           ;keypad_fsm.h: 106: case KEY_A_PRESSED:
  2100                           
  2101                           
  2102                           ;keypad_fsm.h: 107: (((Fsm *) this)->fsmState = (State) & Keypad_STATE_WAITING_FOR_B);
  2103  032E  3004               	movlw	(low (fp_i1_Keypad_STATE_WAITING_FOR_B-i1fpbase))& (0+255)
  2104  032F  00A3               	movwf	??i1_Keypad_STATE_WAITING_FOR_C
  2105  0330  0820               	movf	i1Keypad_STATE_WAITING_FOR_C@this,w
  2106  0331  0084               	movwf	4
  2107  0332  0823               	movf	??i1_Keypad_STATE_WAITING_FOR_C,w
  2108  0333  1383               	bcf	3,7	;select IRP bank0
  2109  0334  0080               	movwf	0
  2110                           
  2111                           ;keypad_fsm.h: 108: break;
  2112  0335  0008               	return
  2113  0336                     i1l1169:	
  2114                           ;keypad_fsm.h: 109: case KEY_HASH_PRESSED:
  2115                           
  2116                           
  2117                           ;keypad_fsm.h: 110: (((Fsm *) this)->fsmState = (State) & Keypad_STATE_WAITING_FOR_STAR)
      +                          ;
  2118  0336  3001               	movlw	(low (fp_i1_Keypad_STATE_WAITING_FOR_STAR-i1fpbase))& (0+255)
  2119  0337  00A3               	movwf	??i1_Keypad_STATE_WAITING_FOR_C
  2120  0338  0820               	movf	i1Keypad_STATE_WAITING_FOR_C@this,w
  2121  0339  0084               	movwf	4
  2122  033A  0823               	movf	??i1_Keypad_STATE_WAITING_FOR_C,w
  2123  033B  1383               	bcf	3,7	;select IRP bank0
  2124  033C  0080               	movwf	0
  2125                           
  2126                           ;keypad_fsm.h: 111: break;
  2127  033D  0008               	return
  2128  033E                     i1l1171:	
  2129                           ;keypad_fsm.h: 112: default:
  2130                           
  2131                           
  2132                           ;keypad_fsm.h: 113: (((Fsm *) this)->fsmState = (State) & Keypad_STATE_WAITING_FOR_A_OR_
      +                          HASH);
  2133  033E  3005               	movlw	(low (fp_i1_Keypad_STATE_WAITING_FOR_A_OR_HASH-i1fpbase))& (0+255)
  2134  033F  00A3               	movwf	??i1_Keypad_STATE_WAITING_FOR_C
  2135  0340  0820               	movf	i1Keypad_STATE_WAITING_FOR_C@this,w
  2136  0341  0084               	movwf	4
  2137  0342  0823               	movf	??i1_Keypad_STATE_WAITING_FOR_C,w
  2138  0343  1383               	bcf	3,7	;select IRP bank0
  2139  0344  0080               	movwf	0
  2140                           
  2141                           ;keypad_fsm.h: 115: }
  2142                           
  2143                           ;keypad_fsm.h: 114: break;
  2144  0345  0008               	return
  2145  0346                     i1l1175:	
  2146  0346  1283               	bcf	3,5	;RP0=0, select bank0
  2147  0347  0822               	movf	i1Keypad_STATE_WAITING_FOR_C@event+1,w
  2148  0348  00DF               	movwf	95
  2149  0349  0821               	movf	i1Keypad_STATE_WAITING_FOR_C@event,w
  2150  034A  0084               	movwf	4
  2151  034B  2085               	fcall	stringtab
  2152                           
  2153                           ; Switch size 1, requested type "space"
  2154                           ; Number of cases is 4, Range of values is 0 to 7
  2155                           ; switch strategies available:
  2156                           ; Name         Instructions Cycles
  2157                           ; simple_byte           13     7 (average)
  2158                           ; direct_byte           14     6 (fixed)
  2159                           ; jumptable            260     6 (fixed)
  2160                           ;	Chosen strategy is simple_byte
  2161  034C  3A00               	xorlw	0	; case 0
  2162  034D  1903               	skipnz
  2163  034E  2B2E               	goto	i1l1167
  2164  034F  3A02               	xorlw	2	; case 2
  2165  0350  1903               	skipnz
  2166  0351  2B26               	goto	i1l1165
  2167  0352  3A06               	xorlw	6	; case 4
  2168  0353  1903               	skipnz
  2169  0354  2B36               	goto	i1l1169
  2170  0355  3A03               	xorlw	3	; case 7
  2171  0356  1903               	skipnz
  2172  0357  2B1D               	goto	i1l1163
  2173  0358  2B3E               	goto	i1l1171
  2174  0359  0008               	return
  2175  035A                     __end_ofi1_Keypad_STATE_WAITING_FOR_C:	
  2176                           
  2177                           	psect	text14
  2178  0390                     __ptext14:	
  2179 ;; *************** function i1_Keypad_STATE_WAITING_FOR_B *****************
  2180 ;; Defined at:
  2181 ;;		line 79 in file "keypad_fsm.h"
  2182 ;; Parameters:    Size  Location     Type
  2183 ;;  this            1    0[BANK0 ] PTR struct _Keypad
  2184 ;;		 -> k(1), 
  2185 ;;  event           2    1[BANK0 ] PTR const struct _Event
  2186 ;;		 -> ROM(1024), keypad_access@ke(2), 
  2187 ;; Auto vars:     Size  Location     Type
  2188 ;;		None
  2189 ;; Return value:  Size  Location     Type
  2190 ;;                  1    wreg      void 
  2191 ;; Registers used:
  2192 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath
  2193 ;; Tracked objects:
  2194 ;;		On entry : 0/0
  2195 ;;		On exit  : 0/0
  2196 ;;		Unchanged: 0/0
  2197 ;; Data sizes:     COMMON   BANK0
  2198 ;;      Params:         0       3
  2199 ;;      Locals:         0       0
  2200 ;;      Temps:          0       1
  2201 ;;      Totals:         0       4
  2202 ;;Total ram usage:        4 bytes
  2203 ;; Hardware stack levels used:    2
  2204 ;; This function calls:
  2205 ;;		Nothing
  2206 ;; This function is called by:
  2207 ;;		i1_Keypad_STATE_WAITING_FOR_A_OR_HASH
  2208 ;;		i1_Keypad_STATE_WAITING_FOR_C
  2209 ;;		i1_Keypad_STATE_WAITING_FOR_STAR
  2210 ;; This function uses a non-reentrant model
  2211 ;;
  2212                           
  2213                           
  2214                           ;psect for function i1_Keypad_STATE_WAITING_FOR_B
  2215  0390                     i1_Keypad_STATE_WAITING_FOR_B:	
  2216                           
  2217                           ;keypad_fsm.h: 80: switch(event->eventSignal){
  2218                           
  2219                           ;incstack = 0
  2220                           ; Regs used in i1_Keypad_STATE_WAITING_FOR_B: [wreg-fsr0h+status,2+status,0+btemp+1+pcla
      +                          th]
  2221  0390  2BB2               	goto	i1l1159
  2222  0391                     i1l1149:	
  2223                           ;keypad_fsm.h: 81: case TIMEOUT:
  2224                           
  2225                           
  2226                           ;keypad_fsm.h: 82: (((Fsm *) this)->fsmState = (State) & Keypad_STATE_WAITING_FOR_A_OR_H
      +                          ASH);
  2227  0391  3005               	movlw	(low (fp_i1_Keypad_STATE_WAITING_FOR_A_OR_HASH-i1fpbase))& (0+255)
  2228  0392  1283               	bcf	3,5	;RP0=0, select bank0
  2229  0393  00A3               	movwf	??i1_Keypad_STATE_WAITING_FOR_B
  2230  0394  0820               	movf	i1Keypad_STATE_WAITING_FOR_B@this,w
  2231  0395  0084               	movwf	4
  2232  0396  0823               	movf	??i1_Keypad_STATE_WAITING_FOR_B,w
  2233  0397  1383               	bcf	3,7	;select IRP bank0
  2234  0398  0080               	movwf	0
  2235                           
  2236                           ;keypad_fsm.h: 83: break;
  2237  0399  0008               	return
  2238  039A                     i1l1151:	
  2239                           ;keypad_fsm.h: 84: case KEY_B_PRESSED:
  2240                           
  2241                           
  2242                           ;keypad_fsm.h: 85: (((Fsm *) this)->fsmState = (State) & Keypad_STATE_WAITING_FOR_C);
  2243  039A  3003               	movlw	(low (fp_i1_Keypad_STATE_WAITING_FOR_C-i1fpbase))& (0+255)
  2244  039B  00A3               	movwf	??i1_Keypad_STATE_WAITING_FOR_B
  2245  039C  0820               	movf	i1Keypad_STATE_WAITING_FOR_B@this,w
  2246  039D  0084               	movwf	4
  2247  039E  0823               	movf	??i1_Keypad_STATE_WAITING_FOR_B,w
  2248  039F  1383               	bcf	3,7	;select IRP bank0
  2249  03A0  0080               	movwf	0
  2250                           
  2251                           ;keypad_fsm.h: 88: break;
  2252                           
  2253                           ;keypad_fsm.h: 87: case KEY_A_PRESSED:
  2254                           
  2255                           ;keypad_fsm.h: 86: break;
  2256  03A1  0008               	return
  2257  03A2                     i1l1153:	
  2258                           ;keypad_fsm.h: 89: case KEY_HASH_PRESSED:
  2259                           
  2260                           
  2261                           ;keypad_fsm.h: 90: (((Fsm *) this)->fsmState = (State) & Keypad_STATE_WAITING_FOR_STAR);
  2262  03A2  3001               	movlw	(low (fp_i1_Keypad_STATE_WAITING_FOR_STAR-i1fpbase))& (0+255)
  2263  03A3  00A3               	movwf	??i1_Keypad_STATE_WAITING_FOR_B
  2264  03A4  0820               	movf	i1Keypad_STATE_WAITING_FOR_B@this,w
  2265  03A5  0084               	movwf	4
  2266  03A6  0823               	movf	??i1_Keypad_STATE_WAITING_FOR_B,w
  2267  03A7  1383               	bcf	3,7	;select IRP bank0
  2268  03A8  0080               	movwf	0
  2269                           
  2270                           ;keypad_fsm.h: 91: break;
  2271  03A9  0008               	return
  2272  03AA                     i1l1155:	
  2273                           ;keypad_fsm.h: 92: default:
  2274                           
  2275                           
  2276                           ;keypad_fsm.h: 93: (((Fsm *) this)->fsmState = (State) & Keypad_STATE_WAITING_FOR_A_OR_H
      +                          ASH);
  2277  03AA  3005               	movlw	(low (fp_i1_Keypad_STATE_WAITING_FOR_A_OR_HASH-i1fpbase))& (0+255)
  2278  03AB  00A3               	movwf	??i1_Keypad_STATE_WAITING_FOR_B
  2279  03AC  0820               	movf	i1Keypad_STATE_WAITING_FOR_B@this,w
  2280  03AD  0084               	movwf	4
  2281  03AE  0823               	movf	??i1_Keypad_STATE_WAITING_FOR_B,w
  2282  03AF  1383               	bcf	3,7	;select IRP bank0
  2283  03B0  0080               	movwf	0
  2284                           
  2285                           ;keypad_fsm.h: 95: }
  2286                           
  2287                           ;keypad_fsm.h: 94: break;
  2288  03B1  0008               	return
  2289  03B2                     i1l1159:	
  2290  03B2  1283               	bcf	3,5	;RP0=0, select bank0
  2291  03B3  0822               	movf	i1Keypad_STATE_WAITING_FOR_B@event+1,w
  2292  03B4  00DF               	movwf	95
  2293  03B5  0821               	movf	i1Keypad_STATE_WAITING_FOR_B@event,w
  2294  03B6  0084               	movwf	4
  2295  03B7  2085               	fcall	stringtab
  2296                           
  2297                           ; Switch size 1, requested type "space"
  2298                           ; Number of cases is 4, Range of values is 0 to 7
  2299                           ; switch strategies available:
  2300                           ; Name         Instructions Cycles
  2301                           ; simple_byte           13     7 (average)
  2302                           ; direct_byte           14     6 (fixed)
  2303                           ; jumptable            260     6 (fixed)
  2304                           ;	Chosen strategy is simple_byte
  2305  03B8  3A00               	xorlw	0	; case 0
  2306  03B9  1903               	skipnz
  2307  03BA  2BC5               	goto	i1l112
  2308  03BB  3A01               	xorlw	1	; case 1
  2309  03BC  1903               	skipnz
  2310  03BD  2B9A               	goto	i1l1151
  2311  03BE  3A05               	xorlw	5	; case 4
  2312  03BF  1903               	skipnz
  2313  03C0  2BA2               	goto	i1l1153
  2314  03C1  3A03               	xorlw	3	; case 7
  2315  03C2  1903               	skipnz
  2316  03C3  2B91               	goto	i1l1149
  2317  03C4  2BAA               	goto	i1l1155
  2318  03C5                     i1l112:	
  2319  03C5  0008               	return
  2320  03C6                     __end_ofi1_Keypad_STATE_WAITING_FOR_B:	
  2321                           
  2322                           	psect	text15
  2323  0037                     __ptext15:	
  2324 ;; *************** function i1_Keypad_STATE_WAITING_FOR_A_OR_HASH *****************
  2325 ;; Defined at:
  2326 ;;		line 65 in file "keypad_fsm.h"
  2327 ;; Parameters:    Size  Location     Type
  2328 ;;  this            1    0[BANK0 ] PTR struct _Keypad
  2329 ;;		 -> k(1), 
  2330 ;;  event           2    1[BANK0 ] PTR const struct _Event
  2331 ;;		 -> ROM(1024), keypad_access@ke(2), 
  2332 ;; Auto vars:     Size  Location     Type
  2333 ;;		None
  2334 ;; Return value:  Size  Location     Type
  2335 ;;                  1    wreg      void 
  2336 ;; Registers used:
  2337 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath
  2338 ;; Tracked objects:
  2339 ;;		On entry : 0/0
  2340 ;;		On exit  : 0/0
  2341 ;;		Unchanged: 0/0
  2342 ;; Data sizes:     COMMON   BANK0
  2343 ;;      Params:         0       3
  2344 ;;      Locals:         0       0
  2345 ;;      Temps:          0       1
  2346 ;;      Totals:         0       4
  2347 ;;Total ram usage:        4 bytes
  2348 ;; Hardware stack levels used:    2
  2349 ;; This function calls:
  2350 ;;		Nothing
  2351 ;; This function is called by:
  2352 ;;		i1_Keypad_START
  2353 ;;		i1_Keypad_STATE_WAITING_FOR_B
  2354 ;;		i1_Keypad_STATE_WAITING_FOR_C
  2355 ;;		i1_Keypad_STATE_WAITING_FOR_D
  2356 ;;		i1_Keypad_STATE_WAITING_FOR_STAR
  2357 ;; This function uses a non-reentrant model
  2358 ;;
  2359                           
  2360                           
  2361                           ;psect for function i1_Keypad_STATE_WAITING_FOR_A_OR_HASH
  2362  0037                     i1_Keypad_STATE_WAITING_FOR_A_OR_HASH:	
  2363                           
  2364                           ;keypad_fsm.h: 66: switch(event->eventSignal){
  2365                           
  2366                           ;incstack = 0
  2367                           ; Regs used in i1_Keypad_STATE_WAITING_FOR_A_OR_HASH: [wreg-fsr0h+status,2+status,0+btem
      +                          p+1+pclath]
  2368  0037  2849               	goto	i1l1145
  2369  0038                     i1l1139:	
  2370                           ;keypad_fsm.h: 68: case KEY_A_PRESSED:
  2371                           
  2372                           
  2373                           ;keypad_fsm.h: 69: (((Fsm *) this)->fsmState = (State) & Keypad_STATE_WAITING_FOR_B);
  2374  0038  3004               	movlw	(low (fp_i1_Keypad_STATE_WAITING_FOR_B-i1fpbase))& (0+255)
  2375  0039  1283               	bcf	3,5	;RP0=0, select bank0
  2376  003A  00A3               	movwf	??i1_Keypad_STATE_WAITING_FOR_A_OR_HASH
  2377  003B  0820               	movf	i1Keypad_STATE_WAITING_FOR_A_OR_HASH@this,w
  2378  003C  0084               	movwf	4
  2379  003D  0823               	movf	??i1_Keypad_STATE_WAITING_FOR_A_OR_HASH,w
  2380  003E  1383               	bcf	3,7	;select IRP bank0
  2381  003F  0080               	movwf	0
  2382                           
  2383                           ;keypad_fsm.h: 70: break;
  2384  0040  0008               	return
  2385  0041                     i1l1141:	
  2386                           ;keypad_fsm.h: 71: case KEY_HASH_PRESSED:
  2387                           
  2388                           
  2389                           ;keypad_fsm.h: 72: (((Fsm *) this)->fsmState = (State) & Keypad_STATE_WAITING_FOR_STAR);
  2390  0041  3001               	movlw	(low (fp_i1_Keypad_STATE_WAITING_FOR_STAR-i1fpbase))& (0+255)
  2391  0042  00A3               	movwf	??i1_Keypad_STATE_WAITING_FOR_A_OR_HASH
  2392  0043  0820               	movf	i1Keypad_STATE_WAITING_FOR_A_OR_HASH@this,w
  2393  0044  0084               	movwf	4
  2394  0045  0823               	movf	??i1_Keypad_STATE_WAITING_FOR_A_OR_HASH,w
  2395  0046  1383               	bcf	3,7	;select IRP bank0
  2396  0047  0080               	movwf	0
  2397                           
  2398                           ;keypad_fsm.h: 76: }
  2399                           
  2400                           ;keypad_fsm.h: 75: break;
  2401                           
  2402                           ;keypad_fsm.h: 74: default:
  2403                           
  2404                           ;keypad_fsm.h: 73: break;
  2405  0048  0008               	return
  2406  0049                     i1l1145:	
  2407  0049  1283               	bcf	3,5	;RP0=0, select bank0
  2408  004A  0822               	movf	i1Keypad_STATE_WAITING_FOR_A_OR_HASH@event+1,w
  2409  004B  00DF               	movwf	95
  2410  004C  0821               	movf	i1Keypad_STATE_WAITING_FOR_A_OR_HASH@event,w
  2411  004D  0084               	movwf	4
  2412  004E  2085               	fcall	stringtab
  2413                           
  2414                           ; Switch size 1, requested type "space"
  2415                           ; Number of cases is 2, Range of values is 0 to 4
  2416                           ; switch strategies available:
  2417                           ; Name         Instructions Cycles
  2418                           ; simple_byte            7     4 (average)
  2419                           ; direct_byte           11     6 (fixed)
  2420                           ; jumptable            260     6 (fixed)
  2421                           ;	Chosen strategy is simple_byte
  2422  004F  3A00               	xorlw	0	; case 0
  2423  0050  1903               	skipnz
  2424  0051  2838               	goto	i1l1139
  2425  0052  3A04               	xorlw	4	; case 4
  2426  0053  1903               	skipnz
  2427  0054  2841               	goto	i1l1141
  2428  0055  2856               	goto	i1l102
  2429  0056                     i1l102:	
  2430  0056  0008               	return
  2431  0057                     __end_ofi1_Keypad_STATE_WAITING_FOR_A_OR_HASH:	
  2432                           
  2433                           	psect	text16
  2434  00C1                     __ptext16:	
  2435 ;; *************** function i1_Keypad_START *****************
  2436 ;; Defined at:
  2437 ;;		line 61 in file "keypad_fsm.h"
  2438 ;; Parameters:    Size  Location     Type
  2439 ;;  this            1    0[BANK0 ] PTR struct _Keypad
  2440 ;;		 -> k(1), 
  2441 ;;  event           2    1[BANK0 ] PTR const struct _Event
  2442 ;;		 -> ROM(1024), keypad_access@ke(2), 
  2443 ;; Auto vars:     Size  Location     Type
  2444 ;;		None
  2445 ;; Return value:  Size  Location     Type
  2446 ;;                  1    wreg      void 
  2447 ;; Registers used:
  2448 ;;		wreg, fsr0l, fsr0h
  2449 ;; Tracked objects:
  2450 ;;		On entry : 0/0
  2451 ;;		On exit  : 0/0
  2452 ;;		Unchanged: 0/0
  2453 ;; Data sizes:     COMMON   BANK0
  2454 ;;      Params:         0       3
  2455 ;;      Locals:         0       0
  2456 ;;      Temps:          0       1
  2457 ;;      Totals:         0       4
  2458 ;;Total ram usage:        4 bytes
  2459 ;; Hardware stack levels used:    2
  2460 ;; This function calls:
  2461 ;;		Nothing
  2462 ;; This function is called by:
  2463 ;; This function uses a non-reentrant model
  2464 ;;
  2465                           
  2466                           
  2467                           ;psect for function i1_Keypad_START
  2468  00C1                     i1_Keypad_START:	
  2469                           
  2470                           ;keypad_fsm.h: 62: (((Fsm *) this)->fsmState = (State) & Keypad_STATE_WAITING_FOR_A_OR_H
      +                          ASH);
  2471                           
  2472                           ;incstack = 0
  2473                           ; Regs used in i1_Keypad_START: [wregfsr0]
  2474  00C1  3005               	movlw	(low (fp_i1_Keypad_STATE_WAITING_FOR_A_OR_HASH-i1fpbase))& (0+255)
  2475  00C2  1283               	bcf	3,5	;RP0=0, select bank0
  2476  00C3  00A3               	movwf	??i1_Keypad_START
  2477  00C4  0820               	movf	i1Keypad_START@this,w
  2478  00C5  0084               	movwf	4
  2479  00C6  0823               	movf	??i1_Keypad_START,w
  2480  00C7  1383               	bcf	3,7	;select IRP bank0
  2481  00C8  0080               	movwf	0
  2482  00C9  0008               	return
  2483  00CA                     __end_ofi1_Keypad_START:	
  2484                           
  2485                           	psect	text17
  2486  029B                     __ptext17:	
  2487 ;; *************** function i1_Keypad_STATE_WAITING_FOR_STAR *****************
  2488 ;; Defined at:
  2489 ;;		line 139 in file "keypad_fsm.h"
  2490 ;; Parameters:    Size  Location     Type
  2491 ;;  this            1    0[BANK0 ] PTR struct _Keypad
  2492 ;;		 -> k(1), 
  2493 ;;  event           2    1[BANK0 ] PTR const struct _Event
  2494 ;;		 -> ROM(1024), keypad_access@ke(2), 
  2495 ;; Auto vars:     Size  Location     Type
  2496 ;;		None
  2497 ;; Return value:  Size  Location     Type
  2498 ;;                  1    wreg      void 
  2499 ;; Registers used:
  2500 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath
  2501 ;; Tracked objects:
  2502 ;;		On entry : 0/0
  2503 ;;		On exit  : 0/0
  2504 ;;		Unchanged: 0/0
  2505 ;; Data sizes:     COMMON   BANK0
  2506 ;;      Params:         0       3
  2507 ;;      Locals:         0       0
  2508 ;;      Temps:          0       3
  2509 ;;      Totals:         0       6
  2510 ;;Total ram usage:        6 bytes
  2511 ;; Hardware stack levels used:    2
  2512 ;; This function calls:
  2513 ;;		Nothing
  2514 ;; This function is called by:
  2515 ;;		i1_Keypad_STATE_WAITING_FOR_A_OR_HASH
  2516 ;;		i1_Keypad_STATE_WAITING_FOR_B
  2517 ;;		i1_Keypad_STATE_WAITING_FOR_C
  2518 ;;		i1_Keypad_STATE_WAITING_FOR_D
  2519 ;; This function uses a non-reentrant model
  2520 ;;
  2521                           
  2522                           
  2523                           ;psect for function i1_Keypad_STATE_WAITING_FOR_STAR
  2524  029B                     i1_Keypad_STATE_WAITING_FOR_STAR:	
  2525                           
  2526                           ;keypad_fsm.h: 140: switch(event->eventSignal){
  2527                           
  2528                           ;incstack = 0
  2529                           ; Regs used in i1_Keypad_STATE_WAITING_FOR_STAR: [wreg-fsr0h+status,2+status,0+btemp+1+p
      +                          clath]
  2530  029B  2ACD               	goto	i1l1211
  2531  029C                     i1l1197:	
  2532                           ;keypad_fsm.h: 141: case TIMEOUT:
  2533                           
  2534                           
  2535                           ;keypad_fsm.h: 142: (((Fsm *) this)->fsmState = (State) & Keypad_STATE_WAITING_FOR_A_OR_
      +                          HASH);
  2536  029C  3005               	movlw	(low (fp_i1_Keypad_STATE_WAITING_FOR_A_OR_HASH-i1fpbase))& (0+255)
  2537  029D  1283               	bcf	3,5	;RP0=0, select bank0
  2538  029E  00A3               	movwf	??i1_Keypad_STATE_WAITING_FOR_STAR
  2539  029F  0820               	movf	i1Keypad_STATE_WAITING_FOR_STAR@this,w
  2540  02A0  0084               	movwf	4
  2541  02A1  0823               	movf	??i1_Keypad_STATE_WAITING_FOR_STAR,w
  2542  02A2  1383               	bcf	3,7	;select IRP bank0
  2543  02A3  0080               	movwf	0
  2544                           
  2545                           ;keypad_fsm.h: 143: break;
  2546  02A4  0008               	return
  2547  02A5                     i1l137:	
  2548                           ;keypad_fsm.h: 144: case KEY_STAR_PRESSED:
  2549                           
  2550                           
  2551                           ;keypad_fsm.h: 145: GP4 = 1;
  2552  02A5  1605               	bsf	5,4	;volatile
  2553                           
  2554                           ;keypad_fsm.h: 146: _delay((unsigned long)((1000)*(4000000/4000.0)));
  2555  02A6  3006               	movlw	6
  2556  02A7  00A5               	movwf	??i1_Keypad_STATE_WAITING_FOR_STAR+2
  2557  02A8  3013               	movlw	19
  2558  02A9  00A4               	movwf	??i1_Keypad_STATE_WAITING_FOR_STAR+1
  2559  02AA  30AD               	movlw	173
  2560  02AB  00A3               	movwf	??i1_Keypad_STATE_WAITING_FOR_STAR
  2561  02AC                     u50_27:	
  2562  02AC  0BA3               	decfsz	??i1_Keypad_STATE_WAITING_FOR_STAR,f
  2563  02AD  2AAC               	goto	u50_27
  2564  02AE  0BA4               	decfsz	??i1_Keypad_STATE_WAITING_FOR_STAR+1,f
  2565  02AF  2AAC               	goto	u50_27
  2566  02B0  0BA5               	decfsz	??i1_Keypad_STATE_WAITING_FOR_STAR+2,f
  2567  02B1  2AAC               	goto	u50_27
  2568  02B2  2AB3               	nop2
  2569                           
  2570                           ;keypad_fsm.h: 147: GP4 = 0;
  2571  02B3  1283               	bcf	3,5	;RP0=0, select bank0
  2572  02B4  1205               	bcf	5,4	;volatile
  2573                           
  2574                           ;keypad_fsm.h: 149: (((Fsm *) this)->fsmState = (State) & Keypad_STATE_WAITING_FOR_A_OR_
      +                          HASH);
  2575  02B5  3005               	movlw	(low (fp_i1_Keypad_STATE_WAITING_FOR_A_OR_HASH-i1fpbase))& (0+255)
  2576  02B6  00A3               	movwf	??i1_Keypad_STATE_WAITING_FOR_STAR
  2577  02B7  0820               	movf	i1Keypad_STATE_WAITING_FOR_STAR@this,w
  2578  02B8  0084               	movwf	4
  2579  02B9  0823               	movf	??i1_Keypad_STATE_WAITING_FOR_STAR,w
  2580  02BA  1383               	bcf	3,7	;select IRP bank0
  2581  02BB  0080               	movwf	0
  2582                           
  2583                           ;keypad_fsm.h: 150: break;
  2584  02BC  0008               	return
  2585  02BD                     i1l1205:	
  2586                           ;keypad_fsm.h: 151: case KEY_A_PRESSED:
  2587                           
  2588                           
  2589                           ;keypad_fsm.h: 152: (((Fsm *) this)->fsmState = (State) & Keypad_STATE_WAITING_FOR_B);
  2590  02BD  3004               	movlw	(low (fp_i1_Keypad_STATE_WAITING_FOR_B-i1fpbase))& (0+255)
  2591  02BE  00A3               	movwf	??i1_Keypad_STATE_WAITING_FOR_STAR
  2592  02BF  0820               	movf	i1Keypad_STATE_WAITING_FOR_STAR@this,w
  2593  02C0  0084               	movwf	4
  2594  02C1  0823               	movf	??i1_Keypad_STATE_WAITING_FOR_STAR,w
  2595  02C2  1383               	bcf	3,7	;select IRP bank0
  2596  02C3  0080               	movwf	0
  2597                           
  2598                           ;keypad_fsm.h: 153: break;
  2599  02C4  0008               	return
  2600  02C5                     i1l1207:	
  2601                           ;keypad_fsm.h: 154: default:
  2602                           
  2603                           
  2604                           ;keypad_fsm.h: 155: (((Fsm *) this)->fsmState = (State) & Keypad_STATE_WAITING_FOR_A_OR_
      +                          HASH);
  2605  02C5  3005               	movlw	(low (fp_i1_Keypad_STATE_WAITING_FOR_A_OR_HASH-i1fpbase))& (0+255)
  2606  02C6  00A3               	movwf	??i1_Keypad_STATE_WAITING_FOR_STAR
  2607  02C7  0820               	movf	i1Keypad_STATE_WAITING_FOR_STAR@this,w
  2608  02C8  0084               	movwf	4
  2609  02C9  0823               	movf	??i1_Keypad_STATE_WAITING_FOR_STAR,w
  2610  02CA  1383               	bcf	3,7	;select IRP bank0
  2611  02CB  0080               	movwf	0
  2612                           
  2613                           ;keypad_fsm.h: 157: }
  2614                           
  2615                           ;keypad_fsm.h: 156: break;
  2616  02CC  0008               	return
  2617  02CD                     i1l1211:	
  2618  02CD  1283               	bcf	3,5	;RP0=0, select bank0
  2619  02CE  0822               	movf	i1Keypad_STATE_WAITING_FOR_STAR@event+1,w
  2620  02CF  00DF               	movwf	95
  2621  02D0  0821               	movf	i1Keypad_STATE_WAITING_FOR_STAR@event,w
  2622  02D1  0084               	movwf	4
  2623  02D2  2085               	fcall	stringtab
  2624                           
  2625                           ; Switch size 1, requested type "space"
  2626                           ; Number of cases is 3, Range of values is 0 to 7
  2627                           ; switch strategies available:
  2628                           ; Name         Instructions Cycles
  2629                           ; simple_byte           10     6 (average)
  2630                           ; direct_byte           14     6 (fixed)
  2631                           ; jumptable            260     6 (fixed)
  2632                           ;	Chosen strategy is simple_byte
  2633  02D3  3A00               	xorlw	0	; case 0
  2634  02D4  1903               	skipnz
  2635  02D5  2ABD               	goto	i1l1205
  2636  02D6  3A05               	xorlw	5	; case 5
  2637  02D7  1903               	skipnz
  2638  02D8  2AA5               	goto	i1l137
  2639  02D9  3A02               	xorlw	2	; case 7
  2640  02DA  1903               	skipnz
  2641  02DB  2A9C               	goto	i1l1197
  2642  02DC  2AC5               	goto	i1l1207
  2643  02DD  0008               	return
  2644  02DE                     __end_ofi1_Keypad_STATE_WAITING_FOR_STAR:	
  2645                           
  2646                           	psect	text18
  2647  0118                     __ptext18:	
  2648 ;; *************** function _keypad_read *****************
  2649 ;; Defined at:
  2650 ;;		line 30 in file "keypad_access.h"
  2651 ;; Parameters:    Size  Location     Type
  2652 ;;		None
  2653 ;; Auto vars:     Size  Location     Type
  2654 ;;  adc_result      1    5[BANK0 ] unsigned char 
  2655 ;; Return value:  Size  Location     Type
  2656 ;;                  1    wreg      unsigned char 
  2657 ;; Registers used:
  2658 ;;		wreg, pclath, cstack
  2659 ;; Tracked objects:
  2660 ;;		On entry : 0/0
  2661 ;;		On exit  : 0/0
  2662 ;;		Unchanged: 0/0
  2663 ;; Data sizes:     COMMON   BANK0
  2664 ;;      Params:         0       0
  2665 ;;      Locals:         0       1
  2666 ;;      Temps:          0       1
  2667 ;;      Totals:         0       2
  2668 ;;Total ram usage:        2 bytes
  2669 ;; Hardware stack levels used:    1
  2670 ;; Hardware stack levels required when called:    1
  2671 ;; This function calls:
  2672 ;;		_ADC_Read_8_bits
  2673 ;; This function is called by:
  2674 ;;		_keypad_access
  2675 ;; This function uses a non-reentrant model
  2676 ;;
  2677                           
  2678                           
  2679                           ;psect for function _keypad_read
  2680  0118                     _keypad_read:	
  2681                           
  2682                           ;keypad_access.h: 40: if(ADC_Read_8_bits() > 245){
  2683                           
  2684                           ;incstack = 0
  2685                           ; Regs used in _keypad_read: [wreg+pclath+cstack]
  2686  0118  206F               	fcall	_ADC_Read_8_bits
  2687  0119  3000               	movlw	0
  2688  011A  1283               	bcf	3,5	;RP0=0, select bank0
  2689  011B  0221               	subwf	?_ADC_Read_8_bits+1,w
  2690  011C  30F6               	movlw	246
  2691  011D  1903               	skipnz
  2692  011E  0220               	subwf	?_ADC_Read_8_bits,w
  2693  011F  1C03               	skipc
  2694  0120  2923               	goto	i1l1059
  2695                           
  2696                           ;keypad_access.h: 41: return 0x0C;
  2697  0121  300C               	movlw	12
  2698  0122  0008               	return
  2699  0123                     i1l1059:	
  2700                           
  2701                           ;keypad_access.h: 42: }
  2702                           ;keypad_access.h: 46: unsigned char adc_result = ADC_Read_8_bits();
  2703  0123  206F               	fcall	_ADC_Read_8_bits
  2704  0124  1283               	bcf	3,5	;RP0=0, select bank0
  2705  0125  0820               	movf	?_ADC_Read_8_bits,w
  2706  0126  00A4               	movwf	??_keypad_read
  2707  0127  0824               	movf	??_keypad_read,w
  2708  0128  00A5               	movwf	keypad_read@adc_result
  2709  0129                     i1l1061:	
  2710                           ;keypad_access.h: 50: while(ADC_Read_8_bits() < 246);
  2711                           
  2712  0129  206F               	fcall	_ADC_Read_8_bits
  2713  012A  3000               	movlw	0
  2714  012B  1283               	bcf	3,5	;RP0=0, select bank0
  2715  012C  0221               	subwf	?_ADC_Read_8_bits+1,w
  2716  012D  30F6               	movlw	246
  2717  012E  1903               	skipnz
  2718  012F  0220               	subwf	?_ADC_Read_8_bits,w
  2719  0130  1C03               	skipc
  2720  0131  2929               	goto	i1l1061
  2721                           
  2722                           ;keypad_access.h: 54: if(adc_result < 14){
  2723  0132  300E               	movlw	14
  2724  0133  0225               	subwf	keypad_read@adc_result,w
  2725  0134  1803               	skipnc
  2726  0135  2938               	goto	i1l1069
  2727                           
  2728                           ;keypad_access.h: 55: return 0x08;
  2729  0136  3008               	movlw	8
  2730  0137  0008               	return
  2731  0138                     i1l1069:	
  2732                           
  2733                           ;keypad_access.h: 56: }
  2734                           ;keypad_access.h: 57: if(adc_result < 39){
  2735  0138  3027               	movlw	39
  2736  0139  0225               	subwf	keypad_read@adc_result,w
  2737  013A  1803               	skipnc
  2738  013B  293E               	goto	i1l1075
  2739                           
  2740                           ;keypad_access.h: 58: return 0x07;
  2741  013C  3007               	movlw	7
  2742  013D  0008               	return
  2743  013E                     i1l1075:	
  2744                           
  2745                           ;keypad_access.h: 59: }
  2746                           ;keypad_access.h: 60: if(adc_result < 62){
  2747  013E  303E               	movlw	62
  2748  013F  0225               	subwf	keypad_read@adc_result,w
  2749  0140  1803               	skipnc
  2750  0141  2944               	goto	i1l1081
  2751                           
  2752                           ;keypad_access.h: 61: return 0x09;
  2753  0142  3009               	movlw	9
  2754  0143  0008               	return
  2755  0144                     i1l1081:	
  2756                           
  2757                           ;keypad_access.h: 62: }
  2758                           ;keypad_access.h: 63: if(adc_result < 83){
  2759  0144  3053               	movlw	83
  2760  0145  0225               	subwf	keypad_read@adc_result,w
  2761  0146  1803               	skipnc
  2762  0147  294A               	goto	i1l1087
  2763                           
  2764                           ;keypad_access.h: 64: return 0x05;
  2765  0148  3005               	movlw	5
  2766  0149  0008               	return
  2767  014A                     i1l1087:	
  2768                           
  2769                           ;keypad_access.h: 65: }
  2770                           ;keypad_access.h: 66: if(adc_result < 104){
  2771  014A  3068               	movlw	104
  2772  014B  0225               	subwf	keypad_read@adc_result,w
  2773  014C  1803               	skipnc
  2774  014D  2950               	goto	i1l1093
  2775                           
  2776                           ;keypad_access.h: 67: return 0x04;
  2777  014E  3004               	movlw	4
  2778  014F  0008               	return
  2779  0150                     i1l1093:	
  2780                           
  2781                           ;keypad_access.h: 68: }
  2782                           ;keypad_access.h: 69: if(adc_result < 124){
  2783  0150  307C               	movlw	124
  2784  0151  0225               	subwf	keypad_read@adc_result,w
  2785  0152  1803               	skipnc
  2786  0153  2956               	goto	i1l1099
  2787                           
  2788                           ;keypad_access.h: 70: return 0x06;
  2789  0154  3006               	movlw	6
  2790  0155  0008               	return
  2791  0156                     i1l1099:	
  2792                           
  2793                           ;keypad_access.h: 71: }
  2794                           ;keypad_access.h: 72: if(adc_result < 144){
  2795  0156  3090               	movlw	144
  2796  0157  0225               	subwf	keypad_read@adc_result,w
  2797  0158  1803               	skipnc
  2798  0159  295C               	goto	i1l1105
  2799                           
  2800                           ;keypad_access.h: 73: return 0x01;
  2801  015A  3001               	movlw	1
  2802  015B  0008               	return
  2803  015C                     i1l1105:	
  2804                           
  2805                           ;keypad_access.h: 74: }
  2806                           ;keypad_access.h: 75: if(adc_result < 164){
  2807  015C  30A4               	movlw	164
  2808  015D  0225               	subwf	keypad_read@adc_result,w
  2809  015E  1803               	skipnc
  2810  015F  2962               	goto	i1l1111
  2811                           
  2812                           ;keypad_access.h: 76: return 0x0B;
  2813  0160  300B               	movlw	11
  2814  0161  0008               	return
  2815  0162                     i1l1111:	
  2816                           
  2817                           ;keypad_access.h: 77: }
  2818                           ;keypad_access.h: 78: if(adc_result < 186){
  2819  0162  30BA               	movlw	186
  2820  0163  0225               	subwf	keypad_read@adc_result,w
  2821  0164  1803               	skipnc
  2822  0165  2968               	goto	i1l1117
  2823                           
  2824                           ;keypad_access.h: 79: return 0x02;
  2825  0166  3002               	movlw	2
  2826  0167  0008               	return
  2827  0168                     i1l1117:	
  2828                           
  2829                           ;keypad_access.h: 80: }
  2830                           ;keypad_access.h: 81: if(adc_result < 206){
  2831  0168  30CE               	movlw	206
  2832  0169  0225               	subwf	keypad_read@adc_result,w
  2833  016A  1803               	skipnc
  2834  016B  296E               	goto	i1l1123
  2835                           
  2836                           ;keypad_access.h: 82: return 0x03;
  2837  016C  3003               	movlw	3
  2838  016D  0008               	return
  2839  016E                     i1l1123:	
  2840                           
  2841                           ;keypad_access.h: 83: }
  2842                           ;keypad_access.h: 84: if(adc_result < 226){
  2843  016E  30E2               	movlw	226
  2844  016F  0225               	subwf	keypad_read@adc_result,w
  2845  0170  1803               	skipnc
  2846  0171  2974               	goto	i1l1131
  2847                           
  2848                           ;keypad_access.h: 85: return 0x00;
  2849  0172  3000               	movlw	0
  2850                           
  2851                           ;keypad_access.h: 86: }
  2852  0173  0008               	return
  2853  0174                     i1l1131:	
  2854                           
  2855                           ;keypad_access.h: 87: else{
  2856                           ;keypad_access.h: 88: return 0x0A;
  2857  0174  300A               	movlw	10
  2858  0175  0008               	return
  2859  0176                     __end_of_keypad_read:	
  2860                           
  2861                           	psect	text19
  2862  006F                     __ptext19:	
  2863 ;; *************** function _ADC_Read_8_bits *****************
  2864 ;; Defined at:
  2865 ;;		line 19 in file "adc.h"
  2866 ;; Parameters:    Size  Location     Type
  2867 ;;		None
  2868 ;; Auto vars:     Size  Location     Type
  2869 ;;		None
  2870 ;; Return value:  Size  Location     Type
  2871 ;;                  2    0[BANK0 ] unsigned short 
  2872 ;; Registers used:
  2873 ;;		wreg
  2874 ;; Tracked objects:
  2875 ;;		On entry : 0/0
  2876 ;;		On exit  : 0/0
  2877 ;;		Unchanged: 0/0
  2878 ;; Data sizes:     COMMON   BANK0
  2879 ;;      Params:         0       2
  2880 ;;      Locals:         0       0
  2881 ;;      Temps:          0       2
  2882 ;;      Totals:         0       4
  2883 ;;Total ram usage:        4 bytes
  2884 ;; Hardware stack levels used:    1
  2885 ;; This function calls:
  2886 ;;		Nothing
  2887 ;; This function is called by:
  2888 ;;		_keypad_read
  2889 ;; This function uses a non-reentrant model
  2890 ;;
  2891                           
  2892                           
  2893                           ;psect for function _ADC_Read_8_bits
  2894  006F                     _ADC_Read_8_bits:	
  2895                           
  2896                           ;adc.h: 25: _delay((unsigned long)((10)*(4000000/4000.0)));
  2897                           
  2898                           ;incstack = 0
  2899                           ; Regs used in _ADC_Read_8_bits: [wreg]
  2900  006F  300D               	movlw	13
  2901  0070  1283               	bcf	3,5	;RP0=0, select bank0
  2902  0071  00A3               	movwf	??_ADC_Read_8_bits+1
  2903  0072  30FB               	movlw	251
  2904  0073  00A2               	movwf	??_ADC_Read_8_bits
  2905  0074                     u51_27:	
  2906  0074  0BA2               	decfsz	??_ADC_Read_8_bits,f
  2907  0075  2874               	goto	u51_27
  2908  0076  0BA3               	decfsz	??_ADC_Read_8_bits+1,f
  2909  0077  2874               	goto	u51_27
  2910  0078  2879               	nop2
  2911                           
  2912                           ;adc.h: 28: ADCON0bits.GO_nDONE = 1;
  2913  0079  1283               	bcf	3,5	;RP0=0, select bank0
  2914  007A  149F               	bsf	31,1	;volatile
  2915  007B                     i1l85:	
  2916                           ;adc.h: 29: while(GO_nDONE == 1);
  2917                           
  2918  007B  189F               	btfsc	31,1	;volatile
  2919  007C  287B               	goto	i1l85
  2920                           
  2921                           ;adc.h: 32: return ADRESH;
  2922  007D  081E               	movf	30,w	;volatile
  2923  007E  00A2               	movwf	??_ADC_Read_8_bits
  2924  007F  01A3               	clrf	??_ADC_Read_8_bits+1
  2925  0080  0822               	movf	??_ADC_Read_8_bits,w
  2926  0081  00A0               	movwf	?_ADC_Read_8_bits
  2927  0082  0823               	movf	??_ADC_Read_8_bits+1,w
  2928  0083  00A1               	movwf	?_ADC_Read_8_bits+1
  2929  0084  0008               	return
  2930  0085                     __end_of_ADC_Read_8_bits:	
  2931                           
  2932                           	psect	text20
  2933  00D3                     __ptext20:	
  2934 ;; *************** function _TMR0_checkTimeout *****************
  2935 ;; Defined at:
  2936 ;;		line 23 in file "tmr0.h"
  2937 ;; Parameters:    Size  Location     Type
  2938 ;;		None
  2939 ;; Auto vars:     Size  Location     Type
  2940 ;;		None
  2941 ;; Return value:  Size  Location     Type
  2942 ;;                  1    wreg      void 
  2943 ;; Registers used:
  2944 ;;		wreg, status,2, status,0, pclath, cstack
  2945 ;; Tracked objects:
  2946 ;;		On entry : 0/0
  2947 ;;		On exit  : 0/0
  2948 ;;		Unchanged: 0/0
  2949 ;; Data sizes:     COMMON   BANK0
  2950 ;;      Params:         0       0
  2951 ;;      Locals:         0       0
  2952 ;;      Temps:          0       0
  2953 ;;      Totals:         0       0
  2954 ;;Total ram usage:        0 bytes
  2955 ;; Hardware stack levels used:    1
  2956 ;; Hardware stack levels required when called:    1
  2957 ;; This function calls:
  2958 ;;		_TMR0_setTMR0
  2959 ;; This function is called by:
  2960 ;;		_keypad_access
  2961 ;; This function uses a non-reentrant model
  2962 ;;
  2963                           
  2964                           
  2965                           ;psect for function _TMR0_checkTimeout
  2966  00D3                     _TMR0_checkTimeout:	
  2967                           
  2968                           ;tmr0.h: 24: TMR0_count = 0;
  2969                           
  2970                           ;incstack = 0
  2971                           ; Regs used in _TMR0_checkTimeout: [wreg+status,2+status,0+pclath+cstack]
  2972  00D3  1283               	bcf	3,5	;RP0=0, select bank0
  2973  00D4  01B6               	clrf	_TMR0_count
  2974                           
  2975                           ;tmr0.h: 25: TMR0_setTMR0(0);
  2976  00D5  3000               	movlw	0
  2977  00D6  20CA               	fcall	_TMR0_setTMR0
  2978                           
  2979                           ;tmr0.h: 26: TMR0_start_count = 1;
  2980  00D7  1283               	bcf	3,5	;RP0=0, select bank0
  2981  00D8  01B7               	clrf	_TMR0_start_count
  2982  00D9  0AB7               	incf	_TMR0_start_count,f
  2983  00DA  0008               	return
  2984  00DB                     __end_of_TMR0_checkTimeout:	
  2985                           
  2986                           	psect	text21
  2987  00CA                     __ptext21:	
  2988 ;; *************** function _TMR0_setTMR0 *****************
  2989 ;; Defined at:
  2990 ;;		line 18 in file "tmr0.h"
  2991 ;; Parameters:    Size  Location     Type
  2992 ;;  val             1    wreg     unsigned char 
  2993 ;; Auto vars:     Size  Location     Type
  2994 ;;  val             1    0[BANK0 ] unsigned char 
  2995 ;; Return value:  Size  Location     Type
  2996 ;;                  1    wreg      void 
  2997 ;; Registers used:
  2998 ;;		wreg
  2999 ;; Tracked objects:
  3000 ;;		On entry : 0/0
  3001 ;;		On exit  : 0/0
  3002 ;;		Unchanged: 0/0
  3003 ;; Data sizes:     COMMON   BANK0
  3004 ;;      Params:         0       0
  3005 ;;      Locals:         0       1
  3006 ;;      Temps:          0       0
  3007 ;;      Totals:         0       1
  3008 ;;Total ram usage:        1 bytes
  3009 ;; Hardware stack levels used:    1
  3010 ;; This function calls:
  3011 ;;		Nothing
  3012 ;; This function is called by:
  3013 ;;		_TMR0_checkTimeout
  3014 ;; This function uses a non-reentrant model
  3015 ;;
  3016                           
  3017                           
  3018                           ;psect for function _TMR0_setTMR0
  3019  00CA                     _TMR0_setTMR0:	
  3020                           
  3021                           ;incstack = 0
  3022                           ; Regs used in _TMR0_setTMR0: [wreg]
  3023                           ;TMR0_setTMR0@val stored from wreg
  3024  00CA  1283               	bcf	3,5	;RP0=0, select bank0
  3025  00CB  00A0               	movwf	TMR0_setTMR0@val
  3026                           
  3027                           ;tmr0.h: 19: TMR0 = val;
  3028  00CC  0820               	movf	TMR0_setTMR0@val,w
  3029  00CD  0081               	movwf	1	;volatile
  3030                           
  3031                           ;tmr0.h: 20: PS2 = 1; PS1 = 1; PS0 = 1;
  3032  00CE  1683               	bsf	3,5	;RP0=1, select bank1
  3033  00CF  1501               	bsf	1,2	;volatile
  3034  00D0  1481               	bsf	1,1	;volatile
  3035  00D1  1401               	bsf	1,0	;volatile
  3036  00D2  0008               	return
  3037  00D3                     __end_of_TMR0_setTMR0:	
  3038  001B                     
  3039                           	psect	functab
  3040  0100                     __pfunctab:	
  3041  0100                     __fptable:	
  3042  0100                     fptable:	
  3043  0100  00DF               	movwf	(btemp+1)& (0+127)
  3044  0101  3001               	movlw	high fptable
  3045  0102  008A               	movwf	10
  3046  0103  085F               	movf	(btemp+1)& (0+127),w
  3047  0104  0782               	addwf	2,f
  3048  0105                     fpbase:	
  3049  0105  2905               	goto	fpbase	; Call via a null pointer and you will get stuck here.
  3050  0106                     fp__Keypad_STATE_WAITING_FOR_STAR:	
  3051  0106  2A15               	ljmp	_Keypad_STATE_WAITING_FOR_STAR
  3052  0107                     fp__Keypad_STATE_WAITING_FOR_D:	
  3053  0107  29D2               	ljmp	_Keypad_STATE_WAITING_FOR_D
  3054  0108                     fp__Keypad_STATE_WAITING_FOR_C:	
  3055  0108  2ADE               	ljmp	_Keypad_STATE_WAITING_FOR_C
  3056  0109                     fp__Keypad_STATE_WAITING_FOR_B:	
  3057  0109  2B5A               	ljmp	_Keypad_STATE_WAITING_FOR_B
  3058  010A                     fp__Keypad_STATE_WAITING_FOR_A_OR_HASH:	
  3059  010A  2817               	ljmp	_Keypad_STATE_WAITING_FOR_A_OR_HASH
  3060  010B                     fp__Keypad_START:	
  3061  010B  28B8               	ljmp	_Keypad_START
  3062  010C                     __end_of__fptable:	
  3063  010C                     __i1fptable:	
  3064  010C                     i1fptable:	
  3065  010C  00DF               	movwf	(btemp+1)& (0+127)
  3066  010D  3001               	movlw	high i1fptable
  3067  010E  008A               	movwf	10
  3068  010F  085F               	movf	(btemp+1)& (0+127),w
  3069  0110  0782               	addwf	2,f
  3070  0111                     i1fpbase:	
  3071  0111  2911               	goto	i1fpbase	; Call via a null pointer and you will get stuck here.
  3072  0112                     fp_i1_Keypad_STATE_WAITING_FOR_STAR:	
  3073  0112  2A9B               	ljmp	i1_Keypad_STATE_WAITING_FOR_STAR
  3074  0113                     fp_i1_Keypad_STATE_WAITING_FOR_D:	
  3075  0113  2A58               	ljmp	i1_Keypad_STATE_WAITING_FOR_D
  3076  0114                     fp_i1_Keypad_STATE_WAITING_FOR_C:	
  3077  0114  2B1C               	ljmp	i1_Keypad_STATE_WAITING_FOR_C
  3078  0115                     fp_i1_Keypad_STATE_WAITING_FOR_B:	
  3079  0115  2B90               	ljmp	i1_Keypad_STATE_WAITING_FOR_B
  3080  0116                     fp_i1_Keypad_STATE_WAITING_FOR_A_OR_HASH:	
  3081  0116  2837               	ljmp	i1_Keypad_STATE_WAITING_FOR_A_OR_HASH
  3082  0117                     fp_i1_Keypad_START:	
  3083  0117  28C1               	ljmp	i1_Keypad_START
  3084  0118                     __end_of__i1fptable:	
  3085  000C                     
  3086                           	psect	strings
  3087  0085                     __pstrings:	
  3088  0085                     stringtab:	
  3089  0085                     __stringtab:	
  3090                           
  3091                           ;	String table - string pointers are 2 bytes each
  3092  0085  1BDF               	btfsc	btemp+1,7
  3093  0086  288F               	ljmp	stringcode
  3094  0087  1383               	bcf	3,7
  3095  0088  185F               	btfsc	btemp+1,0
  3096  0089  1783               	bsf	3,7
  3097  008A  0800               	movf	0,w
  3098  008B  0A84               	incf	4,f
  3099  008C  1903               	skipnz
  3100  008D  0ADF               	incf	btemp+1,f
  3101  008E  0008               	return
  3102  008F                     stringcode:	
  3103  008F  085F               	movf	btemp+1,w
  3104  0090  397F               	andlw	127
  3105  0091  008A               	movwf	10
  3106  0092  0804               	movf	4,w
  3107  0093  0A84               	incf	4,f
  3108  0094  1903               	skipnz
  3109  0095  0ADF               	incf	btemp+1,f
  3110  0096  0082               	movwf	2
  3111  0097                     __stringbase:	
  3112  0097                     __end_of__stringtab:	
  3113                           
  3114                           	psect	stringtext
  3115  0000                     __pstringtext:	
  3116  005E                     btemp	set	94	;btemp
  3117  005E                     wtemp0	set	94


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         4
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON            0      0       0
    BANK0            62     22      26

Pointer List with Targets:

    Keypad_START@event	PTR const struct _Event size(2) Largest target is 1024
		 -> ROM(CODE[1024]), keypad_access@ke(BANK0[2]), 

    S91$0$1	PTR const struct _Event size(2) Largest target is 1024
		 -> ROM(CODE[1024]), keypad_access@ke(BANK0[2]), 

    S91$0$0	PTR struct _Fsm size(1) Largest target is 1
		 -> k(BANK0[1]), 

    k.fsmState	PTR FTN(PTR struct _Fsm,PTR const struct _Event,)void  size(1) Largest target is 1
		 -> Keypad_STATE_WAITING_FOR_D(), Keypad_STATE_WAITING_FOR_C(), Keypad_STATE_WAITING_FOR_STAR(), Keypad_STATE_WAITING_FOR_B(), 
		 -> Keypad_STATE_WAITING_FOR_A_OR_HASH(), Keypad_START(), 

    k.super_.fsmState	PTR FTN(PTR struct _Fsm,PTR const struct _Event,)void  size(1) Largest target is 1
		 -> Keypad_STATE_WAITING_FOR_D(), Keypad_STATE_WAITING_FOR_C(), Keypad_STATE_WAITING_FOR_STAR(), Keypad_STATE_WAITING_FOR_B(), 
		 -> Keypad_STATE_WAITING_FOR_A_OR_HASH(), Keypad_START(), 

    keypad_access@k.fsmState	PTR FTN(PTR struct _Fsm,PTR const struct _Event,)void  size(1) Largest target is 1
		 -> Keypad_STATE_WAITING_FOR_D(), Keypad_STATE_WAITING_FOR_C(), Keypad_STATE_WAITING_FOR_STAR(), Keypad_STATE_WAITING_FOR_B(), 
		 -> Keypad_STATE_WAITING_FOR_A_OR_HASH(), Keypad_START(), 

    keypad_access@k	PTR const struct _Keypad size(1) Largest target is 1
		 -> k(BANK0[1]), 

    Keypad_STATE_WAITING_FOR_STAR@event	PTR const struct _Event size(2) Largest target is 1024
		 -> ROM(CODE[1024]), keypad_access@ke(BANK0[2]), 

    Keypad_STATE_WAITING_FOR_STAR@this.fsmState	PTR FTN(PTR struct _Fsm,PTR const struct _Event,)void  size(1) Largest target is 1
		 -> Keypad_STATE_WAITING_FOR_D(), Keypad_STATE_WAITING_FOR_C(), Keypad_STATE_WAITING_FOR_STAR(), Keypad_STATE_WAITING_FOR_B(), 
		 -> Keypad_STATE_WAITING_FOR_A_OR_HASH(), Keypad_START(), 

    Keypad_STATE_WAITING_FOR_STAR@this	PTR struct _Keypad size(1) Largest target is 1
		 -> k(BANK0[1]), 

    Keypad_STATE_WAITING_FOR_D@event	PTR const struct _Event size(2) Largest target is 1024
		 -> ROM(CODE[1024]), keypad_access@ke(BANK0[2]), 

    Keypad_STATE_WAITING_FOR_D@this.fsmState	PTR FTN(PTR struct _Fsm,PTR const struct _Event,)void  size(1) Largest target is 1
		 -> Keypad_STATE_WAITING_FOR_D(), Keypad_STATE_WAITING_FOR_C(), Keypad_STATE_WAITING_FOR_STAR(), Keypad_STATE_WAITING_FOR_B(), 
		 -> Keypad_STATE_WAITING_FOR_A_OR_HASH(), Keypad_START(), 

    Keypad_STATE_WAITING_FOR_D@this	PTR struct _Keypad size(1) Largest target is 1
		 -> k(BANK0[1]), 

    Keypad_STATE_WAITING_FOR_C@event	PTR const struct _Event size(2) Largest target is 1024
		 -> ROM(CODE[1024]), keypad_access@ke(BANK0[2]), 

    Keypad_STATE_WAITING_FOR_C@this.fsmState	PTR FTN(PTR struct _Fsm,PTR const struct _Event,)void  size(1) Largest target is 1
		 -> Keypad_STATE_WAITING_FOR_D(), Keypad_STATE_WAITING_FOR_C(), Keypad_STATE_WAITING_FOR_STAR(), Keypad_STATE_WAITING_FOR_B(), 
		 -> Keypad_STATE_WAITING_FOR_A_OR_HASH(), Keypad_START(), 

    Keypad_STATE_WAITING_FOR_C@this	PTR struct _Keypad size(1) Largest target is 1
		 -> k(BANK0[1]), 

    Keypad_STATE_WAITING_FOR_B@event	PTR const struct _Event size(2) Largest target is 1024
		 -> ROM(CODE[1024]), keypad_access@ke(BANK0[2]), 

    Keypad_STATE_WAITING_FOR_B@this.fsmState	PTR FTN(PTR struct _Fsm,PTR const struct _Event,)void  size(1) Largest target is 1
		 -> Keypad_STATE_WAITING_FOR_D(), Keypad_STATE_WAITING_FOR_C(), Keypad_STATE_WAITING_FOR_STAR(), Keypad_STATE_WAITING_FOR_B(), 
		 -> Keypad_STATE_WAITING_FOR_A_OR_HASH(), Keypad_START(), 

    Keypad_STATE_WAITING_FOR_B@this	PTR struct _Keypad size(1) Largest target is 1
		 -> k(BANK0[1]), 

    Keypad_STATE_WAITING_FOR_A_OR_HASH@event	PTR const struct _Event size(2) Largest target is 1024
		 -> ROM(CODE[1024]), keypad_access@ke(BANK0[2]), 

    Keypad_STATE_WAITING_FOR_A_OR_HASH@this.fsmState	PTR FTN(PTR struct _Fsm,PTR const struct _Event,)void  size(1) Largest target is 1
		 -> Keypad_STATE_WAITING_FOR_D(), Keypad_STATE_WAITING_FOR_C(), Keypad_STATE_WAITING_FOR_STAR(), Keypad_STATE_WAITING_FOR_B(), 
		 -> Keypad_STATE_WAITING_FOR_A_OR_HASH(), Keypad_START(), 

    Keypad_STATE_WAITING_FOR_A_OR_HASH@this	PTR struct _Keypad size(1) Largest target is 1
		 -> k(BANK0[1]), 

    Keypad_START@this.fsmState	PTR FTN(PTR struct _Fsm,PTR const struct _Event,)void  size(1) Largest target is 1
		 -> Keypad_STATE_WAITING_FOR_D(), Keypad_STATE_WAITING_FOR_C(), Keypad_STATE_WAITING_FOR_STAR(), Keypad_STATE_WAITING_FOR_B(), 
		 -> Keypad_STATE_WAITING_FOR_A_OR_HASH(), Keypad_START(), 

    Keypad_START@this	PTR struct _Keypad size(1) Largest target is 1
		 -> k(BANK0[1]), 

    S91_Fsm$fsmState	PTR FTN(PTR struct _Fsm,PTR const struct _Event,)void  size(1) Largest target is 1
		 -> Keypad_STATE_WAITING_FOR_D(), Keypad_STATE_WAITING_FOR_C(), Keypad_STATE_WAITING_FOR_STAR(), Keypad_STATE_WAITING_FOR_B(), 
		 -> Keypad_STATE_WAITING_FOR_A_OR_HASH(), Keypad_START(), 

    KeypadConstructor@me.super_.fsmState	PTR FTN(PTR struct _Fsm,PTR const struct _Event,)void  size(1) Largest target is 1
		 -> Keypad_STATE_WAITING_FOR_D(), Keypad_STATE_WAITING_FOR_C(), Keypad_STATE_WAITING_FOR_STAR(), Keypad_STATE_WAITING_FOR_B(), 
		 -> Keypad_STATE_WAITING_FOR_A_OR_HASH(), Keypad_START(), 

    KeypadConstructor@me	PTR struct _Keypad size(1) Largest target is 1
		 -> k(BANK0[1]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_Keypad_STATE_WAITING_FOR_D
    _main->_Keypad_STATE_WAITING_FOR_STAR

Critical Paths under _ISR in BANK0

    _ISR->_keypad_access
    _keypad_access->_keypad_read
    _keypad_access->i1_Keypad_STATE_WAITING_FOR_D
    _keypad_access->i1_Keypad_STATE_WAITING_FOR_STAR
    _keypad_read->_ADC_Read_8_bits
    _TMR0_checkTimeout->_TMR0_setTMR0

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0     756
                                             21 BANK0      1     1      0
                           _ADC_Init
                  _KeypadConstructor
                       _Keypad_START *
 _Keypad_STATE_WAITING_FOR_A_OR_HASH *
         _Keypad_STATE_WAITING_FOR_B *
         _Keypad_STATE_WAITING_FOR_C *
         _Keypad_STATE_WAITING_FOR_D *
      _Keypad_STATE_WAITING_FOR_STAR *
                          _TMR0_Init
 ---------------------------------------------------------------------------------
 (1) _TMR0_Init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Keypad_STATE_WAITING_FOR_STAR                        6     3      3     110
                                             15 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 (1) _Keypad_STATE_WAITING_FOR_D                           6     3      3     264
                                             15 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 (1) _Keypad_STATE_WAITING_FOR_C                           4     1      3     132
                                             15 BANK0      4     1      3
 ---------------------------------------------------------------------------------
 (1) _Keypad_STATE_WAITING_FOR_B                           4     1      3     110
                                             15 BANK0      4     1      3
 ---------------------------------------------------------------------------------
 (1) _Keypad_STATE_WAITING_FOR_A_OR_HASH                   4     1      3      66
                                             15 BANK0      4     1      3
 ---------------------------------------------------------------------------------
 (1) _Keypad_START                                         4     1      3      22
                                             15 BANK0      4     1      3
 ---------------------------------------------------------------------------------
 (1) _KeypadConstructor                                    2     2      0      52
                                             15 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _ADC_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _ISR                                                  5     5      0    1180
                                             10 BANK0      5     5      0
                      _keypad_access
 ---------------------------------------------------------------------------------
 (3) _keypad_access                                        4     4      0    1180
                                              6 BANK0      4     4      0
                  _TMR0_checkTimeout
                        _keypad_read
                     i1_Keypad_START *
i1_Keypad_STATE_WAITING_FOR_A_OR_HAS *
       i1_Keypad_STATE_WAITING_FOR_B *
       i1_Keypad_STATE_WAITING_FOR_C *
       i1_Keypad_STATE_WAITING_FOR_D *
    i1_Keypad_STATE_WAITING_FOR_STAR *
 ---------------------------------------------------------------------------------
 (5) i1_Keypad_STATE_WAITING_FOR_STAR                      6     3      3     110
                                              0 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 (5) i1_Keypad_STATE_WAITING_FOR_D                         6     3      3     214
                                              0 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 (5) i1_Keypad_STATE_WAITING_FOR_C                         4     1      3     132
                                              0 BANK0      4     1      3
 ---------------------------------------------------------------------------------
 (5) i1_Keypad_STATE_WAITING_FOR_B                         4     1      3     110
                                              0 BANK0      4     1      3
 ---------------------------------------------------------------------------------
 (5) i1_Keypad_STATE_WAITING_FOR_A_OR_HASH                 4     1      3      66
                                              0 BANK0      4     1      3
 ---------------------------------------------------------------------------------
 (5) i1_Keypad_START                                       4     1      3      22
                                              0 BANK0      4     1      3
 ---------------------------------------------------------------------------------
 (4) _keypad_read                                          2     2      0     243
                                              4 BANK0      2     2      0
                    _ADC_Read_8_bits
 ---------------------------------------------------------------------------------
 (5) _ADC_Read_8_bits                                      4     2      2       0
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (4) _TMR0_checkTimeout                                    0     0      0      22
                       _TMR0_setTMR0
 ---------------------------------------------------------------------------------
 (5) _TMR0_setTMR0                                         1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Init
   _KeypadConstructor
   _Keypad_START *
   _Keypad_STATE_WAITING_FOR_A_OR_HASH *
   _Keypad_STATE_WAITING_FOR_B *
   _Keypad_STATE_WAITING_FOR_C *
   _Keypad_STATE_WAITING_FOR_D *
   _Keypad_STATE_WAITING_FOR_STAR *
   _TMR0_Init *

 _ISR (ROOT)
   _keypad_access
     _TMR0_checkTimeout
       _TMR0_setTMR0
     _keypad_read
       _ADC_Read_8_bits
     i1_Keypad_START *
     i1_Keypad_STATE_WAITING_FOR_A_OR_HASH *
     i1_Keypad_STATE_WAITING_FOR_B *
     i1_Keypad_STATE_WAITING_FOR_C *
     i1_Keypad_STATE_WAITING_FOR_D *
     i1_Keypad_STATE_WAITING_FOR_STAR *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            0      0       0       0        0.0%
EEDATA              80      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BITBANK0            3E      0       0       3        0.0%
BANK0               3E     16      1A       4       41.9%
ABS                  0      0      1A       5        0.0%
DATA                 0      0      1A       6        0.0%


Microchip Technology PIC Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Tue Sep 26 19:47:20 2017

                                            _k 0039                                              pc 0002  
                                  __CFG_CP$OFF 0000                                             fsr 0004  
                           i1Keypad_START@this 0020                                            l102 0036  
                                          l112 038F                                            l128 01DC  
                                          l137 021F                                            l192 006E  
                                          _GP1 0029                                            _GP4 002C  
                                          _GP5 002D                                            _GIE 005F  
                                          _PS0 0408                                            _PS1 0409  
                                          _PS2 040A                                   __CFG_CPD$OFF 0000  
                                          u380 03F5                                            _ISR 03C6  
                                          u394 03F6                                            u477 01E3  
                                          u487 0226                                            _PSA 040B  
                                          fsr0 0004                                            indf 0000  
                          KeypadConstructor@me 0030                                fp__Keypad_START 010B  
                          i1Keypad_START@event 0021                               ??i1_Keypad_START 0023  
                                         ?_ISR 0020                                           l1223 0018  
                                         l1225 0021                                           l1233 035B  
                                         l1235 0364                                           l1243 037C  
                                         l1251 02F0                                           l1229 0029  
                                         l1237 036C                                           l1253 02F8  
                                         l1239 0374                                           l1255 0300  
                                         l1247 02DF                                           l1271 01F4  
                                         l1263 01D3                                           l1281 0216  
                                         l1249 02E8                                           l1273 01FC  
                                         l1291 023F                                           l1259 0308  
                                         l1277 0204                                           l1295 0247  
                                         l1289 0237                                           _ADFM 00FF  
                                         _ADON 00F8                                           _CHS0 00FA  
                                         _CHS1 00FB                                           _T0IE 005D  
                                         _T0IF 005A                                           _T0CS 040D  
                                         _GPIO 0005                                           i1l85 007B  
                                         _VCFG 00FE                                           _TMR0 0001  
                                         _main 0057                                           btemp 005E  
                             __end_of_ADC_Init 00AE                                           start 000F  
                                        ??_ISR 002A                                _ADC_Read_8_bits 006F  
                                        _ADCS0 04FC                                          _ADCS1 04FD  
                                        _ADCS2 04FE                                          ?_main 0020  
                                __CFG_WDTE$OFF 0000                                          i1l102 0056  
                                        i1l112 03C5                                          i1l128 0262  
                                        i1l137 02A5                                          i1l168 019D  
                                        i1l189 03E3                                          u50_27 02AC  
                                        u51_27 0074                                          u49_27 0269  
                           __size_of_TMR0_Init 000E                  fp__Keypad_STATE_WAITING_FOR_B 0109  
               ??i1_Keypad_STATE_WAITING_FOR_B 0023                  fp__Keypad_STATE_WAITING_FOR_C 0108  
               ??i1_Keypad_STATE_WAITING_FOR_C 0023                  fp__Keypad_STATE_WAITING_FOR_D 0107  
               ??i1_Keypad_STATE_WAITING_FOR_D 0023                                   ?_keypad_read 0020  
                                        fpbase 0105                                 __CFG_BOREN$OFF 0000  
                                        pclath 000A                                  ?_Keypad_START 002F  
                                        status 0003                                          wtemp0 005E  
                               __CFG_MCLRE$OFF 0000            __size_of_Keypad_STATE_WAITING_FOR_B 0036  
          __size_of_Keypad_STATE_WAITING_FOR_C 003E            __size_of_Keypad_STATE_WAITING_FOR_D 0043  
                              __initialization 0010                                   __end_of_main 006F  
                                       ??_main 0035                                         i1S1403 0097  
                                       _ADRESH 001E                                 ??_Keypad_START 0032  
                                       i1l1111 0162                                         i1l1105 015C  
                                       i1l1131 0174                                         i1l1123 016E  
                                       i1l1211 02CD                                         i1l1117 0168  
                                       i1l1061 0129                                         i1l1205 02BD  
                                       i1l1141 0041                                         i1l1207 02C5  
                                       i1l1151 039A                                         i1l1081 0144  
                                       i1l1145 0049                                         i1l1153 03A2  
                                       i1l1313 019A                                         i1l1075 013E  
                                       i1l1059 0123                                         i1l1139 0038  
                                       i1l1155 03AA                                         i1l1171 033E  
                                       i1l1163 031D                                         i1l1331 01B3  
                                       i1l1323 01A8                                         i1l1307 0190  
                                       i1l1093 0150                                         i1l1069 0138  
                                       i1l1149 0391                                         i1l1165 0326  
                                       i1l1325 01AA                                         i1l1087 014A  
                                       i1l1159 03B2                                         i1l1167 032E  
                                       i1l1175 0346                                         i1l1319 01A1  
                                       i1l1335 01B8                                         i1l1169 0336  
                                       i1l1193 028A                                         i1l1329 01B0  
                                       i1l1337 01C3                                         i1l1099 0156  
                                       i1l1187 027A                                         i1l1179 0259  
                                       i1l1363 03DA                                         i1l1197 029C  
                                       i1l1189 0282                                         i1l1357 03D4  
                                       i1l1367 03E1                                     __i1fptable 010C  
                                       _TRISIO 0085                               __end_of__fptable 010C  
                      __end_of_ADC_Read_8_bits 0085                                 __CFG_PWRTE$OFF 0000  
      __end_ofi1_Keypad_STATE_WAITING_FOR_STAR 02DE       __size_ofi1_Keypad_STATE_WAITING_FOR_STAR 0043  
           fp_i1_Keypad_STATE_WAITING_FOR_STAR 0112               fp__Keypad_STATE_WAITING_FOR_STAR 0106  
               ?_Keypad_STATE_WAITING_FOR_STAR 002F              ??i1_Keypad_STATE_WAITING_FOR_STAR 0023  
             ?i1_Keypad_STATE_WAITING_FOR_STAR 0020                i1_Keypad_STATE_WAITING_FOR_STAR 029B  
                            __end_of_TMR0_Init 03FD                                         fptable 0100  
                                       fptotal 001B                                      ?_ADC_Init 0020  
                                       saved_w 005E        Keypad_STATE_WAITING_FOR_A_OR_HASH@event 0030  
    i1Keypad_STATE_WAITING_FOR_A_OR_HASH@event 0021                        __end_of__initialization 0015  
                       __size_of_keypad_access 005C                                 __pcstackCOMMON 0000  
                                   ??_ADC_Init 0000                                     __pbssBANK0 0036  
                         __size_of_keypad_read 005E                               ?_ADC_Read_8_bits 0020  
       Keypad_STATE_WAITING_FOR_A_OR_HASH@this 002F       i1Keypad_STATE_WAITING_FOR_A_OR_HASH@this 0020  
                                   __pmaintext 0057                                     __pintentry 0004  
                         __end_of_Keypad_START 00C1                                  _keypad_access 0176  
                                   __stringtab 0085                                        i1fpbase 0111  
                               ?_keypad_access 0020                                      _ANSELbits 009F  
                                      __ptext1 03EF                                        __ptext2 01D2  
                                      __ptext3 02DE                                        __ptext4 035A  
                                      __ptext5 0017                                        __ptext6 00B8  
                                      __ptext7 0215                                        __ptext8 00AE  
                                      __ptext9 00A3                            __size_of__i1fptable 000C  
                                 __size_of_ISR 0029                          keypad_read@adc_result 0025  
                                ?_TMR0_setTMR0 0020                           end_of_initialization 0015  
                      __size_ofi1_Keypad_START 0009                              fp_i1_Keypad_START 0117  
                                 __pstringtext 0000                                      _TMR0_Init 03EF  
                 ??_Keypad_STATE_WAITING_FOR_B 0032                   ??_Keypad_STATE_WAITING_FOR_C 0032  
                 ??_Keypad_STATE_WAITING_FOR_D 0032                ??_Keypad_STATE_WAITING_FOR_STAR 0032  
                               ??_TMR0_setTMR0 0000                              __size_of_ADC_Init 000B  
                            _TMR0_checkTimeout 00D3                             ?_TMR0_checkTimeout 0020  
                          ??_TMR0_checkTimeout 0000                          __size_of_Keypad_START 0009  
                              ??_keypad_access 0026                                     ?_TMR0_Init 0020  
                              TMR0_setTMR0@val 0020                            start_initialization 0010  
                    __end_of_TMR0_checkTimeout 00DB                                    __end_of_ISR 03EF  
             i1Keypad_STATE_WAITING_FOR_B@this 0020               i1Keypad_STATE_WAITING_FOR_C@this 0020  
             i1Keypad_STATE_WAITING_FOR_D@this 0020                                   _Keypad_START 00B8  
                           __end_of__i1fptable 0118             Keypad_STATE_WAITING_FOR_STAR@event 0030  
         i1Keypad_STATE_WAITING_FOR_STAR@event 0021                                      ___latbits 0000  
                                __pcstackBANK0 0020                              __size_of__fptable 000C  
                                ??_keypad_read 0024          __end_of_Keypad_STATE_WAITING_FOR_STAR 0258  
       __size_of_Keypad_STATE_WAITING_FOR_STAR 0043                  _Keypad_STATE_WAITING_FOR_STAR 0215  
                             _TMR0_start_count 0037                                 i1_Keypad_START 00C1  
                            Keypad_START@event 0030                                      __pfunctab 0100  
                         __end_of_TMR0_setTMR0 00D3                       __size_of_ADC_Read_8_bits 0016  
                                  ??_TMR0_Init 0000                                      __pstrings 0085  
                                  _blink_count 0038                                      __pswtext1 0097  
           __end_of_Keypad_STATE_WAITING_FOR_B 0390                     _Keypad_STATE_WAITING_FOR_B 035A  
           __end_of_Keypad_STATE_WAITING_FOR_C 031C                     _Keypad_STATE_WAITING_FOR_C 02DE  
           __end_of_Keypad_STATE_WAITING_FOR_D 0215                     _Keypad_STATE_WAITING_FOR_D 01D2  
                                     _ADC_Init 00A3                     __size_of_TMR0_checkTimeout 0008  
                       __end_ofi1_Keypad_START 00CA                              interrupt_function 0004  
                            _KeypadConstructor 00AE                            __end_of_keypad_read 0176  
                           ?_KeypadConstructor 0020                                       _GO_nDONE 00F9  
                          ??_KeypadConstructor 002F                Keypad_STATE_WAITING_FOR_B@event 0030  
            i1Keypad_STATE_WAITING_FOR_B@event 0021                Keypad_STATE_WAITING_FOR_C@event 0030  
            i1Keypad_STATE_WAITING_FOR_C@event 0021                Keypad_STATE_WAITING_FOR_D@event 0030  
            i1Keypad_STATE_WAITING_FOR_D@event 0021                                     _ADCON0bits 001F  
                                  __stringbase 0097                                       i1fptable 010C  
                                     i1fptotal 001B   __end_ofi1_Keypad_STATE_WAITING_FOR_A_OR_HASH 0057  
__size_ofi1_Keypad_STATE_WAITING_FOR_A_OR_HASH 0020        fp_i1_Keypad_STATE_WAITING_FOR_A_OR_HASH 0116  
   __end_of_Keypad_STATE_WAITING_FOR_A_OR_HASH 0037    __size_of_Keypad_STATE_WAITING_FOR_A_OR_HASH 0020  
        fp__Keypad_STATE_WAITING_FOR_A_OR_HASH 010A           ??_Keypad_STATE_WAITING_FOR_A_OR_HASH 0032  
          ?_Keypad_STATE_WAITING_FOR_A_OR_HASH 002F         ??i1_Keypad_STATE_WAITING_FOR_A_OR_HASH 0023  
        ?i1_Keypad_STATE_WAITING_FOR_A_OR_HASH 0020           i1_Keypad_STATE_WAITING_FOR_A_OR_HASH 0037  
           _Keypad_STATE_WAITING_FOR_A_OR_HASH 0017                      __end_of_KeypadConstructor 00B8  
                              ?i1_Keypad_START 0020              Keypad_STATE_WAITING_FOR_STAR@this 002F  
          i1Keypad_STATE_WAITING_FOR_STAR@this 0020                             __end_of__stringtab 0097  
                                     __fptable 0100                              ??_ADC_Read_8_bits 0022  
                             Keypad_START@this 002F                                       __ptext10 03C6  
                                     __ptext11 0176                                       __ptext20 00D3  
                                     __ptext12 0258                                       __ptext21 00CA  
                                     __ptext13 031C                                       __ptext14 0390  
                                     __ptext15 0037                                       __ptext16 00C1  
                                     __ptext17 029B                                       __ptext18 0118  
                                     __ptext19 006F                                    _keypad_read 0118  
                                __size_of_main 0018                          __size_of_TMR0_setTMR0 0009  
               Keypad_STATE_WAITING_FOR_B@this 002F                 Keypad_STATE_WAITING_FOR_C@this 002F  
               Keypad_STATE_WAITING_FOR_D@this 002F                          __end_of_keypad_access 01D2  
         __end_ofi1_Keypad_STATE_WAITING_FOR_B 03C6          __size_ofi1_Keypad_STATE_WAITING_FOR_B 0036  
                 i1_Keypad_STATE_WAITING_FOR_B 0390           __end_ofi1_Keypad_STATE_WAITING_FOR_C 035A  
        __size_ofi1_Keypad_STATE_WAITING_FOR_C 003E                   i1_Keypad_STATE_WAITING_FOR_C 031C  
         __end_ofi1_Keypad_STATE_WAITING_FOR_D 029B          __size_ofi1_Keypad_STATE_WAITING_FOR_D 0043  
                 i1_Keypad_STATE_WAITING_FOR_D 0258                                keypad_access@ke 0028  
                                 _TMR0_setTMR0 00CA                     __size_of_KeypadConstructor 000A  
                                     intlevel1 0100                                      stringcode 008F  
                               keypad_access@k 0027                fp_i1_Keypad_STATE_WAITING_FOR_B 0115  
                  ?_Keypad_STATE_WAITING_FOR_B 002F                  ?i1_Keypad_STATE_WAITING_FOR_B 0020  
              fp_i1_Keypad_STATE_WAITING_FOR_C 0114                    ?_Keypad_STATE_WAITING_FOR_C 002F  
                ?i1_Keypad_STATE_WAITING_FOR_C 0020                fp_i1_Keypad_STATE_WAITING_FOR_D 0113  
                  ?_Keypad_STATE_WAITING_FOR_D 002F                  ?i1_Keypad_STATE_WAITING_FOR_D 0020  
                                     stringtab 0085                                     _TMR0_count 0036  
                            __CFG_FOSC$INTRCIO 0000  
