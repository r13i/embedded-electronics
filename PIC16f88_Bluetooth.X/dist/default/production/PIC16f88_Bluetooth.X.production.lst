

Microchip Technology PIC LITE Macro Assembler V1.40 build -251452761 
                                                                                               Thu Dec 21 07:47:38 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	16F88
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	psect	intentry,global,class=CODE,delta=2
    20                           	psect	text7,local,class=CODE,merge=1,delta=2
    21                           	psect	text8,local,class=CODE,merge=1,delta=2
    22                           	psect	text9,local,class=CODE,merge=1,delta=2
    23                           	psect	text10,local,class=CODE,merge=1,delta=2
    24                           	psect	text11,local,class=CODE,merge=1,delta=2
    25                           	psect	text12,local,class=CODE,merge=1,delta=2
    26                           	psect	text13,local,class=CODE,merge=1,delta=2
    27                           	psect	text14,local,class=CODE,merge=1,delta=2
    28                           	psect	swtext1,local,class=CONST,delta=2
    29                           	dabs	1,0x7E,2
    30  0000                     
    31                           ; Version 1.40
    32                           ; Generated 01/12/2016 GMT
    33                           ; 
    34                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    35                           ; All rights reserved.
    36                           ; 
    37                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    38                           ; 
    39                           ; Redistribution and use in source and binary forms, with or without modification, are
    40                           ; permitted provided that the following conditions are met:
    41                           ; 
    42                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    43                           ;        conditions and the following disclaimer.
    44                           ; 
    45                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    46                           ;        of conditions and the following disclaimer in the documentation and/or other
    47                           ;        materials provided with the distribution.
    48                           ; 
    49                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    50                           ;        software without specific prior written permission.
    51                           ; 
    52                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    53                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    54                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    55                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    56                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    57                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    58                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    59                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    60                           ; 
    61                           ; 
    62                           ; Code-generator required, PIC16F88 Definitions
    63                           ; 
    64                           ; SFR Addresses
    65  0000                     	;# 
    66  0001                     	;# 
    67  0002                     	;# 
    68  0003                     	;# 
    69  0004                     	;# 
    70  0005                     	;# 
    71  0006                     	;# 
    72  000A                     	;# 
    73  000B                     	;# 
    74  000C                     	;# 
    75  000D                     	;# 
    76  000E                     	;# 
    77  000E                     	;# 
    78  000F                     	;# 
    79  0010                     	;# 
    80  0011                     	;# 
    81  0012                     	;# 
    82  0013                     	;# 
    83  0014                     	;# 
    84  0015                     	;# 
    85  0015                     	;# 
    86  0016                     	;# 
    87  0017                     	;# 
    88  0018                     	;# 
    89  0019                     	;# 
    90  001A                     	;# 
    91  001E                     	;# 
    92  001F                     	;# 
    93  0081                     	;# 
    94  0085                     	;# 
    95  0086                     	;# 
    96  008C                     	;# 
    97  008D                     	;# 
    98  008E                     	;# 
    99  008F                     	;# 
   100  0090                     	;# 
   101  0092                     	;# 
   102  0093                     	;# 
   103  0094                     	;# 
   104  0098                     	;# 
   105  0099                     	;# 
   106  009B                     	;# 
   107  009C                     	;# 
   108  009D                     	;# 
   109  009E                     	;# 
   110  009F                     	;# 
   111  0105                     	;# 
   112  010C                     	;# 
   113  010D                     	;# 
   114  010E                     	;# 
   115  010F                     	;# 
   116  018C                     	;# 
   117  018D                     	;# 
   118                           
   119                           	psect	idataBANK1
   120  04B2                     __pidataBANK1:	
   121                           
   122                           ;initializer for _SENSOR_CHANNELS
   123  04B2  3400               	retlw	0
   124  04B3  3401               	retlw	1
   125                           
   126                           ;initializer for _SENSOR_TYPES
   127  04B4  343E               	retlw	low ((STR_1-__stringbase)| (0+32768))
   128  04B5  3444               	retlw	low ((STR_2-__stringbase)| (0+32768))
   129                           
   130                           	psect	strings
   131  0342                     __pstrings:	
   132  0342                     stringtab:	
   133  0342                     __stringtab:	
   134  0342                     stringcode:	
   135                           ;	String table - string pointers are 1 byte each
   136                           
   137  0342                     stringdir:	
   138  0342  3003               	movlw	high stringdir
   139  0343  008A               	movwf	10
   140  0344  0804               	movf	4,w
   141  0345  0A84               	incf	4,f
   142  0346  0782               	addwf	2,f
   143  0347                     __stringbase:	
   144  0347  3400               	retlw	0
   145  0348                     __end_of__stringtab:	
   146  0348                     _dpowers:	
   147  0348  3401               	retlw	1
   148  0349  3400               	retlw	0
   149  034A  3400               	retlw	0
   150  034B  3400               	retlw	0
   151  034C  340A               	retlw	10
   152  034D  3400               	retlw	0
   153  034E  3400               	retlw	0
   154  034F  3400               	retlw	0
   155  0350  3464               	retlw	100
   156  0351  3400               	retlw	0
   157  0352  3400               	retlw	0
   158  0353  3400               	retlw	0
   159  0354  34E8               	retlw	232
   160  0355  3403               	retlw	3
   161  0356  3400               	retlw	0
   162  0357  3400               	retlw	0
   163  0358  3410               	retlw	16
   164  0359  3427               	retlw	39
   165  035A  3400               	retlw	0
   166  035B  3400               	retlw	0
   167  035C  34A0               	retlw	160
   168  035D  3486               	retlw	134
   169  035E  3401               	retlw	1
   170  035F  3400               	retlw	0
   171  0360  3440               	retlw	64
   172  0361  3442               	retlw	66
   173  0362  340F               	retlw	15
   174  0363  3400               	retlw	0
   175  0364  3480               	retlw	128
   176  0365  3496               	retlw	150
   177  0366  3498               	retlw	152
   178  0367  3400               	retlw	0
   179  0368  3400               	retlw	0
   180  0369  34E1               	retlw	225
   181  036A  34F5               	retlw	245
   182  036B  3405               	retlw	5
   183  036C  3400               	retlw	0
   184  036D  34CA               	retlw	202
   185  036E  349A               	retlw	154
   186  036F  343B               	retlw	59
   187  0370                     __end_of_dpowers:	
   188  001F                     _ADCON0bits	set	31
   189  001E                     _ADRESH	set	30
   190  0005                     _PORTA	set	5
   191  0006                     _PORTB	set	6
   192  001A                     _RCREG	set	26
   193  0018                     _RCSTAbits	set	24
   194  0019                     _TXREG	set	25
   195  00FE                     _ADCS0	set	254
   196  00FF                     _ADCS1	set	255
   197  00F8                     _ADON	set	248
   198  00C4                     _CREN	set	196
   199  005F                     _GIE	set	95
   200  00FA                     _GO_nDONE	set	250
   201  005E                     _PEIE	set	94
   202  002A                     _RA2	set	42
   203  002B                     _RA3	set	43
   204  0065                     _RCIF	set	101
   205  00C6                     _RX9	set	198
   206  00C7                     _SPEN	set	199
   207  005D                     _TMR0IE	set	93
   208  005A                     _TMR0IF	set	90
   209  009E                     _ADRESL	set	158
   210  009B                     _ANSEL	set	155
   211  0081                     _OPTION_REGbits	set	129
   212  0099                     _SPBRG	set	153
   213  0085                     _TRISA	set	133
   214  0086                     _TRISB	set	134
   215  0086                     _TRISBbits	set	134
   216  04FE                     _ADCS2	set	1278
   217  04FF                     _ADFM	set	1279
   218  04D8                     _ANS0	set	1240
   219  04D9                     _ANS1	set	1241
   220  04DA                     _ANS2	set	1242
   221  04DB                     _ANS3	set	1243
   222  04DC                     _ANS4	set	1244
   223  04DD                     _ANS5	set	1245
   224  04DE                     _ANS6	set	1246
   225  04C2                     _BRGH	set	1218
   226  040B                     _PSA	set	1035
   227  04C4                     _SYNC	set	1220
   228  040D                     _T0CS	set	1037
   229  0428                     _TRISA0	set	1064
   230  0429                     _TRISA1	set	1065
   231  042A                     _TRISA2	set	1066
   232  042B                     _TRISA3	set	1067
   233  042C                     _TRISA4	set	1068
   234  042D                     _TRISA5	set	1069
   235  042E                     _TRISA6	set	1070
   236  04C1                     _TRMT	set	1217
   237  04C6                     _TX9	set	1222
   238  04C5                     _TXEN	set	1221
   239  04FC                     _VCFG0	set	1276
   240  04FD                     _VCFG1	set	1277
   241  0370                     STR_3:	
   242  0370  3425               	retlw	37	;'%'
   243  0371  3473               	retlw	115	;'s'
   244  0372  343A               	retlw	58	;':'
   245  0373  3420               	retlw	32	;' '
   246  0374  3425               	retlw	37	;'%'
   247  0375  346C               	retlw	108	;'l'
   248  0376  3475               	retlw	117	;'u'
   249  0377  3420               	retlw	32	;' '
   250  0378  342F               	retlw	47	;'/'
   251  0379  3420               	retlw	32	;' '
   252  037A  3431               	retlw	49	;'1'
   253  037B  3430               	retlw	48	;'0'
   254  037C  3430               	retlw	48	;'0'
   255  037D  3400               	retlw	0
   256  037E                     STR_4:	
   257  037E  3428               	retlw	40	;'('
   258  037F  346E               	retlw	110	;'n'
   259  0380  3475               	retlw	117	;'u'
   260  0381  346C               	retlw	108	;'l'
   261  0382  346C               	retlw	108	;'l'
   262  0383  3429               	retlw	41	;')'
   263  0384  3400               	retlw	0
   264  0385                     STR_1:	
   265  0385  344C               	retlw	76	;'L'
   266  0386  3469               	retlw	105	;'i'
   267  0387  3467               	retlw	103	;'g'
   268  0388  3468               	retlw	104	;'h'
   269  0389  3474               	retlw	116	;'t'
   270  038A  3400               	retlw	0
   271  038B                     STR_2:	
   272  038B  3447               	retlw	71	;'G'
   273  038C  3461               	retlw	97	;'a'
   274  038D  3473               	retlw	115	;'s'
   275  038E  3400               	retlw	0
   276                           
   277                           ; #config settings
   278  0000                     
   279                           	psect	cinit
   280  0013                     start_initialization:	
   281  0013                     __initialization:	
   282                           
   283                           ; Initialize objects allocated to BANK1
   284  0013  1683               	bsf	3,5	;RP0=1, select bank1
   285  0014  1303               	bcf	3,6	;RP1=0, select bank1
   286  0015  118A  24B2  118A   	fcall	__pidataBANK1	;fetch initializer
   287  0018  00A0               	movwf	__pdataBANK1& (0+127)
   288  0019  118A  24B3  118A   	fcall	__pidataBANK1+1	;fetch initializer
   289  001C  00A1               	movwf	(__pdataBANK1+1)& (0+127)
   290  001D  118A  24B4  118A   	fcall	__pidataBANK1+2	;fetch initializer
   291  0020  00A2               	movwf	(__pdataBANK1+2)& (0+127)
   292  0021  118A  24B5         	fcall	__pidataBANK1+3	;fetch initializer
   293  0023  00A3               	movwf	(__pdataBANK1+3)& (0+127)
   294                           
   295                           ; Clear objects allocated to BANK0
   296  0024  1283               	bcf	3,5	;RP0=0, select bank0
   297  0025  1303               	bcf	3,6	;RP1=0, select bank0
   298  0026  01ED               	clrf	__pbssBANK0& (0+127)
   299  0027  01EE               	clrf	(__pbssBANK0+1)& (0+127)
   300  0028                     end_of_initialization:	
   301                           ;End of C runtime variable initialization code
   302                           
   303  0028                     __end_of__initialization:	
   304  0028  0183               	clrf	3
   305  0029  118A  2BD4         	ljmp	_main	;jump to C main() function
   306                           
   307                           	psect	bssBANK0
   308  006D                     __pbssBANK0:	
   309  006D                     _adc_uart_count:	
   310  006D                     	ds	2
   311                           
   312                           	psect	dataBANK1
   313  00A0                     __pdataBANK1:	
   314  00A0                     _SENSOR_CHANNELS:	
   315  00A0                     	ds	2
   316  00A2                     _SENSOR_TYPES:	
   317  00A2                     	ds	2
   318                           
   319                           	psect	cstackBANK1
   320  00A4                     __pcstackBANK1:	
   321  00A4                     ??_UART_Init:	
   322  00A4                     ??_UART_read_byte:	
   323                           ; 1 bytes @ 0x0
   324                           
   325  00A4                     ??_ADC_Init:	
   326                           ; 1 bytes @ 0x0
   327                           
   328  00A4                     ??_Syst_Init:	
   329                           ; 1 bytes @ 0x0
   330                           
   331  00A4                     ??_TMR0_Init:	
   332                           ; 1 bytes @ 0x0
   333                           
   334  00A4                     ??_main:	
   335                           ; 1 bytes @ 0x0
   336                           
   337                           
   338                           ; 1 bytes @ 0x0
   339  00A4                     	ds	1
   340  00A5                     main@rx_read:	
   341                           
   342                           ; 1 bytes @ 0x1
   343  00A5                     	ds	1
   344                           
   345                           	psect	cstackCOMMON
   346  0070                     __pcstackCOMMON:	
   347  0070                     ?_UART_Init:	
   348  0070                     ?_UART_send_byte:	
   349                           ; 1 bytes @ 0x0
   350                           
   351  0070                     ??_UART_send_byte:	
   352                           ; 1 bytes @ 0x0
   353                           
   354  0070                     ?_UART_read_byte:	
   355                           ; 1 bytes @ 0x0
   356                           
   357  0070                     ?_UART_send_string:	
   358                           ; 1 bytes @ 0x0
   359                           
   360  0070                     ?_ADC_Init:	
   361                           ; 1 bytes @ 0x0
   362                           
   363  0070                     ?_Syst_Init:	
   364                           ; 1 bytes @ 0x0
   365                           
   366  0070                     ?_TMR0_Init:	
   367                           ; 1 bytes @ 0x0
   368                           
   369  0070                     ?_ISR:	
   370                           ; 1 bytes @ 0x0
   371                           
   372  0070                     ?_main:	
   373                           ; 1 bytes @ 0x0
   374                           
   375  0070                     ?_ADC_Read:	
   376                           ; 1 bytes @ 0x0
   377                           
   378  0070                     ?___lwmod:	
   379                           ; 2 bytes @ 0x0
   380                           
   381  0070                     ?___lldiv:	
   382                           ; 2 bytes @ 0x0
   383                           
   384  0070                     UART_send_byte@single_byte:	
   385                           ; 4 bytes @ 0x0
   386                           
   387  0070                     ___lwmod@divisor:	
   388                           ; 1 bytes @ 0x0
   389                           
   390  0070                     ___lldiv@divisor:	
   391                           ; 2 bytes @ 0x0
   392                           
   393                           
   394                           ; 4 bytes @ 0x0
   395  0070                     	ds	1
   396  0071                     ??_UART_send_string:	
   397                           
   398                           ; 1 bytes @ 0x1
   399  0071                     	ds	1
   400  0072                     ??_ADC_Read:	
   401  0072                     UART_send_string@str:	
   402                           ; 1 bytes @ 0x2
   403                           
   404  0072                     ___lwmod@dividend:	
   405                           ; 1 bytes @ 0x2
   406                           
   407                           
   408                           ; 2 bytes @ 0x2
   409  0072                     	ds	2
   410  0074                     ??___lwmod:	
   411  0074                     ADC_Read@channel:	
   412                           ; 1 bytes @ 0x4
   413                           
   414  0074                     ___lldiv@dividend:	
   415                           ; 1 bytes @ 0x4
   416                           
   417                           
   418                           ; 4 bytes @ 0x4
   419  0074                     	ds	1
   420  0075                     ?___lmul:	
   421  0075                     ___lwmod@counter:	
   422                           ; 4 bytes @ 0x5
   423                           
   424  0075                     ___lmul@multiplier:	
   425                           ; 1 bytes @ 0x5
   426                           
   427                           
   428                           ; 4 bytes @ 0x5
   429  0075                     	ds	3
   430  0078                     ??___lldiv:	
   431                           
   432                           ; 1 bytes @ 0x8
   433  0078                     	ds	1
   434  0079                     ___lmul@multiplicand:	
   435  0079                     ___lldiv@quotient:	
   436                           ; 4 bytes @ 0x9
   437                           
   438                           
   439                           ; 4 bytes @ 0x9
   440  0079                     	ds	4
   441  007D                     ??___lmul:	
   442  007D                     ___lldiv@counter:	
   443                           ; 1 bytes @ 0xD
   444                           
   445                           
   446                           ; 1 bytes @ 0xD
   447  007D                     	ds	1
   448                           
   449                           	psect	cstackBANK0
   450  0020                     __pcstackBANK0:	
   451  0020                     ?___llmod:	
   452  0020                     ___lmul@product:	
   453                           ; 4 bytes @ 0x0
   454                           
   455  0020                     ___llmod@divisor:	
   456                           ; 4 bytes @ 0x0
   457                           
   458                           
   459                           ; 4 bytes @ 0x0
   460  0020                     	ds	4
   461  0024                     ___llmod@dividend:	
   462                           
   463                           ; 4 bytes @ 0x4
   464  0024                     	ds	4
   465  0028                     ??___llmod:	
   466                           
   467                           ; 1 bytes @ 0x8
   468  0028                     	ds	1
   469  0029                     ___llmod@counter:	
   470                           
   471                           ; 1 bytes @ 0x9
   472  0029                     	ds	1
   473  002A                     ?_sprintf:	
   474  002A                     sprintf@f:	
   475                           ; 2 bytes @ 0xA
   476                           
   477                           
   478                           ; 1 bytes @ 0xA
   479  002A                     	ds	6
   480  0030                     ??_sprintf:	
   481                           
   482                           ; 1 bytes @ 0x10
   483  0030                     	ds	5
   484  0035                     sprintf@flag:	
   485                           
   486                           ; 1 bytes @ 0x15
   487  0035                     	ds	1
   488  0036                     sprintf@prec:	
   489                           
   490                           ; 2 bytes @ 0x16
   491  0036                     	ds	2
   492  0038                     sprintf@val:	
   493                           
   494                           ; 4 bytes @ 0x18
   495  0038                     	ds	4
   496  003C                     sprintf@cp:	
   497                           
   498                           ; 1 bytes @ 0x1C
   499  003C                     	ds	1
   500  003D                     sprintf@ap:	
   501                           
   502                           ; 1 bytes @ 0x1D
   503  003D                     	ds	1
   504  003E                     sprintf@sp:	
   505                           
   506                           ; 1 bytes @ 0x1E
   507  003E                     	ds	1
   508  003F                     sprintf@c:	
   509                           
   510                           ; 1 bytes @ 0x1F
   511  003F                     	ds	1
   512  0040                     ??_ISR:	
   513                           
   514                           ; 1 bytes @ 0x20
   515  0040                     	ds	14
   516  004E                     ISR@buffer:	
   517                           
   518                           ; 30 bytes @ 0x2E
   519  004E                     	ds	30
   520  006C                     ISR@j:	
   521                           
   522                           ; 1 bytes @ 0x4C
   523  006C                     	ds	1
   524                           
   525                           	psect	maintext
   526  03D4                     __pmaintext:	
   527 ;;
   528 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   529 ;;
   530 ;; *************** function _main *****************
   531 ;; Defined at:
   532 ;;		line 68 in file "main.c"
   533 ;; Parameters:    Size  Location     Type
   534 ;;		None
   535 ;; Auto vars:     Size  Location     Type
   536 ;;  rx_read         1    1[BANK1 ] unsigned char 
   537 ;; Return value:  Size  Location     Type
   538 ;;                  1    wreg      void 
   539 ;; Registers used:
   540 ;;		wreg, status,2, status,0, pclath, cstack
   541 ;; Tracked objects:
   542 ;;		On entry : B00/0
   543 ;;		On exit  : 0/0
   544 ;;		Unchanged: 0/0
   545 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   546 ;;      Params:         0       0       0       0       0
   547 ;;      Locals:         0       0       1       0       0
   548 ;;      Temps:          0       0       1       0       0
   549 ;;      Totals:         0       0       2       0       0
   550 ;;Total ram usage:        2 bytes
   551 ;; Hardware stack levels required when called:    4
   552 ;; This function calls:
   553 ;;		_ADC_Init
   554 ;;		_Syst_Init
   555 ;;		_TMR0_Init
   556 ;;		_UART_Init
   557 ;;		_UART_read_byte
   558 ;; This function is called by:
   559 ;;		Startup code after reset
   560 ;; This function uses a non-reentrant model
   561 ;;
   562                           
   563                           
   564                           ;psect for function _main
   565  03D4                     _main:	
   566                           
   567                           ;main.c: 70: Syst_Init();
   568                           
   569                           ;incstack = 0
   570                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   571  03D4  118A  2461  118A   	fcall	_Syst_Init
   572                           
   573                           ;main.c: 71: TMR0_Init();
   574  03D7  118A  249D  118A   	fcall	_TMR0_Init
   575                           
   576                           ;main.c: 72: UART_Init();
   577  03DA  118A  243A  118A   	fcall	_UART_Init
   578                           
   579                           ;main.c: 73: ADC_Init();
   580  03DD  118A  2473  118A   	fcall	_ADC_Init
   581  03E0                     l1231:	
   582                           ;main.c: 76: while(1){
   583                           
   584                           
   585                           ;main.c: 77: char rx_read = UART_read_byte();
   586  03E0  118A  2491  118A   	fcall	_UART_read_byte
   587  03E3  1683               	bsf	3,5	;RP0=1, select bank1
   588  03E4  1303               	bcf	3,6	;RP1=0, select bank1
   589  03E5  00A4               	movwf	??_main^(0+128)
   590  03E6  0824               	movf	??_main^(0+128),w
   591  03E7  00A5               	movwf	main@rx_read^(0+128)
   592                           
   593                           ;main.c: 79: if(rx_read != '\0'){
   594  03E8  0825               	movf	main@rx_read^(0+128),w
   595  03E9  1903               	btfsc	3,2
   596  03EA  2BE0               	goto	l1231
   597                           
   598                           ;main.c: 80: if(rx_read == 't'){
   599  03EB  3074               	movlw	116
   600  03EC  0625               	xorwf	main@rx_read^(0+128),w
   601  03ED  1D03               	btfss	3,2
   602  03EE  2BF4               	goto	l1237
   603                           
   604                           ;main.c: 81: RA3 = ~RA3;
   605  03EF  3008               	movlw	8
   606  03F0  1283               	bcf	3,5	;RP0=0, select bank0
   607  03F1  1303               	bcf	3,6	;RP1=0, select bank0
   608  03F2  0685               	xorwf	5,f
   609                           
   610                           ;main.c: 82: }
   611  03F3  2BE0               	goto	l1231
   612  03F4                     l1237:	
   613                           
   614                           ;main.c: 83: else if(rx_read == '1'){
   615  03F4  3031               	movlw	49
   616  03F5  1683               	bsf	3,5	;RP0=1, select bank1
   617  03F6  1303               	bcf	3,6	;RP1=0, select bank1
   618  03F7  0625               	xorwf	main@rx_read^(0+128),w
   619  03F8  1D03               	btfss	3,2
   620  03F9  2BFE               	goto	l1241
   621                           
   622                           ;main.c: 84: RA3 = 1;
   623  03FA  1283               	bcf	3,5	;RP0=0, select bank0
   624  03FB  1303               	bcf	3,6	;RP1=0, select bank0
   625  03FC  1585               	bsf	5,3	;volatile
   626                           
   627                           ;main.c: 85: }
   628  03FD  2BE0               	goto	l1231
   629  03FE                     l1241:	
   630                           
   631                           ;main.c: 86: else if(rx_read == '0'){
   632  03FE  3030               	movlw	48
   633  03FF  1683               	bsf	3,5	;RP0=1, select bank1
   634  0400  1303               	bcf	3,6	;RP1=0, select bank1
   635  0401  0625               	xorwf	main@rx_read^(0+128),w
   636  0402  1D03               	btfss	3,2
   637  0403  2BE0               	goto	l1231
   638                           
   639                           ;main.c: 87: RA3 = 0;
   640  0404  1283               	bcf	3,5	;RP0=0, select bank0
   641  0405  1303               	bcf	3,6	;RP1=0, select bank0
   642  0406  1185               	bcf	5,3	;volatile
   643  0407  2BE0               	goto	l1231
   644  0408                     __end_of_main:	
   645                           ;main.c: 88: }
   646                           ;main.c: 89: }
   647                           ;main.c: 90: }
   648                           ;main.c: 92: return;
   649                           
   650                           
   651                           	psect	text1
   652  0491                     __ptext1:	
   653 ;; *************** function _UART_read_byte *****************
   654 ;; Defined at:
   655 ;;		line 33 in file "uart.h"
   656 ;; Parameters:    Size  Location     Type
   657 ;;		None
   658 ;; Auto vars:     Size  Location     Type
   659 ;;		None
   660 ;; Return value:  Size  Location     Type
   661 ;;                  1    wreg      unsigned char 
   662 ;; Registers used:
   663 ;;		wreg
   664 ;; Tracked objects:
   665 ;;		On entry : 0/0
   666 ;;		On exit  : 0/0
   667 ;;		Unchanged: 0/0
   668 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   669 ;;      Params:         0       0       0       0       0
   670 ;;      Locals:         0       0       0       0       0
   671 ;;      Temps:          0       0       0       0       0
   672 ;;      Totals:         0       0       0       0       0
   673 ;;Total ram usage:        0 bytes
   674 ;; Hardware stack levels used:    1
   675 ;; Hardware stack levels required when called:    3
   676 ;; This function calls:
   677 ;;		Nothing
   678 ;; This function is called by:
   679 ;;		_main
   680 ;; This function uses a non-reentrant model
   681 ;;
   682                           
   683                           
   684                           ;psect for function _UART_read_byte
   685  0491                     _UART_read_byte:	
   686  0491                     l122:	
   687                           ;uart.h: 35: while(! RCIF);
   688                           
   689                           ;incstack = 0
   690                           ; Regs used in _UART_read_byte: [wreg]
   691                           
   692  0491  1283               	bcf	3,5	;RP0=0, select bank0
   693  0492  1303               	bcf	3,6	;RP1=0, select bank0
   694  0493  1E8C               	btfss	12,5	;volatile
   695  0494  2C91               	goto	l122
   696                           
   697                           ;uart.h: 38: if(RCSTAbits.OERR){
   698  0495  1C98               	btfss	24,1	;volatile
   699  0496  2C9B               	goto	l1045
   700                           
   701                           ;uart.h: 40: CREN = 0;
   702  0497  1218               	bcf	24,4	;volatile
   703                           
   704                           ;uart.h: 41: CREN = 1;
   705  0498  1618               	bsf	24,4	;volatile
   706                           
   707                           ;uart.h: 43: return '\0';
   708  0499  3000               	movlw	0
   709  049A  0008               	return
   710  049B                     l1045:	
   711                           
   712                           ;uart.h: 44: }
   713                           ;uart.h: 46: return RCREG;
   714  049B  081A               	movf	26,w	;volatile
   715  049C  0008               	return
   716  049D                     __end_of_UART_read_byte:	
   717                           
   718                           	psect	text2
   719  043A                     __ptext2:	
   720 ;; *************** function _UART_Init *****************
   721 ;; Defined at:
   722 ;;		line 8 in file "uart.h"
   723 ;; Parameters:    Size  Location     Type
   724 ;;		None
   725 ;; Auto vars:     Size  Location     Type
   726 ;;		None
   727 ;; Return value:  Size  Location     Type
   728 ;;                  1    wreg      void 
   729 ;; Registers used:
   730 ;;		wreg
   731 ;; Tracked objects:
   732 ;;		On entry : 0/0
   733 ;;		On exit  : 0/0
   734 ;;		Unchanged: 0/0
   735 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   736 ;;      Params:         0       0       0       0       0
   737 ;;      Locals:         0       0       0       0       0
   738 ;;      Temps:          0       0       0       0       0
   739 ;;      Totals:         0       0       0       0       0
   740 ;;Total ram usage:        0 bytes
   741 ;; Hardware stack levels used:    1
   742 ;; Hardware stack levels required when called:    3
   743 ;; This function calls:
   744 ;;		Nothing
   745 ;; This function is called by:
   746 ;;		_main
   747 ;; This function uses a non-reentrant model
   748 ;;
   749                           
   750                           
   751                           ;psect for function _UART_Init
   752  043A                     _UART_Init:	
   753                           
   754                           ;uart.h: 9: TRISBbits.TRISB2 = 1;
   755                           
   756                           ;incstack = 0
   757                           ; Regs used in _UART_Init: [wreg]
   758  043A  1683               	bsf	3,5	;RP0=1, select bank1
   759  043B  1303               	bcf	3,6	;RP1=0, select bank1
   760  043C  1506               	bsf	6,2	;volatile
   761                           
   762                           ;uart.h: 10: TRISBbits.TRISB5 = 0;
   763  043D  1286               	bcf	6,5	;volatile
   764                           
   765                           ;uart.h: 13: BRGH = 1;
   766  043E  1518               	bsf	24,2	;volatile
   767                           
   768                           ;uart.h: 14: SPBRG = 51;
   769  043F  3033               	movlw	51
   770  0440  0099               	movwf	25	;volatile
   771                           
   772                           ;uart.h: 16: SYNC = 0;
   773  0441  1218               	bcf	24,4	;volatile
   774                           
   775                           ;uart.h: 17: SPEN = 1;
   776  0442  1283               	bcf	3,5	;RP0=0, select bank0
   777  0443  1303               	bcf	3,6	;RP1=0, select bank0
   778  0444  1798               	bsf	24,7	;volatile
   779                           
   780                           ;uart.h: 20: TX9 = 0;
   781  0445  1683               	bsf	3,5	;RP0=1, select bank1
   782  0446  1303               	bcf	3,6	;RP1=0, select bank1
   783  0447  1318               	bcf	24,6	;volatile
   784                           
   785                           ;uart.h: 21: TXEN = 1;
   786  0448  1698               	bsf	24,5	;volatile
   787                           
   788                           ;uart.h: 24: RX9 = 0;
   789  0449  1283               	bcf	3,5	;RP0=0, select bank0
   790  044A  1303               	bcf	3,6	;RP1=0, select bank0
   791  044B  1318               	bcf	24,6	;volatile
   792                           
   793                           ;uart.h: 25: CREN = 1;
   794  044C  1618               	bsf	24,4	;volatile
   795  044D  0008               	return
   796  044E                     __end_of_UART_Init:	
   797                           
   798                           	psect	text3
   799  049D                     __ptext3:	
   800 ;; *************** function _TMR0_Init *****************
   801 ;; Defined at:
   802 ;;		line 27 in file "main.c"
   803 ;; Parameters:    Size  Location     Type
   804 ;;		None
   805 ;; Auto vars:     Size  Location     Type
   806 ;;		None
   807 ;; Return value:  Size  Location     Type
   808 ;;                  1    wreg      void 
   809 ;; Registers used:
   810 ;;		wreg, status,2, status,0
   811 ;; Tracked objects:
   812 ;;		On entry : 0/0
   813 ;;		On exit  : 0/0
   814 ;;		Unchanged: 0/0
   815 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   816 ;;      Params:         0       0       0       0       0
   817 ;;      Locals:         0       0       0       0       0
   818 ;;      Temps:          0       0       0       0       0
   819 ;;      Totals:         0       0       0       0       0
   820 ;;Total ram usage:        0 bytes
   821 ;; Hardware stack levels used:    1
   822 ;; Hardware stack levels required when called:    3
   823 ;; This function calls:
   824 ;;		Nothing
   825 ;; This function is called by:
   826 ;;		_main
   827 ;; This function uses a non-reentrant model
   828 ;;
   829                           
   830                           
   831                           ;psect for function _TMR0_Init
   832  049D                     _TMR0_Init:	
   833                           
   834                           ;main.c: 28: TMR0IF = 0;
   835                           
   836                           ;incstack = 0
   837                           ; Regs used in _TMR0_Init: [wreg+status,2+status,0]
   838  049D  110B               	bcf	11,2	;volatile
   839                           
   840                           ;main.c: 29: TMR0IE = 1;
   841  049E  168B               	bsf	11,5	;volatile
   842                           
   843                           ;main.c: 30: T0CS = 0;
   844  049F  1683               	bsf	3,5	;RP0=1, select bank1
   845  04A0  1303               	bcf	3,6	;RP1=0, select bank1
   846  04A1  1281               	bcf	1,5	;volatile
   847                           
   848                           ;main.c: 31: PSA = 0;
   849  04A2  1181               	bcf	1,3	;volatile
   850                           
   851                           ;main.c: 33: OPTION_REGbits.PS = 0b110;
   852  04A3  0801               	movf	1,w	;volatile
   853  04A4  39F8               	andlw	-8
   854  04A5  3806               	iorlw	6
   855  04A6  0081               	movwf	1	;volatile
   856  04A7  0008               	return
   857  04A8                     __end_of_TMR0_Init:	
   858                           
   859                           	psect	text4
   860  0461                     __ptext4:	
   861 ;; *************** function _Syst_Init *****************
   862 ;; Defined at:
   863 ;;		line 17 in file "main.c"
   864 ;; Parameters:    Size  Location     Type
   865 ;;		None
   866 ;; Auto vars:     Size  Location     Type
   867 ;;		None
   868 ;; Return value:  Size  Location     Type
   869 ;;                  1    wreg      void 
   870 ;; Registers used:
   871 ;;		status,2
   872 ;; Tracked objects:
   873 ;;		On entry : 0/0
   874 ;;		On exit  : 0/0
   875 ;;		Unchanged: 0/0
   876 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   877 ;;      Params:         0       0       0       0       0
   878 ;;      Locals:         0       0       0       0       0
   879 ;;      Temps:          0       0       0       0       0
   880 ;;      Totals:         0       0       0       0       0
   881 ;;Total ram usage:        0 bytes
   882 ;; Hardware stack levels used:    1
   883 ;; Hardware stack levels required when called:    3
   884 ;; This function calls:
   885 ;;		Nothing
   886 ;; This function is called by:
   887 ;;		_main
   888 ;; This function uses a non-reentrant model
   889 ;;
   890                           
   891                           
   892                           ;psect for function _Syst_Init
   893  0461                     _Syst_Init:	
   894                           
   895                           ;main.c: 18: ANSEL = 0;
   896                           
   897                           ;incstack = 0
   898                           ; Regs used in _Syst_Init: [status,2]
   899  0461  1683               	bsf	3,5	;RP0=1, select bank1
   900  0462  1303               	bcf	3,6	;RP1=0, select bank1
   901  0463  019B               	clrf	27	;volatile
   902                           
   903                           ;main.c: 19: TRISA = TRISB = 0;
   904  0464  0186               	clrf	6	;volatile
   905  0465  0185               	clrf	5	;volatile
   906                           
   907                           ;main.c: 20: PORTA = PORTB = 0;
   908  0466  1283               	bcf	3,5	;RP0=0, select bank0
   909  0467  1303               	bcf	3,6	;RP1=0, select bank0
   910  0468  0186               	clrf	6	;volatile
   911  0469  0185               	clrf	5	;volatile
   912                           
   913                           ;main.c: 21: RA2 = 1;
   914  046A  1505               	bsf	5,2	;volatile
   915                           
   916                           ;main.c: 22: RA3 = 1;
   917  046B  1585               	bsf	5,3	;volatile
   918                           
   919                           ;main.c: 24: GIE = PEIE = 1;
   920  046C  170B               	bsf	11,6	;volatile
   921  046D  1F0B               	btfss	11,6	;volatile
   922  046E  2C71               	goto	u1000
   923  046F  178B               	bsf	11,7	;volatile
   924  0470  0008               	return
   925  0471                     u1000:	
   926  0471  138B               	bcf	11,7	;volatile
   927  0472  0008               	return
   928  0473                     __end_of_Syst_Init:	
   929                           
   930                           	psect	text5
   931  0473                     __ptext5:	
   932 ;; *************** function _ADC_Init *****************
   933 ;; Defined at:
   934 ;;		line 8 in file "adc.h"
   935 ;; Parameters:    Size  Location     Type
   936 ;;		None
   937 ;; Auto vars:     Size  Location     Type
   938 ;;		None
   939 ;; Return value:  Size  Location     Type
   940 ;;                  1    wreg      void 
   941 ;; Registers used:
   942 ;;		None
   943 ;; Tracked objects:
   944 ;;		On entry : 0/0
   945 ;;		On exit  : 0/0
   946 ;;		Unchanged: 0/0
   947 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   948 ;;      Params:         0       0       0       0       0
   949 ;;      Locals:         0       0       0       0       0
   950 ;;      Temps:          0       0       0       0       0
   951 ;;      Totals:         0       0       0       0       0
   952 ;;Total ram usage:        0 bytes
   953 ;; Hardware stack levels used:    1
   954 ;; Hardware stack levels required when called:    3
   955 ;; This function calls:
   956 ;;		Nothing
   957 ;; This function is called by:
   958 ;;		_main
   959 ;; This function uses a non-reentrant model
   960 ;;
   961                           
   962                           
   963                           ;psect for function _ADC_Init
   964  0473                     _ADC_Init:	
   965                           
   966                           ;adc.h: 14: ADCS2 = 0; ADCS1 = 1; ADCS0 = 0;
   967                           
   968                           ;incstack = 0
   969                           ; Regs used in _ADC_Init: []
   970  0473  1683               	bsf	3,5	;RP0=1, select bank1
   971  0474  1303               	bcf	3,6	;RP1=0, select bank1
   972  0475  131F               	bcf	31,6	;volatile
   973  0476  1283               	bcf	3,5	;RP0=0, select bank0
   974  0477  1303               	bcf	3,6	;RP1=0, select bank0
   975  0478  179F               	bsf	31,7	;volatile
   976  0479  131F               	bcf	31,6	;volatile
   977                           
   978                           ;adc.h: 16: VCFG1 = 0; VCFG0 = 0;
   979  047A  1683               	bsf	3,5	;RP0=1, select bank1
   980  047B  1303               	bcf	3,6	;RP1=0, select bank1
   981  047C  129F               	bcf	31,5	;volatile
   982  047D  121F               	bcf	31,4	;volatile
   983                           
   984                           ;adc.h: 18: ADFM = 1;
   985  047E  179F               	bsf	31,7	;volatile
   986                           
   987                           ;adc.h: 20: ADON = 1;
   988  047F  1283               	bcf	3,5	;RP0=0, select bank0
   989  0480  1303               	bcf	3,6	;RP1=0, select bank0
   990  0481  141F               	bsf	31,0	;volatile
   991  0482  0008               	return
   992  0483                     __end_of_ADC_Init:	
   993                           
   994                           	psect	text6
   995  015E                     __ptext6:	
   996 ;; *************** function _ISR *****************
   997 ;; Defined at:
   998 ;;		line 39 in file "main.c"
   999 ;; Parameters:    Size  Location     Type
  1000 ;;		None
  1001 ;; Auto vars:     Size  Location     Type
  1002 ;;  buffer         30   46[BANK0 ] unsigned char [30]
  1003 ;;  j               1   76[BANK0 ] unsigned char 
  1004 ;; Return value:  Size  Location     Type
  1005 ;;                  1    wreg      void 
  1006 ;; Registers used:
  1007 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1008 ;; Tracked objects:
  1009 ;;		On entry : 0/0
  1010 ;;		On exit  : 0/0
  1011 ;;		Unchanged: 0/0
  1012 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1013 ;;      Params:         0       0       0       0       0
  1014 ;;      Locals:         0      31       0       0       0
  1015 ;;      Temps:          0      14       0       0       0
  1016 ;;      Totals:         0      45       0       0       0
  1017 ;;Total ram usage:       45 bytes
  1018 ;; Hardware stack levels used:    1
  1019 ;; Hardware stack levels required when called:    2
  1020 ;; This function calls:
  1021 ;;		_ADC_Read
  1022 ;;		_UART_send_byte
  1023 ;;		_UART_send_string
  1024 ;;		___lmul
  1025 ;;		___lwmod
  1026 ;;		_sprintf
  1027 ;; This function is called by:
  1028 ;;		Interrupt level 1
  1029 ;; This function uses a non-reentrant model
  1030 ;;
  1031                           
  1032                           
  1033                           ;psect for function _ISR
  1034  015E                     _ISR:	
  1035                           
  1036                           ;main.c: 40: if(TMR0IE && TMR0IF){
  1037  015E  1A8B               	btfsc	11,5	;volatile
  1038  015F  1D0B               	btfss	11,2	;volatile
  1039  0160  29F8               	goto	i1l171
  1040                           
  1041                           ;main.c: 41: TMR0IF = 0;
  1042  0161  110B               	bcf	11,2	;volatile
  1043                           
  1044                           ;main.c: 42: ++adc_uart_count;
  1045  0162  3001               	movlw	1
  1046  0163  07ED               	addwf	_adc_uart_count,f
  1047  0164  1803               	skipnc
  1048  0165  0AEE               	incf	_adc_uart_count+1,f
  1049  0166  3000               	movlw	0
  1050  0167  07EE               	addwf	_adc_uart_count+1,f
  1051                           
  1052                           ;main.c: 45: if((2 * adc_uart_count) % 61 == 0){
  1053  0168  303D               	movlw	61
  1054  0169  00F0               	movwf	___lwmod@divisor
  1055  016A  3000               	movlw	0
  1056  016B  00F1               	movwf	___lwmod@divisor+1
  1057  016C  1003               	clrc
  1058  016D  0D6D               	rlf	_adc_uart_count,w
  1059  016E  00F2               	movwf	___lwmod@dividend
  1060  016F  0D6E               	rlf	_adc_uart_count+1,w
  1061  0170  00F3               	movwf	___lwmod@dividend+1
  1062  0171  118A  2408  118A   	fcall	___lwmod
  1063  0174  0870               	movf	?___lwmod,w
  1064  0175  0471               	iorwf	?___lwmod+1,w
  1065  0176  1D03               	btfss	3,2
  1066  0177  297C               	goto	i1l167
  1067                           
  1068                           ;main.c: 46: RA2 = ~RA2;
  1069  0178  3004               	movlw	4
  1070  0179  1283               	bcf	3,5	;RP0=0, select bank0
  1071  017A  1303               	bcf	3,6	;RP1=0, select bank0
  1072  017B  0685               	xorwf	5,f
  1073  017C                     i1l167:	
  1074                           
  1075                           ;main.c: 47: }
  1076                           ;main.c: 49: if(adc_uart_count >= 61 * 1){
  1077  017C  3000               	movlw	0
  1078  017D  1283               	bcf	3,5	;RP0=0, select bank0
  1079  017E  1303               	bcf	3,6	;RP1=0, select bank0
  1080  017F  026E               	subwf	_adc_uart_count+1,w
  1081  0180  303D               	movlw	61
  1082  0181  1903               	skipnz
  1083  0182  026D               	subwf	_adc_uart_count,w
  1084  0183  1C03               	skipc
  1085  0184  29F8               	goto	i1l171
  1086                           
  1087                           ;main.c: 50: adc_uart_count = 0;
  1088  0185  01ED               	clrf	_adc_uart_count
  1089  0186  01EE               	clrf	_adc_uart_count+1
  1090                           
  1091                           ;main.c: 52: unsigned char j = 0;
  1092  0187  01EC               	clrf	ISR@j
  1093                           
  1094                           ;main.c: 53: for(j = 0; j < 2; ++j){
  1095  0188  01EC               	clrf	ISR@j
  1096  0189  3002               	movlw	2
  1097  018A  026C               	subwf	ISR@j,w
  1098  018B  1803               	btfsc	3,0
  1099  018C  29F0               	goto	i1l1223
  1100  018D                     i1l1213:	
  1101                           
  1102                           ;main.c: 54: char buffer[30];
  1103                           ;main.c: 55: sprintf(buffer, "%s: %lu / 100", SENSOR_TYPES[j], (unsigned long) ADC_Read(
      +                          SENSOR_CHANNELS[j]) * 100 / 1024);
  1104  018D  3029               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  1105  018E  00C0               	movwf	??_ISR
  1106  018F  0840               	movf	??_ISR,w
  1107  0190  00AA               	movwf	sprintf@f
  1108  0191  086C               	movf	ISR@j,w
  1109  0192  3EA2               	addlw	(low (_SENSOR_TYPES| 0))& (0+255)
  1110  0193  0084               	movwf	4
  1111  0194  1383               	bcf	3,7	;select IRP bank1
  1112  0195  0800               	movf	0,w
  1113  0196  00C1               	movwf	??_ISR+1
  1114  0197  0841               	movf	??_ISR+1,w
  1115  0198  00AB               	movwf	low ((?_sprintf| 0+1))
  1116  0199  086C               	movf	ISR@j,w
  1117  019A  3EA0               	addlw	(low (_SENSOR_CHANNELS| 0))& (0+255)
  1118  019B  0084               	movwf	4
  1119  019C  0800               	movf	0,w
  1120  019D  118A  2205  118A   	fcall	_ADC_Read
  1121  01A0  0870               	movf	?_ADC_Read,w
  1122  01A1  1283               	bcf	3,5	;RP0=0, select bank0
  1123  01A2  1303               	bcf	3,6	;RP1=0, select bank0
  1124  01A3  00C2               	movwf	??_ISR+2
  1125  01A4  0871               	movf	?_ADC_Read+1,w
  1126  01A5  00C3               	movwf	??_ISR+3
  1127  01A6  01C4               	clrf	??_ISR+4
  1128  01A7  01C5               	clrf	??_ISR+5
  1129  01A8  0845               	movf	??_ISR+5,w
  1130  01A9  00F8               	movwf	___lmul@multiplier+3
  1131  01AA  0844               	movf	??_ISR+4,w
  1132  01AB  00F7               	movwf	___lmul@multiplier+2
  1133  01AC  0843               	movf	??_ISR+3,w
  1134  01AD  00F6               	movwf	___lmul@multiplier+1
  1135  01AE  0842               	movf	??_ISR+2,w
  1136  01AF  00F5               	movwf	___lmul@multiplier
  1137  01B0  3000               	movlw	0
  1138  01B1  00FC               	movwf	___lmul@multiplicand+3
  1139  01B2  3000               	movlw	0
  1140  01B3  00FB               	movwf	___lmul@multiplicand+2
  1141  01B4  3000               	movlw	0
  1142  01B5  00FA               	movwf	___lmul@multiplicand+1
  1143  01B6  3064               	movlw	100
  1144  01B7  00F9               	movwf	___lmul@multiplicand
  1145  01B8  118A  238F  118A   	fcall	___lmul
  1146  01BB  0875               	movf	?___lmul,w
  1147  01BC  1283               	bcf	3,5	;RP0=0, select bank0
  1148  01BD  1303               	bcf	3,6	;RP1=0, select bank0
  1149  01BE  00C6               	movwf	??_ISR+6
  1150  01BF  0876               	movf	?___lmul+1,w
  1151  01C0  00C7               	movwf	??_ISR+7
  1152  01C1  0877               	movf	?___lmul+2,w
  1153  01C2  00C8               	movwf	??_ISR+8
  1154  01C3  0878               	movf	?___lmul+3,w
  1155  01C4  00C9               	movwf	??_ISR+9
  1156  01C5  300A               	movlw	10
  1157  01C6                     u129_25:	
  1158  01C6  1003               	clrc
  1159  01C7  0CC9               	rrf	??_ISR+9,f
  1160  01C8  0CC8               	rrf	??_ISR+8,f
  1161  01C9  0CC7               	rrf	??_ISR+7,f
  1162  01CA  0CC6               	rrf	??_ISR+6,f
  1163  01CB  3EFF               	addlw	-1
  1164  01CC  1D03               	skipz
  1165  01CD  29C6               	goto	u129_25
  1166  01CE  0849               	movf	??_ISR+9,w
  1167  01CF  00AF               	movwf	?_sprintf+5
  1168  01D0  0848               	movf	??_ISR+8,w
  1169  01D1  00AE               	movwf	?_sprintf+4
  1170  01D2  0847               	movf	??_ISR+7,w
  1171  01D3  00AD               	movwf	?_sprintf+3
  1172  01D4  0846               	movf	??_ISR+6,w
  1173  01D5  00AC               	movwf	?_sprintf+2
  1174  01D6  304E               	movlw	(low (ISR@buffer| 0))& (0+255)
  1175  01D7  118A  202B  118A   	fcall	_sprintf
  1176                           
  1177                           ;main.c: 56: UART_send_string(buffer);
  1178  01DA  304E               	movlw	(low (ISR@buffer| 0))& (0+255)
  1179  01DB  118A  244E  118A   	fcall	_UART_send_string
  1180                           
  1181                           ;main.c: 57: UART_send_byte(0x0A);
  1182  01DE  300A               	movlw	10
  1183  01DF  118A  24A8  118A   	fcall	_UART_send_byte
  1184                           
  1185                           ;main.c: 58: UART_send_byte(0x0D);
  1186  01E2  300D               	movlw	13
  1187  01E3  118A  24A8  118A   	fcall	_UART_send_byte
  1188  01E6  3001               	movlw	1
  1189  01E7  1283               	bcf	3,5	;RP0=0, select bank0
  1190  01E8  1303               	bcf	3,6	;RP1=0, select bank0
  1191  01E9  00C0               	movwf	??_ISR
  1192  01EA  0840               	movf	??_ISR,w
  1193  01EB  07EC               	addwf	ISR@j,f
  1194  01EC  3002               	movlw	2
  1195  01ED  026C               	subwf	ISR@j,w
  1196  01EE  1C03               	skipc
  1197  01EF  298D               	goto	i1l1213
  1198  01F0                     i1l1223:	
  1199                           
  1200                           ;main.c: 59: }
  1201                           ;main.c: 61: UART_send_byte(0x0A);
  1202  01F0  300A               	movlw	10
  1203  01F1  118A  24A8  118A   	fcall	_UART_send_byte
  1204                           
  1205                           ;main.c: 62: UART_send_byte(0x0D);
  1206  01F4  300D               	movlw	13
  1207  01F5  118A  24A8  118A   	fcall	_UART_send_byte
  1208  01F8                     i1l171:	
  1209  01F8  1283               	bcf	3,5	;RP0=0, select bank0
  1210  01F9  1303               	bcf	3,6	;RP1=0, select bank0
  1211  01FA  084D               	movf	??_ISR+13,w
  1212  01FB  00FF               	movwf	127
  1213  01FC  084C               	movf	??_ISR+12,w
  1214  01FD  008A               	movwf	10
  1215  01FE  084B               	movf	??_ISR+11,w
  1216  01FF  0084               	movwf	4
  1217  0200  0E4A               	swapf	(??_ISR+10)^0,w
  1218  0201  0083               	movwf	3
  1219  0202  0EFE               	swapf	126,f
  1220  0203  0E7E               	swapf	126,w
  1221  0204  0009               	retfie
  1222  0205                     __end_of_ISR:	
  1223                           
  1224                           	psect	intentry
  1225  0004                     __pintentry:	
  1226                           ;incstack = 0
  1227                           ; Regs used in _ISR: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1228                           
  1229  0004                     interrupt_function:	
  1230  007E                     saved_w	set	btemp
  1231  0004  00FE               	movwf	btemp
  1232  0005  0E03               	swapf	3,w
  1233  0006  1283               	bcf	3,5	;RP0=0, select bank0
  1234  0007  1303               	bcf	3,6	;RP1=0, select bank0
  1235  0008  00CA               	movwf	??_ISR+10
  1236  0009  0804               	movf	4,w
  1237  000A  00CB               	movwf	??_ISR+11
  1238  000B  080A               	movf	10,w
  1239  000C  00CC               	movwf	??_ISR+12
  1240  000D  087F               	movf	btemp+1,w
  1241  000E  00CD               	movwf	??_ISR+13
  1242  000F  118A  295E         	ljmp	_ISR
  1243                           
  1244                           	psect	text7
  1245  002B                     __ptext7:	
  1246 ;; *************** function _sprintf *****************
  1247 ;; Defined at:
  1248 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  1249 ;; Parameters:    Size  Location     Type
  1250 ;;  sp              1    wreg     PTR unsigned char 
  1251 ;;		 -> ISR@buffer(30), 
  1252 ;;  f               1   10[BANK0 ] PTR const unsigned char 
  1253 ;;		 -> STR_3(14), 
  1254 ;; Auto vars:     Size  Location     Type
  1255 ;;  sp              1   30[BANK0 ] PTR unsigned char 
  1256 ;;		 -> ISR@buffer(30), 
  1257 ;;  val             4   24[BANK0 ] unsigned long 
  1258 ;;  tmpval          4    0        struct .
  1259 ;;  prec            2   22[BANK0 ] int 
  1260 ;;  len             2    0        unsigned int 
  1261 ;;  c               1   31[BANK0 ] char 
  1262 ;;  ap              1   29[BANK0 ] PTR void [1]
  1263 ;;		 -> ?_sprintf(2), 
  1264 ;;  cp              1   28[BANK0 ] PTR const unsigned char 
  1265 ;;		 -> STR_4(7), STR_2(4), STR_1(6), 
  1266 ;;  flag            1   21[BANK0 ] unsigned char 
  1267 ;; Return value:  Size  Location     Type
  1268 ;;                  2   10[BANK0 ] int 
  1269 ;; Registers used:
  1270 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1271 ;; Tracked objects:
  1272 ;;		On entry : 0/0
  1273 ;;		On exit  : 0/0
  1274 ;;		Unchanged: 0/0
  1275 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1276 ;;      Params:         0       6       0       0       0
  1277 ;;      Locals:         0      11       0       0       0
  1278 ;;      Temps:          0       5       0       0       0
  1279 ;;      Totals:         0      22       0       0       0
  1280 ;;Total ram usage:       22 bytes
  1281 ;; Hardware stack levels used:    1
  1282 ;; Hardware stack levels required when called:    1
  1283 ;; This function calls:
  1284 ;;		___lldiv
  1285 ;;		___llmod
  1286 ;; This function is called by:
  1287 ;;		_ISR
  1288 ;; This function uses a non-reentrant model
  1289 ;;
  1290                           
  1291                           
  1292                           ;psect for function _sprintf
  1293  002B                     _sprintf:	
  1294                           
  1295                           ;incstack = 0
  1296                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1297                           ;sprintf@sp stored from wreg
  1298  002B  1283               	bcf	3,5	;RP0=0, select bank0
  1299  002C  1303               	bcf	3,6	;RP1=0, select bank0
  1300  002D  00BE               	movwf	sprintf@sp
  1301                           
  1302                           ;doprnt.c: 494: va_list ap;
  1303                           ;doprnt.c: 499: signed char c;
  1304                           ;doprnt.c: 504: int prec;
  1305                           ;doprnt.c: 508: unsigned char flag;
  1306                           ;doprnt.c: 523: union {
  1307                           ;doprnt.c: 524: unsigned long vd;
  1308                           ;doprnt.c: 525: double integ;
  1309                           ;doprnt.c: 526: } tmpval;
  1310                           ;doprnt.c: 528: unsigned long val;
  1311                           ;doprnt.c: 529: unsigned len;
  1312                           ;doprnt.c: 530: const char * cp;
  1313                           ;doprnt.c: 533: *ap = __va_start();
  1314  002E  302B               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
  1315  002F  00B0               	movwf	??_sprintf
  1316  0030  0830               	movf	??_sprintf,w
  1317  0031  00BD               	movwf	sprintf@ap
  1318  0032                     i1l1153:	
  1319                           ;doprnt.c: 536: while(c = *f++) {
  1320                           
  1321  0032  3001               	movlw	1
  1322  0033  07AA               	addwf	sprintf@f,f
  1323  0034  30FF               	movlw	-1
  1324  0035  072A               	addwf	sprintf@f,w
  1325  0036  0084               	movwf	4
  1326  0037  118A  2342  118A   	fcall	stringdir
  1327  003A  00B0               	movwf	??_sprintf
  1328  003B  0830               	movf	??_sprintf,w
  1329  003C  00BF               	movwf	sprintf@c
  1330  003D  083F               	movf	sprintf@c,w
  1331  003E  1903               	btfsc	3,2
  1332  003F  2959               	goto	i1l1155
  1333                           
  1334                           ;doprnt.c: 538: if(c != '%')
  1335  0040  3025               	movlw	37
  1336  0041  063F               	xorwf	sprintf@c,w
  1337  0042  1903               	btfsc	3,2
  1338  0043  2850               	goto	i1l1101
  1339                           
  1340                           ;doprnt.c: 540: {
  1341                           ;doprnt.c: 541: ((*sp++ = (c)));
  1342  0044  083F               	movf	sprintf@c,w
  1343  0045  00B0               	movwf	??_sprintf
  1344  0046  083E               	movf	sprintf@sp,w
  1345  0047  0084               	movwf	4
  1346  0048  0830               	movf	??_sprintf,w
  1347  0049  1383               	bcf	3,7	;select IRP bank0
  1348  004A  0080               	movwf	0
  1349  004B  3001               	movlw	1
  1350  004C  00B0               	movwf	??_sprintf
  1351  004D  0830               	movf	??_sprintf,w
  1352  004E  07BE               	addwf	sprintf@sp,f
  1353                           
  1354                           ;doprnt.c: 542: continue;
  1355  004F  2832               	goto	i1l1153
  1356  0050                     i1l1101:	
  1357                           
  1358                           ;doprnt.c: 543: }
  1359                           ;doprnt.c: 548: flag = 0;
  1360  0050  01B5               	clrf	sprintf@flag
  1361                           
  1362                           ;doprnt.c: 635: switch(c = *f++) {
  1363                           
  1364                           ;doprnt.c: 633: loop:
  1365  0051  2886               	goto	i1l1121
  1366  0052                     i1l199:	
  1367                           ;doprnt.c: 641: case 'l':
  1368                           
  1369                           ;doprnt.c: 638: goto alldone;
  1370                           
  1371                           ;doprnt.c: 637: case 0:
  1372                           
  1373                           
  1374                           ;doprnt.c: 643: flag |= 0x10;
  1375  0052  1635               	bsf	sprintf@flag,4
  1376                           
  1377                           ;doprnt.c: 644: goto loop;
  1378  0053  2886               	goto	i1l1121
  1379  0054                     i1l1103:	
  1380                           ;doprnt.c: 728: case 's':
  1381                           
  1382                           
  1383                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  1384  0054  083D               	movf	sprintf@ap,w
  1385  0055  0084               	movwf	4
  1386  0056  1383               	bcf	3,7	;select IRP bank0
  1387  0057  0800               	movf	0,w
  1388  0058  00B0               	movwf	??_sprintf
  1389  0059  0830               	movf	??_sprintf,w
  1390  005A  00BC               	movwf	sprintf@cp
  1391  005B  3001               	movlw	1
  1392  005C  00B0               	movwf	??_sprintf
  1393  005D  0830               	movf	??_sprintf,w
  1394  005E  07BD               	addwf	sprintf@ap,f
  1395                           
  1396                           ;doprnt.c: 740: if(!cp)
  1397  005F  083C               	movf	sprintf@cp,w
  1398  0060  1D03               	btfss	3,2
  1399  0061  2866               	goto	i1l202
  1400                           
  1401                           ;doprnt.c: 741: cp = "(null)";
  1402  0062  3037               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  1403  0063  00B0               	movwf	??_sprintf
  1404  0064  0830               	movf	??_sprintf,w
  1405  0065  00BC               	movwf	sprintf@cp
  1406  0066                     i1l202:	
  1407                           ;doprnt.c: 777: while(*cp)
  1408                           
  1409  0066  083C               	movf	sprintf@cp,w
  1410  0067  0084               	movwf	4
  1411  0068  118A  2342  118A   	fcall	stringdir
  1412  006B  3A00               	xorlw	0
  1413  006C  1903               	btfsc	3,2
  1414  006D  2832               	goto	i1l1153
  1415                           
  1416                           ;doprnt.c: 778: ((*sp++ = (*cp++)));
  1417  006E  083C               	movf	sprintf@cp,w
  1418  006F  0084               	movwf	4
  1419  0070  118A  2342  118A   	fcall	stringdir
  1420  0073  00B0               	movwf	??_sprintf
  1421  0074  083E               	movf	sprintf@sp,w
  1422  0075  0084               	movwf	4
  1423  0076  0830               	movf	??_sprintf,w
  1424  0077  0080               	movwf	0
  1425  0078  3001               	movlw	1
  1426  0079  00B0               	movwf	??_sprintf
  1427  007A  0830               	movf	??_sprintf,w
  1428  007B  07BC               	addwf	sprintf@cp,f
  1429  007C  3001               	movlw	1
  1430  007D  00B0               	movwf	??_sprintf
  1431  007E  0830               	movf	??_sprintf,w
  1432  007F  07BE               	addwf	sprintf@sp,f
  1433  0080  2866               	goto	i1l202
  1434  0081                     i1l1117:	
  1435                           ;doprnt.c: 817: case 'u':
  1436                           
  1437                           ;doprnt.c: 813: continue;
  1438                           
  1439                           ;doprnt.c: 802: default:
  1440                           
  1441                           ;doprnt.c: 779: continue;
  1442                           
  1443                           
  1444                           ;doprnt.c: 818: flag |= 0xC0;
  1445  0081  30C0               	movlw	192
  1446  0082  00B0               	movwf	??_sprintf
  1447  0083  0830               	movf	??_sprintf,w
  1448  0084  04B5               	iorwf	sprintf@flag,f
  1449                           
  1450                           ;doprnt.c: 822: }
  1451                           
  1452                           ;doprnt.c: 819: break;
  1453  0085  289C               	goto	i1l207
  1454  0086                     i1l1121:	
  1455  0086  3001               	movlw	1
  1456  0087  07AA               	addwf	sprintf@f,f
  1457  0088  30FF               	movlw	-1
  1458  0089  072A               	addwf	sprintf@f,w
  1459  008A  0084               	movwf	4
  1460  008B  118A  2342  118A   	fcall	stringdir
  1461  008E  00BF               	movwf	sprintf@c
  1462                           
  1463                           ; Switch size 1, requested type "space"
  1464                           ; Number of cases is 4, Range of values is 0 to 117
  1465                           ; switch strategies available:
  1466                           ; Name         Instructions Cycles
  1467                           ; simple_byte           13     7 (average)
  1468                           ; direct_byte          243     7 (fixed)
  1469                           ; jumptable            260     6 (fixed)
  1470                           ;	Chosen strategy is simple_byte
  1471  008F  3A00               	xorlw	0	; case 0
  1472  0090  1903               	skipnz
  1473  0091  2959               	goto	i1l1155
  1474  0092  3A6C               	xorlw	108	; case 108
  1475  0093  1903               	skipnz
  1476  0094  2852               	goto	i1l199
  1477  0095  3A1F               	xorlw	31	; case 115
  1478  0096  1903               	skipnz
  1479  0097  2854               	goto	i1l1103
  1480  0098  3A06               	xorlw	6	; case 117
  1481  0099  1903               	skipnz
  1482  009A  2881               	goto	i1l1117
  1483  009B  2832               	goto	i1l1153
  1484  009C                     i1l207:	
  1485                           
  1486                           ;doprnt.c: 1273: {
  1487                           ;doprnt.c: 1281: if(flag & 0x10)
  1488  009C  1E35               	btfss	sprintf@flag,4
  1489  009D  28AE               	goto	i1l1127
  1490                           
  1491                           ;doprnt.c: 1282: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
  1492  009E  083D               	movf	sprintf@ap,w
  1493  009F  0084               	movwf	4
  1494  00A0  1383               	bcf	3,7	;select IRP bank0
  1495  00A1  0800               	movf	0,w
  1496  00A2  00B8               	movwf	sprintf@val
  1497  00A3  0A84               	incf	4,f
  1498  00A4  0800               	movf	0,w
  1499  00A5  00B9               	movwf	sprintf@val+1
  1500  00A6  0A84               	incf	4,f
  1501  00A7  0800               	movf	0,w
  1502  00A8  00BA               	movwf	sprintf@val+2
  1503  00A9  0A84               	incf	4,f
  1504  00AA  0800               	movf	0,w
  1505  00AB  00BB               	movwf	sprintf@val+3
  1506  00AC  3004               	movlw	4
  1507  00AD  28BD               	goto	L1
  1508  00AE                     i1l1127:	
  1509                           
  1510                           ;doprnt.c: 1283: else
  1511                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  1512  00AE  083D               	movf	sprintf@ap,w
  1513  00AF  0084               	movwf	4
  1514  00B0  1383               	bcf	3,7	;select IRP bank0
  1515  00B1  0800               	movf	0,w
  1516  00B2  00B0               	movwf	??_sprintf
  1517  00B3  0A84               	incf	4,f
  1518  00B4  0800               	movf	0,w
  1519  00B5  00B1               	movwf	??_sprintf+1
  1520  00B6  0830               	movf	??_sprintf,w
  1521  00B7  00B8               	movwf	sprintf@val
  1522  00B8  0831               	movf	??_sprintf+1,w
  1523  00B9  00B9               	movwf	sprintf@val+1
  1524  00BA  01BA               	clrf	sprintf@val+2
  1525  00BB  01BB               	clrf	sprintf@val+3
  1526  00BC  3002               	movlw	2
  1527  00BD                     L1:	
  1528  00BD  00B0               	movwf	??_sprintf
  1529  00BE  0830               	movf	??_sprintf,w
  1530  00BF  07BD               	addwf	sprintf@ap,f
  1531                           
  1532                           ;doprnt.c: 1287: }
  1533                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1534  00C0  01BF               	clrf	sprintf@c
  1535  00C1  0ABF               	incf	sprintf@c,f
  1536  00C2  300A               	movlw	10
  1537  00C3  063F               	xorwf	sprintf@c,w
  1538  00C4  1903               	btfsc	3,2
  1539  00C5  28FA               	goto	i1l1143
  1540  00C6                     i1l1137:	
  1541                           
  1542                           ;doprnt.c: 1306: if(val < dpowers[c])
  1543  00C6  083F               	movf	sprintf@c,w
  1544  00C7  00B0               	movwf	??_sprintf
  1545  00C8  3001               	movlw	1
  1546  00C9                     u107_25:	
  1547  00C9  1003               	clrc
  1548  00CA  0DB0               	rlf	??_sprintf,f
  1549  00CB  3EFF               	addlw	-1
  1550  00CC  1D03               	skipz
  1551  00CD  28C9               	goto	u107_25
  1552  00CE  1003               	clrc
  1553  00CF  0D30               	rlf	??_sprintf,w
  1554  00D0  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1555  00D1  0084               	movwf	4
  1556  00D2  118A  2342  118A   	fcall	stringdir
  1557  00D5  00B1               	movwf	??_sprintf+1
  1558  00D6  118A  2342  118A   	fcall	stringdir
  1559  00D9  00B2               	movwf	??_sprintf+2
  1560  00DA  118A  2342  118A   	fcall	stringdir
  1561  00DD  00B3               	movwf	??_sprintf+3
  1562  00DE  118A  2342  118A   	fcall	stringdir
  1563  00E1  00B4               	movwf	??_sprintf+4
  1564  00E2  0834               	movf	??_sprintf+4,w
  1565  00E3  023B               	subwf	sprintf@val+3,w
  1566  00E4  1D03               	skipz
  1567  00E5  28F0               	goto	u108_25
  1568  00E6  0833               	movf	??_sprintf+3,w
  1569  00E7  023A               	subwf	sprintf@val+2,w
  1570  00E8  1D03               	skipz
  1571  00E9  28F0               	goto	u108_25
  1572  00EA  0832               	movf	??_sprintf+2,w
  1573  00EB  0239               	subwf	sprintf@val+1,w
  1574  00EC  1D03               	skipz
  1575  00ED  28F0               	goto	u108_25
  1576  00EE  0831               	movf	??_sprintf+1,w
  1577  00EF  0238               	subwf	sprintf@val,w
  1578  00F0                     u108_25:	
  1579  00F0  1C03               	btfss	3,0
  1580  00F1  28FA               	goto	i1l1143
  1581                           
  1582                           ;doprnt.c: 1307: break;
  1583  00F2  3001               	movlw	1
  1584  00F3  00B0               	movwf	??_sprintf
  1585  00F4  0830               	movf	??_sprintf,w
  1586  00F5  07BF               	addwf	sprintf@c,f
  1587  00F6  300A               	movlw	10
  1588  00F7  063F               	xorwf	sprintf@c,w
  1589  00F8  1D03               	btfss	3,2
  1590  00F9  28C6               	goto	i1l1137
  1591  00FA                     i1l1143:	
  1592                           
  1593                           ;doprnt.c: 1422: {
  1594                           ;doprnt.c: 1469: }
  1595                           ;doprnt.c: 1472: prec = c;
  1596  00FA  083F               	movf	sprintf@c,w
  1597  00FB  00B6               	movwf	sprintf@prec
  1598  00FC  01B7               	clrf	sprintf@prec+1
  1599  00FD  1BB6               	btfsc	sprintf@prec,7
  1600  00FE  03B7               	decf	sprintf@prec+1,f
  1601  00FF                     i1l1151:	
  1602                           ;doprnt.c: 1474: while(prec--) {
  1603                           
  1604  00FF  30FF               	movlw	255
  1605  0100  07B6               	addwf	sprintf@prec,f
  1606  0101  1803               	skipnc
  1607  0102  0AB7               	incf	sprintf@prec+1,f
  1608  0103  30FF               	movlw	255
  1609  0104  07B7               	addwf	sprintf@prec+1,f
  1610  0105  0A36               	incf	sprintf@prec,w
  1611  0106  1903               	btfsc	3,2
  1612  0107  0A37               	incf	sprintf@prec+1,w
  1613  0108  1903               	btfsc	3,2
  1614  0109  2832               	goto	i1l1153
  1615                           
  1616                           ;doprnt.c: 1478: {
  1617                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  1618  010A  3000               	movlw	0
  1619  010B  00A3               	movwf	___llmod@divisor+3
  1620  010C  3000               	movlw	0
  1621  010D  00A2               	movwf	___llmod@divisor+2
  1622  010E  3000               	movlw	0
  1623  010F  00A1               	movwf	___llmod@divisor+1
  1624  0110  300A               	movlw	10
  1625  0111  00A0               	movwf	___llmod@divisor
  1626  0112  0836               	movf	sprintf@prec,w
  1627  0113  00B0               	movwf	??_sprintf
  1628  0114  3001               	movlw	1
  1629  0115                     u110_25:	
  1630  0115  1003               	clrc
  1631  0116  0DB0               	rlf	??_sprintf,f
  1632  0117  3EFF               	addlw	-1
  1633  0118  1D03               	skipz
  1634  0119  2915               	goto	u110_25
  1635  011A  1003               	clrc
  1636  011B  0D30               	rlf	??_sprintf,w
  1637  011C  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1638  011D  0084               	movwf	4
  1639  011E  118A  2342  118A   	fcall	stringdir
  1640  0121  00F0               	movwf	___lldiv@divisor
  1641  0122  118A  2342  118A   	fcall	stringdir
  1642  0125  00F1               	movwf	___lldiv@divisor+1
  1643  0126  118A  2342  118A   	fcall	stringdir
  1644  0129  00F2               	movwf	___lldiv@divisor+2
  1645  012A  118A  2342  118A   	fcall	stringdir
  1646  012D  00F3               	movwf	___lldiv@divisor+3
  1647  012E  083B               	movf	sprintf@val+3,w
  1648  012F  00F7               	movwf	___lldiv@dividend+3
  1649  0130  083A               	movf	sprintf@val+2,w
  1650  0131  00F6               	movwf	___lldiv@dividend+2
  1651  0132  0839               	movf	sprintf@val+1,w
  1652  0133  00F5               	movwf	___lldiv@dividend+1
  1653  0134  0838               	movf	sprintf@val,w
  1654  0135  00F4               	movwf	___lldiv@dividend
  1655  0136  118A  2296  118A   	fcall	___lldiv
  1656  0139  0873               	movf	?___lldiv+3,w
  1657  013A  1283               	bcf	3,5	;RP0=0, select bank0
  1658  013B  1303               	bcf	3,6	;RP1=0, select bank0
  1659  013C  00A7               	movwf	___llmod@dividend+3
  1660  013D  0872               	movf	?___lldiv+2,w
  1661  013E  00A6               	movwf	___llmod@dividend+2
  1662  013F  0871               	movf	?___lldiv+1,w
  1663  0140  00A5               	movwf	___llmod@dividend+1
  1664  0141  0870               	movf	?___lldiv,w
  1665  0142  00A4               	movwf	___llmod@dividend
  1666  0143  118A  22F4  118A   	fcall	___llmod
  1667  0146  1283               	bcf	3,5	;RP0=0, select bank0
  1668  0147  1303               	bcf	3,6	;RP1=0, select bank0
  1669  0148  0820               	movf	?___llmod,w
  1670  0149  3E30               	addlw	48
  1671  014A  00B1               	movwf	??_sprintf+1
  1672  014B  0831               	movf	??_sprintf+1,w
  1673  014C  00BF               	movwf	sprintf@c
  1674                           
  1675                           ;doprnt.c: 1523: }
  1676                           ;doprnt.c: 1524: ((*sp++ = (c)));
  1677  014D  083F               	movf	sprintf@c,w
  1678  014E  00B0               	movwf	??_sprintf
  1679  014F  083E               	movf	sprintf@sp,w
  1680  0150  0084               	movwf	4
  1681  0151  0830               	movf	??_sprintf,w
  1682  0152  1383               	bcf	3,7	;select IRP bank0
  1683  0153  0080               	movwf	0
  1684  0154  3001               	movlw	1
  1685  0155  00B0               	movwf	??_sprintf
  1686  0156  0830               	movf	??_sprintf,w
  1687  0157  07BE               	addwf	sprintf@sp,f
  1688  0158  28FF               	goto	i1l1151
  1689  0159                     i1l1155:	
  1690                           ;doprnt.c: 1525: }
  1691                           ;doprnt.c: 1533: }
  1692                           ;doprnt.c: 1535: alldone:
  1693                           
  1694                           
  1695                           ;doprnt.c: 1538: *sp = 0;
  1696  0159  083E               	movf	sprintf@sp,w
  1697  015A  0084               	movwf	4
  1698  015B  1383               	bcf	3,7	;select IRP bank0
  1699  015C  0180               	clrf	0
  1700  015D  0008               	return
  1701  015E                     __end_of_sprintf:	
  1702                           ;doprnt.c: 1540: return 0;
  1703                           ;	Return value of _sprintf is never used
  1704                           
  1705                           
  1706                           	psect	text8
  1707  02F4                     __ptext8:	
  1708 ;; *************** function ___llmod *****************
  1709 ;; Defined at:
  1710 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\llmod.c"
  1711 ;; Parameters:    Size  Location     Type
  1712 ;;  divisor         4    0[BANK0 ] unsigned long 
  1713 ;;  dividend        4    4[BANK0 ] unsigned long 
  1714 ;; Auto vars:     Size  Location     Type
  1715 ;;  counter         1    9[BANK0 ] unsigned char 
  1716 ;; Return value:  Size  Location     Type
  1717 ;;                  4    0[BANK0 ] unsigned long 
  1718 ;; Registers used:
  1719 ;;		wreg, status,2, status,0
  1720 ;; Tracked objects:
  1721 ;;		On entry : 0/0
  1722 ;;		On exit  : 0/0
  1723 ;;		Unchanged: 0/0
  1724 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1725 ;;      Params:         0       8       0       0       0
  1726 ;;      Locals:         0       1       0       0       0
  1727 ;;      Temps:          0       1       0       0       0
  1728 ;;      Totals:         0      10       0       0       0
  1729 ;;Total ram usage:       10 bytes
  1730 ;; Hardware stack levels used:    1
  1731 ;; This function calls:
  1732 ;;		Nothing
  1733 ;; This function is called by:
  1734 ;;		_sprintf
  1735 ;; This function uses a non-reentrant model
  1736 ;;
  1737                           
  1738                           
  1739                           ;psect for function ___llmod
  1740  02F4                     ___llmod:	
  1741                           
  1742                           ;incstack = 0
  1743                           ; Regs used in ___llmod: [wreg+status,2+status,0]
  1744  02F4  1283               	bcf	3,5	;RP0=0, select bank0
  1745  02F5  1303               	bcf	3,6	;RP1=0, select bank0
  1746  02F6  0823               	movf	___llmod@divisor+3,w
  1747  02F7  0422               	iorwf	___llmod@divisor+2,w
  1748  02F8  0421               	iorwf	___llmod@divisor+1,w
  1749  02F9  0420               	iorwf	___llmod@divisor,w
  1750  02FA  1903               	skipnz
  1751  02FB  2B39               	goto	i1l1017
  1752  02FC  01A9               	clrf	___llmod@counter
  1753  02FD  0AA9               	incf	___llmod@counter,f
  1754  02FE                     i1l1007:	
  1755  02FE  1BA3               	btfsc	___llmod@divisor+3,7
  1756  02FF  2B0E               	goto	i1l1009
  1757  0300  3001               	movlw	1
  1758  0301  00A8               	movwf	??___llmod
  1759  0302                     u77_25:	
  1760  0302  1003               	clrc
  1761  0303  0DA0               	rlf	___llmod@divisor,f
  1762  0304  0DA1               	rlf	___llmod@divisor+1,f
  1763  0305  0DA2               	rlf	___llmod@divisor+2,f
  1764  0306  0DA3               	rlf	___llmod@divisor+3,f
  1765  0307  0BA8               	decfsz	??___llmod,f
  1766  0308  2B02               	goto	u77_25
  1767  0309  3001               	movlw	1
  1768  030A  00A8               	movwf	??___llmod
  1769  030B  0828               	movf	??___llmod,w
  1770  030C  07A9               	addwf	___llmod@counter,f
  1771  030D  2AFE               	goto	i1l1007
  1772  030E                     i1l1009:	
  1773  030E  0823               	movf	___llmod@divisor+3,w
  1774  030F  0227               	subwf	___llmod@dividend+3,w
  1775  0310  1D03               	skipz
  1776  0311  2B1C               	goto	u79_25
  1777  0312  0822               	movf	___llmod@divisor+2,w
  1778  0313  0226               	subwf	___llmod@dividend+2,w
  1779  0314  1D03               	skipz
  1780  0315  2B1C               	goto	u79_25
  1781  0316  0821               	movf	___llmod@divisor+1,w
  1782  0317  0225               	subwf	___llmod@dividend+1,w
  1783  0318  1D03               	skipz
  1784  0319  2B1C               	goto	u79_25
  1785  031A  0820               	movf	___llmod@divisor,w
  1786  031B  0224               	subwf	___llmod@dividend,w
  1787  031C                     u79_25:	
  1788  031C  1C03               	skipc
  1789  031D  2B2C               	goto	i1l1013
  1790  031E  0820               	movf	___llmod@divisor,w
  1791  031F  02A4               	subwf	___llmod@dividend,f
  1792  0320  0821               	movf	___llmod@divisor+1,w
  1793  0321  1C03               	skipc
  1794  0322  0F21               	incfsz	___llmod@divisor+1,w
  1795  0323  02A5               	subwf	___llmod@dividend+1,f
  1796  0324  0822               	movf	___llmod@divisor+2,w
  1797  0325  1C03               	skipc
  1798  0326  0F22               	incfsz	___llmod@divisor+2,w
  1799  0327  02A6               	subwf	___llmod@dividend+2,f
  1800  0328  0823               	movf	___llmod@divisor+3,w
  1801  0329  1C03               	skipc
  1802  032A  0F23               	incfsz	___llmod@divisor+3,w
  1803  032B  02A7               	subwf	___llmod@dividend+3,f
  1804  032C                     i1l1013:	
  1805  032C  3001               	movlw	1
  1806  032D                     u80_25:	
  1807  032D  1003               	clrc
  1808  032E  0CA3               	rrf	___llmod@divisor+3,f
  1809  032F  0CA2               	rrf	___llmod@divisor+2,f
  1810  0330  0CA1               	rrf	___llmod@divisor+1,f
  1811  0331  0CA0               	rrf	___llmod@divisor,f
  1812  0332  3EFF               	addlw	-1
  1813  0333  1D03               	skipz
  1814  0334  2B2D               	goto	u80_25
  1815  0335  3001               	movlw	1
  1816  0336  02A9               	subwf	___llmod@counter,f
  1817  0337  1D03               	btfss	3,2
  1818  0338  2B0E               	goto	i1l1009
  1819  0339                     i1l1017:	
  1820  0339  0827               	movf	___llmod@dividend+3,w
  1821  033A  00A3               	movwf	?___llmod+3
  1822  033B  0826               	movf	___llmod@dividend+2,w
  1823  033C  00A2               	movwf	?___llmod+2
  1824  033D  0825               	movf	___llmod@dividend+1,w
  1825  033E  00A1               	movwf	?___llmod+1
  1826  033F  0824               	movf	___llmod@dividend,w
  1827  0340  00A0               	movwf	?___llmod
  1828  0341  0008               	return
  1829  0342                     __end_of___llmod:	
  1830                           
  1831                           	psect	text9
  1832  0296                     __ptext9:	
  1833 ;; *************** function ___lldiv *****************
  1834 ;; Defined at:
  1835 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  1836 ;; Parameters:    Size  Location     Type
  1837 ;;  divisor         4    0[COMMON] unsigned long 
  1838 ;;  dividend        4    4[COMMON] unsigned long 
  1839 ;; Auto vars:     Size  Location     Type
  1840 ;;  quotient        4    9[COMMON] unsigned long 
  1841 ;;  counter         1   13[COMMON] unsigned char 
  1842 ;; Return value:  Size  Location     Type
  1843 ;;                  4    0[COMMON] unsigned long 
  1844 ;; Registers used:
  1845 ;;		wreg, status,2, status,0
  1846 ;; Tracked objects:
  1847 ;;		On entry : 0/0
  1848 ;;		On exit  : 0/0
  1849 ;;		Unchanged: 0/0
  1850 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1851 ;;      Params:         8       0       0       0       0
  1852 ;;      Locals:         5       0       0       0       0
  1853 ;;      Temps:          1       0       0       0       0
  1854 ;;      Totals:        14       0       0       0       0
  1855 ;;Total ram usage:       14 bytes
  1856 ;; Hardware stack levels used:    1
  1857 ;; This function calls:
  1858 ;;		Nothing
  1859 ;; This function is called by:
  1860 ;;		_sprintf
  1861 ;; This function uses a non-reentrant model
  1862 ;;
  1863                           
  1864                           
  1865                           ;psect for function ___lldiv
  1866  0296                     ___lldiv:	
  1867                           
  1868                           ;incstack = 0
  1869                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  1870  0296  3000               	movlw	0
  1871  0297  00FC               	movwf	___lldiv@quotient+3
  1872  0298  3000               	movlw	0
  1873  0299  00FB               	movwf	___lldiv@quotient+2
  1874  029A  3000               	movlw	0
  1875  029B  00FA               	movwf	___lldiv@quotient+1
  1876  029C  3000               	movlw	0
  1877  029D  00F9               	movwf	___lldiv@quotient
  1878  029E  0873               	movf	___lldiv@divisor+3,w
  1879  029F  0472               	iorwf	___lldiv@divisor+2,w
  1880  02A0  0471               	iorwf	___lldiv@divisor+1,w
  1881  02A1  0470               	iorwf	___lldiv@divisor,w
  1882  02A2  1903               	skipnz
  1883  02A3  2AEB               	goto	i1l997
  1884  02A4  01FD               	clrf	___lldiv@counter
  1885  02A5  0AFD               	incf	___lldiv@counter,f
  1886  02A6                     i1l983:	
  1887  02A6  1BF3               	btfsc	___lldiv@divisor+3,7
  1888  02A7  2AB6               	goto	i1l985
  1889  02A8  3001               	movlw	1
  1890  02A9  00F8               	movwf	??___lldiv
  1891  02AA                     u70_25:	
  1892  02AA  1003               	clrc
  1893  02AB  0DF0               	rlf	___lldiv@divisor,f
  1894  02AC  0DF1               	rlf	___lldiv@divisor+1,f
  1895  02AD  0DF2               	rlf	___lldiv@divisor+2,f
  1896  02AE  0DF3               	rlf	___lldiv@divisor+3,f
  1897  02AF  0BF8               	decfsz	??___lldiv,f
  1898  02B0  2AAA               	goto	u70_25
  1899  02B1  3001               	movlw	1
  1900  02B2  00F8               	movwf	??___lldiv
  1901  02B3  0878               	movf	??___lldiv,w
  1902  02B4  07FD               	addwf	___lldiv@counter,f
  1903  02B5  2AA6               	goto	i1l983
  1904  02B6                     i1l985:	
  1905  02B6  3001               	movlw	1
  1906  02B7  00F8               	movwf	??___lldiv
  1907  02B8                     u72_25:	
  1908  02B8  1003               	clrc
  1909  02B9  0DF9               	rlf	___lldiv@quotient,f
  1910  02BA  0DFA               	rlf	___lldiv@quotient+1,f
  1911  02BB  0DFB               	rlf	___lldiv@quotient+2,f
  1912  02BC  0DFC               	rlf	___lldiv@quotient+3,f
  1913  02BD  0BF8               	decfsz	??___lldiv,f
  1914  02BE  2AB8               	goto	u72_25
  1915  02BF  0873               	movf	___lldiv@divisor+3,w
  1916  02C0  0277               	subwf	___lldiv@dividend+3,w
  1917  02C1  1D03               	skipz
  1918  02C2  2ACD               	goto	u73_25
  1919  02C3  0872               	movf	___lldiv@divisor+2,w
  1920  02C4  0276               	subwf	___lldiv@dividend+2,w
  1921  02C5  1D03               	skipz
  1922  02C6  2ACD               	goto	u73_25
  1923  02C7  0871               	movf	___lldiv@divisor+1,w
  1924  02C8  0275               	subwf	___lldiv@dividend+1,w
  1925  02C9  1D03               	skipz
  1926  02CA  2ACD               	goto	u73_25
  1927  02CB  0870               	movf	___lldiv@divisor,w
  1928  02CC  0274               	subwf	___lldiv@dividend,w
  1929  02CD                     u73_25:	
  1930  02CD  1C03               	skipc
  1931  02CE  2ADE               	goto	i1l993
  1932  02CF  0870               	movf	___lldiv@divisor,w
  1933  02D0  02F4               	subwf	___lldiv@dividend,f
  1934  02D1  0871               	movf	___lldiv@divisor+1,w
  1935  02D2  1C03               	skipc
  1936  02D3  0F71               	incfsz	___lldiv@divisor+1,w
  1937  02D4  02F5               	subwf	___lldiv@dividend+1,f
  1938  02D5  0872               	movf	___lldiv@divisor+2,w
  1939  02D6  1C03               	skipc
  1940  02D7  0F72               	incfsz	___lldiv@divisor+2,w
  1941  02D8  02F6               	subwf	___lldiv@dividend+2,f
  1942  02D9  0873               	movf	___lldiv@divisor+3,w
  1943  02DA  1C03               	skipc
  1944  02DB  0F73               	incfsz	___lldiv@divisor+3,w
  1945  02DC  02F7               	subwf	___lldiv@dividend+3,f
  1946  02DD  1479               	bsf	___lldiv@quotient,0
  1947  02DE                     i1l993:	
  1948  02DE  3001               	movlw	1
  1949  02DF                     u74_25:	
  1950  02DF  1003               	clrc
  1951  02E0  0CF3               	rrf	___lldiv@divisor+3,f
  1952  02E1  0CF2               	rrf	___lldiv@divisor+2,f
  1953  02E2  0CF1               	rrf	___lldiv@divisor+1,f
  1954  02E3  0CF0               	rrf	___lldiv@divisor,f
  1955  02E4  3EFF               	addlw	-1
  1956  02E5  1D03               	skipz
  1957  02E6  2ADF               	goto	u74_25
  1958  02E7  3001               	movlw	1
  1959  02E8  02FD               	subwf	___lldiv@counter,f
  1960  02E9  1D03               	btfss	3,2
  1961  02EA  2AB6               	goto	i1l985
  1962  02EB                     i1l997:	
  1963  02EB  087C               	movf	___lldiv@quotient+3,w
  1964  02EC  00F3               	movwf	?___lldiv+3
  1965  02ED  087B               	movf	___lldiv@quotient+2,w
  1966  02EE  00F2               	movwf	?___lldiv+2
  1967  02EF  087A               	movf	___lldiv@quotient+1,w
  1968  02F0  00F1               	movwf	?___lldiv+1
  1969  02F1  0879               	movf	___lldiv@quotient,w
  1970  02F2  00F0               	movwf	?___lldiv
  1971  02F3  0008               	return
  1972  02F4                     __end_of___lldiv:	
  1973                           
  1974                           	psect	text10
  1975  0408                     __ptext10:	
  1976 ;; *************** function ___lwmod *****************
  1977 ;; Defined at:
  1978 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
  1979 ;; Parameters:    Size  Location     Type
  1980 ;;  divisor         2    0[COMMON] unsigned int 
  1981 ;;  dividend        2    2[COMMON] unsigned int 
  1982 ;; Auto vars:     Size  Location     Type
  1983 ;;  counter         1    5[COMMON] unsigned char 
  1984 ;; Return value:  Size  Location     Type
  1985 ;;                  2    0[COMMON] unsigned int 
  1986 ;; Registers used:
  1987 ;;		wreg, status,2, status,0
  1988 ;; Tracked objects:
  1989 ;;		On entry : 0/0
  1990 ;;		On exit  : 0/0
  1991 ;;		Unchanged: 0/0
  1992 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1993 ;;      Params:         4       0       0       0       0
  1994 ;;      Locals:         1       0       0       0       0
  1995 ;;      Temps:          1       0       0       0       0
  1996 ;;      Totals:         6       0       0       0       0
  1997 ;;Total ram usage:        6 bytes
  1998 ;; Hardware stack levels used:    1
  1999 ;; This function calls:
  2000 ;;		Nothing
  2001 ;; This function is called by:
  2002 ;;		_ISR
  2003 ;; This function uses a non-reentrant model
  2004 ;;
  2005                           
  2006                           
  2007                           ;psect for function ___lwmod
  2008  0408                     ___lwmod:	
  2009                           
  2010                           ;incstack = 0
  2011                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  2012  0408  0870               	movf	___lwmod@divisor,w
  2013  0409  0471               	iorwf	___lwmod@divisor+1,w
  2014  040A  1903               	btfsc	3,2
  2015  040B  2C35               	goto	i1l1191
  2016  040C  01F5               	clrf	___lwmod@counter
  2017  040D  0AF5               	incf	___lwmod@counter,f
  2018  040E                     i1l1181:	
  2019  040E  1BF1               	btfsc	___lwmod@divisor+1,7
  2020  040F  2C1C               	goto	i1l1183
  2021  0410  3001               	movlw	1
  2022  0411                     u119_25:	
  2023  0411  1003               	clrc
  2024  0412  0DF0               	rlf	___lwmod@divisor,f
  2025  0413  0DF1               	rlf	___lwmod@divisor+1,f
  2026  0414  3EFF               	addlw	-1
  2027  0415  1D03               	skipz
  2028  0416  2C11               	goto	u119_25
  2029  0417  3001               	movlw	1
  2030  0418  00F4               	movwf	??___lwmod
  2031  0419  0874               	movf	??___lwmod,w
  2032  041A  07F5               	addwf	___lwmod@counter,f
  2033  041B  2C0E               	goto	i1l1181
  2034  041C                     i1l1183:	
  2035  041C  0871               	movf	___lwmod@divisor+1,w
  2036  041D  0273               	subwf	___lwmod@dividend+1,w
  2037  041E  1D03               	skipz
  2038  041F  2C22               	goto	u121_25
  2039  0420  0870               	movf	___lwmod@divisor,w
  2040  0421  0272               	subwf	___lwmod@dividend,w
  2041  0422                     u121_25:	
  2042  0422  1C03               	skipc
  2043  0423  2C2A               	goto	i1l1187
  2044  0424  0870               	movf	___lwmod@divisor,w
  2045  0425  02F2               	subwf	___lwmod@dividend,f
  2046  0426  0871               	movf	___lwmod@divisor+1,w
  2047  0427  1C03               	skipc
  2048  0428  03F3               	decf	___lwmod@dividend+1,f
  2049  0429  02F3               	subwf	___lwmod@dividend+1,f
  2050  042A                     i1l1187:	
  2051  042A  3001               	movlw	1
  2052  042B                     u122_25:	
  2053  042B  1003               	clrc
  2054  042C  0CF1               	rrf	___lwmod@divisor+1,f
  2055  042D  0CF0               	rrf	___lwmod@divisor,f
  2056  042E  3EFF               	addlw	-1
  2057  042F  1D03               	skipz
  2058  0430  2C2B               	goto	u122_25
  2059  0431  3001               	movlw	1
  2060  0432  02F5               	subwf	___lwmod@counter,f
  2061  0433  1D03               	btfss	3,2
  2062  0434  2C1C               	goto	i1l1183
  2063  0435                     i1l1191:	
  2064  0435  0873               	movf	___lwmod@dividend+1,w
  2065  0436  00F1               	movwf	?___lwmod+1
  2066  0437  0872               	movf	___lwmod@dividend,w
  2067  0438  00F0               	movwf	?___lwmod
  2068  0439  0008               	return
  2069  043A                     __end_of___lwmod:	
  2070                           
  2071                           	psect	text11
  2072  038F                     __ptext11:	
  2073 ;; *************** function ___lmul *****************
  2074 ;; Defined at:
  2075 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul32.c"
  2076 ;; Parameters:    Size  Location     Type
  2077 ;;  multiplier      4    5[COMMON] unsigned long 
  2078 ;;  multiplicand    4    9[COMMON] unsigned long 
  2079 ;; Auto vars:     Size  Location     Type
  2080 ;;  product         4    0[BANK0 ] unsigned long 
  2081 ;; Return value:  Size  Location     Type
  2082 ;;                  4    5[COMMON] unsigned long 
  2083 ;; Registers used:
  2084 ;;		wreg, status,2, status,0
  2085 ;; Tracked objects:
  2086 ;;		On entry : 0/0
  2087 ;;		On exit  : 0/0
  2088 ;;		Unchanged: 0/0
  2089 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2090 ;;      Params:         8       0       0       0       0
  2091 ;;      Locals:         0       4       0       0       0
  2092 ;;      Temps:          1       0       0       0       0
  2093 ;;      Totals:         9       4       0       0       0
  2094 ;;Total ram usage:       13 bytes
  2095 ;; Hardware stack levels used:    1
  2096 ;; This function calls:
  2097 ;;		Nothing
  2098 ;; This function is called by:
  2099 ;;		_ISR
  2100 ;; This function uses a non-reentrant model
  2101 ;;
  2102                           
  2103                           
  2104                           ;psect for function ___lmul
  2105  038F                     ___lmul:	
  2106                           
  2107                           ;incstack = 0
  2108                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  2109  038F  3000               	movlw	0
  2110  0390  1283               	bcf	3,5	;RP0=0, select bank0
  2111  0391  1303               	bcf	3,6	;RP1=0, select bank0
  2112  0392  00A3               	movwf	___lmul@product+3
  2113  0393  3000               	movlw	0
  2114  0394  00A2               	movwf	___lmul@product+2
  2115  0395  3000               	movlw	0
  2116  0396  00A1               	movwf	___lmul@product+1
  2117  0397  3000               	movlw	0
  2118  0398  00A0               	movwf	___lmul@product
  2119  0399                     i1l1161:	
  2120  0399  1C75               	btfss	___lmul@multiplier,0
  2121  039A  2BB1               	goto	i1l1165
  2122  039B  0879               	movf	___lmul@multiplicand,w
  2123  039C  1283               	bcf	3,5	;RP0=0, select bank0
  2124  039D  1303               	bcf	3,6	;RP1=0, select bank0
  2125  039E  07A0               	addwf	___lmul@product,f
  2126  039F  087A               	movf	___lmul@multiplicand+1,w
  2127  03A0  1103               	clrz
  2128  03A1  1803               	skipnc
  2129  03A2  3E01               	addlw	1
  2130  03A3  1D03               	btfss	3,2
  2131  03A4  07A1               	addwf	___lmul@product+1,f
  2132  03A5  087B               	movf	___lmul@multiplicand+2,w
  2133  03A6  1103               	clrz
  2134  03A7  1803               	skipnc
  2135  03A8  3E01               	addlw	1
  2136  03A9  1D03               	btfss	3,2
  2137  03AA  07A2               	addwf	___lmul@product+2,f
  2138  03AB  087C               	movf	___lmul@multiplicand+3,w
  2139  03AC  1103               	clrz
  2140  03AD  1803               	skipnc
  2141  03AE  3E01               	addlw	1
  2142  03AF  1D03               	btfss	3,2
  2143  03B0  07A3               	addwf	___lmul@product+3,f
  2144  03B1                     i1l1165:	
  2145  03B1  3001               	movlw	1
  2146  03B2  00FD               	movwf	??___lmul
  2147  03B3                     u115_25:	
  2148  03B3  1003               	clrc
  2149  03B4  0DF9               	rlf	___lmul@multiplicand,f
  2150  03B5  0DFA               	rlf	___lmul@multiplicand+1,f
  2151  03B6  0DFB               	rlf	___lmul@multiplicand+2,f
  2152  03B7  0DFC               	rlf	___lmul@multiplicand+3,f
  2153  03B8  0BFD               	decfsz	??___lmul,f
  2154  03B9  2BB3               	goto	u115_25
  2155  03BA  3001               	movlw	1
  2156  03BB                     u116_25:	
  2157  03BB  1003               	clrc
  2158  03BC  0CF8               	rrf	___lmul@multiplier+3,f
  2159  03BD  0CF7               	rrf	___lmul@multiplier+2,f
  2160  03BE  0CF6               	rrf	___lmul@multiplier+1,f
  2161  03BF  0CF5               	rrf	___lmul@multiplier,f
  2162  03C0  3EFF               	addlw	-1
  2163  03C1  1D03               	skipz
  2164  03C2  2BBB               	goto	u116_25
  2165  03C3  0878               	movf	___lmul@multiplier+3,w
  2166  03C4  0477               	iorwf	___lmul@multiplier+2,w
  2167  03C5  0476               	iorwf	___lmul@multiplier+1,w
  2168  03C6  0475               	iorwf	___lmul@multiplier,w
  2169  03C7  1D03               	skipz
  2170  03C8  2B99               	goto	i1l1161
  2171  03C9  1283               	bcf	3,5	;RP0=0, select bank0
  2172  03CA  1303               	bcf	3,6	;RP1=0, select bank0
  2173  03CB  0823               	movf	___lmul@product+3,w
  2174  03CC  00F8               	movwf	?___lmul+3
  2175  03CD  0822               	movf	___lmul@product+2,w
  2176  03CE  00F7               	movwf	?___lmul+2
  2177  03CF  0821               	movf	___lmul@product+1,w
  2178  03D0  00F6               	movwf	?___lmul+1
  2179  03D1  0820               	movf	___lmul@product,w
  2180  03D2  00F5               	movwf	?___lmul
  2181  03D3  0008               	return
  2182  03D4                     __end_of___lmul:	
  2183                           
  2184                           	psect	text12
  2185  044E                     __ptext12:	
  2186 ;; *************** function _UART_send_string *****************
  2187 ;; Defined at:
  2188 ;;		line 49 in file "uart.h"
  2189 ;; Parameters:    Size  Location     Type
  2190 ;;  str             1    wreg     PTR unsigned char 
  2191 ;;		 -> ISR@buffer(30), 
  2192 ;; Auto vars:     Size  Location     Type
  2193 ;;  str             1    2[COMMON] PTR unsigned char 
  2194 ;;		 -> ISR@buffer(30), 
  2195 ;; Return value:  Size  Location     Type
  2196 ;;                  1    wreg      void 
  2197 ;; Registers used:
  2198 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2199 ;; Tracked objects:
  2200 ;;		On entry : 0/0
  2201 ;;		On exit  : 0/0
  2202 ;;		Unchanged: 0/0
  2203 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2204 ;;      Params:         0       0       0       0       0
  2205 ;;      Locals:         1       0       0       0       0
  2206 ;;      Temps:          1       0       0       0       0
  2207 ;;      Totals:         2       0       0       0       0
  2208 ;;Total ram usage:        2 bytes
  2209 ;; Hardware stack levels used:    1
  2210 ;; Hardware stack levels required when called:    1
  2211 ;; This function calls:
  2212 ;;		_UART_send_byte
  2213 ;; This function is called by:
  2214 ;;		_ISR
  2215 ;; This function uses a non-reentrant model
  2216 ;;
  2217                           
  2218                           
  2219                           ;psect for function _UART_send_string
  2220  044E                     _UART_send_string:	
  2221                           
  2222                           ;incstack = 0
  2223                           ; Regs used in _UART_send_string: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2224                           ;UART_send_string@str stored from wreg
  2225  044E  00F2               	movwf	UART_send_string@str
  2226  044F                     i1l1055:	
  2227                           ;uart.h: 57: while(*str){
  2228                           
  2229  044F  0872               	movf	UART_send_string@str,w
  2230  0450  0084               	movwf	4
  2231  0451  1383               	bcf	3,7	;select IRP bank0
  2232  0452  0800               	movf	0,w
  2233  0453  1903               	btfsc	3,2
  2234  0454  0008               	return
  2235                           
  2236                           ;uart.h: 58: UART_send_byte(*str++);
  2237  0455  0872               	movf	UART_send_string@str,w
  2238  0456  0084               	movwf	4
  2239  0457  1383               	bcf	3,7	;select IRP bank0
  2240  0458  0800               	movf	0,w
  2241  0459  118A  24A8  118A   	fcall	_UART_send_byte
  2242  045C  3001               	movlw	1
  2243  045D  00F1               	movwf	??_UART_send_string
  2244  045E  0871               	movf	??_UART_send_string,w
  2245  045F  07F2               	addwf	UART_send_string@str,f
  2246  0460  2C4F               	goto	i1l1055
  2247  0461                     __end_of_UART_send_string:	
  2248                           
  2249                           	psect	text13
  2250  04A8                     __ptext13:	
  2251 ;; *************** function _UART_send_byte *****************
  2252 ;; Defined at:
  2253 ;;		line 28 in file "uart.h"
  2254 ;; Parameters:    Size  Location     Type
  2255 ;;  single_byte     1    wreg     unsigned char 
  2256 ;; Auto vars:     Size  Location     Type
  2257 ;;  single_byte     1    0[COMMON] unsigned char 
  2258 ;; Return value:  Size  Location     Type
  2259 ;;                  1    wreg      void 
  2260 ;; Registers used:
  2261 ;;		wreg
  2262 ;; Tracked objects:
  2263 ;;		On entry : 0/0
  2264 ;;		On exit  : 0/0
  2265 ;;		Unchanged: 0/0
  2266 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2267 ;;      Params:         0       0       0       0       0
  2268 ;;      Locals:         1       0       0       0       0
  2269 ;;      Temps:          0       0       0       0       0
  2270 ;;      Totals:         1       0       0       0       0
  2271 ;;Total ram usage:        1 bytes
  2272 ;; Hardware stack levels used:    1
  2273 ;; This function calls:
  2274 ;;		Nothing
  2275 ;; This function is called by:
  2276 ;;		_UART_send_string
  2277 ;;		_ISR
  2278 ;; This function uses a non-reentrant model
  2279 ;;
  2280                           
  2281                           
  2282                           ;psect for function _UART_send_byte
  2283  04A8                     _UART_send_byte:	
  2284                           
  2285                           ;incstack = 0
  2286                           ; Regs used in _UART_send_byte: [wreg]
  2287                           ;UART_send_byte@single_byte stored from wreg
  2288  04A8  00F0               	movwf	UART_send_byte@single_byte
  2289  04A9                     i1l116:	
  2290                           ;uart.h: 29: while(! TRMT);
  2291                           
  2292  04A9  1683               	bsf	3,5	;RP0=1, select bank1
  2293  04AA  1303               	bcf	3,6	;RP1=0, select bank1
  2294  04AB  1C98               	btfss	24,1	;volatile
  2295  04AC  2CA9               	goto	i1l116
  2296                           
  2297                           ;uart.h: 30: TXREG = single_byte;
  2298  04AD  0870               	movf	UART_send_byte@single_byte,w
  2299  04AE  1283               	bcf	3,5	;RP0=0, select bank0
  2300  04AF  1303               	bcf	3,6	;RP1=0, select bank0
  2301  04B0  0099               	movwf	25	;volatile
  2302  04B1  0008               	return
  2303  04B2                     __end_of_UART_send_byte:	
  2304                           
  2305                           	psect	text14
  2306  0205                     __ptext14:	
  2307 ;; *************** function _ADC_Read *****************
  2308 ;; Defined at:
  2309 ;;		line 23 in file "adc.h"
  2310 ;; Parameters:    Size  Location     Type
  2311 ;;  channel         1    wreg     unsigned char 
  2312 ;; Auto vars:     Size  Location     Type
  2313 ;;  channel         1    4[COMMON] unsigned char 
  2314 ;; Return value:  Size  Location     Type
  2315 ;;                  2    0[COMMON] unsigned short 
  2316 ;; Registers used:
  2317 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2318 ;; Tracked objects:
  2319 ;;		On entry : 0/0
  2320 ;;		On exit  : 0/0
  2321 ;;		Unchanged: 0/0
  2322 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2323 ;;      Params:         2       0       0       0       0
  2324 ;;      Locals:         1       0       0       0       0
  2325 ;;      Temps:          2       0       0       0       0
  2326 ;;      Totals:         5       0       0       0       0
  2327 ;;Total ram usage:        5 bytes
  2328 ;; Hardware stack levels used:    1
  2329 ;; This function calls:
  2330 ;;		Nothing
  2331 ;; This function is called by:
  2332 ;;		_ISR
  2333 ;; This function uses a non-reentrant model
  2334 ;;
  2335                           
  2336                           
  2337                           ;psect for function _ADC_Read
  2338  0205                     _ADC_Read:	
  2339                           
  2340                           ;incstack = 0
  2341                           ; Regs used in _ADC_Read: [wreg-fsr0h+status,2+status,0]
  2342                           ;ADC_Read@channel stored from wreg
  2343  0205  00F4               	movwf	ADC_Read@channel
  2344                           
  2345                           ;adc.h: 25: ADCON0bits.CHS = channel;
  2346  0206  0874               	movf	ADC_Read@channel,w
  2347  0207  00F2               	movwf	??_ADC_Read
  2348  0208  0DF2               	rlf	??_ADC_Read,f
  2349  0209  0DF2               	rlf	??_ADC_Read,f
  2350  020A  0DF2               	rlf	??_ADC_Read,f
  2351  020B  1283               	bcf	3,5	;RP0=0, select bank0
  2352  020C  1303               	bcf	3,6	;RP1=0, select bank0
  2353  020D  081F               	movf	31,w	;volatile
  2354  020E  0672               	xorwf	??_ADC_Read,w
  2355  020F  39C7               	andlw	-57
  2356  0210  0672               	xorwf	??_ADC_Read,w
  2357  0211  009F               	movwf	31	;volatile
  2358                           
  2359                           ;adc.h: 27: switch(channel){
  2360  0212  2A75               	goto	i1l1067
  2361  0213                     i1l139:	
  2362                           ;adc.h: 28: case 0:
  2363                           
  2364                           
  2365                           ;adc.h: 29: TRISA0 = ANS0 = 1;
  2366  0213  1683               	bsf	3,5	;RP0=1, select bank1
  2367  0214  1303               	bcf	3,6	;RP1=0, select bank1
  2368  0215  141B               	bsf	27,0	;volatile
  2369  0216  1C1B               	btfss	27,0	;volatile
  2370  0217  2A1C               	goto	u85_20
  2371  0218  1683               	bsf	3,5	;RP0=1, select bank1
  2372  0219  1303               	bcf	3,6	;RP1=0, select bank1
  2373  021A  1405               	bsf	5,0	;volatile
  2374  021B  2A81               	goto	i1l1069
  2375  021C                     u85_20:	
  2376  021C  1683               	bsf	3,5	;RP0=1, select bank1
  2377  021D  1303               	bcf	3,6	;RP1=0, select bank1
  2378  021E  1005               	bcf	5,0	;volatile
  2379                           
  2380                           ;adc.h: 30: break;
  2381  021F  2A81               	goto	i1l1069
  2382  0220                     i1l141:	
  2383                           ;adc.h: 31: case 1:
  2384                           
  2385                           
  2386                           ;adc.h: 32: TRISA1 = ANS1 = 1;
  2387  0220  1683               	bsf	3,5	;RP0=1, select bank1
  2388  0221  1303               	bcf	3,6	;RP1=0, select bank1
  2389  0222  149B               	bsf	27,1	;volatile
  2390  0223  1C9B               	btfss	27,1	;volatile
  2391  0224  2A29               	goto	u87_20
  2392  0225  1683               	bsf	3,5	;RP0=1, select bank1
  2393  0226  1303               	bcf	3,6	;RP1=0, select bank1
  2394  0227  1485               	bsf	5,1	;volatile
  2395  0228  2A81               	goto	i1l1069
  2396  0229                     u87_20:	
  2397  0229  1683               	bsf	3,5	;RP0=1, select bank1
  2398  022A  1303               	bcf	3,6	;RP1=0, select bank1
  2399  022B  1085               	bcf	5,1	;volatile
  2400                           
  2401                           ;adc.h: 33: break;
  2402  022C  2A81               	goto	i1l1069
  2403  022D                     i1l142:	
  2404                           ;adc.h: 34: case 2:
  2405                           
  2406                           
  2407                           ;adc.h: 35: TRISA2 = ANS2 = 1;
  2408  022D  1683               	bsf	3,5	;RP0=1, select bank1
  2409  022E  1303               	bcf	3,6	;RP1=0, select bank1
  2410  022F  151B               	bsf	27,2	;volatile
  2411  0230  1D1B               	btfss	27,2	;volatile
  2412  0231  2A36               	goto	u89_20
  2413  0232  1683               	bsf	3,5	;RP0=1, select bank1
  2414  0233  1303               	bcf	3,6	;RP1=0, select bank1
  2415  0234  1505               	bsf	5,2	;volatile
  2416  0235  2A81               	goto	i1l1069
  2417  0236                     u89_20:	
  2418  0236  1683               	bsf	3,5	;RP0=1, select bank1
  2419  0237  1303               	bcf	3,6	;RP1=0, select bank1
  2420  0238  1105               	bcf	5,2	;volatile
  2421                           
  2422                           ;adc.h: 36: break;
  2423  0239  2A81               	goto	i1l1069
  2424  023A                     i1l143:	
  2425                           ;adc.h: 37: case 3:
  2426                           
  2427                           
  2428                           ;adc.h: 38: TRISA3 = ANS3 = 1;
  2429  023A  1683               	bsf	3,5	;RP0=1, select bank1
  2430  023B  1303               	bcf	3,6	;RP1=0, select bank1
  2431  023C  159B               	bsf	27,3	;volatile
  2432  023D  1D9B               	btfss	27,3	;volatile
  2433  023E  2A43               	goto	u91_20
  2434  023F  1683               	bsf	3,5	;RP0=1, select bank1
  2435  0240  1303               	bcf	3,6	;RP1=0, select bank1
  2436  0241  1585               	bsf	5,3	;volatile
  2437  0242  2A81               	goto	i1l1069
  2438  0243                     u91_20:	
  2439  0243  1683               	bsf	3,5	;RP0=1, select bank1
  2440  0244  1303               	bcf	3,6	;RP1=0, select bank1
  2441  0245  1185               	bcf	5,3	;volatile
  2442                           
  2443                           ;adc.h: 39: break;
  2444  0246  2A81               	goto	i1l1069
  2445  0247                     i1l144:	
  2446                           ;adc.h: 40: case 4:
  2447                           
  2448                           
  2449                           ;adc.h: 41: TRISA4 = ANS4 = 1;
  2450  0247  1683               	bsf	3,5	;RP0=1, select bank1
  2451  0248  1303               	bcf	3,6	;RP1=0, select bank1
  2452  0249  161B               	bsf	27,4	;volatile
  2453  024A  1E1B               	btfss	27,4	;volatile
  2454  024B  2A50               	goto	u93_20
  2455  024C  1683               	bsf	3,5	;RP0=1, select bank1
  2456  024D  1303               	bcf	3,6	;RP1=0, select bank1
  2457  024E  1605               	bsf	5,4	;volatile
  2458  024F  2A81               	goto	i1l1069
  2459  0250                     u93_20:	
  2460  0250  1683               	bsf	3,5	;RP0=1, select bank1
  2461  0251  1303               	bcf	3,6	;RP1=0, select bank1
  2462  0252  1205               	bcf	5,4	;volatile
  2463                           
  2464                           ;adc.h: 42: break;
  2465  0253  2A81               	goto	i1l1069
  2466  0254                     i1l145:	
  2467                           ;adc.h: 43: case 5:
  2468                           
  2469                           
  2470                           ;adc.h: 44: TRISA5 = ANS5 = 1;
  2471  0254  1683               	bsf	3,5	;RP0=1, select bank1
  2472  0255  1303               	bcf	3,6	;RP1=0, select bank1
  2473  0256  169B               	bsf	27,5	;volatile
  2474  0257  1E9B               	btfss	27,5	;volatile
  2475  0258  2A5D               	goto	u95_20
  2476  0259  1683               	bsf	3,5	;RP0=1, select bank1
  2477  025A  1303               	bcf	3,6	;RP1=0, select bank1
  2478  025B  1685               	bsf	5,5	;volatile
  2479  025C  2A81               	goto	i1l1069
  2480  025D                     u95_20:	
  2481  025D  1683               	bsf	3,5	;RP0=1, select bank1
  2482  025E  1303               	bcf	3,6	;RP1=0, select bank1
  2483  025F  1285               	bcf	5,5	;volatile
  2484                           
  2485                           ;adc.h: 45: break;
  2486  0260  2A81               	goto	i1l1069
  2487  0261                     i1l146:	
  2488                           ;adc.h: 46: case 6:
  2489                           
  2490                           
  2491                           ;adc.h: 47: TRISA6 = ANS6 = 1;
  2492  0261  1683               	bsf	3,5	;RP0=1, select bank1
  2493  0262  1303               	bcf	3,6	;RP1=0, select bank1
  2494  0263  171B               	bsf	27,6	;volatile
  2495  0264  1F1B               	btfss	27,6	;volatile
  2496  0265  2A6A               	goto	u97_20
  2497  0266  1683               	bsf	3,5	;RP0=1, select bank1
  2498  0267  1303               	bcf	3,6	;RP1=0, select bank1
  2499  0268  1705               	bsf	5,6	;volatile
  2500  0269  2A81               	goto	i1l1069
  2501  026A                     u97_20:	
  2502  026A  1683               	bsf	3,5	;RP0=1, select bank1
  2503  026B  1303               	bcf	3,6	;RP1=0, select bank1
  2504  026C  1305               	bcf	5,6	;volatile
  2505                           
  2506                           ;adc.h: 48: break;
  2507  026D  2A81               	goto	i1l1069
  2508  026E                     i1l1061:	
  2509                           ;adc.h: 49: default:
  2510                           
  2511                           
  2512                           ;adc.h: 50: TRISA = ANSEL = 0;
  2513  026E  1683               	bsf	3,5	;RP0=1, select bank1
  2514  026F  1303               	bcf	3,6	;RP1=0, select bank1
  2515  0270  019B               	clrf	27	;volatile
  2516  0271  0185               	clrf	5	;volatile
  2517                           
  2518                           ;adc.h: 52: return 0;
  2519  0272  01F0               	clrf	?_ADC_Read
  2520  0273  01F1               	clrf	?_ADC_Read+1
  2521  0274  0008               	return
  2522  0275                     i1l1067:	
  2523                           ;adc.h: 53: }
  2524                           
  2525  0275  0874               	movf	ADC_Read@channel,w
  2526                           
  2527                           ; Switch size 1, requested type "space"
  2528                           ; Number of cases is 7, Range of values is 0 to 6
  2529                           ; switch strategies available:
  2530                           ; Name         Instructions Cycles
  2531                           ; direct_byte           21     7 (fixed)
  2532                           ; simple_byte           22    12 (average)
  2533                           ; jumptable            260     6 (fixed)
  2534                           ;	Chosen strategy is direct_byte
  2535  0276  0084               	movwf	4
  2536  0277  3007               	movlw	7
  2537  0278  0204               	subwf	4,w
  2538  0279  1803               	skipnc
  2539  027A  2A6E               	goto	i1l1061
  2540  027B  3004               	movlw	high i1S1265
  2541  027C  008A               	movwf	10
  2542  027D  1003               	clrc
  2543  027E  0D04               	rlf	4,w
  2544  027F  3E83               	addlw	low i1S1265
  2545  0280  0082               	movwf	2
  2546  0281                     i1l1069:	
  2547                           
  2548                           ;adc.h: 56: _delay((unsigned long)((2)*(8000000/4000.0)));
  2549  0281  3006               	movlw	6
  2550  0282  00F3               	movwf	??_ADC_Read+1
  2551  0283  3030               	movlw	48
  2552  0284  00F2               	movwf	??_ADC_Read
  2553  0285                     u135_27:	
  2554  0285  0BF2               	decfsz	??_ADC_Read,f
  2555  0286  2A85               	goto	u135_27
  2556  0287  0BF3               	decfsz	??_ADC_Read+1,f
  2557  0288  2A85               	goto	u135_27
  2558  0289  0000               	nop
  2559                           
  2560                           ;adc.h: 59: ADCON0bits.GO_nDONE = 1;
  2561  028A  1283               	bcf	3,5	;RP0=0, select bank0
  2562  028B  1303               	bcf	3,6	;RP1=0, select bank0
  2563  028C  151F               	bsf	31,2	;volatile
  2564  028D                     i1l149:	
  2565                           ;adc.h: 60: while(GO_nDONE == 1);
  2566                           
  2567  028D  191F               	btfsc	31,2	;volatile
  2568  028E  2A8D               	goto	i1l149
  2569                           
  2570                           ;adc.h: 62: return (unsigned short) (ADRESL + (ADRESH << 8));
  2571  028F  081E               	movf	30,w	;volatile
  2572  0290  00F1               	movwf	?_ADC_Read+1
  2573  0291  1683               	bsf	3,5	;RP0=1, select bank1
  2574  0292  1303               	bcf	3,6	;RP1=0, select bank1
  2575  0293  081E               	movf	30,w	;volatile
  2576  0294  00F0               	movwf	?_ADC_Read
  2577  0295  0008               	return
  2578  0296                     __end_of_ADC_Read:	
  2579  007E                     btemp	set	126	;btemp
  2580  007E                     wtemp0	set	126
  2581                           
  2582                           	psect	swtext1
  2583  0483                     __pswtext1:	
  2584  0483                     i1S1265:	
  2585  0483  118A  2A13         	ljmp	i1l139
  2586  0485  118A  2A20         	ljmp	i1l141
  2587  0487  118A  2A2D         	ljmp	i1l142
  2588  0489  118A  2A3A         	ljmp	i1l143
  2589  048B  118A  2A47         	ljmp	i1l144
  2590  048D  118A  2A54         	ljmp	i1l145
  2591  048F  118A  2A61         	ljmp	i1l146


Data Sizes:
    Strings     31
    Constant    40
    Data        4
    BSS         2
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     77      79
    BANK1            80      2       6
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 14
		 -> STR_3(CODE[14]), 

    sprintf@cp	PTR const unsigned char  size(1) Largest target is 7
		 -> STR_4(CODE[7]), STR_2(CODE[4]), STR_1(CODE[6]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 30
		 -> ISR@buffer(BANK0[30]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    SENSOR_TYPES	PTR unsigned char [2] size(1) Largest target is 6
		 -> STR_2(CODE[4]), STR_1(CODE[6]), 

    UART_send_string@str	PTR unsigned char  size(1) Largest target is 30
		 -> ISR@buffer(BANK0[30]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->___lmul
    _sprintf->___lldiv
    _sprintf->___lmul
    ___llmod->___lldiv
    ___lmul->_ADC_Read
    _UART_send_string->_UART_send_byte

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    _ISR->_sprintf
    _sprintf->___llmod

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0      89
                                              0 BANK1      2     2      0
                           _ADC_Init
                          _Syst_Init
                          _TMR0_Init
                          _UART_Init
                     _UART_read_byte
 ---------------------------------------------------------------------------------
 (1) _UART_read_byte                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _UART_Init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TMR0_Init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Syst_Init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _ISR                                                 45    45      0    2035
                                             32 BANK0     45    45      0
                           _ADC_Read
                     _UART_send_byte
                   _UART_send_string
                             ___lmul
                            ___lwmod
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             28    22      6    1220
                                             10 BANK0     22    16      6
                           _ADC_Read (ARG)
                            ___lldiv
                            ___llmod
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___llmod                                             10     2      8     287
                                              0 BANK0     10     2      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             14     6      8     290
                                              0 COMMON    14     6      8
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              6     2      4     287
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              13     5      8     220
                                              5 COMMON     9     1      8
                                              0 BANK0      4     4      0
                           _ADC_Read (ARG)
 ---------------------------------------------------------------------------------
 (3) _UART_send_string                                     2     2      0      97
                                              1 COMMON     2     2      0
                     _UART_send_byte
 ---------------------------------------------------------------------------------
 (4) _UART_send_byte                                       1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _ADC_Read                                             5     3      2      44
                                              0 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Init
   _Syst_Init
   _TMR0_Init
   _UART_Init
   _UART_read_byte

 _ISR (ROOT)
   _ADC_Read
   _UART_send_byte
   _UART_send_string
     _UART_send_byte
   ___lmul
     _ADC_Read (ARG)
   ___lwmod
   _sprintf
     _ADC_Read (ARG)
     ___lldiv (ARG)
     ___llmod (ARG)
       ___lldiv (ARG)
     ___lmul (ARG)
       _ADC_Read (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      2       6       7        7.5%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     4D      4F       5       98.8%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      63      12        0.0%
ABS                  0      0      63       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Thu Dec 21 07:47:38 2017

                        pc 0002                __CFG_CP$OFF 0000                         fsr 0004  
                      l122 0491                        _GIE 005F                        _RA2 002A  
                      _RA3 002B               __CFG_CPD$OFF 0000                        _ISR 015E  
                      _PSA 040B                        _RX9 00C6                        _TX9 04C6  
                      fsr0 0004                        indf 0000               __CFG_IESO$ON 0000  
             __CFG_FOSC$HS 0000               __CFG_LVP$OFF 0000                       ?_ISR 0070  
                     ISR@j 006C                       l1045 049B                       l1231 03E0  
                     l1241 03FE                       l1237 03F4                       _ADFM 04FF  
                     _ADON 00F8                       _ANS0 04D8                       _ANS1 04D9  
                     STR_1 0385                       _ANS2 04DA                       STR_2 038B  
                     STR_3 0370                       _ANS3 04DB                       STR_4 037E  
                     _ANS4 04DC                       _ANS5 04DD                       _ANS6 04DE  
                     _BRGH 04C2                       u1000 0471                       _CREN 00C4  
                     _T0CS 040D                       _PEIE 005E                       _RCIF 0065  
                     _SPEN 00C7                       _TRMT 04C1                       _TXEN 04C5  
                     _SYNC 04C4               __CFG_WRT$OFF 0000              __CFG_FCMEN$ON 0000  
                     _main 03D4                       btemp 007E           __end_of_ADC_Init 0483  
         __end_of_ADC_Read 0296              __CFG_BOREN$ON 0000                main@rx_read 00A5  
                     start 0011                      ??_ISR 0040  __size_of_UART_send_string 0013  
                    _ADCS0 00FE                      _ADCS1 00FF                      _ADCS2 04FE  
                    ?_main 0070              __CFG_WDTE$OFF 0000                      _ANSEL 009B  
          __end_of___lldiv 02F4            __end_of___llmod 0342                      i1l202 0066  
                    i1l116 04A9                      i1l141 0220                      i1l142 022D  
                    i1l143 023A                      i1l207 009C                      i1l144 0247  
                    i1l145 0254                      i1l146 0261                      i1l139 0213  
                    i1l171 01F8                      i1l149 028D                      i1l167 017C  
          __end_of___lwmod 043A                      i1l199 0052                      i1l983 02A6  
                    i1l993 02DE                      i1l985 02B6                      i1l997 02EB  
                    _VCFG0 04FC                      _VCFG1 04FD                      _RCREG 001A  
                    _SPBRG 0099                      _PORTA 0005                      _PORTB 0006  
                    u70_25 02AA                      u72_25 02B8                      u80_25 032D  
                    _TRISA 0085                      _TRISB 0086                      u73_25 02CD  
                    u74_25 02DF                      u91_20 0243                      u93_20 0250  
                    u85_20 021C                      u77_25 0302                      u95_20 025D  
                    u87_20 0229                      u79_25 031C                      u97_20 026A  
                    u89_20 0236                      _TXREG 0019             __CFG_CCPMX$RB0 0000  
      ___lmul@multiplicand 0079         __size_of_UART_Init 0014            _SENSOR_CHANNELS 00A0  
       __size_of_TMR0_Init 000B            __end_of_dpowers 0370                      pclath 000A  
                    status 0003                      wtemp0 007E            __end_of_sprintf 015E  
           __CFG_MCLRE$OFF 0000            __initialization 0013               __end_of_main 0408  
                   ??_main 00A4                     i1S1265 0483           ___llmod@dividend 0024  
                   _ADRESH 001E                     _ADRESL 009E                     i1l1013 032C  
                   i1l1101 0050                     i1l1007 02FE                     i1l1103 0054  
                   i1l1009 030E                     i1l1017 0339                     i1l1121 0086  
                   i1l1061 026E                     u110_25 0115                     i1l1117 0081  
                   i1l1213 018D                     i1l1055 044F                     i1l1151 00FF  
                   i1l1143 00FA                     i1l1127 00AE                     i1l1223 01F0  
                   i1l1161 0399                     i1l1137 00C6                     i1l1153 0032  
                   i1l1067 0275                     i1l1155 0159                     i1l1069 0281  
                   i1l1165 03B1                     i1l1181 040E                     i1l1183 041C  
                   i1l1191 0435                     i1l1187 042A                     u121_25 0422  
                   u122_25 042B                     u115_25 03B3                     u107_25 00C9  
                   u116_25 03BB                     u108_25 00F0                     u119_25 0411  
                   u135_27 0285                     u129_25 01C6                     _TMR0IE 005D  
                   _TMR0IF 005A                     _TRISA0 0428                     _TRISA1 0429  
                   _TRISA2 042A                     _TRISA3 042B                     _TRISA4 042C  
                   _TRISA5 042D                     _TRISA6 042E             __CFG_PWRTE$OFF 0000  
        __end_of_UART_Init 044E          __end_of_TMR0_Init 04A8                     ___lmul 038F  
                ??___lldiv 0078                  ??___llmod 0028                  ??___lwmod 0074  
          ADC_Read@channel 0074                  ?_ADC_Init 0070                  ?_ADC_Read 0070  
                   saved_w 007E                  ??_sprintf 0030    __end_of__initialization 0028  
       __size_of_Syst_Init 0012             __pcstackCOMMON 0070               __pidataBANK1 04B2  
         _UART_send_string 044E             _OPTION_REGbits 0081                 ??_ADC_Init 00A4  
               ??_ADC_Read 0072                 __pbssBANK0 006D                  ISR@buffer 004E  
               __pmaintext 03D4                    ?___lmul 0075                 __pintentry 0004  
           ___lmul@product 0020    __size_of_UART_read_byte 000C          __end_of_Syst_Init 0473  
  __size_of_UART_send_byte 000A                 __stringtab 0342            __size_of___lmul 0045  
                  ___lldiv 0296                    ___llmod 02F4                    ___lwmod 0408  
                  __ptext1 0491                    __ptext2 043A                    __ptext3 049D  
                  __ptext4 0461                    __ptext5 0473                    __ptext6 015E  
                  __ptext7 002B                    __ptext8 02F4                    __ptext9 0296  
             __size_of_ISR 00A7                    _dpowers 0348                    _sprintf 002B  
     end_of_initialization 0028            ___lldiv@divisor 0070            ___lldiv@counter 007D  
           _adc_uart_count 006D                  _RCSTAbits 0018                  _UART_Init 043A  
                _TMR0_Init 049D                  _TRISBbits 0086          __size_of_ADC_Init 0010  
        __size_of_ADC_Read 0091   __end_of_UART_send_string 0461             __end_of___lmul 03D4  
               ?_UART_Init 0070             _UART_read_byte 0491                 ?_TMR0_Init 0070  
      start_initialization 0013                __end_of_ISR 0205             _UART_send_byte 04A8  
          ___llmod@divisor 0020            ___llmod@counter 0029                   ??___lmul 007D  
   __end_of_UART_read_byte 049D                __pdataBANK1 00A0     __end_of_UART_send_byte 04B2  
                ___latbits 0001              __pcstackBANK0 0020              __pcstackBANK1 00A4  
                _Syst_Init 0461                sprintf@flag 0035                sprintf@prec 0036  
          ?_UART_read_byte 0070                   ?___lldiv 0070                   ?___llmod 0020  
                 ?___lwmod 0070                ??_UART_Init 00A4                ??_TMR0_Init 00A4  
                __pstrings 0342                  __pswtext1 0483        UART_send_string@str 0072  
          ?_UART_send_byte 0070                   _ADC_Init 0473                   _ADC_Read 0205  
                 ?_sprintf 002A                 ?_Syst_Init 0070          interrupt_function 0004  
                 _GO_nDONE 00FA                 _ADCON0bits 001F                __stringbase 0347  
UART_send_byte@single_byte 0070               _SENSOR_TYPES 00A2          ___lmul@multiplier 0075  
        ?_UART_send_string 0070         ??_UART_send_string 0071           __size_of___lldiv 005E  
         __size_of___llmod 004E           __size_of___lwmod 0032         __end_of__stringtab 0348  
               sprintf@val 0038                   __ptext10 0408                   __ptext11 038F  
                 __ptext12 044E                   __ptext13 04A8                   __ptext14 0205  
              ??_Syst_Init 00A4           __size_of_sprintf 0133              __size_of_main 0034  
                 intlevel1 0000                  sprintf@ap 003D                  sprintf@cp 003C  
                sprintf@sp 003E           ___lwmod@dividend 0072           ___lldiv@dividend 0074  
         ??_UART_read_byte 00A4                  stringcode 0342           ??_UART_send_byte 0070  
                 sprintf@c 003F                   sprintf@f 002A           ___lldiv@quotient 0079  
          ___lwmod@divisor 0070            ___lwmod@counter 0075                   stringdir 0342  
                 stringtab 0342  
