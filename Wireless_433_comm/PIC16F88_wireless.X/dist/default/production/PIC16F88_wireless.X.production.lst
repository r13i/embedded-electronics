

Microchip Technology PIC LITE Macro Assembler V1.40 build -251452761 
                                                                                               Fri Apr 20 09:11:00 2018

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	16F88
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,delta=2
    20                           	psect	text8,local,class=CODE,merge=1,delta=2
    21                           	psect	text9,local,class=CODE,merge=1,delta=2
    22                           	psect	text10,local,class=CODE,merge=1,delta=2
    23                           	psect	text11,local,class=CODE,merge=1,delta=2
    24                           	psect	text12,local,class=CODE,merge=1,delta=2
    25                           	psect	text13,local,class=CODE,merge=1,delta=2
    26                           	psect	text14,local,class=CODE,merge=1,delta=2
    27                           	psect	intentry,global,class=CODE,delta=2
    28                           	psect	text15,local,class=CODE,merge=1,delta=2
    29                           	psect	text16,local,class=CODE,merge=1,delta=2
    30                           	psect	text17,local,class=CODE,merge=1,delta=2
    31                           	psect	text18,local,class=CODE,merge=1,delta=2
    32                           	dabs	1,0x7E,2
    33  0000                     
    34                           ; Version 1.40
    35                           ; Generated 01/12/2016 GMT
    36                           ; 
    37                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    38                           ; All rights reserved.
    39                           ; 
    40                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    41                           ; 
    42                           ; Redistribution and use in source and binary forms, with or without modification, are
    43                           ; permitted provided that the following conditions are met:
    44                           ; 
    45                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    46                           ;        conditions and the following disclaimer.
    47                           ; 
    48                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    49                           ;        of conditions and the following disclaimer in the documentation and/or other
    50                           ;        materials provided with the distribution.
    51                           ; 
    52                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    53                           ;        software without specific prior written permission.
    54                           ; 
    55                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    56                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    57                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    58                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    59                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    60                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    61                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    62                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    63                           ; 
    64                           ; 
    65                           ; Code-generator required, PIC16F88 Definitions
    66                           ; 
    67                           ; SFR Addresses
    68  0000                     	;# 
    69  0001                     	;# 
    70  0002                     	;# 
    71  0003                     	;# 
    72  0004                     	;# 
    73  0005                     	;# 
    74  0006                     	;# 
    75  000A                     	;# 
    76  000B                     	;# 
    77  000C                     	;# 
    78  000D                     	;# 
    79  000E                     	;# 
    80  000E                     	;# 
    81  000F                     	;# 
    82  0010                     	;# 
    83  0011                     	;# 
    84  0012                     	;# 
    85  0013                     	;# 
    86  0014                     	;# 
    87  0015                     	;# 
    88  0015                     	;# 
    89  0016                     	;# 
    90  0017                     	;# 
    91  0018                     	;# 
    92  0019                     	;# 
    93  001A                     	;# 
    94  001E                     	;# 
    95  001F                     	;# 
    96  0081                     	;# 
    97  0085                     	;# 
    98  0086                     	;# 
    99  008C                     	;# 
   100  008D                     	;# 
   101  008E                     	;# 
   102  008F                     	;# 
   103  0090                     	;# 
   104  0092                     	;# 
   105  0093                     	;# 
   106  0094                     	;# 
   107  0098                     	;# 
   108  0099                     	;# 
   109  009B                     	;# 
   110  009C                     	;# 
   111  009D                     	;# 
   112  009E                     	;# 
   113  009F                     	;# 
   114  0105                     	;# 
   115  010C                     	;# 
   116  010D                     	;# 
   117  010E                     	;# 
   118  010F                     	;# 
   119  018C                     	;# 
   120  018D                     	;# 
   121  0000                     	;# 
   122  0001                     	;# 
   123  0002                     	;# 
   124  0003                     	;# 
   125  0004                     	;# 
   126  0005                     	;# 
   127  0006                     	;# 
   128  000A                     	;# 
   129  000B                     	;# 
   130  000C                     	;# 
   131  000D                     	;# 
   132  000E                     	;# 
   133  000E                     	;# 
   134  000F                     	;# 
   135  0010                     	;# 
   136  0011                     	;# 
   137  0012                     	;# 
   138  0013                     	;# 
   139  0014                     	;# 
   140  0015                     	;# 
   141  0015                     	;# 
   142  0016                     	;# 
   143  0017                     	;# 
   144  0018                     	;# 
   145  0019                     	;# 
   146  001A                     	;# 
   147  001E                     	;# 
   148  001F                     	;# 
   149  0081                     	;# 
   150  0085                     	;# 
   151  0086                     	;# 
   152  008C                     	;# 
   153  008D                     	;# 
   154  008E                     	;# 
   155  008F                     	;# 
   156  0090                     	;# 
   157  0092                     	;# 
   158  0093                     	;# 
   159  0094                     	;# 
   160  0098                     	;# 
   161  0099                     	;# 
   162  009B                     	;# 
   163  009C                     	;# 
   164  009D                     	;# 
   165  009E                     	;# 
   166  009F                     	;# 
   167  0105                     	;# 
   168  010C                     	;# 
   169  010D                     	;# 
   170  010E                     	;# 
   171  010F                     	;# 
   172  018C                     	;# 
   173  018D                     	;# 
   174                           
   175                           	psect	strings
   176  0349                     __pstrings:	
   177  0349                     stringtab:	
   178  0349                     __stringtab:	
   179  0349                     stringcode:	
   180                           ;	String table - string pointers are 1 byte each
   181                           
   182  0349                     stringdir:	
   183  0349  3003               	movlw	high stringdir
   184  034A  008A               	movwf	10
   185  034B  0804               	movf	4,w
   186  034C  0A84               	incf	4,f
   187  034D  0782               	addwf	2,f
   188  034E                     __stringbase:	
   189  034E  3400               	retlw	0
   190  034F                     __end_of__stringtab:	
   191  034F                     __calc_timer0_prescaler@prescaler_factor:	
   192  034F  3401               	retlw	1
   193  0350  3400               	retlw	0
   194  0351  3402               	retlw	2
   195  0352  3400               	retlw	0
   196  0353  3404               	retlw	4
   197  0354  3400               	retlw	0
   198  0355  3408               	retlw	8
   199  0356  3400               	retlw	0
   200  0357  3410               	retlw	16
   201  0358  3400               	retlw	0
   202  0359  3420               	retlw	32
   203  035A  3400               	retlw	0
   204  035B  3440               	retlw	64
   205  035C  3400               	retlw	0
   206  035D  3480               	retlw	128
   207  035E  3400               	retlw	0
   208  035F  3400               	retlw	0
   209  0360  3401               	retlw	1
   210  0361                     __end_of__calc_timer0_prescaler@prescaler_factor:	
   211  0361                     _symbols:	
   212  0361  340D               	retlw	13
   213  0362  340E               	retlw	14
   214  0363  3413               	retlw	19
   215  0364  3415               	retlw	21
   216  0365  3416               	retlw	22
   217  0366  3419               	retlw	25
   218  0367  341A               	retlw	26
   219  0368  341C               	retlw	28
   220  0369  3423               	retlw	35
   221  036A  3425               	retlw	37
   222  036B  3426               	retlw	38
   223  036C  3429               	retlw	41
   224  036D  342A               	retlw	42
   225  036E  342C               	retlw	44
   226  036F  3432               	retlw	50
   227  0370  3434               	retlw	52
   228  0371                     __end_of_symbols:	
   229  0371                     _vw_tx_buf_header:	
   230  0371  342A               	retlw	42
   231  0372  342A               	retlw	42
   232  0373  342A               	retlw	42
   233  0374  342A               	retlw	42
   234  0375  342A               	retlw	42
   235  0376  342A               	retlw	42
   236  0377  3438               	retlw	56
   237  0378  342C               	retlw	44
   238  0379                     __end_of_vw_tx_buf_header:	
   239  0006                     _PORTB	set	6
   240  001A                     _RCREG	set	26
   241  0018                     _RCSTAbits	set	24
   242  0001                     _TMR0	set	1
   243  0019                     _TXREG	set	25
   244  00C4                     _CREN	set	196
   245  005F                     _GIE	set	95
   246  005E                     _PEIE	set	94
   247  0033                     _RB3	set	51
   248  0034                     _RB4	set	52
   249  0065                     _RCIF	set	101
   250  00C6                     _RX9	set	198
   251  00C7                     _SPEN	set	199
   252  005D                     _TMR0IE	set	93
   253  005A                     _TMR0IF	set	90
   254  0081                     _OPTION_REG	set	129
   255  0099                     _SPBRG	set	153
   256  0086                     _TRISB	set	134
   257  04C2                     _BRGH	set	1218
   258  04C4                     _SYNC	set	1220
   259  040D                     _T0CS	set	1037
   260  0432                     _TRISB2	set	1074
   261  0433                     _TRISB3	set	1075
   262  0434                     _TRISB4	set	1076
   263  0435                     _TRISB5	set	1077
   264  04C1                     _TRMT	set	1217
   265  04C6                     _TX9	set	1222
   266  04C5                     _TXEN	set	1221
   267  0379                     STR_1:	
   268  0379  3450               	retlw	80	;'P'
   269  037A  3449               	retlw	73	;'I'
   270  037B  3443               	retlw	67	;'C'
   271  037C  3420               	retlw	32	;' '
   272  037D  3452               	retlw	82	;'R'
   273  037E  3465               	retlw	101	;'e'
   274  037F  3463               	retlw	99	;'c'
   275  0380  3465               	retlw	101	;'e'
   276  0381  3469               	retlw	105	;'i'
   277  0382  3476               	retlw	118	;'v'
   278  0383  3465               	retlw	101	;'e'
   279  0384  3472               	retlw	114	;'r'
   280  0385  3420               	retlw	32	;' '
   281  0386  3444               	retlw	68	;'D'
   282  0387  3465               	retlw	101	;'e'
   283  0388  346D               	retlw	109	;'m'
   284  0389  346F               	retlw	111	;'o'
   285  038A  340A               	retlw	10
   286  038B  3400               	retlw	0
   287  0379                     
   288                           ; #config settings
   289  0000                     
   290                           	psect	cinit
   291  0013                     start_initialization:	
   292  0013                     __initialization:	
   293                           
   294                           ; Clear objects allocated to COMMON
   295  0013  01FD               	clrf	__pbssCOMMON& (0+127)
   296                           
   297                           ; Clear objects allocated to BANK0
   298  0014  1383               	bcf	3,7	;select IRP bank0
   299  0015  3057               	movlw	low __pbssBANK0
   300  0016  0084               	movwf	4
   301  0017  306B               	movlw	low (__pbssBANK0+20)
   302  0018  118A  24ED  118A   	fcall	clear_ram0
   303                           
   304                           ; Clear objects allocated to BANK1
   305  001B  30A0               	movlw	low __pbssBANK1
   306  001C  0084               	movwf	4
   307  001D  30E8               	movlw	low (__pbssBANK1+72)
   308  001E  118A  24ED         	fcall	clear_ram0
   309  0020                     end_of_initialization:	
   310                           ;End of C runtime variable initialization code
   311                           
   312  0020                     __end_of__initialization:	
   313  0020  0183               	clrf	3
   314  0021  118A  295B         	ljmp	_main	;jump to C main() function
   315                           
   316                           	psect	bssCOMMON
   317  007D                     __pbssCOMMON:	
   318  007D                     _vw_rx_len:	
   319  007D                     	ds	1
   320                           
   321                           	psect	bssBANK0
   322  0057                     __pbssBANK0:	
   323  0057                     _vw_rx_bits:	
   324  0057                     	ds	2
   325  0059                     _vw_rx_active:	
   326  0059                     	ds	1
   327  005A                     _vw_rx_bit_count:	
   328  005A                     	ds	1
   329  005B                     _vw_rx_count:	
   330  005B                     	ds	1
   331  005C                     _vw_rx_done:	
   332  005C                     	ds	1
   333  005D                     _vw_rx_enabled:	
   334  005D                     	ds	1
   335  005E                     _vw_rx_enabled_last:	
   336  005E                     	ds	1
   337  005F                     _vw_rx_integrator:	
   338  005F                     	ds	1
   339  0060                     _vw_rx_inverted:	
   340  0060                     	ds	1
   341  0061                     _vw_rx_last_sample:	
   342  0061                     	ds	1
   343  0062                     _vw_rx_pll_ramp:	
   344  0062                     	ds	1
   345  0063                     _vw_rx_sample:	
   346  0063                     	ds	1
   347  0064                     _vw_tx_bit:	
   348  0064                     	ds	1
   349  0065                     _vw_tx_enabled:	
   350  0065                     	ds	1
   351  0066                     _vw_tx_header:	
   352  0066                     	ds	1
   353  0067                     _vw_tx_index:	
   354  0067                     	ds	1
   355  0068                     _vw_tx_len:	
   356  0068                     	ds	1
   357  0069                     _vw_tx_sample:	
   358  0069                     	ds	1
   359  006A                     _vw_tmr0_value:	
   360  006A                     	ds	1
   361                           
   362                           	psect	bssBANK1
   363  00A0                     __pbssBANK1:	
   364  00A0                     _vw_tx_buf:	
   365  00A0                     	ds	48
   366  00D0                     _text:	
   367  00D0                     	ds	24
   368                           
   369                           	psect	clrtext
   370  04ED                     clear_ram0:	
   371                           ;	Called with FSR containing the base address, and
   372                           ;	W with the last address+1
   373                           
   374  04ED  0064               	clrwdt	;clear the watchdog before getting into this loop
   375  04EE                     clrloop0:	
   376  04EE  0180               	clrf	0	;clear RAM location pointed to by FSR
   377  04EF  0A84               	incf	4,f	;increment pointer
   378  04F0  0604               	xorwf	4,w	;XOR with final address
   379  04F1  1903               	btfsc	3,2	;have we reached the end yet?
   380  04F2  3400               	retlw	0	;all done for this memory range, return
   381  04F3  0604               	xorwf	4,w	;XOR again to restore value
   382  04F4  2CEE               	goto	clrloop0	;do the next byte
   383                           
   384                           	psect	cstackCOMMON
   385  0070                     __pcstackCOMMON:	
   386  0070                     ?_vw_isr_tmr0:	
   387  0070                     ?_vw_rx_start:	
   388                           ; 1 bytes @ 0x0
   389                           
   390  0070                     ?_vw_have_message:	
   391                           ; 1 bytes @ 0x0
   392                           
   393  0070                     ?_UART_Init:	
   394                           ; 1 bytes @ 0x0
   395                           
   396  0070                     ?_UART_send_byte:	
   397                           ; 1 bytes @ 0x0
   398                           
   399  0070                     ?_UART_send_string:	
   400                           ; 1 bytes @ 0x0
   401                           
   402  0070                     ?_global_isr:	
   403                           ; 1 bytes @ 0x0
   404                           
   405  0070                     ?_main:	
   406                           ; 1 bytes @ 0x0
   407                           
   408  0070                     ?_vw_tx_stop:	
   409                           ; 1 bytes @ 0x0
   410                           
   411  0070                     ??_vw_tx_stop:	
   412                           ; 1 bytes @ 0x0
   413                           
   414  0070                     ?_vw_symbol_6to4:	
   415                           ; 1 bytes @ 0x0
   416                           
   417  0070                     ??_vw_symbol_6to4:	
   418                           ; 1 bytes @ 0x0
   419                           
   420  0070                     ?_vw_pll:	
   421                           ; 1 bytes @ 0x0
   422                           
   423                           
   424                           ; 1 bytes @ 0x0
   425  0070                     	ds	1
   426  0071                     vw_symbol_6to4@symbol:	
   427                           
   428                           ; 1 bytes @ 0x1
   429  0071                     	ds	1
   430  0072                     vw_symbol_6to4@i:	
   431                           
   432                           ; 1 bytes @ 0x2
   433  0072                     	ds	1
   434  0073                     ??_vw_pll:	
   435                           
   436                           ; 1 bytes @ 0x3
   437  0073                     	ds	5
   438  0078                     _vw_pll$225:	
   439                           
   440                           ; 2 bytes @ 0x8
   441  0078                     	ds	2
   442  007A                     vw_pll@this_byte:	
   443                           
   444                           ; 1 bytes @ 0xA
   445  007A                     	ds	1
   446  007B                     ??_vw_isr_tmr0:	
   447                           
   448                           ; 1 bytes @ 0xB
   449  007B                     	ds	2
   450                           
   451                           	psect	cstackBANK0
   452  0020                     __pcstackBANK0:	
   453  0020                     ??_global_isr:	
   454                           
   455                           ; 1 bytes @ 0x0
   456  0020                     	ds	4
   457  0024                     ??_vw_rx_start:	
   458  0024                     ??_vw_have_message:	
   459                           ; 1 bytes @ 0x4
   460                           
   461  0024                     ??_UART_Init:	
   462                           ; 1 bytes @ 0x4
   463                           
   464  0024                     ??_UART_send_byte:	
   465                           ; 1 bytes @ 0x4
   466                           
   467  0024                     ?_memcpy:	
   468                           ; 1 bytes @ 0x4
   469                           
   470  0024                     ?__crc_ccitt_update:	
   471                           ; 1 bytes @ 0x4
   472                           
   473  0024                     ?___wmul:	
   474                           ; 2 bytes @ 0x4
   475                           
   476  0024                     UART_send_byte@single_byte:	
   477                           ; 2 bytes @ 0x4
   478                           
   479  0024                     memcpy@src:	
   480                           ; 1 bytes @ 0x4
   481                           
   482  0024                     __crc_ccitt_update@crc:	
   483                           ; 1 bytes @ 0x4
   484                           
   485  0024                     ___wmul@multiplier:	
   486                           ; 2 bytes @ 0x4
   487                           
   488                           
   489                           ; 2 bytes @ 0x4
   490  0024                     	ds	1
   491  0025                     ??_UART_send_string:	
   492  0025                     memcpy@n:	
   493                           ; 1 bytes @ 0x5
   494                           
   495                           
   496                           ; 2 bytes @ 0x5
   497  0025                     	ds	1
   498  0026                     UART_send_string@str:	
   499  0026                     __crc_ccitt_update@data:	
   500                           ; 1 bytes @ 0x6
   501                           
   502  0026                     ___wmul@multiplicand:	
   503                           ; 1 bytes @ 0x6
   504                           
   505                           
   506                           ; 2 bytes @ 0x6
   507  0026                     	ds	1
   508  0027                     ??__crc_ccitt_update:	
   509  0027                     ??_memcpy:	
   510                           ; 1 bytes @ 0x7
   511                           
   512                           
   513                           ; 1 bytes @ 0x7
   514  0027                     	ds	1
   515  0028                     ??___wmul:	
   516  0028                     ___wmul@product:	
   517                           ; 1 bytes @ 0x8
   518                           
   519                           
   520                           ; 2 bytes @ 0x8
   521  0028                     	ds	2
   522  002A                     ?___aldiv:	
   523  002A                     memcpy@dest:	
   524                           ; 4 bytes @ 0xA
   525                           
   526  002A                     ___aldiv@divisor:	
   527                           ; 1 bytes @ 0xA
   528                           
   529                           
   530                           ; 4 bytes @ 0xA
   531  002A                     	ds	4
   532  002E                     ___aldiv@dividend:	
   533                           
   534                           ; 4 bytes @ 0xE
   535  002E                     	ds	4
   536  0032                     ??___aldiv:	
   537                           
   538                           ; 1 bytes @ 0x12
   539  0032                     	ds	1
   540  0033                     ___aldiv@counter:	
   541                           
   542                           ; 1 bytes @ 0x13
   543  0033                     	ds	1
   544  0034                     ?_vw_crc:	
   545  0034                     vw_crc@count:	
   546                           ; 2 bytes @ 0x14
   547                           
   548  0034                     ___aldiv@sign:	
   549                           ; 1 bytes @ 0x14
   550                           
   551                           
   552                           ; 1 bytes @ 0x14
   553  0034                     	ds	1
   554  0035                     ___aldiv@quotient:	
   555                           
   556                           ; 4 bytes @ 0x15
   557  0035                     	ds	1
   558  0036                     ??_vw_crc:	
   559                           
   560                           ; 1 bytes @ 0x16
   561  0036                     	ds	1
   562  0037                     vw_crc@ptr:	
   563                           
   564                           ; 1 bytes @ 0x17
   565  0037                     	ds	1
   566  0038                     vw_crc@crc:	
   567                           
   568                           ; 2 bytes @ 0x18
   569  0038                     	ds	1
   570  0039                     ?__calc_timer0_prescaler:	
   571  0039                     __calc_timer0_prescaler@brate:	
   572                           ; 1 bytes @ 0x19
   573                           
   574                           
   575                           ; 2 bytes @ 0x19
   576  0039                     	ds	1
   577  003A                     ?_vw_recv:	
   578  003A                     vw_recv@len:	
   579                           ; 1 bytes @ 0x1A
   580                           
   581                           
   582                           ; 1 bytes @ 0x1A
   583  003A                     	ds	1
   584  003B                     ??_vw_recv:	
   585  003B                     __calc_timer0_prescaler@prescaler_value:	
   586                           ; 1 bytes @ 0x1B
   587                           
   588                           
   589                           ; 1 bytes @ 0x1B
   590  003B                     	ds	1
   591  003C                     __calc_timer0_prescaler@prescaler_bits:	
   592                           
   593                           ; 1 bytes @ 0x1C
   594  003C                     	ds	1
   595  003D                     __calc_timer0_prescaler@k_tmr0:	
   596                           
   597                           ; 1 bytes @ 0x1D
   598  003D                     	ds	1
   599  003E                     ??__calc_timer0_prescaler:	
   600  003E                     vw_recv@buf:	
   601                           ; 1 bytes @ 0x1E
   602                           
   603                           
   604                           ; 1 bytes @ 0x1E
   605  003E                     	ds	1
   606  003F                     vw_recv@rxlen:	
   607                           
   608                           ; 1 bytes @ 0x1F
   609  003F                     	ds	7
   610  0046                     __calc_timer0_prescaler@aux_tmr0:	
   611                           
   612                           ; 2 bytes @ 0x26
   613  0046                     	ds	2
   614  0048                     __calc_timer0_prescaler@pindex:	
   615                           
   616                           ; 1 bytes @ 0x28
   617  0048                     	ds	1
   618  0049                     ?_vw_setup:	
   619  0049                     vw_setup@brate:	
   620                           ; 1 bytes @ 0x29
   621                           
   622                           
   623                           ; 2 bytes @ 0x29
   624  0049                     	ds	2
   625  004B                     ??_vw_setup:	
   626                           
   627                           ; 1 bytes @ 0x2B
   628  004B                     	ds	3
   629  004E                     vw_setup@prescaler_value:	
   630                           
   631                           ; 2 bytes @ 0x2E
   632  004E                     	ds	2
   633  0050                     vw_setup@prescaler_bits:	
   634                           
   635                           ; 1 bytes @ 0x30
   636  0050                     	ds	1
   637  0051                     ??_main:	
   638                           
   639                           ; 1 bytes @ 0x31
   640  0051                     	ds	3
   641  0054                     main@i:	
   642                           
   643                           ; 2 bytes @ 0x34
   644  0054                     	ds	2
   645  0056                     main@len:	
   646                           
   647                           ; 1 bytes @ 0x36
   648  0056                     	ds	1
   649                           
   650                           	psect	maintext
   651  015B                     __pmaintext:	
   652 ;;
   653 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   654 ;;
   655 ;; *************** function _main *****************
   656 ;; Defined at:
   657 ;;		line 21 in file "main.c"
   658 ;; Parameters:    Size  Location     Type
   659 ;;		None
   660 ;; Auto vars:     Size  Location     Type
   661 ;;  len             1   54[BANK0 ] unsigned char 
   662 ;;  i               2   52[BANK0 ] unsigned int 
   663 ;; Return value:  Size  Location     Type
   664 ;;                  1    wreg      void 
   665 ;; Registers used:
   666 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   667 ;; Tracked objects:
   668 ;;		On entry : B00/0
   669 ;;		On exit  : 0/0
   670 ;;		Unchanged: 0/0
   671 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   672 ;;      Params:         0       0       0       0       0
   673 ;;      Locals:         0       3       0       0       0
   674 ;;      Temps:          0       3       0       0       0
   675 ;;      Totals:         0       6       0       0       0
   676 ;;Total ram usage:        6 bytes
   677 ;; Hardware stack levels required when called:    8
   678 ;; This function calls:
   679 ;;		_UART_Init
   680 ;;		_UART_send_byte
   681 ;;		_UART_send_string
   682 ;;		_vw_have_message
   683 ;;		_vw_recv
   684 ;;		_vw_rx_start
   685 ;;		_vw_setup
   686 ;; This function is called by:
   687 ;;		Startup code after reset
   688 ;; This function uses a non-reentrant model
   689 ;;
   690                           
   691                           
   692                           ;psect for function _main
   693  015B                     _main:	
   694                           
   695                           ;main.c: 22: TRISB = 0;
   696                           
   697                           ;incstack = 0
   698                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   699  015B  1683               	bsf	3,5	;RP0=1, select bank1
   700  015C  1303               	bcf	3,6	;RP1=0, select bank1
   701  015D  0186               	clrf	6	;volatile
   702                           
   703                           ;main.c: 23: PORTB = 0;
   704  015E  1283               	bcf	3,5	;RP0=0, select bank0
   705  015F  1303               	bcf	3,6	;RP1=0, select bank0
   706  0160  0186               	clrf	6	;volatile
   707                           
   708                           ;main.c: 26: uint16_t i;
   709                           ;main.c: 29: UART_Init();
   710  0161  118A  24B2  118A   	fcall	_UART_Init
   711                           
   712                           ;main.c: 32: vw_setup(200);
   713  0164  30C8               	movlw	200
   714  0165  1283               	bcf	3,5	;RP0=0, select bank0
   715  0166  1303               	bcf	3,6	;RP1=0, select bank0
   716  0167  00C9               	movwf	vw_setup@brate
   717  0168  3000               	movlw	0
   718  0169  00CA               	movwf	vw_setup@brate+1
   719  016A  118A  238C  118A   	fcall	_vw_setup
   720                           
   721                           ;main.c: 36: UART_send_string((char *) "PIC Receiver Demo\n");
   722  016D  302B               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   723  016E  118A  2498  118A   	fcall	_UART_send_string
   724                           
   725                           ;main.c: 37: UART_send_byte(0xD);
   726  0171  300D               	movlw	13
   727  0172  118A  24D8  118A   	fcall	_UART_send_byte
   728                           
   729                           ;main.c: 38: UART_send_byte(0xA);
   730  0175  300A               	movlw	10
   731  0176  118A  24D8  118A   	fcall	_UART_send_byte
   732                           
   733                           ;main.c: 40: _delay((unsigned long)((1000)*(12000000/4000.0)));
   734  0179  3010               	movlw	16
   735  017A  1283               	bcf	3,5	;RP0=0, select bank0
   736  017B  1303               	bcf	3,6	;RP1=0, select bank0
   737  017C  00D3               	movwf	??_main+2
   738  017D  3039               	movlw	57
   739  017E  00D2               	movwf	??_main+1
   740  017F  300D               	movlw	13
   741  0180  00D1               	movwf	??_main
   742  0181                     u1757:	
   743  0181  0BD1               	decfsz	??_main,f
   744  0182  2981               	goto	u1757
   745  0183  0BD2               	decfsz	??_main+1,f
   746  0184  2981               	goto	u1757
   747  0185  0BD3               	decfsz	??_main+2,f
   748  0186  2981               	goto	u1757
   749                           
   750                           ;main.c: 42: UART_send_string((char *) "PIC Receiver Demo\n");
   751  0187  302B               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   752  0188  118A  2498  118A   	fcall	_UART_send_string
   753                           
   754                           ;main.c: 43: UART_send_byte(0xD);
   755  018B  300D               	movlw	13
   756  018C  118A  24D8  118A   	fcall	_UART_send_byte
   757                           
   758                           ;main.c: 44: UART_send_byte(0xA);
   759  018F  300A               	movlw	10
   760  0190  118A  24D8  118A   	fcall	_UART_send_byte
   761                           
   762                           ;main.c: 46: _delay((unsigned long)((1000)*(12000000/4000.0)));
   763  0193  3010               	movlw	16
   764  0194  1283               	bcf	3,5	;RP0=0, select bank0
   765  0195  1303               	bcf	3,6	;RP1=0, select bank0
   766  0196  00D3               	movwf	??_main+2
   767  0197  3039               	movlw	57
   768  0198  00D2               	movwf	??_main+1
   769  0199  300D               	movlw	13
   770  019A  00D1               	movwf	??_main
   771  019B                     u1767:	
   772  019B  0BD1               	decfsz	??_main,f
   773  019C  299B               	goto	u1767
   774  019D  0BD2               	decfsz	??_main+1,f
   775  019E  299B               	goto	u1767
   776  019F  0BD3               	decfsz	??_main+2,f
   777  01A0  299B               	goto	u1767
   778                           
   779                           ;main.c: 48: UART_send_string((char *) "PIC Receiver Demo\n");
   780  01A1  302B               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   781  01A2  118A  2498  118A   	fcall	_UART_send_string
   782                           
   783                           ;main.c: 49: UART_send_byte(0xD);
   784  01A5  300D               	movlw	13
   785  01A6  118A  24D8  118A   	fcall	_UART_send_byte
   786                           
   787                           ;main.c: 50: UART_send_byte(0xA);
   788  01A9  300A               	movlw	10
   789  01AA  118A  24D8  118A   	fcall	_UART_send_byte
   790                           
   791                           ;main.c: 52: vw_rx_start();
   792  01AD  118A  24F5  118A   	fcall	_vw_rx_start
   793  01B0                     l1621:	
   794                           ;main.c: 54: while(1){
   795                           
   796                           
   797                           ;main.c: 55: if (vw_have_message()){
   798  01B0  118A  24E4  118A   	fcall	_vw_have_message
   799  01B3  3A00               	xorlw	0
   800  01B4  1903               	skipnz
   801  01B5  29B0               	goto	l1621
   802                           
   803                           ;main.c: 57: uint8_t len = 24;
   804  01B6  3018               	movlw	24
   805  01B7  1283               	bcf	3,5	;RP0=0, select bank0
   806  01B8  1303               	bcf	3,6	;RP1=0, select bank0
   807  01B9  00D1               	movwf	??_main
   808  01BA  0851               	movf	??_main,w
   809  01BB  00D6               	movwf	main@len
   810                           
   811                           ;main.c: 59: if (vw_recv(text, &len)){
   812  01BC  3056               	movlw	(low (main@len| 0))& (0+255)
   813  01BD  00D1               	movwf	??_main
   814  01BE  0851               	movf	??_main,w
   815  01BF  00BA               	movwf	vw_recv@len
   816  01C0  30D0               	movlw	(low (_text| 0))& (0+255)
   817  01C1  118A  23CF  118A   	fcall	_vw_recv
   818  01C4  3A00               	xorlw	0
   819  01C5  1903               	skipnz
   820  01C6  29B0               	goto	l1621
   821                           
   822                           ;main.c: 61: for (i = 0; i < len; i++){
   823  01C7  1283               	bcf	3,5	;RP0=0, select bank0
   824  01C8  1303               	bcf	3,6	;RP1=0, select bank0
   825  01C9  01D4               	clrf	main@i
   826  01CA  01D5               	clrf	main@i+1
   827  01CB                     l1633:	
   828  01CB  0856               	movf	main@len,w
   829  01CC  00D1               	movwf	??_main
   830  01CD  01D2               	clrf	??_main+1
   831  01CE  0852               	movf	??_main+1,w
   832  01CF  0255               	subwf	main@i+1,w
   833  01D0  1D03               	skipz
   834  01D1  29D4               	goto	u1695
   835  01D2  0851               	movf	??_main,w
   836  01D3  0254               	subwf	main@i,w
   837  01D4                     u1695:	
   838  01D4  1803               	btfsc	3,0
   839  01D5  29E7               	goto	l1635
   840                           
   841                           ;main.c: 62: UART_send_byte(text[i]);
   842  01D6  0854               	movf	main@i,w
   843  01D7  3ED0               	addlw	(low (_text| 0))& (0+255)
   844  01D8  0084               	movwf	4
   845  01D9  1383               	bcf	3,7	;select IRP bank1
   846  01DA  0800               	movf	0,w
   847  01DB  118A  24D8  118A   	fcall	_UART_send_byte
   848  01DE  3001               	movlw	1
   849  01DF  1283               	bcf	3,5	;RP0=0, select bank0
   850  01E0  1303               	bcf	3,6	;RP1=0, select bank0
   851  01E1  07D4               	addwf	main@i,f
   852  01E2  1803               	skipnc
   853  01E3  0AD5               	incf	main@i+1,f
   854  01E4  3000               	movlw	0
   855  01E5  07D5               	addwf	main@i+1,f
   856  01E6  29CB               	goto	l1633
   857  01E7                     l1635:	
   858                           
   859                           ;main.c: 63: }
   860                           ;main.c: 65: UART_send_byte(0xD);
   861  01E7  300D               	movlw	13
   862  01E8  118A  24D8  118A   	fcall	_UART_send_byte
   863                           
   864                           ;main.c: 66: UART_send_byte(0xA);
   865  01EB  300A               	movlw	10
   866  01EC  118A  24D8  118A   	fcall	_UART_send_byte
   867  01EF  29B0               	goto	l1621
   868  01F0                     __end_of_main:	
   869                           
   870                           	psect	text1
   871  038C                     __ptext1:	
   872 ;; *************** function _vw_setup *****************
   873 ;; Defined at:
   874 ;;		line 123 in file "virtualwire.c"
   875 ;; Parameters:    Size  Location     Type
   876 ;;  brate           2   41[BANK0 ] unsigned int 
   877 ;; Auto vars:     Size  Location     Type
   878 ;;  prescaler_va    2   46[BANK0 ] unsigned int 
   879 ;;  prescaler_bi    1   48[BANK0 ] unsigned char 
   880 ;; Return value:  Size  Location     Type
   881 ;;                  1    wreg      void 
   882 ;; Registers used:
   883 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   884 ;; Tracked objects:
   885 ;;		On entry : 0/0
   886 ;;		On exit  : 0/0
   887 ;;		Unchanged: 0/0
   888 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   889 ;;      Params:         0       2       0       0       0
   890 ;;      Locals:         0       3       0       0       0
   891 ;;      Temps:          0       3       0       0       0
   892 ;;      Totals:         0       8       0       0       0
   893 ;;Total ram usage:        8 bytes
   894 ;; Hardware stack levels used:    1
   895 ;; Hardware stack levels required when called:    7
   896 ;; This function calls:
   897 ;;		__calc_timer0_prescaler
   898 ;; This function is called by:
   899 ;;		_main
   900 ;; This function uses a non-reentrant model
   901 ;;
   902                           
   903                           
   904                           ;psect for function _vw_setup
   905  038C                     _vw_setup:	
   906                           
   907                           ;virtualwire.c: 125: uint16_t prescaler_value;
   908                           ;virtualwire.c: 126: uint8_t prescaler_bits;
   909                           ;virtualwire.c: 129: TRISB3 = 1;
   910                           
   911                           ;incstack = 0
   912                           ; Regs used in _vw_setup: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   913  038C  1683               	bsf	3,5	;RP0=1, select bank1
   914  038D  1303               	bcf	3,6	;RP1=0, select bank1
   915  038E  1586               	bsf	6,3	;volatile
   916                           
   917                           ;virtualwire.c: 130: TRISB4 = 0;
   918  038F  1206               	bcf	6,4	;volatile
   919                           
   920                           ;virtualwire.c: 133: RB4 = 0;
   921  0390  1283               	bcf	3,5	;RP0=0, select bank0
   922  0391  1303               	bcf	3,6	;RP1=0, select bank0
   923  0392  1206               	bcf	6,4	;volatile
   924                           
   925                           ;virtualwire.c: 136: _calc_timer0_prescaler(brate, &prescaler_value, &prescaler_bits, &v
      +                          w_tmr0_value);
   926  0393  084A               	movf	vw_setup@brate+1,w
   927  0394  00BA               	movwf	__calc_timer0_prescaler@brate+1
   928  0395  0849               	movf	vw_setup@brate,w
   929  0396  00B9               	movwf	__calc_timer0_prescaler@brate
   930  0397  304E               	movlw	(low (vw_setup@prescaler_value| 0))& (0+255)
   931  0398  00CB               	movwf	??_vw_setup
   932  0399  084B               	movf	??_vw_setup,w
   933  039A  00BB               	movwf	__calc_timer0_prescaler@prescaler_value
   934  039B  3050               	movlw	(low (vw_setup@prescaler_bits| 0))& (0+255)
   935  039C  00CC               	movwf	??_vw_setup+1
   936  039D  084C               	movf	??_vw_setup+1,w
   937  039E  00BC               	movwf	__calc_timer0_prescaler@prescaler_bits
   938  039F  306A               	movlw	(low (_vw_tmr0_value| 0))& (0+255)
   939  03A0  00CD               	movwf	??_vw_setup+2
   940  03A1  084D               	movf	??_vw_setup+2,w
   941  03A2  00BD               	movwf	__calc_timer0_prescaler@k_tmr0
   942  03A3  118A  227F  118A   	fcall	__calc_timer0_prescaler
   943                           
   944                           ;virtualwire.c: 138: if (prescaler_value > 1)
   945  03A6  3000               	movlw	0
   946  03A7  1283               	bcf	3,5	;RP0=0, select bank0
   947  03A8  1303               	bcf	3,6	;RP1=0, select bank0
   948  03A9  024F               	subwf	vw_setup@prescaler_value+1,w
   949  03AA  3002               	movlw	2
   950  03AB  1903               	skipnz
   951  03AC  024E               	subwf	vw_setup@prescaler_value,w
   952  03AD  1C03               	skipc
   953  03AE  2BBD               	goto	l1543
   954                           
   955                           ;virtualwire.c: 139: {
   956                           ;virtualwire.c: 141: OPTION_REG &= 0xF0;
   957  03AF  30F0               	movlw	240
   958  03B0  00CB               	movwf	??_vw_setup
   959  03B1  084B               	movf	??_vw_setup,w
   960  03B2  1683               	bsf	3,5	;RP0=1, select bank1
   961  03B3  1303               	bcf	3,6	;RP1=0, select bank1
   962  03B4  0581               	andwf	1,f	;volatile
   963                           
   964                           ;virtualwire.c: 142: OPTION_REG |= prescaler_bits;
   965  03B5  1283               	bcf	3,5	;RP0=0, select bank0
   966  03B6  1303               	bcf	3,6	;RP1=0, select bank0
   967  03B7  0850               	movf	vw_setup@prescaler_bits,w
   968  03B8  00CB               	movwf	??_vw_setup
   969  03B9  084B               	movf	??_vw_setup,w
   970  03BA  1683               	bsf	3,5	;RP0=1, select bank1
   971  03BB  1303               	bcf	3,6	;RP1=0, select bank1
   972  03BC  0481               	iorwf	1,f	;volatile
   973  03BD                     l1543:	
   974                           
   975                           ;virtualwire.c: 143: }
   976                           ;virtualwire.c: 145: T0CS = 0;
   977  03BD  1683               	bsf	3,5	;RP0=1, select bank1
   978  03BE  1303               	bcf	3,6	;RP1=0, select bank1
   979  03BF  1281               	bcf	1,5	;volatile
   980                           
   981                           ;virtualwire.c: 146: TMR0 = (2 - vw_tmr0_value);
   982  03C0  1283               	bcf	3,5	;RP0=0, select bank0
   983  03C1  1303               	bcf	3,6	;RP1=0, select bank0
   984  03C2  036A               	decf	_vw_tmr0_value,w
   985  03C3  3AFF               	xorlw	255
   986  03C4  3E02               	addlw	2
   987  03C5  0081               	movwf	1	;volatile
   988                           
   989                           ;virtualwire.c: 148: TMR0IF = 0;
   990  03C6  110B               	bcf	11,2	;volatile
   991                           
   992                           ;virtualwire.c: 149: TMR0IE = 1;
   993  03C7  168B               	bsf	11,5	;volatile
   994                           
   995                           ;virtualwire.c: 150: GIE = PEIE = 1;
   996  03C8  170B               	bsf	11,6	;volatile
   997  03C9  1F0B               	btfss	11,6	;volatile
   998  03CA  2BCD               	goto	u1570
   999  03CB  178B               	bsf	11,7	;volatile
  1000  03CC  0008               	return
  1001  03CD                     u1570:	
  1002  03CD  138B               	bcf	11,7	;volatile
  1003  03CE  0008               	return
  1004  03CF                     __end_of_vw_setup:	
  1005                           
  1006                           	psect	text2
  1007  027F                     __ptext2:	
  1008 ;; *************** function __calc_timer0_prescaler *****************
  1009 ;; Defined at:
  1010 ;;		line 97 in file "virtualwire.c"
  1011 ;; Parameters:    Size  Location     Type
  1012 ;;  brate           2   25[BANK0 ] unsigned int 
  1013 ;;  prescaler_va    1   27[BANK0 ] PTR unsigned int 
  1014 ;;		 -> vw_setup@prescaler_value(2), 
  1015 ;;  prescaler_bi    1   28[BANK0 ] PTR unsigned char 
  1016 ;;		 -> vw_setup@prescaler_bits(1), 
  1017 ;;  k_tmr0          1   29[BANK0 ] PTR unsigned char 
  1018 ;;		 -> vw_tmr0_value(1), 
  1019 ;; Auto vars:     Size  Location     Type
  1020 ;;  aux_tmr0        2   38[BANK0 ] unsigned int 
  1021 ;;  pindex          1   40[BANK0 ] unsigned char 
  1022 ;; Return value:  Size  Location     Type
  1023 ;;                  1    wreg      unsigned char 
  1024 ;; Registers used:
  1025 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1026 ;; Tracked objects:
  1027 ;;		On entry : 0/0
  1028 ;;		On exit  : 0/0
  1029 ;;		Unchanged: 0/0
  1030 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1031 ;;      Params:         0       5       0       0       0
  1032 ;;      Locals:         0       3       0       0       0
  1033 ;;      Temps:          0       8       0       0       0
  1034 ;;      Totals:         0      16       0       0       0
  1035 ;;Total ram usage:       16 bytes
  1036 ;; Hardware stack levels used:    1
  1037 ;; Hardware stack levels required when called:    6
  1038 ;; This function calls:
  1039 ;;		___aldiv
  1040 ;;		___wmul
  1041 ;; This function is called by:
  1042 ;;		_vw_setup
  1043 ;; This function uses a non-reentrant model
  1044 ;;
  1045                           
  1046                           
  1047                           ;psect for function __calc_timer0_prescaler
  1048  027F                     __calc_timer0_prescaler:	
  1049                           
  1050                           ;virtualwire.c: 99: const uint16_t prescaler_factor[] = {1, 2, 4, 8, 16, 32, 64, 128, 25
      +                          6};
  1051                           ;virtualwire.c: 100: uint8_t pindex;
  1052                           ;virtualwire.c: 101: uint16_t aux_tmr0;
  1053                           ;virtualwire.c: 103: for (pindex = 0; pindex < 8; pindex++)
  1054                           
  1055                           ;incstack = 0
  1056 ;; using string table level
  1057                           ; Regs used in __calc_timer0_prescaler: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cst
      +                          ack]
  1058  027F  1283               	bcf	3,5	;RP0=0, select bank0
  1059  0280  1303               	bcf	3,6	;RP1=0, select bank0
  1060  0281  01C8               	clrf	__calc_timer0_prescaler@pindex
  1061  0282                     L1:	
  1062  0282  3008               	movlw	8
  1063  0283  0248               	subwf	__calc_timer0_prescaler@pindex,w
  1064  0284  1803               	btfsc	3,0
  1065  0285  0008               	return
  1066                           
  1067                           ;virtualwire.c: 104: {
  1068                           ;virtualwire.c: 105: *prescaler_value = prescaler_factor[pindex];
  1069  0286  0848               	movf	__calc_timer0_prescaler@pindex,w
  1070  0287  00BE               	movwf	??__calc_timer0_prescaler
  1071  0288  073E               	addwf	??__calc_timer0_prescaler,w
  1072  0289  3E01               	addlw	low ((__calc_timer0_prescaler@prescaler_factor-__stringbase)| (0+32768))
  1073  028A  0084               	movwf	4
  1074  028B  118A  2349  118A   	fcall	stringdir
  1075  028E  00BF               	movwf	??__calc_timer0_prescaler+1
  1076  028F  118A  2349  118A   	fcall	stringdir
  1077  0292  00C0               	movwf	??__calc_timer0_prescaler+2
  1078  0293  083B               	movf	__calc_timer0_prescaler@prescaler_value,w
  1079  0294  0084               	movwf	4
  1080  0295  083F               	movf	??__calc_timer0_prescaler+1,w
  1081  0296  1383               	bcf	3,7	;select IRP bank0
  1082  0297  0080               	movwf	0
  1083  0298  0A84               	incf	4,f
  1084  0299  0840               	movf	??__calc_timer0_prescaler+2,w
  1085  029A  0080               	movwf	0
  1086                           
  1087                           ;virtualwire.c: 106: aux_tmr0 = 12000000 / (4 * (*prescaler_value) * brate * 8);
  1088  029B  083A               	movf	__calc_timer0_prescaler@brate+1,w
  1089  029C  00A7               	movwf	___wmul@multiplicand+1
  1090  029D  0839               	movf	__calc_timer0_prescaler@brate,w
  1091  029E  00A6               	movwf	___wmul@multiplicand
  1092  029F  083B               	movf	__calc_timer0_prescaler@prescaler_value,w
  1093  02A0  0084               	movwf	4
  1094  02A1  0800               	movf	0,w
  1095  02A2  00BE               	movwf	??__calc_timer0_prescaler
  1096  02A3  0A84               	incf	4,f
  1097  02A4  0800               	movf	0,w
  1098  02A5  00BF               	movwf	??__calc_timer0_prescaler+1
  1099  02A6  1003               	clrc
  1100  02A7  0DBE               	rlf	??__calc_timer0_prescaler,f
  1101  02A8  0DBF               	rlf	??__calc_timer0_prescaler+1,f
  1102  02A9  1003               	clrc
  1103  02AA  0DBE               	rlf	??__calc_timer0_prescaler,f
  1104  02AB  0DBF               	rlf	??__calc_timer0_prescaler+1,f
  1105  02AC  083E               	movf	??__calc_timer0_prescaler,w
  1106  02AD  00A4               	movwf	___wmul@multiplier
  1107  02AE  083F               	movf	??__calc_timer0_prescaler+1,w
  1108  02AF  00A5               	movwf	___wmul@multiplier+1
  1109  02B0  118A  243C  118A   	fcall	___wmul
  1110  02B3  1283               	bcf	3,5	;RP0=0, select bank0
  1111  02B4  1303               	bcf	3,6	;RP1=0, select bank0
  1112  02B5  0824               	movf	?___wmul,w
  1113  02B6  00C0               	movwf	??__calc_timer0_prescaler+2
  1114  02B7  0825               	movf	?___wmul+1,w
  1115  02B8  00C1               	movwf	??__calc_timer0_prescaler+3
  1116  02B9  1003               	clrc
  1117  02BA  0DC0               	rlf	??__calc_timer0_prescaler+2,f
  1118  02BB  0DC1               	rlf	??__calc_timer0_prescaler+3,f
  1119  02BC  1003               	clrc
  1120  02BD  0DC0               	rlf	??__calc_timer0_prescaler+2,f
  1121  02BE  0DC1               	rlf	??__calc_timer0_prescaler+3,f
  1122  02BF  1003               	clrc
  1123  02C0  0DC0               	rlf	??__calc_timer0_prescaler+2,f
  1124  02C1  0DC1               	rlf	??__calc_timer0_prescaler+3,f
  1125  02C2  0840               	movf	??__calc_timer0_prescaler+2,w
  1126  02C3  00C2               	movwf	??__calc_timer0_prescaler+4
  1127  02C4  0841               	movf	??__calc_timer0_prescaler+3,w
  1128  02C5  00C3               	movwf	??__calc_timer0_prescaler+5
  1129  02C6  01C4               	clrf	??__calc_timer0_prescaler+6
  1130  02C7  01C5               	clrf	??__calc_timer0_prescaler+7
  1131  02C8  0845               	movf	??__calc_timer0_prescaler+7,w
  1132  02C9  00AD               	movwf	___aldiv@divisor+3
  1133  02CA  0844               	movf	??__calc_timer0_prescaler+6,w
  1134  02CB  00AC               	movwf	___aldiv@divisor+2
  1135  02CC  0843               	movf	??__calc_timer0_prescaler+5,w
  1136  02CD  00AB               	movwf	___aldiv@divisor+1
  1137  02CE  0842               	movf	??__calc_timer0_prescaler+4,w
  1138  02CF  00AA               	movwf	___aldiv@divisor
  1139  02D0  3000               	movlw	0
  1140  02D1  00B1               	movwf	___aldiv@dividend+3
  1141  02D2  30B7               	movlw	183
  1142  02D3  00B0               	movwf	___aldiv@dividend+2
  1143  02D4  301B               	movlw	27
  1144  02D5  00AF               	movwf	___aldiv@dividend+1
  1145  02D6  3000               	movlw	0
  1146  02D7  00AE               	movwf	___aldiv@dividend
  1147  02D8  118A  21F0  118A   	fcall	___aldiv
  1148  02DB  1283               	bcf	3,5	;RP0=0, select bank0
  1149  02DC  1303               	bcf	3,6	;RP1=0, select bank0
  1150  02DD  082B               	movf	?___aldiv+1,w
  1151  02DE  00C7               	movwf	__calc_timer0_prescaler@aux_tmr0+1
  1152  02DF  082A               	movf	?___aldiv,w
  1153  02E0  00C6               	movwf	__calc_timer0_prescaler@aux_tmr0
  1154                           
  1155                           ;virtualwire.c: 108: if (aux_tmr0 < 256)
  1156  02E1  3001               	movlw	1
  1157  02E2  0247               	subwf	__calc_timer0_prescaler@aux_tmr0+1,w
  1158  02E3  3000               	movlw	0
  1159  02E4  1903               	skipnz
  1160  02E5  0246               	subwf	__calc_timer0_prescaler@aux_tmr0,w
  1161  02E6  1803               	skipnc
  1162  02E7  2AFA               	goto	l1369
  1163                           
  1164                           ;virtualwire.c: 109: {
  1165                           ;virtualwire.c: 110: *k_tmr0 = aux_tmr0;
  1166  02E8  0846               	movf	__calc_timer0_prescaler@aux_tmr0,w
  1167  02E9  00BE               	movwf	??__calc_timer0_prescaler
  1168  02EA  083D               	movf	__calc_timer0_prescaler@k_tmr0,w
  1169  02EB  0084               	movwf	4
  1170  02EC  083E               	movf	??__calc_timer0_prescaler,w
  1171  02ED  1383               	bcf	3,7	;select IRP bank0
  1172  02EE  0080               	movwf	0
  1173                           
  1174                           ;virtualwire.c: 111: if (pindex > 0)
  1175  02EF  0848               	movf	__calc_timer0_prescaler@pindex,w
  1176  02F0  1903               	btfsc	3,2
  1177  02F1  0008               	return
  1178                           
  1179                           ;virtualwire.c: 112: {
  1180                           ;virtualwire.c: 113: *prescaler_bits = pindex - 1;
  1181  02F2  0848               	movf	__calc_timer0_prescaler@pindex,w
  1182  02F3  3EFF               	addlw	255
  1183  02F4  00BE               	movwf	??__calc_timer0_prescaler
  1184  02F5  083C               	movf	__calc_timer0_prescaler@prescaler_bits,w
  1185  02F6  0084               	movwf	4
  1186  02F7  083E               	movf	??__calc_timer0_prescaler,w
  1187  02F8  0080               	movwf	0
  1188                           
  1189                           ;virtualwire.c: 114: }
  1190                           ;virtualwire.c: 115: return 1;
  1191                           ;	Return value of __calc_timer0_prescaler is never used
  1192  02F9  0008               	return
  1193  02FA                     l1369:	
  1194  02FA  3001               	movlw	1
  1195  02FB  00BE               	movwf	??__calc_timer0_prescaler
  1196  02FC  083E               	movf	??__calc_timer0_prescaler,w
  1197  02FD  07C8               	addwf	__calc_timer0_prescaler@pindex,f
  1198  02FE  2A82               	goto	L1
  1199  02FF                     __end_of__calc_timer0_prescaler:	
  1200                           ;virtualwire.c: 116: }
  1201                           ;virtualwire.c: 117: }
  1202                           ;virtualwire.c: 120: return 0;
  1203                           ;	Return value of __calc_timer0_prescaler is never used
  1204                           
  1205                           
  1206                           	psect	text3
  1207  043C                     __ptext3:	
  1208 ;; *************** function ___wmul *****************
  1209 ;; Defined at:
  1210 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  1211 ;; Parameters:    Size  Location     Type
  1212 ;;  multiplier      2    4[BANK0 ] unsigned int 
  1213 ;;  multiplicand    2    6[BANK0 ] unsigned int 
  1214 ;; Auto vars:     Size  Location     Type
  1215 ;;  product         2    8[BANK0 ] unsigned int 
  1216 ;; Return value:  Size  Location     Type
  1217 ;;                  2    4[BANK0 ] unsigned int 
  1218 ;; Registers used:
  1219 ;;		wreg, status,2, status,0
  1220 ;; Tracked objects:
  1221 ;;		On entry : 0/0
  1222 ;;		On exit  : 0/0
  1223 ;;		Unchanged: 0/0
  1224 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1225 ;;      Params:         0       4       0       0       0
  1226 ;;      Locals:         0       2       0       0       0
  1227 ;;      Temps:          0       0       0       0       0
  1228 ;;      Totals:         0       6       0       0       0
  1229 ;;Total ram usage:        6 bytes
  1230 ;; Hardware stack levels used:    1
  1231 ;; Hardware stack levels required when called:    5
  1232 ;; This function calls:
  1233 ;;		Nothing
  1234 ;; This function is called by:
  1235 ;;		__calc_timer0_prescaler
  1236 ;; This function uses a non-reentrant model
  1237 ;;
  1238                           
  1239                           
  1240                           ;psect for function ___wmul
  1241  043C                     ___wmul:	
  1242                           
  1243                           ;incstack = 0
  1244                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  1245  043C  1283               	bcf	3,5	;RP0=0, select bank0
  1246  043D  1303               	bcf	3,6	;RP1=0, select bank0
  1247  043E  01A8               	clrf	___wmul@product
  1248  043F  01A9               	clrf	___wmul@product+1
  1249  0440                     l1287:	
  1250  0440  1C24               	btfss	___wmul@multiplier,0
  1251  0441  2C48               	goto	l375
  1252  0442  0826               	movf	___wmul@multiplicand,w
  1253  0443  07A8               	addwf	___wmul@product,f
  1254  0444  1803               	skipnc
  1255  0445  0AA9               	incf	___wmul@product+1,f
  1256  0446  0827               	movf	___wmul@multiplicand+1,w
  1257  0447  07A9               	addwf	___wmul@product+1,f
  1258  0448                     l375:	
  1259  0448  3001               	movlw	1
  1260  0449                     u1015:	
  1261  0449  1003               	clrc
  1262  044A  0DA6               	rlf	___wmul@multiplicand,f
  1263  044B  0DA7               	rlf	___wmul@multiplicand+1,f
  1264  044C  3EFF               	addlw	-1
  1265  044D  1D03               	skipz
  1266  044E  2C49               	goto	u1015
  1267  044F  3001               	movlw	1
  1268  0450                     u1025:	
  1269  0450  1003               	clrc
  1270  0451  0CA5               	rrf	___wmul@multiplier+1,f
  1271  0452  0CA4               	rrf	___wmul@multiplier,f
  1272  0453  3EFF               	addlw	-1
  1273  0454  1D03               	skipz
  1274  0455  2C50               	goto	u1025
  1275  0456  0824               	movf	___wmul@multiplier,w
  1276  0457  0425               	iorwf	___wmul@multiplier+1,w
  1277  0458  1D03               	btfss	3,2
  1278  0459  2C40               	goto	l1287
  1279  045A  0829               	movf	___wmul@product+1,w
  1280  045B  00A5               	movwf	?___wmul+1
  1281  045C  0828               	movf	___wmul@product,w
  1282  045D  00A4               	movwf	?___wmul
  1283  045E  0008               	return
  1284  045F                     __end_of___wmul:	
  1285                           
  1286                           	psect	text4
  1287  01F0                     __ptext4:	
  1288 ;; *************** function ___aldiv *****************
  1289 ;; Defined at:
  1290 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\aldiv.c"
  1291 ;; Parameters:    Size  Location     Type
  1292 ;;  divisor         4   10[BANK0 ] long 
  1293 ;;  dividend        4   14[BANK0 ] long 
  1294 ;; Auto vars:     Size  Location     Type
  1295 ;;  quotient        4   21[BANK0 ] long 
  1296 ;;  sign            1   20[BANK0 ] unsigned char 
  1297 ;;  counter         1   19[BANK0 ] unsigned char 
  1298 ;; Return value:  Size  Location     Type
  1299 ;;                  4   10[BANK0 ] long 
  1300 ;; Registers used:
  1301 ;;		wreg, status,2, status,0
  1302 ;; Tracked objects:
  1303 ;;		On entry : 0/0
  1304 ;;		On exit  : 0/0
  1305 ;;		Unchanged: 0/0
  1306 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1307 ;;      Params:         0       8       0       0       0
  1308 ;;      Locals:         0       6       0       0       0
  1309 ;;      Temps:          0       1       0       0       0
  1310 ;;      Totals:         0      15       0       0       0
  1311 ;;Total ram usage:       15 bytes
  1312 ;; Hardware stack levels used:    1
  1313 ;; Hardware stack levels required when called:    5
  1314 ;; This function calls:
  1315 ;;		Nothing
  1316 ;; This function is called by:
  1317 ;;		__calc_timer0_prescaler
  1318 ;; This function uses a non-reentrant model
  1319 ;;
  1320                           
  1321                           
  1322                           ;psect for function ___aldiv
  1323  01F0                     ___aldiv:	
  1324                           
  1325                           ;incstack = 0
  1326                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  1327  01F0  1283               	bcf	3,5	;RP0=0, select bank0
  1328  01F1  1303               	bcf	3,6	;RP1=0, select bank0
  1329  01F2  01B4               	clrf	___aldiv@sign
  1330  01F3  1FAD               	btfss	___aldiv@divisor+3,7
  1331  01F4  2A02               	goto	l430
  1332  01F5  09AA               	comf	___aldiv@divisor,f
  1333  01F6  09AB               	comf	___aldiv@divisor+1,f
  1334  01F7  09AC               	comf	___aldiv@divisor+2,f
  1335  01F8  09AD               	comf	___aldiv@divisor+3,f
  1336  01F9  0AAA               	incf	___aldiv@divisor,f
  1337  01FA  1903               	skipnz
  1338  01FB  0AAB               	incf	___aldiv@divisor+1,f
  1339  01FC  1903               	skipnz
  1340  01FD  0AAC               	incf	___aldiv@divisor+2,f
  1341  01FE  1903               	skipnz
  1342  01FF  0AAD               	incf	___aldiv@divisor+3,f
  1343  0200  01B4               	clrf	___aldiv@sign
  1344  0201  0AB4               	incf	___aldiv@sign,f
  1345  0202                     l430:	
  1346  0202  1FB1               	btfss	___aldiv@dividend+3,7
  1347  0203  2A13               	goto	l1309
  1348  0204  09AE               	comf	___aldiv@dividend,f
  1349  0205  09AF               	comf	___aldiv@dividend+1,f
  1350  0206  09B0               	comf	___aldiv@dividend+2,f
  1351  0207  09B1               	comf	___aldiv@dividend+3,f
  1352  0208  0AAE               	incf	___aldiv@dividend,f
  1353  0209  1903               	skipnz
  1354  020A  0AAF               	incf	___aldiv@dividend+1,f
  1355  020B  1903               	skipnz
  1356  020C  0AB0               	incf	___aldiv@dividend+2,f
  1357  020D  1903               	skipnz
  1358  020E  0AB1               	incf	___aldiv@dividend+3,f
  1359  020F  3001               	movlw	1
  1360  0210  00B2               	movwf	??___aldiv
  1361  0211  0832               	movf	??___aldiv,w
  1362  0212  06B4               	xorwf	___aldiv@sign,f
  1363  0213                     l1309:	
  1364  0213  3000               	movlw	0
  1365  0214  00B8               	movwf	___aldiv@quotient+3
  1366  0215  3000               	movlw	0
  1367  0216  00B7               	movwf	___aldiv@quotient+2
  1368  0217  3000               	movlw	0
  1369  0218  00B6               	movwf	___aldiv@quotient+1
  1370  0219  3000               	movlw	0
  1371  021A  00B5               	movwf	___aldiv@quotient
  1372  021B  082D               	movf	___aldiv@divisor+3,w
  1373  021C  042C               	iorwf	___aldiv@divisor+2,w
  1374  021D  042B               	iorwf	___aldiv@divisor+1,w
  1375  021E  042A               	iorwf	___aldiv@divisor,w
  1376  021F  1903               	skipnz
  1377  0220  2A68               	goto	l1331
  1378  0221  01B3               	clrf	___aldiv@counter
  1379  0222  0AB3               	incf	___aldiv@counter,f
  1380  0223                     l1317:	
  1381  0223  1BAD               	btfsc	___aldiv@divisor+3,7
  1382  0224  2A33               	goto	l1319
  1383  0225  3001               	movlw	1
  1384  0226  00B2               	movwf	??___aldiv
  1385  0227                     u1075:	
  1386  0227  1003               	clrc
  1387  0228  0DAA               	rlf	___aldiv@divisor,f
  1388  0229  0DAB               	rlf	___aldiv@divisor+1,f
  1389  022A  0DAC               	rlf	___aldiv@divisor+2,f
  1390  022B  0DAD               	rlf	___aldiv@divisor+3,f
  1391  022C  0BB2               	decfsz	??___aldiv,f
  1392  022D  2A27               	goto	u1075
  1393  022E  3001               	movlw	1
  1394  022F  00B2               	movwf	??___aldiv
  1395  0230  0832               	movf	??___aldiv,w
  1396  0231  07B3               	addwf	___aldiv@counter,f
  1397  0232  2A23               	goto	l1317
  1398  0233                     l1319:	
  1399  0233  3001               	movlw	1
  1400  0234  00B2               	movwf	??___aldiv
  1401  0235                     u1095:	
  1402  0235  1003               	clrc
  1403  0236  0DB5               	rlf	___aldiv@quotient,f
  1404  0237  0DB6               	rlf	___aldiv@quotient+1,f
  1405  0238  0DB7               	rlf	___aldiv@quotient+2,f
  1406  0239  0DB8               	rlf	___aldiv@quotient+3,f
  1407  023A  0BB2               	decfsz	??___aldiv,f
  1408  023B  2A35               	goto	u1095
  1409  023C  082D               	movf	___aldiv@divisor+3,w
  1410  023D  0231               	subwf	___aldiv@dividend+3,w
  1411  023E  1D03               	skipz
  1412  023F  2A4A               	goto	u1105
  1413  0240  082C               	movf	___aldiv@divisor+2,w
  1414  0241  0230               	subwf	___aldiv@dividend+2,w
  1415  0242  1D03               	skipz
  1416  0243  2A4A               	goto	u1105
  1417  0244  082B               	movf	___aldiv@divisor+1,w
  1418  0245  022F               	subwf	___aldiv@dividend+1,w
  1419  0246  1D03               	skipz
  1420  0247  2A4A               	goto	u1105
  1421  0248  082A               	movf	___aldiv@divisor,w
  1422  0249  022E               	subwf	___aldiv@dividend,w
  1423  024A                     u1105:	
  1424  024A  1C03               	skipc
  1425  024B  2A5B               	goto	l1327
  1426  024C  082A               	movf	___aldiv@divisor,w
  1427  024D  02AE               	subwf	___aldiv@dividend,f
  1428  024E  082B               	movf	___aldiv@divisor+1,w
  1429  024F  1C03               	skipc
  1430  0250  0F2B               	incfsz	___aldiv@divisor+1,w
  1431  0251  02AF               	subwf	___aldiv@dividend+1,f
  1432  0252  082C               	movf	___aldiv@divisor+2,w
  1433  0253  1C03               	skipc
  1434  0254  0F2C               	incfsz	___aldiv@divisor+2,w
  1435  0255  02B0               	subwf	___aldiv@dividend+2,f
  1436  0256  082D               	movf	___aldiv@divisor+3,w
  1437  0257  1C03               	skipc
  1438  0258  0F2D               	incfsz	___aldiv@divisor+3,w
  1439  0259  02B1               	subwf	___aldiv@dividend+3,f
  1440  025A  1435               	bsf	___aldiv@quotient,0
  1441  025B                     l1327:	
  1442  025B  3001               	movlw	1
  1443  025C                     u1115:	
  1444  025C  1003               	clrc
  1445  025D  0CAD               	rrf	___aldiv@divisor+3,f
  1446  025E  0CAC               	rrf	___aldiv@divisor+2,f
  1447  025F  0CAB               	rrf	___aldiv@divisor+1,f
  1448  0260  0CAA               	rrf	___aldiv@divisor,f
  1449  0261  3EFF               	addlw	-1
  1450  0262  1D03               	skipz
  1451  0263  2A5C               	goto	u1115
  1452  0264  3001               	movlw	1
  1453  0265  02B3               	subwf	___aldiv@counter,f
  1454  0266  1D03               	btfss	3,2
  1455  0267  2A33               	goto	l1319
  1456  0268                     l1331:	
  1457  0268  0834               	movf	___aldiv@sign,w
  1458  0269  1903               	btfsc	3,2
  1459  026A  2A76               	goto	l1335
  1460  026B  09B5               	comf	___aldiv@quotient,f
  1461  026C  09B6               	comf	___aldiv@quotient+1,f
  1462  026D  09B7               	comf	___aldiv@quotient+2,f
  1463  026E  09B8               	comf	___aldiv@quotient+3,f
  1464  026F  0AB5               	incf	___aldiv@quotient,f
  1465  0270  1903               	skipnz
  1466  0271  0AB6               	incf	___aldiv@quotient+1,f
  1467  0272  1903               	skipnz
  1468  0273  0AB7               	incf	___aldiv@quotient+2,f
  1469  0274  1903               	skipnz
  1470  0275  0AB8               	incf	___aldiv@quotient+3,f
  1471  0276                     l1335:	
  1472  0276  0838               	movf	___aldiv@quotient+3,w
  1473  0277  00AD               	movwf	?___aldiv+3
  1474  0278  0837               	movf	___aldiv@quotient+2,w
  1475  0279  00AC               	movwf	?___aldiv+2
  1476  027A  0836               	movf	___aldiv@quotient+1,w
  1477  027B  00AB               	movwf	?___aldiv+1
  1478  027C  0835               	movf	___aldiv@quotient,w
  1479  027D  00AA               	movwf	?___aldiv
  1480  027E  0008               	return
  1481  027F                     __end_of___aldiv:	
  1482                           
  1483                           	psect	text5
  1484  04F5                     __ptext5:	
  1485 ;; *************** function _vw_rx_start *****************
  1486 ;; Defined at:
  1487 ;;		line 382 in file "virtualwire.c"
  1488 ;; Parameters:    Size  Location     Type
  1489 ;;		None
  1490 ;; Auto vars:     Size  Location     Type
  1491 ;;		None
  1492 ;; Return value:  Size  Location     Type
  1493 ;;                  1    wreg      void 
  1494 ;; Registers used:
  1495 ;;		None
  1496 ;; Tracked objects:
  1497 ;;		On entry : 0/0
  1498 ;;		On exit  : 0/0
  1499 ;;		Unchanged: 0/0
  1500 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1501 ;;      Params:         0       0       0       0       0
  1502 ;;      Locals:         0       0       0       0       0
  1503 ;;      Temps:          0       0       0       0       0
  1504 ;;      Totals:         0       0       0       0       0
  1505 ;;Total ram usage:        0 bytes
  1506 ;; Hardware stack levels used:    1
  1507 ;; Hardware stack levels required when called:    5
  1508 ;; This function calls:
  1509 ;;		Nothing
  1510 ;; This function is called by:
  1511 ;;		_main
  1512 ;; This function uses a non-reentrant model
  1513 ;;
  1514                           
  1515                           
  1516                           ;psect for function _vw_rx_start
  1517  04F5                     _vw_rx_start:	
  1518                           
  1519                           ;virtualwire.c: 384: vw_rx_enabled = 1;
  1520                           
  1521                           ;incstack = 0
  1522                           ; Regs used in _vw_rx_start: []
  1523  04F5  1283               	bcf	3,5	;RP0=0, select bank0
  1524  04F6  1303               	bcf	3,6	;RP1=0, select bank0
  1525  04F7  01DD               	clrf	_vw_rx_enabled
  1526  04F8  0ADD               	incf	_vw_rx_enabled,f
  1527                           
  1528                           ;virtualwire.c: 385: vw_rx_enabled_last = 1;
  1529  04F9  01DE               	clrf	_vw_rx_enabled_last
  1530  04FA  0ADE               	incf	_vw_rx_enabled_last,f
  1531  04FB  0008               	return
  1532  04FC                     __end_of_vw_rx_start:	
  1533                           
  1534                           	psect	text6
  1535  03CF                     __ptext6:	
  1536 ;; *************** function _vw_recv *****************
  1537 ;; Defined at:
  1538 ;;		line 353 in file "virtualwire.c"
  1539 ;; Parameters:    Size  Location     Type
  1540 ;;  buf             1    wreg     PTR unsigned char 
  1541 ;;		 -> text(24), 
  1542 ;;  len             1   26[BANK0 ] PTR unsigned char 
  1543 ;;		 -> main@len(1), 
  1544 ;; Auto vars:     Size  Location     Type
  1545 ;;  buf             1   30[BANK0 ] PTR unsigned char 
  1546 ;;		 -> text(24), 
  1547 ;;  rxlen           1   31[BANK0 ] unsigned char 
  1548 ;; Return value:  Size  Location     Type
  1549 ;;                  1    wreg      unsigned char 
  1550 ;; Registers used:
  1551 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1552 ;; Tracked objects:
  1553 ;;		On entry : 0/0
  1554 ;;		On exit  : 0/0
  1555 ;;		Unchanged: 0/0
  1556 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1557 ;;      Params:         0       1       0       0       0
  1558 ;;      Locals:         0       2       0       0       0
  1559 ;;      Temps:          0       3       0       0       0
  1560 ;;      Totals:         0       6       0       0       0
  1561 ;;Total ram usage:        6 bytes
  1562 ;; Hardware stack levels used:    1
  1563 ;; Hardware stack levels required when called:    7
  1564 ;; This function calls:
  1565 ;;		_memcpy
  1566 ;;		_vw_crc
  1567 ;; This function is called by:
  1568 ;;		_main
  1569 ;; This function uses a non-reentrant model
  1570 ;;
  1571                           
  1572                           
  1573                           ;psect for function _vw_recv
  1574  03CF                     _vw_recv:	
  1575                           
  1576                           ;incstack = 0
  1577                           ; Regs used in _vw_recv: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1578                           ;vw_recv@buf stored from wreg
  1579  03CF  1283               	bcf	3,5	;RP0=0, select bank0
  1580  03D0  1303               	bcf	3,6	;RP1=0, select bank0
  1581  03D1  00BE               	movwf	vw_recv@buf
  1582                           
  1583                           ;virtualwire.c: 355: uint8_t rxlen;
  1584                           ;virtualwire.c: 358: if (!vw_rx_done)
  1585  03D2  085C               	movf	_vw_rx_done,w	;volatile
  1586  03D3  1D03               	btfss	3,2
  1587  03D4  2BD7               	goto	l1563
  1588                           
  1589                           ;virtualwire.c: 359: return 0;
  1590  03D5  3000               	movlw	0
  1591  03D6  0008               	return
  1592  03D7                     l1563:	
  1593                           
  1594                           ;virtualwire.c: 363: rxlen = vw_rx_len - 3;
  1595  03D7  087D               	movf	_vw_rx_len,w
  1596  03D8  3EFD               	addlw	253
  1597  03D9  00BB               	movwf	??_vw_recv
  1598  03DA  083B               	movf	??_vw_recv,w
  1599  03DB  00BF               	movwf	vw_recv@rxlen
  1600                           
  1601                           ;virtualwire.c: 366: if (*len > rxlen)
  1602  03DC  083A               	movf	vw_recv@len,w
  1603  03DD  0084               	movwf	4
  1604  03DE  1383               	bcf	3,7	;select IRP bank0
  1605  03DF  0800               	movf	0,w
  1606  03E0  023F               	subwf	vw_recv@rxlen,w
  1607  03E1  1803               	skipnc
  1608  03E2  2BE9               	goto	l1569
  1609                           
  1610                           ;virtualwire.c: 367: *len = rxlen;
  1611  03E3  083F               	movf	vw_recv@rxlen,w
  1612  03E4  00BB               	movwf	??_vw_recv
  1613  03E5  083A               	movf	vw_recv@len,w
  1614  03E6  0084               	movwf	4
  1615  03E7  083B               	movf	??_vw_recv,w
  1616  03E8  0080               	movwf	0
  1617  03E9                     l1569:	
  1618                           
  1619                           ;virtualwire.c: 368: memcpy(buf, vw_tx_buf + 1, *len);
  1620  03E9  30A1               	movlw	(low ((_vw_tx_buf| 0+1)))& (0+255)
  1621  03EA  00BB               	movwf	??_vw_recv
  1622  03EB  083B               	movf	??_vw_recv,w
  1623  03EC  00A4               	movwf	memcpy@src
  1624  03ED  083A               	movf	vw_recv@len,w
  1625  03EE  0084               	movwf	4
  1626  03EF  0800               	movf	0,w
  1627  03F0  00BC               	movwf	??_vw_recv+1
  1628  03F1  01BD               	clrf	??_vw_recv+2
  1629  03F2  083C               	movf	??_vw_recv+1,w
  1630  03F3  00A5               	movwf	memcpy@n
  1631  03F4  083D               	movf	??_vw_recv+2,w
  1632  03F5  00A6               	movwf	memcpy@n+1
  1633  03F6  083E               	movf	vw_recv@buf,w
  1634  03F7  118A  245F  118A   	fcall	_memcpy
  1635                           
  1636                           ;virtualwire.c: 370: vw_rx_done = 0;
  1637  03FA  1283               	bcf	3,5	;RP0=0, select bank0
  1638  03FB  1303               	bcf	3,6	;RP1=0, select bank0
  1639  03FC  01DC               	clrf	_vw_rx_done	;volatile
  1640                           
  1641                           ;virtualwire.c: 373: return (vw_crc(vw_tx_buf, vw_rx_len) == 0xf0b8);
  1642  03FD  087D               	movf	_vw_rx_len,w
  1643  03FE  00BB               	movwf	??_vw_recv
  1644  03FF  083B               	movf	??_vw_recv,w
  1645  0400  00B4               	movwf	vw_crc@count
  1646  0401  30A0               	movlw	(low (_vw_tx_buf| 0))& (0+255)
  1647  0402  118A  2412  118A   	fcall	_vw_crc
  1648  0405  30B8               	movlw	184
  1649  0406  1283               	bcf	3,5	;RP0=0, select bank0
  1650  0407  1303               	bcf	3,6	;RP1=0, select bank0
  1651  0408  0634               	xorwf	?_vw_crc,w
  1652  0409  30F0               	movlw	240
  1653  040A  1903               	skipnz
  1654  040B  0635               	xorwf	?_vw_crc+1,w
  1655  040C  1D03               	btfss	3,2
  1656  040D  2C10               	goto	u1630
  1657  040E  3001               	movlw	1
  1658  040F  0008               	return
  1659  0410                     u1630:	
  1660  0410  3000               	movlw	0
  1661  0411  0008               	return
  1662  0412                     __end_of_vw_recv:	
  1663                           
  1664                           	psect	text7
  1665  0412                     __ptext7:	
  1666 ;; *************** function _vw_crc *****************
  1667 ;; Defined at:
  1668 ;;		line 234 in file "virtualwire.c"
  1669 ;; Parameters:    Size  Location     Type
  1670 ;;  ptr             1    wreg     PTR unsigned char 
  1671 ;;		 -> vw_tx_buf(48), 
  1672 ;;  count           1   20[BANK0 ] unsigned char 
  1673 ;; Auto vars:     Size  Location     Type
  1674 ;;  ptr             1   23[BANK0 ] PTR unsigned char 
  1675 ;;		 -> vw_tx_buf(48), 
  1676 ;;  crc             2   24[BANK0 ] unsigned int 
  1677 ;; Return value:  Size  Location     Type
  1678 ;;                  2   20[BANK0 ] unsigned int 
  1679 ;; Registers used:
  1680 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1681 ;; Tracked objects:
  1682 ;;		On entry : 0/0
  1683 ;;		On exit  : 0/0
  1684 ;;		Unchanged: 0/0
  1685 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1686 ;;      Params:         0       2       0       0       0
  1687 ;;      Locals:         0       3       0       0       0
  1688 ;;      Temps:          0       1       0       0       0
  1689 ;;      Totals:         0       6       0       0       0
  1690 ;;Total ram usage:        6 bytes
  1691 ;; Hardware stack levels used:    1
  1692 ;; Hardware stack levels required when called:    6
  1693 ;; This function calls:
  1694 ;;		__crc_ccitt_update
  1695 ;; This function is called by:
  1696 ;;		_vw_recv
  1697 ;; This function uses a non-reentrant model
  1698 ;;
  1699                           
  1700                           
  1701                           ;psect for function _vw_crc
  1702  0412                     _vw_crc:	
  1703                           
  1704                           ;incstack = 0
  1705                           ; Regs used in _vw_crc: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1706                           ;vw_crc@ptr stored from wreg
  1707  0412  1283               	bcf	3,5	;RP0=0, select bank0
  1708  0413  1303               	bcf	3,6	;RP1=0, select bank0
  1709  0414  00B7               	movwf	vw_crc@ptr
  1710                           
  1711                           ;virtualwire.c: 236: uint16_t crc = 0xffff;
  1712  0415  30FF               	movlw	255
  1713  0416  00B8               	movwf	vw_crc@crc
  1714  0417  30FF               	movlw	255
  1715  0418  00B9               	movwf	vw_crc@crc+1
  1716  0419                     l1383:	
  1717                           ;virtualwire.c: 238: while (count-- > 0)
  1718                           
  1719  0419  3001               	movlw	1
  1720  041A  02B4               	subwf	vw_crc@count,f
  1721  041B  0A34               	incf	vw_crc@count,w
  1722  041C  1903               	btfsc	3,2
  1723  041D  2C37               	goto	l1385
  1724                           
  1725                           ;virtualwire.c: 239: crc = _crc_ccitt_update(crc, *ptr++);
  1726  041E  0839               	movf	vw_crc@crc+1,w
  1727  041F  00A5               	movwf	__crc_ccitt_update@crc+1
  1728  0420  0838               	movf	vw_crc@crc,w
  1729  0421  00A4               	movwf	__crc_ccitt_update@crc
  1730  0422  0837               	movf	vw_crc@ptr,w
  1731  0423  0084               	movwf	4
  1732  0424  1383               	bcf	3,7	;select IRP bank0
  1733  0425  0800               	movf	0,w
  1734  0426  00B6               	movwf	??_vw_crc
  1735  0427  0836               	movf	??_vw_crc,w
  1736  0428  00A6               	movwf	__crc_ccitt_update@data
  1737  0429  118A  22FF  118A   	fcall	__crc_ccitt_update
  1738  042C  1283               	bcf	3,5	;RP0=0, select bank0
  1739  042D  1303               	bcf	3,6	;RP1=0, select bank0
  1740  042E  0825               	movf	?__crc_ccitt_update+1,w
  1741  042F  00B9               	movwf	vw_crc@crc+1
  1742  0430  0824               	movf	?__crc_ccitt_update,w
  1743  0431  00B8               	movwf	vw_crc@crc
  1744  0432  3001               	movlw	1
  1745  0433  00B6               	movwf	??_vw_crc
  1746  0434  0836               	movf	??_vw_crc,w
  1747  0435  07B7               	addwf	vw_crc@ptr,f
  1748  0436  2C19               	goto	l1383
  1749  0437                     l1385:	
  1750                           
  1751                           ;virtualwire.c: 240: return crc;
  1752  0437  0839               	movf	vw_crc@crc+1,w
  1753  0438  00B5               	movwf	?_vw_crc+1
  1754  0439  0838               	movf	vw_crc@crc,w
  1755  043A  00B4               	movwf	?_vw_crc
  1756  043B  0008               	return
  1757  043C                     __end_of_vw_crc:	
  1758                           
  1759                           	psect	text8
  1760  02FF                     __ptext8:	
  1761 ;; *************** function __crc_ccitt_update *****************
  1762 ;; Defined at:
  1763 ;;		line 51 in file "../_libs/crc16.h"
  1764 ;; Parameters:    Size  Location     Type
  1765 ;;  crc             2    4[BANK0 ] unsigned int 
  1766 ;;  data            1    6[BANK0 ] unsigned char 
  1767 ;; Auto vars:     Size  Location     Type
  1768 ;;		None
  1769 ;; Return value:  Size  Location     Type
  1770 ;;                  2    4[BANK0 ] unsigned int 
  1771 ;; Registers used:
  1772 ;;		wreg, status,2, status,0, btemp+1
  1773 ;; Tracked objects:
  1774 ;;		On entry : 0/0
  1775 ;;		On exit  : 0/0
  1776 ;;		Unchanged: 0/0
  1777 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1778 ;;      Params:         0       3       0       0       0
  1779 ;;      Locals:         0       0       0       0       0
  1780 ;;      Temps:          0      13       0       0       0
  1781 ;;      Totals:         0      16       0       0       0
  1782 ;;Total ram usage:       16 bytes
  1783 ;; Hardware stack levels used:    1
  1784 ;; Hardware stack levels required when called:    5
  1785 ;; This function calls:
  1786 ;;		Nothing
  1787 ;; This function is called by:
  1788 ;;		_vw_crc
  1789 ;;		_vw_send
  1790 ;; This function uses a non-reentrant model
  1791 ;;
  1792                           
  1793                           
  1794                           ;psect for function __crc_ccitt_update
  1795  02FF                     __crc_ccitt_update:	
  1796                           
  1797                           ;crc16.h: 53: data ^= ((crc)&0xff);
  1798                           
  1799                           ;incstack = 0
  1800                           ; Regs used in __crc_ccitt_update: [wreg+status,2+status,0+btemp+1]
  1801  02FF  1283               	bcf	3,5	;RP0=0, select bank0
  1802  0300  1303               	bcf	3,6	;RP1=0, select bank0
  1803  0301  0824               	movf	__crc_ccitt_update@crc,w
  1804  0302  00A7               	movwf	??__crc_ccitt_update
  1805  0303  0827               	movf	??__crc_ccitt_update,w
  1806  0304  06A6               	xorwf	__crc_ccitt_update@data,f
  1807                           
  1808                           ;crc16.h: 54: data ^= data << 4;
  1809  0305  0826               	movf	__crc_ccitt_update@data,w
  1810  0306  00A7               	movwf	??__crc_ccitt_update
  1811  0307  3003               	movlw	3
  1812  0308                     u955:	
  1813  0308  1003               	clrc
  1814  0309  0DA7               	rlf	??__crc_ccitt_update,f
  1815  030A  3EFF               	addlw	-1
  1816  030B  1D03               	skipz
  1817  030C  2B08               	goto	u955
  1818  030D  1003               	clrc
  1819  030E  0D27               	rlf	??__crc_ccitt_update,w
  1820  030F  00A8               	movwf	??__crc_ccitt_update+1
  1821  0310  0828               	movf	??__crc_ccitt_update+1,w
  1822  0311  06A6               	xorwf	__crc_ccitt_update@data,f
  1823                           
  1824                           ;crc16.h: 56: return ((((uint16_t) data << 8) | ((crc)>>8)) ^ (uint8_t) (data >> 4)
  1825                           ;crc16.h: 57: ^ ((uint16_t) data << 3));
  1826  0312  0826               	movf	__crc_ccitt_update@data,w
  1827  0313  00A7               	movwf	??__crc_ccitt_update
  1828  0314  01A8               	clrf	??__crc_ccitt_update+1
  1829  0315  1003               	clrc
  1830  0316  0DA7               	rlf	??__crc_ccitt_update,f
  1831  0317  0DA8               	rlf	??__crc_ccitt_update+1,f
  1832  0318  1003               	clrc
  1833  0319  0DA7               	rlf	??__crc_ccitt_update,f
  1834  031A  0DA8               	rlf	??__crc_ccitt_update+1,f
  1835  031B  1003               	clrc
  1836  031C  0DA7               	rlf	??__crc_ccitt_update,f
  1837  031D  0DA8               	rlf	??__crc_ccitt_update+1,f
  1838  031E  0826               	movf	__crc_ccitt_update@data,w
  1839  031F  00A9               	movwf	??__crc_ccitt_update+2
  1840  0320  3004               	movlw	4
  1841  0321                     u965:	
  1842  0321  1003               	clrc
  1843  0322  0CA9               	rrf	??__crc_ccitt_update+2,f
  1844  0323  3EFF               	addlw	-1
  1845  0324  1D03               	skipz
  1846  0325  2B21               	goto	u965
  1847  0326  0829               	movf	??__crc_ccitt_update+2,w
  1848  0327  00AA               	movwf	??__crc_ccitt_update+3
  1849  0328  01AB               	clrf	??__crc_ccitt_update+4
  1850  0329  0825               	movf	__crc_ccitt_update@crc+1,w
  1851  032A  00AD               	movwf	??__crc_ccitt_update+6
  1852  032B  0824               	movf	__crc_ccitt_update@crc,w
  1853  032C  00AC               	movwf	??__crc_ccitt_update+5
  1854  032D  082D               	movf	??__crc_ccitt_update+6,w
  1855  032E  00AC               	movwf	??__crc_ccitt_update+5
  1856  032F  01AD               	clrf	??__crc_ccitt_update+6
  1857  0330  0826               	movf	__crc_ccitt_update@data,w
  1858  0331  00AE               	movwf	??__crc_ccitt_update+7
  1859  0332  01AF               	clrf	??__crc_ccitt_update+8
  1860  0333  082E               	movf	??__crc_ccitt_update+7,w
  1861  0334  00AF               	movwf	??__crc_ccitt_update+8
  1862  0335  01AE               	clrf	??__crc_ccitt_update+7
  1863  0336  082C               	movf	??__crc_ccitt_update+5,w
  1864  0337  042E               	iorwf	??__crc_ccitt_update+7,w
  1865  0338  00B0               	movwf	??__crc_ccitt_update+9
  1866  0339  082D               	movf	??__crc_ccitt_update+6,w
  1867  033A  042F               	iorwf	??__crc_ccitt_update+8,w
  1868  033B  00B1               	movwf	??__crc_ccitt_update+10
  1869  033C  082A               	movf	??__crc_ccitt_update+3,w
  1870  033D  0630               	xorwf	??__crc_ccitt_update+9,w
  1871  033E  00B2               	movwf	??__crc_ccitt_update+11
  1872  033F  082B               	movf	??__crc_ccitt_update+4,w
  1873  0340  0631               	xorwf	??__crc_ccitt_update+10,w
  1874  0341  00B3               	movwf	??__crc_ccitt_update+12
  1875  0342  0827               	movf	??__crc_ccitt_update,w
  1876  0343  0632               	xorwf	??__crc_ccitt_update+11,w
  1877  0344  00A4               	movwf	?__crc_ccitt_update
  1878  0345  0828               	movf	??__crc_ccitt_update+1,w
  1879  0346  0633               	xorwf	??__crc_ccitt_update+12,w
  1880  0347  00A5               	movwf	?__crc_ccitt_update+1
  1881  0348  0008               	return
  1882  0349                     __end_of__crc_ccitt_update:	
  1883                           
  1884                           	psect	text9
  1885  045F                     __ptext9:	
  1886 ;; *************** function _memcpy *****************
  1887 ;; Defined at:
  1888 ;;		line 6 in file "../_libs/string.h"
  1889 ;; Parameters:    Size  Location     Type
  1890 ;;  dest            1    wreg     PTR unsigned char 
  1891 ;;		 -> text(24), 
  1892 ;;  src             1    4[BANK0 ] PTR unsigned char 
  1893 ;;		 -> vw_tx_buf(48), 
  1894 ;;  n               2    5[BANK0 ] unsigned int 
  1895 ;; Auto vars:     Size  Location     Type
  1896 ;;  dest            1   10[BANK0 ] PTR unsigned char 
  1897 ;;		 -> text(24), 
  1898 ;; Return value:  Size  Location     Type
  1899 ;;                  1    wreg      PTR unsigned char 
  1900 ;; Registers used:
  1901 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1902 ;; Tracked objects:
  1903 ;;		On entry : 0/0
  1904 ;;		On exit  : 0/0
  1905 ;;		Unchanged: 0/0
  1906 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1907 ;;      Params:         0       3       0       0       0
  1908 ;;      Locals:         0       1       0       0       0
  1909 ;;      Temps:          0       3       0       0       0
  1910 ;;      Totals:         0       7       0       0       0
  1911 ;;Total ram usage:        7 bytes
  1912 ;; Hardware stack levels used:    1
  1913 ;; Hardware stack levels required when called:    5
  1914 ;; This function calls:
  1915 ;;		Nothing
  1916 ;; This function is called by:
  1917 ;;		_vw_recv
  1918 ;; This function uses a non-reentrant model
  1919 ;;
  1920                           
  1921                           
  1922                           ;psect for function _memcpy
  1923  045F                     _memcpy:	
  1924                           
  1925                           ;incstack = 0
  1926                           ; Regs used in _memcpy: [wreg-fsr0h+status,2+status,0]
  1927                           ;memcpy@dest stored from wreg
  1928  045F  1283               	bcf	3,5	;RP0=0, select bank0
  1929  0460  1303               	bcf	3,6	;RP1=0, select bank0
  1930  0461  00AA               	movwf	memcpy@dest
  1931  0462                     l1347:	
  1932                           ;string.h: 16: while (n--)
  1933                           
  1934  0462  3001               	movlw	1
  1935  0463  02A5               	subwf	memcpy@n,f
  1936  0464  3000               	movlw	0
  1937  0465  1C03               	skipc
  1938  0466  03A6               	decf	memcpy@n+1,f
  1939  0467  02A6               	subwf	memcpy@n+1,f
  1940  0468  0A25               	incf	memcpy@n,w
  1941  0469  1903               	btfsc	3,2
  1942  046A  0A26               	incf	memcpy@n+1,w
  1943  046B  1903               	btfsc	3,2
  1944  046C  0008               	return
  1945                           
  1946                           ;string.h: 17: dest[n] = src[n];
  1947  046D  0825               	movf	memcpy@n,w
  1948  046E  0724               	addwf	memcpy@src,w
  1949  046F  00A7               	movwf	??_memcpy
  1950  0470  0827               	movf	??_memcpy,w
  1951  0471  0084               	movwf	4
  1952  0472  1383               	bcf	3,7	;select IRP bank0
  1953  0473  0800               	movf	0,w
  1954  0474  00A8               	movwf	??_memcpy+1
  1955  0475  0825               	movf	memcpy@n,w
  1956  0476  072A               	addwf	memcpy@dest,w
  1957  0477  00A9               	movwf	??_memcpy+2
  1958  0478  0829               	movf	??_memcpy+2,w
  1959  0479  0084               	movwf	4
  1960  047A  0828               	movf	??_memcpy+1,w
  1961  047B  0080               	movwf	0
  1962  047C  2C62               	goto	l1347
  1963  047D                     __end_of_memcpy:	
  1964                           ;string.h: 20: return dest;
  1965                           ;	Return value of _memcpy is never used
  1966                           
  1967                           
  1968                           	psect	text10
  1969  04E4                     __ptext10:	
  1970 ;; *************** function _vw_have_message *****************
  1971 ;; Defined at:
  1972 ;;		line 348 in file "virtualwire.c"
  1973 ;; Parameters:    Size  Location     Type
  1974 ;;		None
  1975 ;; Auto vars:     Size  Location     Type
  1976 ;;		None
  1977 ;; Return value:  Size  Location     Type
  1978 ;;                  1    wreg      unsigned char 
  1979 ;; Registers used:
  1980 ;;		wreg, status,2, status,0
  1981 ;; Tracked objects:
  1982 ;;		On entry : 0/0
  1983 ;;		On exit  : 0/0
  1984 ;;		Unchanged: 0/0
  1985 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1986 ;;      Params:         0       0       0       0       0
  1987 ;;      Locals:         0       0       0       0       0
  1988 ;;      Temps:          0       0       0       0       0
  1989 ;;      Totals:         0       0       0       0       0
  1990 ;;Total ram usage:        0 bytes
  1991 ;; Hardware stack levels used:    1
  1992 ;; Hardware stack levels required when called:    5
  1993 ;; This function calls:
  1994 ;;		Nothing
  1995 ;; This function is called by:
  1996 ;;		_main
  1997 ;; This function uses a non-reentrant model
  1998 ;;
  1999                           
  2000                           
  2001                           ;psect for function _vw_have_message
  2002  04E4                     _vw_have_message:	
  2003                           
  2004                           ;virtualwire.c: 350: return (vw_rx_done) ? 1 : 0;
  2005                           
  2006                           ;incstack = 0
  2007                           ; Regs used in _vw_have_message: [wreg+status,2+status,0]
  2008  04E4  1283               	bcf	3,5	;RP0=0, select bank0
  2009  04E5  1303               	bcf	3,6	;RP1=0, select bank0
  2010  04E6  085C               	movf	_vw_rx_done,w	;volatile
  2011  04E7  1903               	btfsc	3,2
  2012  04E8  2CEB               	goto	u1590
  2013  04E9  3001               	movlw	1
  2014  04EA  0008               	return
  2015  04EB                     u1590:	
  2016  04EB  3000               	movlw	0
  2017  04EC  0008               	return
  2018  04ED                     __end_of_vw_have_message:	
  2019                           
  2020                           	psect	text11
  2021  0498                     __ptext11:	
  2022 ;; *************** function _UART_send_string *****************
  2023 ;; Defined at:
  2024 ;;		line 87 in file "uart.h"
  2025 ;; Parameters:    Size  Location     Type
  2026 ;;  str             1    wreg     PTR unsigned char 
  2027 ;;		 -> STR_3(19), STR_2(19), STR_1(19), 
  2028 ;; Auto vars:     Size  Location     Type
  2029 ;;  str             1    6[BANK0 ] PTR unsigned char 
  2030 ;;		 -> STR_3(19), STR_2(19), STR_1(19), 
  2031 ;; Return value:  Size  Location     Type
  2032 ;;                  1    wreg      void 
  2033 ;; Registers used:
  2034 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2035 ;; Tracked objects:
  2036 ;;		On entry : 0/0
  2037 ;;		On exit  : 0/0
  2038 ;;		Unchanged: 0/0
  2039 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2040 ;;      Params:         0       0       0       0       0
  2041 ;;      Locals:         0       1       0       0       0
  2042 ;;      Temps:          0       1       0       0       0
  2043 ;;      Totals:         0       2       0       0       0
  2044 ;;Total ram usage:        2 bytes
  2045 ;; Hardware stack levels used:    1
  2046 ;; Hardware stack levels required when called:    6
  2047 ;; This function calls:
  2048 ;;		_UART_send_byte
  2049 ;; This function is called by:
  2050 ;;		_main
  2051 ;; This function uses a non-reentrant model
  2052 ;;
  2053                           
  2054                           
  2055                           ;psect for function _UART_send_string
  2056  0498                     _UART_send_string:	
  2057                           
  2058                           ;incstack = 0
  2059                           ; Regs used in _UART_send_string: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2060                           ;UART_send_string@str stored from wreg
  2061  0498  1283               	bcf	3,5	;RP0=0, select bank0
  2062  0499  1303               	bcf	3,6	;RP1=0, select bank0
  2063  049A  00A6               	movwf	UART_send_string@str
  2064  049B                     l1475:	
  2065                           ;uart.h: 99: while(*str){
  2066                           
  2067  049B  0826               	movf	UART_send_string@str,w
  2068  049C  0084               	movwf	4
  2069  049D  118A  2349  118A   	fcall	stringdir
  2070  04A0  3A00               	xorlw	0
  2071  04A1  1903               	btfsc	3,2
  2072  04A2  0008               	return
  2073                           
  2074                           ;uart.h: 100: UART_send_byte(*str++);
  2075  04A3  0826               	movf	UART_send_string@str,w
  2076  04A4  0084               	movwf	4
  2077  04A5  118A  2349  118A   	fcall	stringdir
  2078  04A8  118A  24D8  118A   	fcall	_UART_send_byte
  2079  04AB  3001               	movlw	1
  2080  04AC  1283               	bcf	3,5	;RP0=0, select bank0
  2081  04AD  1303               	bcf	3,6	;RP1=0, select bank0
  2082  04AE  00A5               	movwf	??_UART_send_string
  2083  04AF  0825               	movf	??_UART_send_string,w
  2084  04B0  07A6               	addwf	UART_send_string@str,f
  2085  04B1  2C9B               	goto	l1475
  2086  04B2                     __end_of_UART_send_string:	
  2087                           
  2088                           	psect	text12
  2089  04D8                     __ptext12:	
  2090 ;; *************** function _UART_send_byte *****************
  2091 ;; Defined at:
  2092 ;;		line 43 in file "uart.h"
  2093 ;; Parameters:    Size  Location     Type
  2094 ;;  single_byte     1    wreg     unsigned char 
  2095 ;; Auto vars:     Size  Location     Type
  2096 ;;  single_byte     1    4[BANK0 ] unsigned char 
  2097 ;; Return value:  Size  Location     Type
  2098 ;;                  1    wreg      void 
  2099 ;; Registers used:
  2100 ;;		wreg
  2101 ;; Tracked objects:
  2102 ;;		On entry : 0/0
  2103 ;;		On exit  : 0/0
  2104 ;;		Unchanged: 0/0
  2105 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2106 ;;      Params:         0       0       0       0       0
  2107 ;;      Locals:         0       1       0       0       0
  2108 ;;      Temps:          0       0       0       0       0
  2109 ;;      Totals:         0       1       0       0       0
  2110 ;;Total ram usage:        1 bytes
  2111 ;; Hardware stack levels used:    1
  2112 ;; Hardware stack levels required when called:    5
  2113 ;; This function calls:
  2114 ;;		Nothing
  2115 ;; This function is called by:
  2116 ;;		_UART_send_string
  2117 ;;		_main
  2118 ;; This function uses a non-reentrant model
  2119 ;;
  2120                           
  2121                           
  2122                           ;psect for function _UART_send_byte
  2123  04D8                     _UART_send_byte:	
  2124                           
  2125                           ;incstack = 0
  2126                           ; Regs used in _UART_send_byte: [wreg]
  2127                           ;UART_send_byte@single_byte stored from wreg
  2128  04D8  1283               	bcf	3,5	;RP0=0, select bank0
  2129  04D9  1303               	bcf	3,6	;RP1=0, select bank0
  2130  04DA  00A4               	movwf	UART_send_byte@single_byte
  2131  04DB                     l54:	
  2132                           ;uart.h: 46: while(! TRMT);
  2133                           
  2134  04DB  1683               	bsf	3,5	;RP0=1, select bank1
  2135  04DC  1303               	bcf	3,6	;RP1=0, select bank1
  2136  04DD  1C98               	btfss	24,1	;volatile
  2137  04DE  2CDB               	goto	l54
  2138                           
  2139                           ;uart.h: 47: TXREG = single_byte;
  2140  04DF  1283               	bcf	3,5	;RP0=0, select bank0
  2141  04E0  1303               	bcf	3,6	;RP1=0, select bank0
  2142  04E1  0824               	movf	UART_send_byte@single_byte,w
  2143  04E2  0099               	movwf	25	;volatile
  2144  04E3  0008               	return
  2145  04E4                     __end_of_UART_send_byte:	
  2146                           
  2147                           	psect	text13
  2148  04B2                     __ptext13:	
  2149 ;; *************** function _UART_Init *****************
  2150 ;; Defined at:
  2151 ;;		line 17 in file "uart.h"
  2152 ;; Parameters:    Size  Location     Type
  2153 ;;		None
  2154 ;; Auto vars:     Size  Location     Type
  2155 ;;		None
  2156 ;; Return value:  Size  Location     Type
  2157 ;;                  1    wreg      void 
  2158 ;; Registers used:
  2159 ;;		wreg
  2160 ;; Tracked objects:
  2161 ;;		On entry : 0/0
  2162 ;;		On exit  : 0/0
  2163 ;;		Unchanged: 0/0
  2164 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2165 ;;      Params:         0       0       0       0       0
  2166 ;;      Locals:         0       0       0       0       0
  2167 ;;      Temps:          0       0       0       0       0
  2168 ;;      Totals:         0       0       0       0       0
  2169 ;;Total ram usage:        0 bytes
  2170 ;; Hardware stack levels used:    1
  2171 ;; Hardware stack levels required when called:    5
  2172 ;; This function calls:
  2173 ;;		Nothing
  2174 ;; This function is called by:
  2175 ;;		_main
  2176 ;; This function uses a non-reentrant model
  2177 ;;
  2178                           
  2179                           
  2180                           ;psect for function _UART_Init
  2181  04B2                     _UART_Init:	
  2182                           
  2183                           ;uart.h: 23: TRISB2 = 1;
  2184                           
  2185                           ;incstack = 0
  2186                           ; Regs used in _UART_Init: [wreg]
  2187  04B2  1683               	bsf	3,5	;RP0=1, select bank1
  2188  04B3  1303               	bcf	3,6	;RP1=0, select bank1
  2189  04B4  1506               	bsf	6,2	;volatile
  2190                           
  2191                           ;uart.h: 24: TRISB5 = 0;
  2192  04B5  1286               	bcf	6,5	;volatile
  2193                           
  2194                           ;uart.h: 27: BRGH = 1;
  2195  04B6  1518               	bsf	24,2	;volatile
  2196                           
  2197                           ;uart.h: 28: SPBRG = 77;
  2198  04B7  304D               	movlw	77
  2199  04B8  0099               	movwf	25	;volatile
  2200                           
  2201                           ;uart.h: 31: SYNC = 0;
  2202  04B9  1218               	bcf	24,4	;volatile
  2203                           
  2204                           ;uart.h: 32: SPEN = 1;
  2205  04BA  1283               	bcf	3,5	;RP0=0, select bank0
  2206  04BB  1303               	bcf	3,6	;RP1=0, select bank0
  2207  04BC  1798               	bsf	24,7	;volatile
  2208                           
  2209                           ;uart.h: 35: TX9 = 0;
  2210  04BD  1683               	bsf	3,5	;RP0=1, select bank1
  2211  04BE  1303               	bcf	3,6	;RP1=0, select bank1
  2212  04BF  1318               	bcf	24,6	;volatile
  2213                           
  2214                           ;uart.h: 36: TXEN = 1;
  2215  04C0  1698               	bsf	24,5	;volatile
  2216                           
  2217                           ;uart.h: 39: RX9 = 0;
  2218  04C1  1283               	bcf	3,5	;RP0=0, select bank0
  2219  04C2  1303               	bcf	3,6	;RP1=0, select bank0
  2220  04C3  1318               	bcf	24,6	;volatile
  2221                           
  2222                           ;uart.h: 40: CREN = 1;
  2223  04C4  1618               	bsf	24,4	;volatile
  2224  04C5  0008               	return
  2225  04C6                     __end_of_UART_Init:	
  2226                           
  2227                           	psect	text14
  2228  04C6                     __ptext14:	
  2229 ;; *************** function _global_isr *****************
  2230 ;; Defined at:
  2231 ;;		line 16 in file "main.c"
  2232 ;; Parameters:    Size  Location     Type
  2233 ;;		None
  2234 ;; Auto vars:     Size  Location     Type
  2235 ;;		None
  2236 ;; Return value:  Size  Location     Type
  2237 ;;                  1    wreg      void 
  2238 ;; Registers used:
  2239 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2240 ;; Tracked objects:
  2241 ;;		On entry : 0/0
  2242 ;;		On exit  : 0/0
  2243 ;;		Unchanged: 0/0
  2244 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2245 ;;      Params:         0       0       0       0       0
  2246 ;;      Locals:         0       0       0       0       0
  2247 ;;      Temps:          0       4       0       0       0
  2248 ;;      Totals:         0       4       0       0       0
  2249 ;;Total ram usage:        4 bytes
  2250 ;; Hardware stack levels used:    1
  2251 ;; Hardware stack levels required when called:    4
  2252 ;; This function calls:
  2253 ;;		_vw_isr_tmr0
  2254 ;; This function is called by:
  2255 ;;		Interrupt level 1
  2256 ;; This function uses a non-reentrant model
  2257 ;;
  2258                           
  2259                           
  2260                           ;psect for function _global_isr
  2261  04C6                     _global_isr:	
  2262                           
  2263                           ;main.c: 17: if(TMR0IF)
  2264  04C6  1D0B               	btfss	11,2	;volatile
  2265  04C7  2CCB               	goto	i1l81
  2266                           
  2267                           ;main.c: 18: vw_isr_tmr0();
  2268  04C8  118A  20C1  118A   	fcall	_vw_isr_tmr0
  2269  04CB                     i1l81:	
  2270  04CB  1283               	bcf	3,5	;RP0=0, select bank0
  2271  04CC  1303               	bcf	3,6	;RP1=0, select bank0
  2272  04CD  0823               	movf	??_global_isr+3,w
  2273  04CE  00FF               	movwf	127
  2274  04CF  0822               	movf	??_global_isr+2,w
  2275  04D0  008A               	movwf	10
  2276  04D1  0821               	movf	??_global_isr+1,w
  2277  04D2  0084               	movwf	4
  2278  04D3  0E20               	swapf	??_global_isr^0,w
  2279  04D4  0083               	movwf	3
  2280  04D5  0EFE               	swapf	126,f
  2281  04D6  0E7E               	swapf	126,w
  2282  04D7  0009               	retfie
  2283  04D8                     __end_of_global_isr:	
  2284                           
  2285                           	psect	intentry
  2286  0004                     __pintentry:	
  2287                           ;incstack = 0
  2288                           ; Regs used in _global_isr: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2289                           
  2290  0004                     interrupt_function:	
  2291  007E                     saved_w	set	btemp
  2292  0004  00FE               	movwf	btemp
  2293  0005  0E03               	swapf	3,w
  2294  0006  1283               	bcf	3,5	;RP0=0, select bank0
  2295  0007  1303               	bcf	3,6	;RP1=0, select bank0
  2296  0008  00A0               	movwf	??_global_isr
  2297  0009  0804               	movf	4,w
  2298  000A  00A1               	movwf	??_global_isr+1
  2299  000B  080A               	movf	10,w
  2300  000C  00A2               	movwf	??_global_isr+2
  2301  000D  087F               	movf	btemp+1,w
  2302  000E  00A3               	movwf	??_global_isr+3
  2303  000F  118A  2CC6         	ljmp	_global_isr
  2304                           
  2305                           	psect	text15
  2306  00C1                     __ptext15:	
  2307 ;; *************** function _vw_isr_tmr0 *****************
  2308 ;; Defined at:
  2309 ;;		line 388 in file "virtualwire.c"
  2310 ;; Parameters:    Size  Location     Type
  2311 ;;		None
  2312 ;; Auto vars:     Size  Location     Type
  2313 ;;		None
  2314 ;; Return value:  Size  Location     Type
  2315 ;;                  1    wreg      void 
  2316 ;; Registers used:
  2317 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2318 ;; Tracked objects:
  2319 ;;		On entry : 0/0
  2320 ;;		On exit  : 0/0
  2321 ;;		Unchanged: 0/0
  2322 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2323 ;;      Params:         0       0       0       0       0
  2324 ;;      Locals:         0       0       0       0       0
  2325 ;;      Temps:          2       0       0       0       0
  2326 ;;      Totals:         2       0       0       0       0
  2327 ;;Total ram usage:        2 bytes
  2328 ;; Hardware stack levels used:    1
  2329 ;; Hardware stack levels required when called:    3
  2330 ;; This function calls:
  2331 ;;		_vw_pll
  2332 ;;		_vw_tx_stop
  2333 ;; This function is called by:
  2334 ;;		_global_isr
  2335 ;; This function uses a non-reentrant model
  2336 ;;
  2337                           
  2338                           
  2339                           ;psect for function _vw_isr_tmr0
  2340  00C1                     _vw_isr_tmr0:	
  2341                           
  2342                           ;virtualwire.c: 390: TMR0 += -vw_tmr0_value + 4;
  2343                           
  2344                           ;incstack = 0
  2345 ;; using string table level
  2346                           ; Regs used in _vw_isr_tmr0: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2347  00C1  1283               	bcf	3,5	;RP0=0, select bank0
  2348  00C2  1303               	bcf	3,6	;RP1=0, select bank0
  2349  00C3  036A               	decf	_vw_tmr0_value,w
  2350  00C4  3AFF               	xorlw	255
  2351  00C5  3E04               	addlw	4
  2352  00C6  00FB               	movwf	??_vw_isr_tmr0
  2353  00C7  087B               	movf	??_vw_isr_tmr0,w
  2354  00C8  0781               	addwf	1,f	;volatile
  2355                           
  2356                           ;virtualwire.c: 391: TMR0IF = 0;
  2357  00C9  110B               	bcf	11,2	;volatile
  2358                           
  2359                           ;virtualwire.c: 393: if (vw_rx_enabled && !vw_tx_enabled)
  2360  00CA  085D               	movf	_vw_rx_enabled,w
  2361  00CB  1903               	btfsc	3,2
  2362  00CC  28DF               	goto	i1l1489
  2363  00CD  0865               	movf	_vw_tx_enabled,w
  2364  00CE  1D03               	btfss	3,2
  2365  00CF  28DF               	goto	i1l1489
  2366                           
  2367                           ;virtualwire.c: 395: if(vw_rx_inverted){
  2368  00D0  0860               	movf	_vw_rx_inverted,w
  2369  00D1  1903               	btfsc	3,2
  2370  00D2  28DB               	goto	i1l1487
  2371                           
  2372                           ;virtualwire.c: 396: vw_rx_sample = (RB3)? 0 : 1;
  2373  00D3  1003               	clrc
  2374  00D4  1D86               	btfss	6,3	;volatile
  2375  00D5  1403               	setc
  2376  00D6  3000               	movlw	0
  2377  00D7  1803               	btfsc	3,0
  2378  00D8  3001               	movlw	1
  2379  00D9  00E3               	movwf	_vw_rx_sample
  2380                           
  2381                           ;virtualwire.c: 397: }
  2382  00DA  28DF               	goto	i1l1489
  2383  00DB                     i1l1487:	
  2384                           
  2385                           ;virtualwire.c: 398: else{
  2386                           ;virtualwire.c: 399: vw_rx_sample = RB3;
  2387  00DB  3000               	movlw	0
  2388  00DC  1986               	btfsc	6,3	;volatile
  2389  00DD  3001               	movlw	1
  2390  00DE  00E3               	movwf	_vw_rx_sample
  2391  00DF                     i1l1489:	
  2392                           
  2393                           ;virtualwire.c: 400: }
  2394                           ;virtualwire.c: 404: if (vw_tx_enabled && vw_tx_sample++ == 0)
  2395  00DF  0865               	movf	_vw_tx_enabled,w
  2396  00E0  1903               	btfsc	3,2
  2397  00E1  294E               	goto	i1l1525
  2398  00E2  3001               	movlw	1
  2399  00E3  00FB               	movwf	??_vw_isr_tmr0
  2400  00E4  087B               	movf	??_vw_isr_tmr0,w
  2401  00E5  07E9               	addwf	_vw_tx_sample,f
  2402  00E6  0369               	decf	_vw_tx_sample,w
  2403  00E7  1D03               	btfss	3,2
  2404  00E8  294E               	goto	i1l1525
  2405                           
  2406                           ;virtualwire.c: 405: {
  2407                           ;virtualwire.c: 406: if (vw_tx_header)
  2408  00E9  0866               	movf	_vw_tx_header,w
  2409  00EA  1903               	btfsc	3,2
  2410  00EB  291B               	goto	i1l1509
  2411                           
  2412                           ;virtualwire.c: 407: {
  2413                           ;virtualwire.c: 408: RB4 = (vw_tx_buf_header[vw_tx_index] & (1 << vw_tx_bit++)) ? 1 : 0;
  2414  00EC  0867               	movf	_vw_tx_index,w
  2415  00ED  3E23               	addlw	low ((_vw_tx_buf_header-__stringbase)| (0+32768))
  2416  00EE  0084               	movwf	4
  2417  00EF  118A  2349  118A   	fcall	stringdir
  2418  00F2  00FB               	movwf	??_vw_isr_tmr0
  2419  00F3  3001               	movlw	1
  2420  00F4  00FC               	movwf	??_vw_isr_tmr0+1
  2421  00F5  0A64               	incf	_vw_tx_bit,w
  2422  00F6  28F9               	goto	u143_24
  2423  00F7                     u143_25:	
  2424  00F7  1003               	clrc
  2425  00F8  0DFC               	rlf	??_vw_isr_tmr0+1,f
  2426  00F9                     u143_24:	
  2427  00F9  3EFF               	addlw	-1
  2428  00FA  1D03               	skipz
  2429  00FB  28F7               	goto	u143_25
  2430  00FC  087C               	movf	??_vw_isr_tmr0+1,w
  2431  00FD  057B               	andwf	??_vw_isr_tmr0,w
  2432  00FE  1903               	btfsc	3,2
  2433  00FF  2904               	goto	u144_20
  2434  0100  1283               	bcf	3,5	;RP0=0, select bank0
  2435  0101  1303               	bcf	3,6	;RP1=0, select bank0
  2436  0102  1606               	bsf	6,4	;volatile
  2437  0103  2907               	goto	i1l1497
  2438  0104                     u144_20:	
  2439  0104  1283               	bcf	3,5	;RP0=0, select bank0
  2440  0105  1303               	bcf	3,6	;RP1=0, select bank0
  2441  0106  1206               	bcf	6,4	;volatile
  2442  0107                     i1l1497:	
  2443  0107  3001               	movlw	1
  2444  0108  00FB               	movwf	??_vw_isr_tmr0
  2445  0109  087B               	movf	??_vw_isr_tmr0,w
  2446  010A  07E4               	addwf	_vw_tx_bit,f
  2447                           
  2448                           ;virtualwire.c: 409: if (vw_tx_bit >= 6)
  2449  010B  3006               	movlw	6
  2450  010C  0264               	subwf	_vw_tx_bit,w
  2451  010D  1C03               	skipc
  2452  010E  2914               	goto	i1l1505
  2453                           
  2454                           ;virtualwire.c: 410: {
  2455                           ;virtualwire.c: 411: vw_tx_bit = 0;
  2456  010F  01E4               	clrf	_vw_tx_bit
  2457                           
  2458                           ;virtualwire.c: 412: vw_tx_index++;
  2459  0110  3001               	movlw	1
  2460  0111  00FB               	movwf	??_vw_isr_tmr0
  2461  0112  087B               	movf	??_vw_isr_tmr0,w
  2462  0113  07E7               	addwf	_vw_tx_index,f
  2463  0114                     i1l1505:	
  2464                           
  2465                           ;virtualwire.c: 413: }
  2466                           ;virtualwire.c: 415: if (vw_tx_index >= 8)
  2467  0114  3008               	movlw	8
  2468  0115  0267               	subwf	_vw_tx_index,w
  2469  0116  1C03               	skipc
  2470  0117  294E               	goto	i1l1525
  2471                           
  2472                           ;virtualwire.c: 416: {
  2473                           ;virtualwire.c: 418: vw_tx_header = 0;
  2474  0118  01E6               	clrf	_vw_tx_header
  2475                           
  2476                           ;virtualwire.c: 419: vw_tx_index = 0;
  2477  0119  01E7               	clrf	_vw_tx_index
  2478                           
  2479                           ;virtualwire.c: 420: }
  2480                           ;virtualwire.c: 421: }
  2481  011A  294E               	goto	i1l1525
  2482  011B                     i1l1509:	
  2483                           
  2484                           ;virtualwire.c: 422: else
  2485                           ;virtualwire.c: 423: {
  2486                           ;virtualwire.c: 428: if (vw_tx_index >= vw_tx_len)
  2487  011B  0868               	movf	_vw_tx_len,w
  2488  011C  0267               	subwf	_vw_tx_index,w
  2489  011D  1C03               	skipc
  2490  011E  2929               	goto	i1l1515
  2491                           
  2492                           ;virtualwire.c: 429: {
  2493                           ;virtualwire.c: 430: vw_tx_stop();
  2494  011F  118A  24FC  118A   	fcall	_vw_tx_stop
  2495                           
  2496                           ;virtualwire.c: 431: vw_rx_enabled = vw_rx_enabled_last;
  2497  0122  1283               	bcf	3,5	;RP0=0, select bank0
  2498  0123  1303               	bcf	3,6	;RP1=0, select bank0
  2499  0124  085E               	movf	_vw_rx_enabled_last,w
  2500  0125  00FB               	movwf	??_vw_isr_tmr0
  2501  0126  087B               	movf	??_vw_isr_tmr0,w
  2502  0127  00DD               	movwf	_vw_rx_enabled
  2503                           
  2504                           ;virtualwire.c: 432: }
  2505  0128  294E               	goto	i1l1525
  2506  0129                     i1l1515:	
  2507                           
  2508                           ;virtualwire.c: 433: else
  2509                           ;virtualwire.c: 434: {
  2510                           ;virtualwire.c: 435: RB4 = (vw_tx_buf[vw_tx_index] & (1 << vw_tx_bit++)) ? 1 : 0;
  2511  0129  0867               	movf	_vw_tx_index,w
  2512  012A  3EA0               	addlw	(low (_vw_tx_buf| 0))& (0+255)
  2513  012B  0084               	movwf	4
  2514  012C  3001               	movlw	1
  2515  012D  00FB               	movwf	??_vw_isr_tmr0
  2516  012E  0A64               	incf	_vw_tx_bit,w
  2517  012F  2932               	goto	u149_24
  2518  0130                     u149_25:	
  2519  0130  1003               	clrc
  2520  0131  0DFB               	rlf	??_vw_isr_tmr0,f
  2521  0132                     u149_24:	
  2522  0132  3EFF               	addlw	-1
  2523  0133  1D03               	skipz
  2524  0134  2930               	goto	u149_25
  2525  0135  087B               	movf	??_vw_isr_tmr0,w
  2526  0136  1383               	bcf	3,7	;select IRP bank1
  2527  0137  0500               	andwf	0,w
  2528  0138  1903               	btfsc	3,2
  2529  0139  293E               	goto	u150_20
  2530  013A  1283               	bcf	3,5	;RP0=0, select bank0
  2531  013B  1303               	bcf	3,6	;RP1=0, select bank0
  2532  013C  1606               	bsf	6,4	;volatile
  2533  013D  2941               	goto	i1l1517
  2534  013E                     u150_20:	
  2535  013E  1283               	bcf	3,5	;RP0=0, select bank0
  2536  013F  1303               	bcf	3,6	;RP1=0, select bank0
  2537  0140  1206               	bcf	6,4	;volatile
  2538  0141                     i1l1517:	
  2539  0141  3001               	movlw	1
  2540  0142  00FB               	movwf	??_vw_isr_tmr0
  2541  0143  087B               	movf	??_vw_isr_tmr0,w
  2542  0144  07E4               	addwf	_vw_tx_bit,f
  2543                           
  2544                           ;virtualwire.c: 436: if (vw_tx_bit >= 6)
  2545  0145  3006               	movlw	6
  2546  0146  0264               	subwf	_vw_tx_bit,w
  2547  0147  1C03               	skipc
  2548  0148  294E               	goto	i1l1525
  2549                           
  2550                           ;virtualwire.c: 437: {
  2551                           ;virtualwire.c: 438: vw_tx_bit = 0;
  2552  0149  01E4               	clrf	_vw_tx_bit
  2553                           
  2554                           ;virtualwire.c: 439: vw_tx_index++;
  2555  014A  3001               	movlw	1
  2556  014B  00FB               	movwf	??_vw_isr_tmr0
  2557  014C  087B               	movf	??_vw_isr_tmr0,w
  2558  014D  07E7               	addwf	_vw_tx_index,f
  2559  014E                     i1l1525:	
  2560                           
  2561                           ;virtualwire.c: 440: }
  2562                           ;virtualwire.c: 441: }
  2563                           ;virtualwire.c: 442: }
  2564                           ;virtualwire.c: 444: }
  2565                           ;virtualwire.c: 446: if (vw_tx_sample > 7)
  2566  014E  3008               	movlw	8
  2567  014F  0269               	subwf	_vw_tx_sample,w
  2568  0150  1803               	btfsc	3,0
  2569                           
  2570                           ;virtualwire.c: 447: vw_tx_sample = 0;
  2571  0151  01E9               	clrf	_vw_tx_sample
  2572                           
  2573                           ;virtualwire.c: 451: if (vw_rx_enabled && !vw_tx_enabled)
  2574  0152  085D               	movf	_vw_rx_enabled,w
  2575  0153  1903               	btfsc	3,2
  2576  0154  0008               	return
  2577  0155  0865               	movf	_vw_tx_enabled,w
  2578  0156  1D03               	btfss	3,2
  2579  0157  0008               	return
  2580                           
  2581                           ;virtualwire.c: 452: vw_pll();
  2582  0158  118A  2023         	fcall	_vw_pll
  2583  015A  0008               	return
  2584  015B                     __end_of_vw_isr_tmr0:	
  2585                           
  2586                           	psect	text16
  2587  04FC                     __ptext16:	
  2588 ;; *************** function _vw_tx_stop *****************
  2589 ;; Defined at:
  2590 ;;		line 162 in file "virtualwire.c"
  2591 ;; Parameters:    Size  Location     Type
  2592 ;;		None
  2593 ;; Auto vars:     Size  Location     Type
  2594 ;;		None
  2595 ;; Return value:  Size  Location     Type
  2596 ;;                  1    wreg      void 
  2597 ;; Registers used:
  2598 ;;		status,2
  2599 ;; Tracked objects:
  2600 ;;		On entry : 0/0
  2601 ;;		On exit  : 0/0
  2602 ;;		Unchanged: 0/0
  2603 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2604 ;;      Params:         0       0       0       0       0
  2605 ;;      Locals:         0       0       0       0       0
  2606 ;;      Temps:          0       0       0       0       0
  2607 ;;      Totals:         0       0       0       0       0
  2608 ;;Total ram usage:        0 bytes
  2609 ;; Hardware stack levels used:    1
  2610 ;; This function calls:
  2611 ;;		Nothing
  2612 ;; This function is called by:
  2613 ;;		_vw_isr_tmr0
  2614 ;; This function uses a non-reentrant model
  2615 ;;
  2616                           
  2617                           
  2618                           ;psect for function _vw_tx_stop
  2619  04FC                     _vw_tx_stop:	
  2620                           
  2621                           ;virtualwire.c: 164: RB4 = 0;
  2622                           
  2623                           ;incstack = 0
  2624                           ; Regs used in _vw_tx_stop: [status,2]
  2625  04FC  1283               	bcf	3,5	;RP0=0, select bank0
  2626  04FD  1303               	bcf	3,6	;RP1=0, select bank0
  2627  04FE  1206               	bcf	6,4	;volatile
  2628                           
  2629                           ;virtualwire.c: 165: vw_tx_enabled = 0;
  2630  04FF  01E5               	clrf	_vw_tx_enabled
  2631  0500  0008               	return
  2632  0501                     __end_of_vw_tx_stop:	
  2633                           
  2634                           	psect	text17
  2635  0023                     __ptext17:	
  2636 ;; *************** function _vw_pll *****************
  2637 ;; Defined at:
  2638 ;;		line 262 in file "virtualwire.c"
  2639 ;; Parameters:    Size  Location     Type
  2640 ;;		None
  2641 ;; Auto vars:     Size  Location     Type
  2642 ;;  this_byte       1   10[COMMON] unsigned char 
  2643 ;; Return value:  Size  Location     Type
  2644 ;;                  1    wreg      void 
  2645 ;; Registers used:
  2646 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2647 ;; Tracked objects:
  2648 ;;		On entry : 0/0
  2649 ;;		On exit  : 0/0
  2650 ;;		Unchanged: 0/0
  2651 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2652 ;;      Params:         0       0       0       0       0
  2653 ;;      Locals:         3       0       0       0       0
  2654 ;;      Temps:          5       0       0       0       0
  2655 ;;      Totals:         8       0       0       0       0
  2656 ;;Total ram usage:        8 bytes
  2657 ;; Hardware stack levels used:    1
  2658 ;; Hardware stack levels required when called:    2
  2659 ;; This function calls:
  2660 ;;		_vw_symbol_6to4
  2661 ;; This function is called by:
  2662 ;;		_vw_isr_tmr0
  2663 ;; This function uses a non-reentrant model
  2664 ;;
  2665                           
  2666                           
  2667                           ;psect for function _vw_pll
  2668  0023                     _vw_pll:	
  2669                           
  2670                           ;virtualwire.c: 265: if (vw_rx_sample)
  2671                           
  2672                           ;incstack = 0
  2673                           ; Regs used in _vw_pll: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2674  0023  1283               	bcf	3,5	;RP0=0, select bank0
  2675  0024  1303               	bcf	3,6	;RP1=0, select bank0
  2676  0025  0863               	movf	_vw_rx_sample,w
  2677  0026  1903               	btfsc	3,2
  2678  0027  282C               	goto	i1l1393
  2679                           
  2680                           ;virtualwire.c: 266: vw_rx_integrator++;
  2681  0028  3001               	movlw	1
  2682  0029  00F3               	movwf	??_vw_pll
  2683  002A  0873               	movf	??_vw_pll,w
  2684  002B  07DF               	addwf	_vw_rx_integrator,f
  2685  002C                     i1l1393:	
  2686                           
  2687                           ;virtualwire.c: 268: if (vw_rx_sample != vw_rx_last_sample)
  2688  002C  0863               	movf	_vw_rx_sample,w
  2689  002D  0661               	xorwf	_vw_rx_last_sample,w
  2690  002E  1903               	skipnz
  2691  002F  2843               	goto	i1l1405
  2692                           
  2693                           ;virtualwire.c: 269: {
  2694                           ;virtualwire.c: 271: vw_rx_pll_ramp += ((vw_rx_pll_ramp < 160/2)
  2695                           ;virtualwire.c: 272: ? ((160/8)-9)
  2696                           ;virtualwire.c: 273: : ((160/8)+9));
  2697  0030  3050               	movlw	80
  2698  0031  0262               	subwf	_vw_rx_pll_ramp,w
  2699  0032  1C03               	skipc
  2700  0033  2836               	goto	i1l1399
  2701  0034  301D               	movlw	29
  2702  0035  2837               	goto	L2
  2703  0036                     i1l1399:	
  2704  0036  300B               	movlw	11
  2705  0037                     L2:	
  2706  0037  00F8               	movwf	_vw_pll$225
  2707  0038  3000               	movlw	0
  2708  0039  00F9               	movwf	_vw_pll$225+1
  2709  003A  0878               	movf	_vw_pll$225,w
  2710  003B  00F3               	movwf	??_vw_pll
  2711  003C  0873               	movf	??_vw_pll,w
  2712  003D  07E2               	addwf	_vw_rx_pll_ramp,f
  2713                           
  2714                           ;virtualwire.c: 274: vw_rx_last_sample = vw_rx_sample;
  2715  003E  0863               	movf	_vw_rx_sample,w
  2716  003F  00F3               	movwf	??_vw_pll
  2717  0040  0873               	movf	??_vw_pll,w
  2718  0041  00E1               	movwf	_vw_rx_last_sample
  2719                           
  2720                           ;virtualwire.c: 275: }
  2721  0042  2847               	goto	i1l1407
  2722  0043                     i1l1405:	
  2723                           
  2724                           ;virtualwire.c: 276: else
  2725                           ;virtualwire.c: 277: {
  2726                           ;virtualwire.c: 280: vw_rx_pll_ramp += (160/8);
  2727  0043  3014               	movlw	20
  2728  0044  00F3               	movwf	??_vw_pll
  2729  0045  0873               	movf	??_vw_pll,w
  2730  0046  07E2               	addwf	_vw_rx_pll_ramp,f
  2731  0047                     i1l1407:	
  2732                           
  2733                           ;virtualwire.c: 281: }
  2734                           ;virtualwire.c: 282: if (vw_rx_pll_ramp >= 160)
  2735  0047  30A0               	movlw	160
  2736  0048  0262               	subwf	_vw_rx_pll_ramp,w
  2737  0049  1C03               	skipc
  2738  004A  0008               	return
  2739                           
  2740                           ;virtualwire.c: 283: {
  2741                           ;virtualwire.c: 286: vw_rx_bits >>= 1;
  2742  004B  3001               	movlw	1
  2743  004C                     u125_25:	
  2744  004C  1003               	clrc
  2745  004D  0CD8               	rrf	_vw_rx_bits+1,f
  2746  004E  0CD7               	rrf	_vw_rx_bits,f
  2747  004F  3EFF               	addlw	-1
  2748  0050  1D03               	skipz
  2749  0051  284C               	goto	u125_25
  2750                           
  2751                           ;virtualwire.c: 290: if (vw_rx_integrator >= 5)
  2752  0052  3005               	movlw	5
  2753  0053  025F               	subwf	_vw_rx_integrator,w
  2754  0054  1803               	btfsc	3,0
  2755                           
  2756                           ;virtualwire.c: 291: vw_rx_bits |= 0x800;
  2757  0055  15D8               	bsf	_vw_rx_bits+1,3
  2758                           
  2759                           ;virtualwire.c: 293: vw_rx_pll_ramp -= 160;
  2760  0056  30A0               	movlw	160
  2761  0057  02E2               	subwf	_vw_rx_pll_ramp,f
  2762                           
  2763                           ;virtualwire.c: 294: vw_rx_integrator = 0;
  2764  0058  01DF               	clrf	_vw_rx_integrator
  2765                           
  2766                           ;virtualwire.c: 296: if (vw_rx_active)
  2767  0059  0859               	movf	_vw_rx_active,w
  2768  005A  1903               	btfsc	3,2
  2769  005B  28B4               	goto	i1l1447
  2770                           
  2771                           ;virtualwire.c: 297: {
  2772                           ;virtualwire.c: 300: if (++vw_rx_bit_count >= 12)
  2773  005C  3001               	movlw	1
  2774  005D  00F3               	movwf	??_vw_pll
  2775  005E  0873               	movf	??_vw_pll,w
  2776  005F  07DA               	addwf	_vw_rx_bit_count,f
  2777  0060  300C               	movlw	12
  2778  0061  025A               	subwf	_vw_rx_bit_count,w
  2779  0062  1C03               	skipc
  2780  0063  0008               	return
  2781                           
  2782                           ;virtualwire.c: 301: {
  2783                           ;virtualwire.c: 305: uint8_t this_byte =
  2784                           ;virtualwire.c: 306: (vw_symbol_6to4(vw_rx_bits & 0x3f)) << 4
  2785                           ;virtualwire.c: 307: | vw_symbol_6to4(vw_rx_bits >> 6);
  2786  0064  0858               	movf	_vw_rx_bits+1,w
  2787  0065  00F4               	movwf	??_vw_pll+1
  2788  0066  0857               	movf	_vw_rx_bits,w
  2789  0067  00F3               	movwf	??_vw_pll
  2790  0068  3006               	movlw	6
  2791  0069                     u129_25:	
  2792  0069  1003               	clrc
  2793  006A  0CF4               	rrf	??_vw_pll+1,f
  2794  006B  0CF3               	rrf	??_vw_pll,f
  2795  006C  3EFF               	addlw	-1
  2796  006D  1D03               	skipz
  2797  006E  2869               	goto	u129_25
  2798  006F  0873               	movf	??_vw_pll,w
  2799  0070  118A  247D  118A   	fcall	_vw_symbol_6to4
  2800  0073  00F5               	movwf	??_vw_pll+2
  2801  0074  1283               	bcf	3,5	;RP0=0, select bank0
  2802  0075  1303               	bcf	3,6	;RP1=0, select bank0
  2803  0076  0857               	movf	_vw_rx_bits,w
  2804  0077  393F               	andlw	63
  2805  0078  118A  247D  118A   	fcall	_vw_symbol_6to4
  2806  007B  00F6               	movwf	??_vw_pll+3
  2807  007C  3003               	movlw	3
  2808  007D                     u130_25:	
  2809  007D  1003               	clrc
  2810  007E  0DF6               	rlf	??_vw_pll+3,f
  2811  007F  3EFF               	addlw	-1
  2812  0080  1D03               	skipz
  2813  0081  287D               	goto	u130_25
  2814  0082  1003               	clrc
  2815  0083  0D76               	rlf	??_vw_pll+3,w
  2816  0084  0475               	iorwf	??_vw_pll+2,w
  2817  0085  00F7               	movwf	??_vw_pll+4
  2818  0086  0877               	movf	??_vw_pll+4,w
  2819  0087  00FA               	movwf	vw_pll@this_byte
  2820                           
  2821                           ;virtualwire.c: 312: if (vw_rx_len == 0)
  2822  0088  087D               	movf	_vw_rx_len,w
  2823  0089  1D03               	btfss	3,2
  2824  008A  289B               	goto	i1l1435
  2825                           
  2826                           ;virtualwire.c: 313: {
  2827                           ;virtualwire.c: 317: vw_rx_count = this_byte;
  2828  008B  087A               	movf	vw_pll@this_byte,w
  2829  008C  00F3               	movwf	??_vw_pll
  2830  008D  0873               	movf	??_vw_pll,w
  2831  008E  1283               	bcf	3,5	;RP0=0, select bank0
  2832  008F  1303               	bcf	3,6	;RP1=0, select bank0
  2833  0090  00DB               	movwf	_vw_rx_count
  2834                           
  2835                           ;virtualwire.c: 318: if (vw_rx_count < 4 || vw_rx_count > 24)
  2836  0091  3004               	movlw	4
  2837  0092  025B               	subwf	_vw_rx_count,w
  2838  0093  1C03               	skipc
  2839  0094  2899               	goto	i1l1431
  2840  0095  3019               	movlw	25
  2841  0096  025B               	subwf	_vw_rx_count,w
  2842  0097  1C03               	skipc
  2843  0098  289B               	goto	i1l1435
  2844  0099                     i1l1431:	
  2845                           
  2846                           ;virtualwire.c: 319: {
  2847                           ;virtualwire.c: 321: vw_rx_active = 0;
  2848  0099  01D9               	clrf	_vw_rx_active
  2849                           
  2850                           ;virtualwire.c: 322: return;
  2851  009A  0008               	return
  2852  009B                     i1l1435:	
  2853                           
  2854                           ;virtualwire.c: 323: }
  2855                           ;virtualwire.c: 324: }
  2856                           ;virtualwire.c: 325: vw_tx_buf[vw_rx_len++] = this_byte;
  2857  009B  087A               	movf	vw_pll@this_byte,w
  2858  009C  00F3               	movwf	??_vw_pll
  2859  009D  087D               	movf	_vw_rx_len,w
  2860  009E  3EA0               	addlw	(low (_vw_tx_buf| 0))& (0+255)
  2861  009F  0084               	movwf	4
  2862  00A0  0873               	movf	??_vw_pll,w
  2863  00A1  1383               	bcf	3,7	;select IRP bank1
  2864  00A2  0080               	movwf	0
  2865  00A3  3001               	movlw	1
  2866  00A4  00F3               	movwf	??_vw_pll
  2867  00A5  0873               	movf	??_vw_pll,w
  2868  00A6  07FD               	addwf	_vw_rx_len,f
  2869                           
  2870                           ;virtualwire.c: 327: if (vw_rx_len >= vw_rx_count)
  2871  00A7  1283               	bcf	3,5	;RP0=0, select bank0
  2872  00A8  1303               	bcf	3,6	;RP1=0, select bank0
  2873  00A9  085B               	movf	_vw_rx_count,w
  2874  00AA  027D               	subwf	_vw_rx_len,w
  2875  00AB  1C03               	skipc
  2876  00AC  28B2               	goto	i1l1445
  2877                           
  2878                           ;virtualwire.c: 328: {
  2879                           ;virtualwire.c: 330: vw_rx_active = 0;
  2880  00AD  01D9               	clrf	_vw_rx_active
  2881                           
  2882                           ;virtualwire.c: 331: vw_rx_done = 1;
  2883  00AE  3001               	movlw	1
  2884  00AF  00F3               	movwf	??_vw_pll
  2885  00B0  0873               	movf	??_vw_pll,w
  2886  00B1  00DC               	movwf	_vw_rx_done	;volatile
  2887  00B2                     i1l1445:	
  2888                           
  2889                           ;virtualwire.c: 332: }
  2890                           ;virtualwire.c: 333: vw_rx_bit_count = 0;
  2891  00B2  01DA               	clrf	_vw_rx_bit_count
  2892                           
  2893                           ;virtualwire.c: 334: }
  2894                           ;virtualwire.c: 335: }
  2895  00B3  0008               	return
  2896  00B4                     i1l1447:	
  2897                           
  2898                           ;virtualwire.c: 337: else if (vw_rx_bits == 0xb38)
  2899  00B4  3038               	movlw	56
  2900  00B5  0657               	xorwf	_vw_rx_bits,w
  2901  00B6  300B               	movlw	11
  2902  00B7  1903               	skipnz
  2903  00B8  0658               	xorwf	_vw_rx_bits+1,w
  2904  00B9  1D03               	btfss	3,2
  2905  00BA  0008               	return
  2906                           
  2907                           ;virtualwire.c: 338: {
  2908                           ;virtualwire.c: 340: vw_rx_active = 1;
  2909  00BB  01D9               	clrf	_vw_rx_active
  2910  00BC  0AD9               	incf	_vw_rx_active,f
  2911                           
  2912                           ;virtualwire.c: 341: vw_rx_bit_count = 0;
  2913  00BD  01DA               	clrf	_vw_rx_bit_count
  2914                           
  2915                           ;virtualwire.c: 342: vw_rx_len = 0;
  2916  00BE  01FD               	clrf	_vw_rx_len
  2917                           
  2918                           ;virtualwire.c: 343: vw_rx_done = 0;
  2919  00BF  01DC               	clrf	_vw_rx_done	;volatile
  2920  00C0  0008               	return
  2921  00C1                     __end_of_vw_pll:	
  2922                           
  2923                           	psect	text18
  2924  047D                     __ptext18:	
  2925 ;; *************** function _vw_symbol_6to4 *****************
  2926 ;; Defined at:
  2927 ;;		line 245 in file "virtualwire.c"
  2928 ;; Parameters:    Size  Location     Type
  2929 ;;  symbol          1    wreg     unsigned char 
  2930 ;; Auto vars:     Size  Location     Type
  2931 ;;  symbol          1    1[COMMON] unsigned char 
  2932 ;;  i               1    2[COMMON] unsigned char 
  2933 ;; Return value:  Size  Location     Type
  2934 ;;                  1    wreg      unsigned char 
  2935 ;; Registers used:
  2936 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  2937 ;; Tracked objects:
  2938 ;;		On entry : 0/0
  2939 ;;		On exit  : 0/0
  2940 ;;		Unchanged: 0/0
  2941 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2942 ;;      Params:         0       0       0       0       0
  2943 ;;      Locals:         2       0       0       0       0
  2944 ;;      Temps:          1       0       0       0       0
  2945 ;;      Totals:         3       0       0       0       0
  2946 ;;Total ram usage:        3 bytes
  2947 ;; Hardware stack levels used:    2
  2948 ;; This function calls:
  2949 ;;		Nothing
  2950 ;; This function is called by:
  2951 ;;		_vw_pll
  2952 ;; This function uses a non-reentrant model
  2953 ;;
  2954                           
  2955                           
  2956                           ;psect for function _vw_symbol_6to4
  2957  047D                     _vw_symbol_6to4:	
  2958                           
  2959                           ;incstack = 0
  2960 ;; using string table level
  2961                           ; Regs used in _vw_symbol_6to4: [wreg-fsr0h+status,2+status,0+pclath]
  2962                           ;vw_symbol_6to4@symbol stored from wreg
  2963  047D  00F1               	movwf	vw_symbol_6to4@symbol
  2964                           
  2965                           ;virtualwire.c: 247: uint8_t i;
  2966                           ;virtualwire.c: 250: for (i = 0; i < 16; i++)
  2967  047E  01F2               	clrf	vw_symbol_6to4@i
  2968  047F  3010               	movlw	16
  2969  0480  0272               	subwf	vw_symbol_6to4@i,w
  2970  0481  1803               	btfsc	3,0
  2971  0482  2C96               	goto	i1l1281
  2972  0483                     i1l1271:	
  2973                           
  2974                           ;virtualwire.c: 251: if (symbol == symbols[i])
  2975  0483  0872               	movf	vw_symbol_6to4@i,w
  2976  0484  3E13               	addlw	low ((_symbols-__stringbase)| (0+32768))
  2977  0485  0084               	movwf	4
  2978  0486  118A  2349  118A   	fcall	stringdir
  2979  0489  0671               	xorwf	vw_symbol_6to4@symbol,w
  2980  048A  1D03               	skipz
  2981  048B  2C8E               	goto	i1l1277
  2982                           
  2983                           ;virtualwire.c: 252: return i;
  2984  048C  0872               	movf	vw_symbol_6to4@i,w
  2985  048D  0008               	return
  2986  048E                     i1l1277:	
  2987  048E  3001               	movlw	1
  2988  048F  00F0               	movwf	??_vw_symbol_6to4
  2989  0490  0870               	movf	??_vw_symbol_6to4,w
  2990  0491  07F2               	addwf	vw_symbol_6to4@i,f
  2991  0492  3010               	movlw	16
  2992  0493  0272               	subwf	vw_symbol_6to4@i,w
  2993  0494  1C03               	skipc
  2994  0495  2C83               	goto	i1l1271
  2995  0496                     i1l1281:	
  2996                           
  2997                           ;virtualwire.c: 254: return 0;
  2998  0496  3000               	movlw	0
  2999  0497  0008               	return
  3000  0498                     __end_of_vw_symbol_6to4:	
  3001  007E                     btemp	set	126	;btemp
  3002  007E                     wtemp0	set	126


Data Sizes:
    Strings     19
    Constant    42
    Data        0
    BSS         93
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      14
    BANK0            80     55      75
    BANK1            80      0      72
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    vw_recv@buf	PTR unsigned char  size(1) Largest target is 24
		 -> text(BANK1[24]), 

    vw_recv@len	PTR unsigned char  size(1) Largest target is 1
		 -> main@len(BANK0[1]), 

    vw_crc@ptr	PTR unsigned char  size(1) Largest target is 48
		 -> vw_tx_buf(BANK1[48]), 

    _calc_timer0_prescaler@prescaler_bits	PTR unsigned char  size(1) Largest target is 1
		 -> vw_setup@prescaler_bits(BANK0[1]), 

    _calc_timer0_prescaler@k_tmr0	PTR unsigned char  size(1) Largest target is 1
		 -> vw_tmr0_value(BANK0[1]), 

    _calc_timer0_prescaler@prescaler_value	PTR unsigned int  size(1) Largest target is 2
		 -> vw_setup@prescaler_value(BANK0[2]), 

    sp__memcpy	PTR unsigned char  size(1) Largest target is 24
		 -> text(BANK1[24]), 

    memcpy@src	PTR unsigned char  size(1) Largest target is 48
		 -> vw_tx_buf(BANK1[48]), 

    memcpy@dest	PTR unsigned char  size(1) Largest target is 24
		 -> text(BANK1[24]), 

    UART_send_string@str	PTR unsigned char  size(1) Largest target is 19
		 -> STR_3(CODE[19]), STR_2(CODE[19]), STR_1(CODE[19]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _global_isr in COMMON

    _global_isr->_vw_isr_tmr0
    _vw_isr_tmr0->_vw_pll
    _vw_pll->_vw_symbol_6to4

Critical Paths under _main in BANK0

    _main->_vw_setup
    _vw_setup->__calc_timer0_prescaler
    __calc_timer0_prescaler->___aldiv
    ___aldiv->___wmul
    _vw_recv->_vw_crc
    _vw_crc->__crc_ccitt_update
    _UART_send_string->_UART_send_byte

Critical Paths under _global_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _global_isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _global_isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _global_isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 6     6      0    2601
                                             49 BANK0      6     6      0
                          _UART_Init
                     _UART_send_byte
                   _UART_send_string
                    _vw_have_message
                            _vw_recv
                        _vw_rx_start
                           _vw_setup
 ---------------------------------------------------------------------------------
 (1) _vw_setup                                             8     6      2    1251
                                             41 BANK0      8     6      2
             __calc_timer0_prescaler
 ---------------------------------------------------------------------------------
 (2) __calc_timer0_prescaler                              16    11      5    1083
                                             25 BANK0     16    11      5
                            ___aldiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     198
                                              4 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___aldiv                                             15     7      8     406
                                             10 BANK0     15     7      8
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _vw_rx_start                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _vw_recv                                              6     5      1    1085
                                             26 BANK0      6     5      1
                             _memcpy
                             _vw_crc
 ---------------------------------------------------------------------------------
 (2) _vw_crc                                               6     4      2     623
                                             20 BANK0      6     4      2
                  __crc_ccitt_update
 ---------------------------------------------------------------------------------
 (3) __crc_ccitt_update                                   16    13      3     452
                                              4 BANK0     16    13      3
 ---------------------------------------------------------------------------------
 (2) _memcpy                                               7     4      3     249
                                              4 BANK0      7     4      3
 ---------------------------------------------------------------------------------
 (1) _vw_have_message                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _UART_send_string                                     2     2      0     148
                                              5 BANK0      2     2      0
                     _UART_send_byte
 ---------------------------------------------------------------------------------
 (2) _UART_send_byte                                       1     1      0      22
                                              4 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _UART_Init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _global_isr                                           4     4      0     181
                                              0 BANK0      4     4      0
                        _vw_isr_tmr0
 ---------------------------------------------------------------------------------
 (5) _vw_isr_tmr0                                          2     2      0     181
                                             11 COMMON     2     2      0
                             _vw_pll
                         _vw_tx_stop
 ---------------------------------------------------------------------------------
 (6) _vw_tx_stop                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _vw_pll                                               8     8      0     181
                                              3 COMMON     8     8      0
                     _vw_symbol_6to4
 ---------------------------------------------------------------------------------
 (8) _vw_symbol_6to4                                       3     3      0     112
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _UART_Init
   _UART_send_byte
   _UART_send_string
     _UART_send_byte
   _vw_have_message
   _vw_recv
     _memcpy
     _vw_crc
       __crc_ccitt_update
   _vw_rx_start
   _vw_setup
     __calc_timer0_prescaler
       ___aldiv
         ___wmul (ARG)
       ___wmul

 _global_isr (ROOT)
   _vw_isr_tmr0
     _vw_pll
       _vw_symbol_6to4
     _vw_tx_stop

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      D       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      A1       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     37      4B       5       93.8%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0      48       7       90.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      A1      12        0.0%


Microchip Technology PIC Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Fri Apr 20 09:11:00 2018

                                              pc 0002                                      __CFG_CP$OFF 0000  
                        ?__calc_timer0_prescaler 0039                                               l54 04DB  
                                             fsr 0004                              ___wmul@multiplicand 0026  
                                            l430 0202                                              l375 0448  
                                            _GIE 005F                                              _RB3 0033  
                                            _RB4 0034                                     __CFG_CPD$OFF 0000  
                                            _RX9 00C6                                              u955 0308  
                                            u965 0321                                              _TX9 04C6  
                                            fsr0 0004                                              indf 0000  
                      __end_of__crc_ccitt_update 0349                                     __CFG_IESO$ON 0000  
                                   __CFG_FOSC$HS 0000                                     __CFG_LVP$OFF 0000  
                                           l1331 0268                                             l1317 0223  
                                           l1309 0213                                             l1335 0276  
                                           l1327 025B                                             l1319 0233  
                                           l1347 0462                                             l1621 01B0  
                                           l1383 0419                                             l1287 0440  
                                           l1543 03BD                                             l1385 0437  
                                           l1369 02FA                                             l1633 01CB  
                                           l1475 049B                                             l1563 03D7  
                                           l1635 01E7                                             l1569 03E9  
                                           STR_1 0379                                             STR_2 0379  
                                           STR_3 0379                                             _BRGH 04C2  
                                           _CREN 00C4                                             _T0CS 040D  
                                           u1015 0449                                             u1105 024A  
                                           u1025 0450                                             u1115 025C  
                                           u1075 0227                                             u1095 0235  
                                           u1630 0410                                             u1570 03CD  
                                           u1590 04EB                                             u1757 0181  
                                           u1695 01D4                                             u1767 019B  
                                           _PEIE 005E                                             _RCIF 0065  
                                           i1l81 04CB                                             _TMR0 0001  
                                           _SPEN 00C7                                             _TRMT 04C1  
                                           _TXEN 04C5                                             _SYNC 04C4  
                                   __CFG_WRT$OFF 0000                                    __CFG_FCMEN$ON 0000  
                                           _main 015B                                             _text 00D0  
                                           btemp 007E                                    __CFG_BOREN$ON 0000  
                                           start 0011                   __end_of__calc_timer0_prescaler 02FF  
                      __size_of_UART_send_string 001A                                      _vw_isr_tmr0 00C1  
                                __end_of___aldiv 027F                                            ?_main 0070  
                                  __CFG_WDTE$OFF 0000                                            _RCREG 001A  
                                          _SPBRG 0099                                            _PORTB 0006  
                                          _TRISB 0086                           __crc_ccitt_update@data 0026  
                                          _TXREG 0019                                   __CFG_CCPMX$RB0 0000  
                                    _vw_rx_count 005B                               __size_of_UART_Init 0014  
                                    _vw_rx_start 04F5                          __end_of_vw_have_message 04ED  
                                    _vw_tx_index 0067                                            main@i 0054  
                                          pclath 000A                                            status 0003  
                                          wtemp0 007E                                  __end_of_vw_recv 0412  
                                __end_of_symbols 0371                                   __CFG_MCLRE$OFF 0000  
                                __initialization 0013                                     __end_of_main 01F0  
                               _vw_rx_integrator 005F                  __calc_timer0_prescaler@aux_tmr0 0046  
                                         ??_main 0051                           vw_setup@prescaler_bits 0050  
                     __size_of__crc_ccitt_update 004A                                           i1l1405 0043  
                                         i1l1271 0483                                           i1l1431 0099  
                                         i1l1407 0047                                           i1l1281 0496  
                                         i1l1505 0114                                           i1l1435 009B  
                                         i1l1515 0129                                           i1l1277 048E  
                                         i1l1445 00B2                                           i1l1517 0141  
                                         i1l1509 011B                                           i1l1525 014E  
                                         i1l1447 00B4                                           i1l1393 002C  
                                         i1l1399 0036                                           i1l1487 00DB  
                                         i1l1497 0107                                           i1l1489 00DF  
                                         u130_25 007D                                           u125_25 004C  
                                         u150_20 013E                                           u143_24 00F9  
                                         u143_25 00F7                                           u144_20 0104  
                                         u129_25 0069                                           u149_24 0132  
                                         u149_25 0130                                           _TMR0IE 005D  
                                         _TMR0IF 005A                                           _TRISB2 0432  
                                         _TRISB3 0433                                           _TRISB4 0434  
                                         _TRISB5 0435                                     _vw_rx_active 0059  
                                 __CFG_PWRTE$OFF 0000                                     _vw_rx_sample 0063  
                                   _vw_tx_header 0066                                __end_of_UART_Init 04C6  
                                      ??___aldiv 0032                                           ___wmul 043C  
                                   _vw_tx_sample 0069                                 _vw_tx_buf_header 0371  
                                         _memcpy 045F                                           _vw_crc 0412  
                                         _vw_pll 0023                                 ??_vw_symbol_6to4 0070  
                                         saved_w 007E                                 ?_vw_have_message 0070  
                                      ??_vw_recv 003B                                _vw_rx_last_sample 0061  
                               __end_of_vw_setup 03CF                               _vw_rx_enabled_last 005E  
                        __end_of__initialization 0020                                   __pcstackCOMMON 0070  
                               _UART_send_string 0498                                       __pbssBANK0 0057  
                                     __pbssBANK1 00A0                          vw_setup@prescaler_value 004E  
                                     __pmaintext 015B                                    _vw_tmr0_value 006A  
                                        ?___wmul 0024                                       __pintentry 0004  
                                        ?_memcpy 0024                                     ?_vw_isr_tmr0 0070  
                                        ?_vw_crc 0034                                          ?_vw_pll 0070  
                                   ?_vw_rx_start 0070                          __size_of_UART_send_byte 000C  
                                     __stringtab 0349                                       _global_isr 04C6  
                                  _vw_rx_enabled 005D                     __calc_timer0_prescaler@brate 0039  
                                  _vw_tx_enabled 0065                                          ___aldiv 01F0  
                                __size_of___wmul 0023                                  __size_of_memcpy 001E  
                                        __ptext1 038C                                          __ptext2 027F  
                                        __ptext3 043C                                          __ptext4 01F0  
                                        __ptext5 04F5                                          __ptext6 03CF  
                                        __ptext7 0412                                          __ptext8 02FF  
                                        __ptext9 045F                                        ?_vw_setup 0049  
                                __size_of_vw_crc 002A                                  __size_of_vw_pll 009E  
                               ___aldiv@dividend 002E                                          main@len 0056  
                                        clrloop0 04EE                         __end_of_vw_tx_buf_header 0379  
                                        _vw_recv 03CF                                          _symbols 0361  
                           end_of_initialization 0020                                     vw_recv@rxlen 003F  
                                        memcpy@n 0025                                  vw_symbol_6to4@i 0072  
                                      _RCSTAbits 0018                                 ___aldiv@quotient 0035  
                                      _UART_Init 04B2                                       ??_vw_setup 004B  
                           vw_symbol_6to4@symbol 0071                         __end_of_UART_send_string 04B2  
                                    ?_global_isr 0070                         ??__calc_timer0_prescaler 003E  
                                _vw_rx_bit_count 005A                                       _vw_pll$225 0078  
                                 __end_of___wmul 045F                            __crc_ccitt_update@crc 0024  
                                     _vw_rx_bits 0057                                       ?_UART_Init 0070  
                                     _vw_rx_done 005C                                       _vw_tx_stop 04FC  
                                 __end_of_memcpy 047D                             __size_of_vw_isr_tmr0 009A  
                                vw_pll@this_byte 007A                                   __end_of_vw_crc 043C  
                                 __end_of_vw_pll 00C1  __end_of__calc_timer0_prescaler@prescaler_factor 0361  
        __calc_timer0_prescaler@prescaler_factor 034F                              start_initialization 0013  
                                 _UART_send_byte 04D8                             __size_of_vw_rx_start 0007  
                       __size_of_vw_have_message 0009            __calc_timer0_prescaler@prescaler_bits 003C  
                                     memcpy@dest 002A                                         ??___wmul 0028  
                                       ??_memcpy 0027                              __size_of_global_isr 0012  
                                       ??_vw_crc 0036                                         ??_vw_pll 0073  
                         __end_of_UART_send_byte 04E4                                      __pbssCOMMON 007D  
                                      ___latbits 0001                                    __pcstackBANK0 0020  
                        __size_of_vw_symbol_6to4 001B                  __size_of__calc_timer0_prescaler 0080  
                                    vw_crc@count 0034                                         ?___aldiv 002A  
                                    ??_UART_Init 0024                                        __pstrings 0349  
                                    ?_vw_tx_stop 0070                              UART_send_string@str 0026  
                                ?_UART_send_byte 0070                                __size_of_vw_setup 0043  
                                       ?_vw_recv 003A                                  ___aldiv@divisor 002A  
                              interrupt_function 0004                                  ___aldiv@counter 0033  
                                 ___wmul@product 0028                                        clear_ram0 04ED  
                              ??_vw_have_message 0024                                      __stringbase 034E  
                              ___wmul@multiplier 0024                           __calc_timer0_prescaler 027F  
                      UART_send_byte@single_byte 0024                                        _vw_rx_len 007D  
                                      _vw_tx_bit 0064                                        _vw_tx_buf 00A0  
                                      _vw_tx_len 0068                                ?_UART_send_string 0070  
                                   ??_global_isr 0020           __calc_timer0_prescaler@prescaler_value 003B  
                  __calc_timer0_prescaler@k_tmr0 003D                               ??_UART_send_string 0025  
                                 _vw_rx_inverted 0060                              __size_of_vw_tx_stop 0005  
                  __calc_timer0_prescaler@pindex 0048                                   _vw_rx_pll_ramp 0062  
                                      memcpy@src 0024                                 __size_of___aldiv 008F  
                             __end_of__stringtab 034F                               __end_of_global_isr 04D8  
                                       __ptext10 04E4                                         __ptext11 0498  
                                       __ptext12 04D8                                         __ptext13 04B2  
                                       __ptext14 04C6                                         __ptext15 00C1  
                                       __ptext16 04FC                                         __ptext17 0023  
                                       __ptext18 047D                                   _vw_symbol_6to4 047D  
                               __size_of_vw_recv 0043                                    __size_of_main 0095  
                                     vw_recv@buf 003E                                       vw_recv@len 003A  
                                  ??_vw_isr_tmr0 007B                                         _vw_setup 038C  
                                  ??_vw_rx_start 0024                           __end_of_vw_symbol_6to4 0498  
                                       intlevel1 0000                                        vw_crc@crc 0038  
                                      vw_crc@ptr 0037                                        stringcode 0349  
                               ??_UART_send_byte 0024                                     ??_vw_tx_stop 0070  
                                     _OPTION_REG 0081                              __end_of_vw_isr_tmr0 015B  
                                       stringdir 0349                                         stringtab 0349  
                                   ___aldiv@sign 0034                                  ?_vw_symbol_6to4 0070  
                              __crc_ccitt_update 02FF                               ?__crc_ccitt_update 0024  
                            __end_of_vw_rx_start 04FC                                  _vw_have_message 04E4  
                             __end_of_vw_tx_stop 0501                              ??__crc_ccitt_update 0027  
                                  vw_setup@brate 0049  
