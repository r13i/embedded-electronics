

Microchip Technology PIC LITE Macro Assembler V1.40 build -251452761 
                                                                                               Fri Apr 20 08:24:05 2018

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	16F876A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	maintext,global,class=CODE,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,delta=2
    15                           	psect	text2,local,class=CODE,merge=1,delta=2
    16                           	psect	text3,local,class=CODE,merge=1,delta=2
    17                           	psect	text4,local,class=CODE,merge=1,delta=2
    18                           	psect	text5,local,class=CODE,merge=1,delta=2
    19                           	psect	text6,local,class=CODE,merge=1,delta=2
    20                           	psect	text7,local,class=CODE,merge=1,delta=2
    21                           	psect	text8,local,class=CODE,merge=1,delta=2
    22                           	psect	text9,local,class=CODE,merge=1,delta=2
    23                           	psect	text10,local,class=CODE,merge=1,delta=2
    24                           	psect	text11,local,class=CODE,merge=1,delta=2
    25                           	psect	text12,local,class=CODE,merge=1,delta=2
    26                           	psect	text13,local,class=CODE,merge=1,delta=2
    27                           	psect	intentry,global,class=CODE,delta=2
    28                           	psect	text14,local,class=CODE,merge=1,delta=2
    29                           	psect	text15,local,class=CODE,merge=1,delta=2
    30                           	psect	text16,local,class=CODE,merge=1,delta=2
    31                           	psect	text17,local,class=CODE,merge=1,delta=2
    32                           	dabs	1,0x7E,2
    33  0000                     
    34                           ; Version 1.40
    35                           ; Generated 01/12/2016 GMT
    36                           ; 
    37                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    38                           ; All rights reserved.
    39                           ; 
    40                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    41                           ; 
    42                           ; Redistribution and use in source and binary forms, with or without modification, are
    43                           ; permitted provided that the following conditions are met:
    44                           ; 
    45                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    46                           ;        conditions and the following disclaimer.
    47                           ; 
    48                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    49                           ;        of conditions and the following disclaimer in the documentation and/or other
    50                           ;        materials provided with the distribution.
    51                           ; 
    52                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    53                           ;        software without specific prior written permission.
    54                           ; 
    55                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    56                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    57                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    58                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    59                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    60                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    61                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    62                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    63                           ; 
    64                           ; 
    65                           ; Code-generator required, PIC16F876A Definitions
    66                           ; 
    67                           ; SFR Addresses
    68  0000                     	;# 
    69  0001                     	;# 
    70  0002                     	;# 
    71  0003                     	;# 
    72  0004                     	;# 
    73  0005                     	;# 
    74  0006                     	;# 
    75  0007                     	;# 
    76  000A                     	;# 
    77  000B                     	;# 
    78  000C                     	;# 
    79  000D                     	;# 
    80  000E                     	;# 
    81  000E                     	;# 
    82  000F                     	;# 
    83  0010                     	;# 
    84  0011                     	;# 
    85  0012                     	;# 
    86  0013                     	;# 
    87  0014                     	;# 
    88  0015                     	;# 
    89  0015                     	;# 
    90  0016                     	;# 
    91  0017                     	;# 
    92  0018                     	;# 
    93  0019                     	;# 
    94  001A                     	;# 
    95  001B                     	;# 
    96  001B                     	;# 
    97  001C                     	;# 
    98  001D                     	;# 
    99  001E                     	;# 
   100  001F                     	;# 
   101  0081                     	;# 
   102  0085                     	;# 
   103  0086                     	;# 
   104  0087                     	;# 
   105  008C                     	;# 
   106  008D                     	;# 
   107  008E                     	;# 
   108  0091                     	;# 
   109  0092                     	;# 
   110  0093                     	;# 
   111  0094                     	;# 
   112  0098                     	;# 
   113  0099                     	;# 
   114  009C                     	;# 
   115  009D                     	;# 
   116  009E                     	;# 
   117  009F                     	;# 
   118  010C                     	;# 
   119  010D                     	;# 
   120  010E                     	;# 
   121  010F                     	;# 
   122  018C                     	;# 
   123  018D                     	;# 
   124  0000                     	;# 
   125  0001                     	;# 
   126  0002                     	;# 
   127  0003                     	;# 
   128  0004                     	;# 
   129  0005                     	;# 
   130  0006                     	;# 
   131  0007                     	;# 
   132  000A                     	;# 
   133  000B                     	;# 
   134  000C                     	;# 
   135  000D                     	;# 
   136  000E                     	;# 
   137  000E                     	;# 
   138  000F                     	;# 
   139  0010                     	;# 
   140  0011                     	;# 
   141  0012                     	;# 
   142  0013                     	;# 
   143  0014                     	;# 
   144  0015                     	;# 
   145  0015                     	;# 
   146  0016                     	;# 
   147  0017                     	;# 
   148  0018                     	;# 
   149  0019                     	;# 
   150  001A                     	;# 
   151  001B                     	;# 
   152  001B                     	;# 
   153  001C                     	;# 
   154  001D                     	;# 
   155  001E                     	;# 
   156  001F                     	;# 
   157  0081                     	;# 
   158  0085                     	;# 
   159  0086                     	;# 
   160  0087                     	;# 
   161  008C                     	;# 
   162  008D                     	;# 
   163  008E                     	;# 
   164  0091                     	;# 
   165  0092                     	;# 
   166  0093                     	;# 
   167  0094                     	;# 
   168  0098                     	;# 
   169  0099                     	;# 
   170  009C                     	;# 
   171  009D                     	;# 
   172  009E                     	;# 
   173  009F                     	;# 
   174  010C                     	;# 
   175  010D                     	;# 
   176  010E                     	;# 
   177  010F                     	;# 
   178  018C                     	;# 
   179  018D                     	;# 
   180                           
   181                           	psect	strings
   182  0595                     __pstrings:	
   183  0595                     stringtab:	
   184  0595                     __stringtab:	
   185  0595                     stringcode:	
   186                           ;	String table - string pointers are 1 byte each
   187                           
   188  0595                     stringdir:	
   189  0595  3005               	movlw	high stringdir
   190  0596  008A               	movwf	10
   191  0597  0804               	movf	4,w
   192  0598  0A84               	incf	4,f
   193  0599  0782               	addwf	2,f
   194  059A                     __stringbase:	
   195  059A  3400               	retlw	0
   196  059B                     __end_of__stringtab:	
   197  059B                     __calc_timer0_prescaler@prescaler_factor:	
   198  059B  3401               	retlw	1
   199  059C  3400               	retlw	0
   200  059D  3402               	retlw	2
   201  059E  3400               	retlw	0
   202  059F  3404               	retlw	4
   203  05A0  3400               	retlw	0
   204  05A1  3408               	retlw	8
   205  05A2  3400               	retlw	0
   206  05A3  3410               	retlw	16
   207  05A4  3400               	retlw	0
   208  05A5  3420               	retlw	32
   209  05A6  3400               	retlw	0
   210  05A7  3440               	retlw	64
   211  05A8  3400               	retlw	0
   212  05A9  3480               	retlw	128
   213  05AA  3400               	retlw	0
   214  05AB  3400               	retlw	0
   215  05AC  3401               	retlw	1
   216  05AD                     __end_of__calc_timer0_prescaler@prescaler_factor:	
   217  05AD                     _symbols:	
   218  05AD  340D               	retlw	13
   219  05AE  340E               	retlw	14
   220  05AF  3413               	retlw	19
   221  05B0  3415               	retlw	21
   222  05B1  3416               	retlw	22
   223  05B2  3419               	retlw	25
   224  05B3  341A               	retlw	26
   225  05B4  341C               	retlw	28
   226  05B5  3423               	retlw	35
   227  05B6  3425               	retlw	37
   228  05B7  3426               	retlw	38
   229  05B8  3429               	retlw	41
   230  05B9  342A               	retlw	42
   231  05BA  342C               	retlw	44
   232  05BB  3432               	retlw	50
   233  05BC  3434               	retlw	52
   234  05BD                     __end_of_symbols:	
   235  05BD                     _dpowers:	
   236  05BD  3401               	retlw	1
   237  05BE  3400               	retlw	0
   238  05BF  340A               	retlw	10
   239  05C0  3400               	retlw	0
   240  05C1  3464               	retlw	100
   241  05C2  3400               	retlw	0
   242  05C3  34E8               	retlw	232
   243  05C4  3403               	retlw	3
   244  05C5  3410               	retlw	16
   245  05C6  3427               	retlw	39
   246  05C7                     __end_of_dpowers:	
   247  05C7                     _vw_tx_buf_header:	
   248  05C7  342A               	retlw	42
   249  05C8  342A               	retlw	42
   250  05C9  342A               	retlw	42
   251  05CA  342A               	retlw	42
   252  05CB  342A               	retlw	42
   253  05CC  342A               	retlw	42
   254  05CD  3438               	retlw	56
   255  05CE  342C               	retlw	44
   256  05CF                     __end_of_vw_tx_buf_header:	
   257  0001                     _TMR0	set	1
   258  005F                     _GIE	set	95
   259  005E                     _PEIE	set	94
   260  0033                     _RB3	set	51
   261  0034                     _RB4	set	52
   262  005D                     _TMR0IE	set	93
   263  005A                     _TMR0IF	set	90
   264  0081                     _OPTION_REG	set	129
   265  040D                     _T0CS	set	1037
   266  0433                     _TRISB3	set	1075
   267  0434                     _TRISB4	set	1076
   268  05CF                     STR_1:	
   269  05CF  3425               	retlw	37	;'%'
   270  05D0  3464               	retlw	100	;'d'
   271  05D1  3400               	retlw	0
   272                           
   273                           ; #config settings
   274  0000                     
   275                           	psect	cinit
   276  0015                     start_initialization:	
   277  0015                     __initialization:	
   278                           
   279                           ; Clear objects allocated to COMMON
   280  0015  01FD               	clrf	__pbssCOMMON& (0+127)
   281                           
   282                           ; Clear objects allocated to BANK0
   283  0016  1383               	bcf	3,7	;select IRP bank0
   284  0017  3054               	movlw	low __pbssBANK0
   285  0018  0084               	movwf	4
   286  0019  3067               	movlw	low (__pbssBANK0+19)
   287  001A  120A  118A  2673  120A  118A  	fcall	clear_ram0
   288                           
   289                           ; Clear objects allocated to BANK1
   290  001F  30A0               	movlw	low __pbssBANK1
   291  0020  0084               	movwf	4
   292  0021  30D0               	movlw	low (__pbssBANK1+48)
   293  0022  120A  118A  2673   	fcall	clear_ram0
   294  0025                     end_of_initialization:	
   295                           ;End of C runtime variable initialization code
   296                           
   297  0025                     __end_of__initialization:	
   298  0025  0183               	clrf	3
   299  0026  120A  118A  2C7E   	ljmp	_main	;jump to C main() function
   300                           
   301                           	psect	bssCOMMON
   302  007D                     __pbssCOMMON:	
   303  007D                     _vw_rx_len:	
   304  007D                     	ds	1
   305                           
   306                           	psect	bssBANK0
   307  0054                     __pbssBANK0:	
   308  0054                     _vw_rx_bits:	
   309  0054                     	ds	2
   310  0056                     _vw_rx_active:	
   311  0056                     	ds	1
   312  0057                     _vw_rx_bit_count:	
   313  0057                     	ds	1
   314  0058                     _vw_rx_count:	
   315  0058                     	ds	1
   316  0059                     _vw_rx_done:	
   317  0059                     	ds	1
   318  005A                     _vw_rx_enabled:	
   319  005A                     	ds	1
   320  005B                     _vw_rx_enabled_last:	
   321  005B                     	ds	1
   322  005C                     _vw_rx_integrator:	
   323  005C                     	ds	1
   324  005D                     _vw_rx_last_sample:	
   325  005D                     	ds	1
   326  005E                     _vw_rx_pll_ramp:	
   327  005E                     	ds	1
   328  005F                     _vw_rx_sample:	
   329  005F                     	ds	1
   330  0060                     _vw_tx_bit:	
   331  0060                     	ds	1
   332  0061                     _vw_tx_enabled:	
   333  0061                     	ds	1
   334  0062                     _vw_tx_header:	
   335  0062                     	ds	1
   336  0063                     _vw_tx_index:	
   337  0063                     	ds	1
   338  0064                     _vw_tx_len:	
   339  0064                     	ds	1
   340  0065                     _vw_tx_sample:	
   341  0065                     	ds	1
   342  0066                     _vw_tmr0_value:	
   343  0066                     	ds	1
   344                           
   345                           	psect	bssBANK1
   346  00A0                     __pbssBANK1:	
   347  00A0                     _vw_tx_buf:	
   348  00A0                     	ds	48
   349                           
   350                           	psect	clrtext
   351  0673                     clear_ram0:	
   352                           ;	Called with FSR containing the base address, and
   353                           ;	W with the last address+1
   354                           
   355  0673  0064               	clrwdt	;clear the watchdog before getting into this loop
   356  0674                     clrloop0:	
   357  0674  0180               	clrf	0	;clear RAM location pointed to by FSR
   358  0675  0A84               	incf	4,f	;increment pointer
   359  0676  0604               	xorwf	4,w	;XOR with final address
   360  0677  1903               	btfsc	3,2	;have we reached the end yet?
   361  0678  3400               	retlw	0	;all done for this memory range, return
   362  0679  0604               	xorwf	4,w	;XOR again to restore value
   363  067A  2E74               	goto	clrloop0	;do the next byte
   364                           
   365                           	psect	cstackBANK1
   366  00D0                     __pcstackBANK1:	
   367  00D0                     main@buffer:	
   368                           
   369                           ; 5 bytes @ 0x0
   370  00D0                     	ds	5
   371  00D5                     main@j:	
   372                           
   373                           ; 1 bytes @ 0x5
   374  00D5                     	ds	1
   375                           
   376                           	psect	cstackCOMMON
   377  0070                     __pcstackCOMMON:	
   378  0070                     ?_vw_isr_tmr0:	
   379  0070                     ?_global_isr:	
   380                           ; 1 bytes @ 0x0
   381                           
   382  0070                     ?_main:	
   383                           ; 1 bytes @ 0x0
   384                           
   385  0070                     ?_vw_wait_tx:	
   386                           ; 1 bytes @ 0x0
   387                           
   388  0070                     ?_vw_tx_stop:	
   389                           ; 1 bytes @ 0x0
   390                           
   391  0070                     ??_vw_tx_stop:	
   392                           ; 1 bytes @ 0x0
   393                           
   394  0070                     ?_vw_tx_start:	
   395                           ; 1 bytes @ 0x0
   396                           
   397  0070                     ?_vw_symbol_6to4:	
   398                           ; 1 bytes @ 0x0
   399                           
   400  0070                     ??_vw_symbol_6to4:	
   401                           ; 1 bytes @ 0x0
   402                           
   403  0070                     ?_vw_pll:	
   404                           ; 1 bytes @ 0x0
   405                           
   406                           
   407                           ; 1 bytes @ 0x0
   408  0070                     	ds	1
   409  0071                     vw_symbol_6to4@symbol:	
   410                           
   411                           ; 1 bytes @ 0x1
   412  0071                     	ds	1
   413  0072                     vw_symbol_6to4@i:	
   414                           
   415                           ; 1 bytes @ 0x2
   416  0072                     	ds	1
   417  0073                     ??_vw_pll:	
   418                           
   419                           ; 1 bytes @ 0x3
   420  0073                     	ds	5
   421  0078                     _vw_pll$138:	
   422                           
   423                           ; 2 bytes @ 0x8
   424  0078                     	ds	2
   425  007A                     vw_pll@this_byte:	
   426                           
   427                           ; 1 bytes @ 0xA
   428  007A                     	ds	1
   429  007B                     ??_vw_isr_tmr0:	
   430                           
   431                           ; 1 bytes @ 0xB
   432  007B                     	ds	2
   433                           
   434                           	psect	cstackBANK0
   435  0020                     __pcstackBANK0:	
   436  0020                     ??_global_isr:	
   437                           
   438                           ; 1 bytes @ 0x0
   439  0020                     	ds	4
   440  0024                     ?_delay:	
   441  0024                     ??_vw_wait_tx:	
   442                           ; 1 bytes @ 0x4
   443                           
   444  0024                     ??_vw_tx_start:	
   445                           ; 1 bytes @ 0x4
   446                           
   447  0024                     ?__crc_ccitt_update:	
   448                           ; 1 bytes @ 0x4
   449                           
   450  0024                     ?___wmul:	
   451                           ; 2 bytes @ 0x4
   452                           
   453  0024                     ?___lwdiv:	
   454                           ; 2 bytes @ 0x4
   455                           
   456  0024                     delay@delay:	
   457                           ; 2 bytes @ 0x4
   458                           
   459  0024                     __crc_ccitt_update@crc:	
   460                           ; 2 bytes @ 0x4
   461                           
   462  0024                     ___wmul@multiplier:	
   463                           ; 2 bytes @ 0x4
   464                           
   465  0024                     ___lwdiv@divisor:	
   466                           ; 2 bytes @ 0x4
   467                           
   468                           
   469                           ; 2 bytes @ 0x4
   470  0024                     	ds	2
   471  0026                     ??_delay:	
   472  0026                     __crc_ccitt_update@data:	
   473                           ; 1 bytes @ 0x6
   474                           
   475  0026                     ___wmul@multiplicand:	
   476                           ; 1 bytes @ 0x6
   477                           
   478  0026                     ___lwdiv@dividend:	
   479                           ; 2 bytes @ 0x6
   480                           
   481                           
   482                           ; 2 bytes @ 0x6
   483  0026                     	ds	1
   484  0027                     ??__crc_ccitt_update:	
   485                           
   486                           ; 1 bytes @ 0x7
   487  0027                     	ds	1
   488  0028                     ??___wmul:	
   489  0028                     ??___lwdiv:	
   490                           ; 1 bytes @ 0x8
   491                           
   492  0028                     ___wmul@product:	
   493                           ; 1 bytes @ 0x8
   494                           
   495                           
   496                           ; 2 bytes @ 0x8
   497  0028                     	ds	1
   498  0029                     ___lwdiv@counter:	
   499                           
   500                           ; 1 bytes @ 0x9
   501  0029                     	ds	1
   502  002A                     ?___aldiv:	
   503  002A                     ___lwdiv@quotient:	
   504                           ; 4 bytes @ 0xA
   505                           
   506  002A                     ___aldiv@divisor:	
   507                           ; 2 bytes @ 0xA
   508                           
   509                           
   510                           ; 4 bytes @ 0xA
   511  002A                     	ds	2
   512  002C                     ?___lwmod:	
   513  002C                     ___lwmod@divisor:	
   514                           ; 2 bytes @ 0xC
   515                           
   516                           
   517                           ; 2 bytes @ 0xC
   518  002C                     	ds	2
   519  002E                     ___lwmod@dividend:	
   520  002E                     ___aldiv@dividend:	
   521                           ; 2 bytes @ 0xE
   522                           
   523                           
   524                           ; 4 bytes @ 0xE
   525  002E                     	ds	2
   526  0030                     ??___lwmod:	
   527                           
   528                           ; 1 bytes @ 0x10
   529  0030                     	ds	1
   530  0031                     ___lwmod@counter:	
   531                           
   532                           ; 1 bytes @ 0x11
   533  0031                     	ds	1
   534  0032                     ??___aldiv:	
   535  0032                     ?_sprintf:	
   536                           ; 1 bytes @ 0x12
   537                           
   538  0032                     sprintf@f:	
   539                           ; 2 bytes @ 0x12
   540                           
   541                           
   542                           ; 1 bytes @ 0x12
   543  0032                     	ds	1
   544  0033                     ___aldiv@counter:	
   545                           
   546                           ; 1 bytes @ 0x13
   547  0033                     	ds	1
   548  0034                     ?_vw_send:	
   549  0034                     vw_send@len:	
   550                           ; 1 bytes @ 0x14
   551                           
   552  0034                     ___aldiv@sign:	
   553                           ; 1 bytes @ 0x14
   554                           
   555                           
   556                           ; 1 bytes @ 0x14
   557  0034                     	ds	1
   558  0035                     ??_sprintf:	
   559  0035                     ??_vw_send:	
   560                           ; 1 bytes @ 0x15
   561                           
   562  0035                     ___aldiv@quotient:	
   563                           ; 1 bytes @ 0x15
   564                           
   565                           
   566                           ; 4 bytes @ 0x15
   567  0035                     	ds	3
   568  0038                     sprintf@ap:	
   569                           
   570                           ; 1 bytes @ 0x18
   571  0038                     	ds	1
   572  0039                     ?__calc_timer0_prescaler:	
   573  0039                     vw_send@buf:	
   574                           ; 1 bytes @ 0x19
   575                           
   576  0039                     sprintf@flag:	
   577                           ; 1 bytes @ 0x19
   578                           
   579  0039                     __calc_timer0_prescaler@brate:	
   580                           ; 1 bytes @ 0x19
   581                           
   582                           
   583                           ; 2 bytes @ 0x19
   584  0039                     	ds	1
   585  003A                     vw_send@count:	
   586  003A                     sprintf@prec:	
   587                           ; 1 bytes @ 0x1A
   588                           
   589                           
   590                           ; 1 bytes @ 0x1A
   591  003A                     	ds	1
   592  003B                     __calc_timer0_prescaler@prescaler_value:	
   593  003B                     vw_send@i:	
   594                           ; 1 bytes @ 0x1B
   595                           
   596  003B                     sprintf@val:	
   597                           ; 1 bytes @ 0x1B
   598                           
   599                           
   600                           ; 2 bytes @ 0x1B
   601  003B                     	ds	1
   602  003C                     __calc_timer0_prescaler@prescaler_bits:	
   603  003C                     vw_send@crc:	
   604                           ; 1 bytes @ 0x1C
   605                           
   606                           
   607                           ; 2 bytes @ 0x1C
   608  003C                     	ds	1
   609  003D                     __calc_timer0_prescaler@k_tmr0:	
   610  003D                     sprintf@sp:	
   611                           ; 1 bytes @ 0x1D
   612                           
   613                           
   614                           ; 1 bytes @ 0x1D
   615  003D                     	ds	1
   616  003E                     ??__calc_timer0_prescaler:	
   617  003E                     vw_send@p:	
   618                           ; 1 bytes @ 0x1E
   619                           
   620  003E                     sprintf@c:	
   621                           ; 1 bytes @ 0x1E
   622                           
   623                           
   624                           ; 1 bytes @ 0x1E
   625  003E                     	ds	1
   626  003F                     vw_send@index:	
   627                           
   628                           ; 1 bytes @ 0x1F
   629  003F                     	ds	7
   630  0046                     __calc_timer0_prescaler@aux_tmr0:	
   631                           
   632                           ; 2 bytes @ 0x26
   633  0046                     	ds	2
   634  0048                     __calc_timer0_prescaler@pindex:	
   635                           
   636                           ; 1 bytes @ 0x28
   637  0048                     	ds	1
   638  0049                     ?_vw_setup:	
   639  0049                     vw_setup@brate:	
   640                           ; 1 bytes @ 0x29
   641                           
   642                           
   643                           ; 2 bytes @ 0x29
   644  0049                     	ds	2
   645  004B                     ??_vw_setup:	
   646                           
   647                           ; 1 bytes @ 0x2B
   648  004B                     	ds	3
   649  004E                     vw_setup@prescaler_bits:	
   650                           
   651                           ; 1 bytes @ 0x2E
   652  004E                     	ds	1
   653  004F                     vw_setup@prescaler_value:	
   654                           
   655                           ; 2 bytes @ 0x2F
   656  004F                     	ds	2
   657  0051                     ??_main:	
   658                           
   659                           ; 1 bytes @ 0x31
   660  0051                     	ds	3
   661                           
   662                           	psect	maintext
   663  047E                     __pmaintext:	
   664 ;;
   665 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   666 ;;
   667 ;; *************** function _main *****************
   668 ;; Defined at:
   669 ;;		line 23 in file "main.c"
   670 ;; Parameters:    Size  Location     Type
   671 ;;		None
   672 ;; Auto vars:     Size  Location     Type
   673 ;;  buffer          5    0[BANK1 ] unsigned char [5]
   674 ;;  j               1    5[BANK1 ] unsigned char 
   675 ;; Return value:  Size  Location     Type
   676 ;;                  1    wreg      void 
   677 ;; Registers used:
   678 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   679 ;; Tracked objects:
   680 ;;		On entry : B00/0
   681 ;;		On exit  : 0/0
   682 ;;		Unchanged: 0/0
   683 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   684 ;;      Params:         0       0       0       0       0
   685 ;;      Locals:         0       0       6       0       0
   686 ;;      Temps:          0       3       0       0       0
   687 ;;      Totals:         0       3       6       0       0
   688 ;;Total ram usage:        9 bytes
   689 ;; Hardware stack levels required when called:    8
   690 ;; This function calls:
   691 ;;		_delay
   692 ;;		_sprintf
   693 ;;		_vw_send
   694 ;;		_vw_setup
   695 ;; This function is called by:
   696 ;;		Startup code after reset
   697 ;; This function uses a non-reentrant model
   698 ;;
   699                           
   700                           
   701                           ;psect for function _main
   702  047E                     _main:	
   703                           
   704                           ;main.c: 27: vw_setup(200);
   705                           
   706                           ;incstack = 0
   707                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   708  047E  30C8               	movlw	200
   709  047F  1283               	bcf	3,5	;RP0=0, select bank0
   710  0480  1303               	bcf	3,6	;RP1=0, select bank0
   711  0481  00C9               	movwf	vw_setup@brate
   712  0482  3000               	movlw	0
   713  0483  00CA               	movwf	vw_setup@brate+1
   714  0484  120A  118A  2512  120A  118A  	fcall	_vw_setup
   715                           
   716                           ;main.c: 29: unsigned char j = 0;
   717  0489  1683               	bsf	3,5	;RP0=1, select bank1
   718  048A  1303               	bcf	3,6	;RP1=0, select bank1
   719  048B  01D5               	clrf	main@j^(0+128)
   720  048C                     l2009:	
   721                           ;main.c: 31: while(1)
   722                           
   723                           
   724                           ;main.c: 32: {
   725                           ;main.c: 36: for(j = 0; j < 100 ; ++j){
   726  048C  01D5               	clrf	main@j^(0+128)
   727  048D                     L1:	
   728  048D  3064               	movlw	100
   729  048E  0255               	subwf	main@j^(0+128),w
   730  048F  1803               	btfsc	3,0
   731  0490  2C8C               	goto	l2009
   732                           
   733                           ;main.c: 37: char buffer[5];
   734                           ;main.c: 38: sprintf(buffer, "%d", j);
   735  0491  3035               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   736  0492  1283               	bcf	3,5	;RP0=0, select bank0
   737  0493  1303               	bcf	3,6	;RP1=0, select bank0
   738  0494  00D1               	movwf	??_main
   739  0495  0851               	movf	??_main,w
   740  0496  00B2               	movwf	sprintf@f
   741  0497  1683               	bsf	3,5	;RP0=1, select bank1
   742  0498  1303               	bcf	3,6	;RP1=0, select bank1
   743  0499  0855               	movf	main@j^(0+128),w
   744  049A  1283               	bcf	3,5	;RP0=0, select bank0
   745  049B  1303               	bcf	3,6	;RP1=0, select bank0
   746  049C  00D2               	movwf	??_main+1
   747  049D  01D3               	clrf	??_main+2
   748  049E  0852               	movf	??_main+1,w
   749  049F  00B3               	movwf	?_sprintf+1
   750  04A0  0853               	movf	??_main+2,w
   751  04A1  00B4               	movwf	?_sprintf+2
   752  04A2  30D0               	movlw	(low (main@buffer| 0))& (0+255)
   753  04A3  120A  118A  215B  120A  118A  	fcall	_sprintf
   754                           
   755                           ;main.c: 40: vw_send(buffer, sizeof(buffer) - 1);
   756  04A8  3004               	movlw	4
   757  04A9  1283               	bcf	3,5	;RP0=0, select bank0
   758  04AA  1303               	bcf	3,6	;RP1=0, select bank0
   759  04AB  00D1               	movwf	??_main
   760  04AC  0851               	movf	??_main,w
   761  04AD  00B4               	movwf	vw_send@len
   762  04AE  30D0               	movlw	(low (main@buffer| 0))& (0+255)
   763  04AF  120A  118A  2029  120A  118A  	fcall	_vw_send
   764                           
   765                           ;main.c: 41: delay(20000);
   766  04B4  3020               	movlw	32
   767  04B5  1283               	bcf	3,5	;RP0=0, select bank0
   768  04B6  1303               	bcf	3,6	;RP1=0, select bank0
   769  04B7  00A4               	movwf	delay@delay
   770  04B8  304E               	movlw	78
   771  04B9  00A5               	movwf	delay@delay+1
   772  04BA  120A  118A  265A  120A  118A  	fcall	_delay
   773  04BF  3001               	movlw	1
   774  04C0  1283               	bcf	3,5	;RP0=0, select bank0
   775  04C1  1303               	bcf	3,6	;RP1=0, select bank0
   776  04C2  00D1               	movwf	??_main
   777  04C3  0851               	movf	??_main,w
   778  04C4  1683               	bsf	3,5	;RP0=1, select bank1
   779  04C5  1303               	bcf	3,6	;RP1=0, select bank1
   780  04C6  07D5               	addwf	main@j^(0+128),f
   781  04C7  2C8D               	goto	L1
   782  04C8                     __end_of_main:	
   783                           
   784                           	psect	text1
   785  0512                     __ptext1:	
   786 ;; *************** function _vw_setup *****************
   787 ;; Defined at:
   788 ;;		line 123 in file "virtualwire.c"
   789 ;; Parameters:    Size  Location     Type
   790 ;;  brate           2   41[BANK0 ] unsigned int 
   791 ;; Auto vars:     Size  Location     Type
   792 ;;  prescaler_va    2   47[BANK0 ] unsigned int 
   793 ;;  prescaler_bi    1   46[BANK0 ] unsigned char 
   794 ;; Return value:  Size  Location     Type
   795 ;;                  1    wreg      void 
   796 ;; Registers used:
   797 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   798 ;; Tracked objects:
   799 ;;		On entry : 0/0
   800 ;;		On exit  : 0/0
   801 ;;		Unchanged: 0/0
   802 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   803 ;;      Params:         0       2       0       0       0
   804 ;;      Locals:         0       3       0       0       0
   805 ;;      Temps:          0       3       0       0       0
   806 ;;      Totals:         0       8       0       0       0
   807 ;;Total ram usage:        8 bytes
   808 ;; Hardware stack levels used:    1
   809 ;; Hardware stack levels required when called:    7
   810 ;; This function calls:
   811 ;;		__calc_timer0_prescaler
   812 ;; This function is called by:
   813 ;;		_main
   814 ;; This function uses a non-reentrant model
   815 ;;
   816                           
   817                           
   818                           ;psect for function _vw_setup
   819  0512                     _vw_setup:	
   820                           
   821                           ;virtualwire.c: 125: uint16_t prescaler_value;
   822                           ;virtualwire.c: 126: uint8_t prescaler_bits;
   823                           ;virtualwire.c: 129: TRISB3 = 1;
   824                           
   825                           ;incstack = 0
   826                           ; Regs used in _vw_setup: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   827  0512  1683               	bsf	3,5	;RP0=1, select bank1
   828  0513  1303               	bcf	3,6	;RP1=0, select bank1
   829  0514  1586               	bsf	6,3	;volatile
   830                           
   831                           ;virtualwire.c: 130: TRISB4 = 0;
   832  0515  1206               	bcf	6,4	;volatile
   833                           
   834                           ;virtualwire.c: 133: RB4 = 0;
   835  0516  1283               	bcf	3,5	;RP0=0, select bank0
   836  0517  1303               	bcf	3,6	;RP1=0, select bank0
   837  0518  1206               	bcf	6,4	;volatile
   838                           
   839                           ;virtualwire.c: 136: _calc_timer0_prescaler(brate, &prescaler_value, &prescaler_bits, &v
      +                          w_tmr0_value);
   840  0519  084A               	movf	vw_setup@brate+1,w
   841  051A  00BA               	movwf	__calc_timer0_prescaler@brate+1
   842  051B  0849               	movf	vw_setup@brate,w
   843  051C  00B9               	movwf	__calc_timer0_prescaler@brate
   844  051D  304F               	movlw	(low (vw_setup@prescaler_value| 0))& (0+255)
   845  051E  00CB               	movwf	??_vw_setup
   846  051F  084B               	movf	??_vw_setup,w
   847  0520  00BB               	movwf	__calc_timer0_prescaler@prescaler_value
   848  0521  304E               	movlw	(low (vw_setup@prescaler_bits| 0))& (0+255)
   849  0522  00CC               	movwf	??_vw_setup+1
   850  0523  084C               	movf	??_vw_setup+1,w
   851  0524  00BC               	movwf	__calc_timer0_prescaler@prescaler_bits
   852  0525  3066               	movlw	(low (_vw_tmr0_value| 0))& (0+255)
   853  0526  00CD               	movwf	??_vw_setup+2
   854  0527  084D               	movf	??_vw_setup+2,w
   855  0528  00BD               	movwf	__calc_timer0_prescaler@k_tmr0
   856  0529  120A  118A  23F6  120A  118A  	fcall	__calc_timer0_prescaler
   857                           
   858                           ;virtualwire.c: 138: if (prescaler_value > 1)
   859  052E  3000               	movlw	0
   860  052F  1283               	bcf	3,5	;RP0=0, select bank0
   861  0530  1303               	bcf	3,6	;RP1=0, select bank0
   862  0531  0250               	subwf	vw_setup@prescaler_value+1,w
   863  0532  3002               	movlw	2
   864  0533  1903               	skipnz
   865  0534  024F               	subwf	vw_setup@prescaler_value,w
   866  0535  1C03               	skipc
   867  0536  2D45               	goto	l1867
   868                           
   869                           ;virtualwire.c: 139: {
   870                           ;virtualwire.c: 141: OPTION_REG &= 0xF0;
   871  0537  30F0               	movlw	240
   872  0538  00CB               	movwf	??_vw_setup
   873  0539  084B               	movf	??_vw_setup,w
   874  053A  1683               	bsf	3,5	;RP0=1, select bank1
   875  053B  1303               	bcf	3,6	;RP1=0, select bank1
   876  053C  0581               	andwf	1,f	;volatile
   877                           
   878                           ;virtualwire.c: 142: OPTION_REG |= prescaler_bits;
   879  053D  1283               	bcf	3,5	;RP0=0, select bank0
   880  053E  1303               	bcf	3,6	;RP1=0, select bank0
   881  053F  084E               	movf	vw_setup@prescaler_bits,w
   882  0540  00CB               	movwf	??_vw_setup
   883  0541  084B               	movf	??_vw_setup,w
   884  0542  1683               	bsf	3,5	;RP0=1, select bank1
   885  0543  1303               	bcf	3,6	;RP1=0, select bank1
   886  0544  0481               	iorwf	1,f	;volatile
   887  0545                     l1867:	
   888                           
   889                           ;virtualwire.c: 143: }
   890                           ;virtualwire.c: 145: T0CS = 0;
   891  0545  1683               	bsf	3,5	;RP0=1, select bank1
   892  0546  1303               	bcf	3,6	;RP1=0, select bank1
   893  0547  1281               	bcf	1,5	;volatile
   894                           
   895                           ;virtualwire.c: 146: TMR0 = (2 - vw_tmr0_value);
   896  0548  1283               	bcf	3,5	;RP0=0, select bank0
   897  0549  1303               	bcf	3,6	;RP1=0, select bank0
   898  054A  0366               	decf	_vw_tmr0_value,w
   899  054B  3AFF               	xorlw	255
   900  054C  3E02               	addlw	2
   901  054D  0081               	movwf	1	;volatile
   902                           
   903                           ;virtualwire.c: 148: TMR0IF = 0;
   904  054E  110B               	bcf	11,2	;volatile
   905                           
   906                           ;virtualwire.c: 149: TMR0IE = 1;
   907  054F  168B               	bsf	11,5	;volatile
   908                           
   909                           ;virtualwire.c: 150: GIE = PEIE = 1;
   910  0550  170B               	bsf	11,6	;volatile
   911  0551  1F0B               	btfss	11,6	;volatile
   912  0552  2D55               	goto	u2330
   913  0553  178B               	bsf	11,7	;volatile
   914  0554  0008               	return
   915  0555                     u2330:	
   916  0555  138B               	bcf	11,7	;volatile
   917  0556  0008               	return
   918  0557                     __end_of_vw_setup:	
   919                           
   920                           	psect	text2
   921  03F6                     __ptext2:	
   922 ;; *************** function __calc_timer0_prescaler *****************
   923 ;; Defined at:
   924 ;;		line 97 in file "virtualwire.c"
   925 ;; Parameters:    Size  Location     Type
   926 ;;  brate           2   25[BANK0 ] unsigned int 
   927 ;;  prescaler_va    1   27[BANK0 ] PTR unsigned int 
   928 ;;		 -> vw_setup@prescaler_value(2), 
   929 ;;  prescaler_bi    1   28[BANK0 ] PTR unsigned char 
   930 ;;		 -> vw_setup@prescaler_bits(1), 
   931 ;;  k_tmr0          1   29[BANK0 ] PTR unsigned char 
   932 ;;		 -> vw_tmr0_value(1), 
   933 ;; Auto vars:     Size  Location     Type
   934 ;;  aux_tmr0        2   38[BANK0 ] unsigned int 
   935 ;;  pindex          1   40[BANK0 ] unsigned char 
   936 ;; Return value:  Size  Location     Type
   937 ;;                  1    wreg      unsigned char 
   938 ;; Registers used:
   939 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   940 ;; Tracked objects:
   941 ;;		On entry : 0/0
   942 ;;		On exit  : 0/0
   943 ;;		Unchanged: 0/0
   944 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   945 ;;      Params:         0       5       0       0       0
   946 ;;      Locals:         0       3       0       0       0
   947 ;;      Temps:          0       8       0       0       0
   948 ;;      Totals:         0      16       0       0       0
   949 ;;Total ram usage:       16 bytes
   950 ;; Hardware stack levels used:    1
   951 ;; Hardware stack levels required when called:    6
   952 ;; This function calls:
   953 ;;		___aldiv
   954 ;;		___wmul
   955 ;; This function is called by:
   956 ;;		_vw_setup
   957 ;; This function uses a non-reentrant model
   958 ;;
   959                           
   960                           
   961                           ;psect for function __calc_timer0_prescaler
   962  03F6                     __calc_timer0_prescaler:	
   963                           
   964                           ;virtualwire.c: 99: const uint16_t prescaler_factor[] = {1, 2, 4, 8, 16, 32, 64, 128, 25
      +                          6};
   965                           ;virtualwire.c: 100: uint8_t pindex;
   966                           ;virtualwire.c: 101: uint16_t aux_tmr0;
   967                           ;virtualwire.c: 103: for (pindex = 0; pindex < 8; pindex++)
   968                           
   969                           ;incstack = 0
   970 ;; using string table level
   971                           ; Regs used in __calc_timer0_prescaler: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cst
      +                          ack]
   972  03F6  1283               	bcf	3,5	;RP0=0, select bank0
   973  03F7  1303               	bcf	3,6	;RP1=0, select bank0
   974  03F8  01C8               	clrf	__calc_timer0_prescaler@pindex
   975  03F9                     L2:	
   976  03F9  3008               	movlw	8
   977  03FA  0248               	subwf	__calc_timer0_prescaler@pindex,w
   978  03FB  1803               	btfsc	3,0
   979  03FC  0008               	return
   980                           
   981                           ;virtualwire.c: 104: {
   982                           ;virtualwire.c: 105: *prescaler_value = prescaler_factor[pindex];
   983  03FD  0848               	movf	__calc_timer0_prescaler@pindex,w
   984  03FE  00BE               	movwf	??__calc_timer0_prescaler
   985  03FF  073E               	addwf	??__calc_timer0_prescaler,w
   986  0400  3E01               	addlw	low ((__calc_timer0_prescaler@prescaler_factor-__stringbase)| (0+32768))
   987  0401  0084               	movwf	4
   988  0402  120A  118A  2595  120A  118A  	fcall	stringdir
   989  0407  00BF               	movwf	??__calc_timer0_prescaler+1
   990  0408  120A  118A  2595  120A  118A  	fcall	stringdir
   991  040D  00C0               	movwf	??__calc_timer0_prescaler+2
   992  040E  083B               	movf	__calc_timer0_prescaler@prescaler_value,w
   993  040F  0084               	movwf	4
   994  0410  083F               	movf	??__calc_timer0_prescaler+1,w
   995  0411  1383               	bcf	3,7	;select IRP bank0
   996  0412  0080               	movwf	0
   997  0413  0A84               	incf	4,f
   998  0414  0840               	movf	??__calc_timer0_prescaler+2,w
   999  0415  0080               	movwf	0
  1000                           
  1001                           ;virtualwire.c: 106: aux_tmr0 = 8000000 / (4 * (*prescaler_value) * brate * 8);
  1002  0416  083A               	movf	__calc_timer0_prescaler@brate+1,w
  1003  0417  00A7               	movwf	___wmul@multiplicand+1
  1004  0418  0839               	movf	__calc_timer0_prescaler@brate,w
  1005  0419  00A6               	movwf	___wmul@multiplicand
  1006  041A  083B               	movf	__calc_timer0_prescaler@prescaler_value,w
  1007  041B  0084               	movwf	4
  1008  041C  0800               	movf	0,w
  1009  041D  00BE               	movwf	??__calc_timer0_prescaler
  1010  041E  0A84               	incf	4,f
  1011  041F  0800               	movf	0,w
  1012  0420  00BF               	movwf	??__calc_timer0_prescaler+1
  1013  0421  1003               	clrc
  1014  0422  0DBE               	rlf	??__calc_timer0_prescaler,f
  1015  0423  0DBF               	rlf	??__calc_timer0_prescaler+1,f
  1016  0424  1003               	clrc
  1017  0425  0DBE               	rlf	??__calc_timer0_prescaler,f
  1018  0426  0DBF               	rlf	??__calc_timer0_prescaler+1,f
  1019  0427  083E               	movf	??__calc_timer0_prescaler,w
  1020  0428  00A4               	movwf	___wmul@multiplier
  1021  0429  083F               	movf	??__calc_timer0_prescaler+1,w
  1022  042A  00A5               	movwf	___wmul@multiplier+1
  1023  042B  120A  118A  2606  120A  118A  	fcall	___wmul
  1024  0430  1283               	bcf	3,5	;RP0=0, select bank0
  1025  0431  1303               	bcf	3,6	;RP1=0, select bank0
  1026  0432  0824               	movf	?___wmul,w
  1027  0433  00C0               	movwf	??__calc_timer0_prescaler+2
  1028  0434  0825               	movf	?___wmul+1,w
  1029  0435  00C1               	movwf	??__calc_timer0_prescaler+3
  1030  0436  1003               	clrc
  1031  0437  0DC0               	rlf	??__calc_timer0_prescaler+2,f
  1032  0438  0DC1               	rlf	??__calc_timer0_prescaler+3,f
  1033  0439  1003               	clrc
  1034  043A  0DC0               	rlf	??__calc_timer0_prescaler+2,f
  1035  043B  0DC1               	rlf	??__calc_timer0_prescaler+3,f
  1036  043C  1003               	clrc
  1037  043D  0DC0               	rlf	??__calc_timer0_prescaler+2,f
  1038  043E  0DC1               	rlf	??__calc_timer0_prescaler+3,f
  1039  043F  0840               	movf	??__calc_timer0_prescaler+2,w
  1040  0440  00C2               	movwf	??__calc_timer0_prescaler+4
  1041  0441  0841               	movf	??__calc_timer0_prescaler+3,w
  1042  0442  00C3               	movwf	??__calc_timer0_prescaler+5
  1043  0443  01C4               	clrf	??__calc_timer0_prescaler+6
  1044  0444  01C5               	clrf	??__calc_timer0_prescaler+7
  1045  0445  0845               	movf	??__calc_timer0_prescaler+7,w
  1046  0446  00AD               	movwf	___aldiv@divisor+3
  1047  0447  0844               	movf	??__calc_timer0_prescaler+6,w
  1048  0448  00AC               	movwf	___aldiv@divisor+2
  1049  0449  0843               	movf	??__calc_timer0_prescaler+5,w
  1050  044A  00AB               	movwf	___aldiv@divisor+1
  1051  044B  0842               	movf	??__calc_timer0_prescaler+4,w
  1052  044C  00AA               	movwf	___aldiv@divisor
  1053  044D  3000               	movlw	0
  1054  044E  00B1               	movwf	___aldiv@dividend+3
  1055  044F  307A               	movlw	122
  1056  0450  00B0               	movwf	___aldiv@dividend+2
  1057  0451  3012               	movlw	18
  1058  0452  00AF               	movwf	___aldiv@dividend+1
  1059  0453  3000               	movlw	0
  1060  0454  00AE               	movwf	___aldiv@dividend
  1061  0455  120A  118A  2367  120A  118A  	fcall	___aldiv
  1062  045A  1283               	bcf	3,5	;RP0=0, select bank0
  1063  045B  1303               	bcf	3,6	;RP1=0, select bank0
  1064  045C  082B               	movf	?___aldiv+1,w
  1065  045D  00C7               	movwf	__calc_timer0_prescaler@aux_tmr0+1
  1066  045E  082A               	movf	?___aldiv,w
  1067  045F  00C6               	movwf	__calc_timer0_prescaler@aux_tmr0
  1068                           
  1069                           ;virtualwire.c: 108: if (aux_tmr0 < 256)
  1070  0460  3001               	movlw	1
  1071  0461  0247               	subwf	__calc_timer0_prescaler@aux_tmr0+1,w
  1072  0462  3000               	movlw	0
  1073  0463  1903               	skipnz
  1074  0464  0246               	subwf	__calc_timer0_prescaler@aux_tmr0,w
  1075  0465  1803               	skipnc
  1076  0466  2C79               	goto	l1793
  1077                           
  1078                           ;virtualwire.c: 109: {
  1079                           ;virtualwire.c: 110: *k_tmr0 = aux_tmr0;
  1080  0467  0846               	movf	__calc_timer0_prescaler@aux_tmr0,w
  1081  0468  00BE               	movwf	??__calc_timer0_prescaler
  1082  0469  083D               	movf	__calc_timer0_prescaler@k_tmr0,w
  1083  046A  0084               	movwf	4
  1084  046B  083E               	movf	??__calc_timer0_prescaler,w
  1085  046C  1383               	bcf	3,7	;select IRP bank0
  1086  046D  0080               	movwf	0
  1087                           
  1088                           ;virtualwire.c: 111: if (pindex > 0)
  1089  046E  0848               	movf	__calc_timer0_prescaler@pindex,w
  1090  046F  1903               	btfsc	3,2
  1091  0470  0008               	return
  1092                           
  1093                           ;virtualwire.c: 112: {
  1094                           ;virtualwire.c: 113: *prescaler_bits = pindex - 1;
  1095  0471  0848               	movf	__calc_timer0_prescaler@pindex,w
  1096  0472  3EFF               	addlw	255
  1097  0473  00BE               	movwf	??__calc_timer0_prescaler
  1098  0474  083C               	movf	__calc_timer0_prescaler@prescaler_bits,w
  1099  0475  0084               	movwf	4
  1100  0476  083E               	movf	??__calc_timer0_prescaler,w
  1101  0477  0080               	movwf	0
  1102                           
  1103                           ;virtualwire.c: 114: }
  1104                           ;virtualwire.c: 115: return 1;
  1105                           ;	Return value of __calc_timer0_prescaler is never used
  1106  0478  0008               	return
  1107  0479                     l1793:	
  1108  0479  3001               	movlw	1
  1109  047A  00BE               	movwf	??__calc_timer0_prescaler
  1110  047B  083E               	movf	??__calc_timer0_prescaler,w
  1111  047C  07C8               	addwf	__calc_timer0_prescaler@pindex,f
  1112  047D  2BF9               	goto	L2
  1113  047E                     __end_of__calc_timer0_prescaler:	
  1114                           ;virtualwire.c: 116: }
  1115                           ;virtualwire.c: 117: }
  1116                           ;virtualwire.c: 120: return 0;
  1117                           ;	Return value of __calc_timer0_prescaler is never used
  1118                           
  1119                           
  1120                           	psect	text3
  1121  0606                     __ptext3:	
  1122 ;; *************** function ___wmul *****************
  1123 ;; Defined at:
  1124 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  1125 ;; Parameters:    Size  Location     Type
  1126 ;;  multiplier      2    4[BANK0 ] unsigned int 
  1127 ;;  multiplicand    2    6[BANK0 ] unsigned int 
  1128 ;; Auto vars:     Size  Location     Type
  1129 ;;  product         2    8[BANK0 ] unsigned int 
  1130 ;; Return value:  Size  Location     Type
  1131 ;;                  2    4[BANK0 ] unsigned int 
  1132 ;; Registers used:
  1133 ;;		wreg, status,2, status,0
  1134 ;; Tracked objects:
  1135 ;;		On entry : 0/0
  1136 ;;		On exit  : 0/0
  1137 ;;		Unchanged: 0/0
  1138 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1139 ;;      Params:         0       4       0       0       0
  1140 ;;      Locals:         0       2       0       0       0
  1141 ;;      Temps:          0       0       0       0       0
  1142 ;;      Totals:         0       6       0       0       0
  1143 ;;Total ram usage:        6 bytes
  1144 ;; Hardware stack levels used:    1
  1145 ;; Hardware stack levels required when called:    5
  1146 ;; This function calls:
  1147 ;;		Nothing
  1148 ;; This function is called by:
  1149 ;;		__calc_timer0_prescaler
  1150 ;; This function uses a non-reentrant model
  1151 ;;
  1152                           
  1153                           
  1154                           ;psect for function ___wmul
  1155  0606                     ___wmul:	
  1156                           
  1157                           ;incstack = 0
  1158                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  1159  0606  1283               	bcf	3,5	;RP0=0, select bank0
  1160  0607  1303               	bcf	3,6	;RP1=0, select bank0
  1161  0608  01A8               	clrf	___wmul@product
  1162  0609  01A9               	clrf	___wmul@product+1
  1163  060A                     l1715:	
  1164  060A  1C24               	btfss	___wmul@multiplier,0
  1165  060B  2E12               	goto	l329
  1166  060C  0826               	movf	___wmul@multiplicand,w
  1167  060D  07A8               	addwf	___wmul@product,f
  1168  060E  1803               	skipnc
  1169  060F  0AA9               	incf	___wmul@product+1,f
  1170  0610  0827               	movf	___wmul@multiplicand+1,w
  1171  0611  07A9               	addwf	___wmul@product+1,f
  1172  0612                     l329:	
  1173  0612  3001               	movlw	1
  1174  0613                     u1985:	
  1175  0613  1003               	clrc
  1176  0614  0DA6               	rlf	___wmul@multiplicand,f
  1177  0615  0DA7               	rlf	___wmul@multiplicand+1,f
  1178  0616  3EFF               	addlw	-1
  1179  0617  1D03               	skipz
  1180  0618  2E13               	goto	u1985
  1181  0619  3001               	movlw	1
  1182  061A                     u1995:	
  1183  061A  1003               	clrc
  1184  061B  0CA5               	rrf	___wmul@multiplier+1,f
  1185  061C  0CA4               	rrf	___wmul@multiplier,f
  1186  061D  3EFF               	addlw	-1
  1187  061E  1D03               	skipz
  1188  061F  2E1A               	goto	u1995
  1189  0620  0824               	movf	___wmul@multiplier,w
  1190  0621  0425               	iorwf	___wmul@multiplier+1,w
  1191  0622  1D03               	btfss	3,2
  1192  0623  2E0A               	goto	l1715
  1193  0624  0829               	movf	___wmul@product+1,w
  1194  0625  00A5               	movwf	?___wmul+1
  1195  0626  0828               	movf	___wmul@product,w
  1196  0627  00A4               	movwf	?___wmul
  1197  0628  0008               	return
  1198  0629                     __end_of___wmul:	
  1199                           
  1200                           	psect	text4
  1201  0367                     __ptext4:	
  1202 ;; *************** function ___aldiv *****************
  1203 ;; Defined at:
  1204 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\aldiv.c"
  1205 ;; Parameters:    Size  Location     Type
  1206 ;;  divisor         4   10[BANK0 ] long 
  1207 ;;  dividend        4   14[BANK0 ] long 
  1208 ;; Auto vars:     Size  Location     Type
  1209 ;;  quotient        4   21[BANK0 ] long 
  1210 ;;  sign            1   20[BANK0 ] unsigned char 
  1211 ;;  counter         1   19[BANK0 ] unsigned char 
  1212 ;; Return value:  Size  Location     Type
  1213 ;;                  4   10[BANK0 ] long 
  1214 ;; Registers used:
  1215 ;;		wreg, status,2, status,0
  1216 ;; Tracked objects:
  1217 ;;		On entry : 0/0
  1218 ;;		On exit  : 0/0
  1219 ;;		Unchanged: 0/0
  1220 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1221 ;;      Params:         0       8       0       0       0
  1222 ;;      Locals:         0       6       0       0       0
  1223 ;;      Temps:          0       1       0       0       0
  1224 ;;      Totals:         0      15       0       0       0
  1225 ;;Total ram usage:       15 bytes
  1226 ;; Hardware stack levels used:    1
  1227 ;; Hardware stack levels required when called:    5
  1228 ;; This function calls:
  1229 ;;		Nothing
  1230 ;; This function is called by:
  1231 ;;		__calc_timer0_prescaler
  1232 ;; This function uses a non-reentrant model
  1233 ;;
  1234                           
  1235                           
  1236                           ;psect for function ___aldiv
  1237  0367                     ___aldiv:	
  1238                           
  1239                           ;incstack = 0
  1240                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  1241  0367  1283               	bcf	3,5	;RP0=0, select bank0
  1242  0368  1303               	bcf	3,6	;RP1=0, select bank0
  1243  0369  01B4               	clrf	___aldiv@sign
  1244  036A  1FAD               	btfss	___aldiv@divisor+3,7
  1245  036B  2B79               	goto	l384
  1246  036C  09AA               	comf	___aldiv@divisor,f
  1247  036D  09AB               	comf	___aldiv@divisor+1,f
  1248  036E  09AC               	comf	___aldiv@divisor+2,f
  1249  036F  09AD               	comf	___aldiv@divisor+3,f
  1250  0370  0AAA               	incf	___aldiv@divisor,f
  1251  0371  1903               	skipnz
  1252  0372  0AAB               	incf	___aldiv@divisor+1,f
  1253  0373  1903               	skipnz
  1254  0374  0AAC               	incf	___aldiv@divisor+2,f
  1255  0375  1903               	skipnz
  1256  0376  0AAD               	incf	___aldiv@divisor+3,f
  1257  0377  01B4               	clrf	___aldiv@sign
  1258  0378  0AB4               	incf	___aldiv@sign,f
  1259  0379                     l384:	
  1260  0379  1FB1               	btfss	___aldiv@dividend+3,7
  1261  037A  2B8A               	goto	l1737
  1262  037B  09AE               	comf	___aldiv@dividend,f
  1263  037C  09AF               	comf	___aldiv@dividend+1,f
  1264  037D  09B0               	comf	___aldiv@dividend+2,f
  1265  037E  09B1               	comf	___aldiv@dividend+3,f
  1266  037F  0AAE               	incf	___aldiv@dividend,f
  1267  0380  1903               	skipnz
  1268  0381  0AAF               	incf	___aldiv@dividend+1,f
  1269  0382  1903               	skipnz
  1270  0383  0AB0               	incf	___aldiv@dividend+2,f
  1271  0384  1903               	skipnz
  1272  0385  0AB1               	incf	___aldiv@dividend+3,f
  1273  0386  3001               	movlw	1
  1274  0387  00B2               	movwf	??___aldiv
  1275  0388  0832               	movf	??___aldiv,w
  1276  0389  06B4               	xorwf	___aldiv@sign,f
  1277  038A                     l1737:	
  1278  038A  3000               	movlw	0
  1279  038B  00B8               	movwf	___aldiv@quotient+3
  1280  038C  3000               	movlw	0
  1281  038D  00B7               	movwf	___aldiv@quotient+2
  1282  038E  3000               	movlw	0
  1283  038F  00B6               	movwf	___aldiv@quotient+1
  1284  0390  3000               	movlw	0
  1285  0391  00B5               	movwf	___aldiv@quotient
  1286  0392  082D               	movf	___aldiv@divisor+3,w
  1287  0393  042C               	iorwf	___aldiv@divisor+2,w
  1288  0394  042B               	iorwf	___aldiv@divisor+1,w
  1289  0395  042A               	iorwf	___aldiv@divisor,w
  1290  0396  1903               	skipnz
  1291  0397  2BDF               	goto	l1759
  1292  0398  01B3               	clrf	___aldiv@counter
  1293  0399  0AB3               	incf	___aldiv@counter,f
  1294  039A                     l1745:	
  1295  039A  1BAD               	btfsc	___aldiv@divisor+3,7
  1296  039B  2BAA               	goto	l1747
  1297  039C  3001               	movlw	1
  1298  039D  00B2               	movwf	??___aldiv
  1299  039E                     u2045:	
  1300  039E  1003               	clrc
  1301  039F  0DAA               	rlf	___aldiv@divisor,f
  1302  03A0  0DAB               	rlf	___aldiv@divisor+1,f
  1303  03A1  0DAC               	rlf	___aldiv@divisor+2,f
  1304  03A2  0DAD               	rlf	___aldiv@divisor+3,f
  1305  03A3  0BB2               	decfsz	??___aldiv,f
  1306  03A4  2B9E               	goto	u2045
  1307  03A5  3001               	movlw	1
  1308  03A6  00B2               	movwf	??___aldiv
  1309  03A7  0832               	movf	??___aldiv,w
  1310  03A8  07B3               	addwf	___aldiv@counter,f
  1311  03A9  2B9A               	goto	l1745
  1312  03AA                     l1747:	
  1313  03AA  3001               	movlw	1
  1314  03AB  00B2               	movwf	??___aldiv
  1315  03AC                     u2065:	
  1316  03AC  1003               	clrc
  1317  03AD  0DB5               	rlf	___aldiv@quotient,f
  1318  03AE  0DB6               	rlf	___aldiv@quotient+1,f
  1319  03AF  0DB7               	rlf	___aldiv@quotient+2,f
  1320  03B0  0DB8               	rlf	___aldiv@quotient+3,f
  1321  03B1  0BB2               	decfsz	??___aldiv,f
  1322  03B2  2BAC               	goto	u2065
  1323  03B3  082D               	movf	___aldiv@divisor+3,w
  1324  03B4  0231               	subwf	___aldiv@dividend+3,w
  1325  03B5  1D03               	skipz
  1326  03B6  2BC1               	goto	u2075
  1327  03B7  082C               	movf	___aldiv@divisor+2,w
  1328  03B8  0230               	subwf	___aldiv@dividend+2,w
  1329  03B9  1D03               	skipz
  1330  03BA  2BC1               	goto	u2075
  1331  03BB  082B               	movf	___aldiv@divisor+1,w
  1332  03BC  022F               	subwf	___aldiv@dividend+1,w
  1333  03BD  1D03               	skipz
  1334  03BE  2BC1               	goto	u2075
  1335  03BF  082A               	movf	___aldiv@divisor,w
  1336  03C0  022E               	subwf	___aldiv@dividend,w
  1337  03C1                     u2075:	
  1338  03C1  1C03               	skipc
  1339  03C2  2BD2               	goto	l1755
  1340  03C3  082A               	movf	___aldiv@divisor,w
  1341  03C4  02AE               	subwf	___aldiv@dividend,f
  1342  03C5  082B               	movf	___aldiv@divisor+1,w
  1343  03C6  1C03               	skipc
  1344  03C7  0F2B               	incfsz	___aldiv@divisor+1,w
  1345  03C8  02AF               	subwf	___aldiv@dividend+1,f
  1346  03C9  082C               	movf	___aldiv@divisor+2,w
  1347  03CA  1C03               	skipc
  1348  03CB  0F2C               	incfsz	___aldiv@divisor+2,w
  1349  03CC  02B0               	subwf	___aldiv@dividend+2,f
  1350  03CD  082D               	movf	___aldiv@divisor+3,w
  1351  03CE  1C03               	skipc
  1352  03CF  0F2D               	incfsz	___aldiv@divisor+3,w
  1353  03D0  02B1               	subwf	___aldiv@dividend+3,f
  1354  03D1  1435               	bsf	___aldiv@quotient,0
  1355  03D2                     l1755:	
  1356  03D2  3001               	movlw	1
  1357  03D3                     u2085:	
  1358  03D3  1003               	clrc
  1359  03D4  0CAD               	rrf	___aldiv@divisor+3,f
  1360  03D5  0CAC               	rrf	___aldiv@divisor+2,f
  1361  03D6  0CAB               	rrf	___aldiv@divisor+1,f
  1362  03D7  0CAA               	rrf	___aldiv@divisor,f
  1363  03D8  3EFF               	addlw	-1
  1364  03D9  1D03               	skipz
  1365  03DA  2BD3               	goto	u2085
  1366  03DB  3001               	movlw	1
  1367  03DC  02B3               	subwf	___aldiv@counter,f
  1368  03DD  1D03               	btfss	3,2
  1369  03DE  2BAA               	goto	l1747
  1370  03DF                     l1759:	
  1371  03DF  0834               	movf	___aldiv@sign,w
  1372  03E0  1903               	btfsc	3,2
  1373  03E1  2BED               	goto	l1763
  1374  03E2  09B5               	comf	___aldiv@quotient,f
  1375  03E3  09B6               	comf	___aldiv@quotient+1,f
  1376  03E4  09B7               	comf	___aldiv@quotient+2,f
  1377  03E5  09B8               	comf	___aldiv@quotient+3,f
  1378  03E6  0AB5               	incf	___aldiv@quotient,f
  1379  03E7  1903               	skipnz
  1380  03E8  0AB6               	incf	___aldiv@quotient+1,f
  1381  03E9  1903               	skipnz
  1382  03EA  0AB7               	incf	___aldiv@quotient+2,f
  1383  03EB  1903               	skipnz
  1384  03EC  0AB8               	incf	___aldiv@quotient+3,f
  1385  03ED                     l1763:	
  1386  03ED  0838               	movf	___aldiv@quotient+3,w
  1387  03EE  00AD               	movwf	?___aldiv+3
  1388  03EF  0837               	movf	___aldiv@quotient+2,w
  1389  03F0  00AC               	movwf	?___aldiv+2
  1390  03F1  0836               	movf	___aldiv@quotient+1,w
  1391  03F2  00AB               	movwf	?___aldiv+1
  1392  03F3  0835               	movf	___aldiv@quotient,w
  1393  03F4  00AA               	movwf	?___aldiv
  1394  03F5  0008               	return
  1395  03F6                     __end_of___aldiv:	
  1396                           
  1397                           	psect	text5
  1398  0029                     __ptext5:	
  1399 ;; *************** function _vw_send *****************
  1400 ;; Defined at:
  1401 ;;		line 180 in file "virtualwire.c"
  1402 ;; Parameters:    Size  Location     Type
  1403 ;;  buf             1    wreg     PTR const unsigned char 
  1404 ;;		 -> main@buffer(5), 
  1405 ;;  len             1   20[BANK0 ] unsigned char 
  1406 ;; Auto vars:     Size  Location     Type
  1407 ;;  buf             1   25[BANK0 ] PTR const unsigned char 
  1408 ;;		 -> main@buffer(5), 
  1409 ;;  crc             2   28[BANK0 ] unsigned int 
  1410 ;;  index           1   31[BANK0 ] unsigned char 
  1411 ;;  p               1   30[BANK0 ] PTR unsigned char 
  1412 ;;		 -> vw_tx_buf(48), 
  1413 ;;  i               1   27[BANK0 ] unsigned char 
  1414 ;;  count           1   26[BANK0 ] unsigned char 
  1415 ;; Return value:  Size  Location     Type
  1416 ;;                  1    wreg      unsigned char 
  1417 ;; Registers used:
  1418 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1419 ;; Tracked objects:
  1420 ;;		On entry : 0/0
  1421 ;;		On exit  : 0/0
  1422 ;;		Unchanged: 0/0
  1423 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1424 ;;      Params:         0       1       0       0       0
  1425 ;;      Locals:         0       7       0       0       0
  1426 ;;      Temps:          0       4       0       0       0
  1427 ;;      Totals:         0      12       0       0       0
  1428 ;;Total ram usage:       12 bytes
  1429 ;; Hardware stack levels used:    1
  1430 ;; Hardware stack levels required when called:    6
  1431 ;; This function calls:
  1432 ;;		__crc_ccitt_update
  1433 ;;		_vw_tx_start
  1434 ;;		_vw_wait_tx
  1435 ;; This function is called by:
  1436 ;;		_main
  1437 ;; This function uses a non-reentrant model
  1438 ;;
  1439                           
  1440                           
  1441                           ;psect for function _vw_send
  1442  0029                     _vw_send:	
  1443                           
  1444                           ;incstack = 0
  1445                           ; Regs used in _vw_send: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1446                           ;vw_send@buf stored from wreg
  1447  0029  1283               	bcf	3,5	;RP0=0, select bank0
  1448  002A  1303               	bcf	3,6	;RP1=0, select bank0
  1449  002B  00B9               	movwf	vw_send@buf
  1450                           
  1451                           ;virtualwire.c: 182: uint8_t i;
  1452                           ;virtualwire.c: 183: uint8_t index = 0;
  1453  002C  01BF               	clrf	vw_send@index
  1454                           
  1455                           ;virtualwire.c: 184: uint16_t crc = 0xffff;
  1456  002D  30FF               	movlw	255
  1457  002E  00BC               	movwf	vw_send@crc
  1458  002F  30FF               	movlw	255
  1459  0030  00BD               	movwf	vw_send@crc+1
  1460                           
  1461                           ;virtualwire.c: 185: uint8_t *p = vw_tx_buf;
  1462  0031  30A0               	movlw	(low (_vw_tx_buf| 0))& (0+255)
  1463  0032  00B5               	movwf	??_vw_send
  1464  0033  0835               	movf	??_vw_send,w
  1465  0034  00BE               	movwf	vw_send@p
  1466                           
  1467                           ;virtualwire.c: 186: uint8_t count = len + 3;
  1468  0035  0834               	movf	vw_send@len,w
  1469  0036  3E03               	addlw	3
  1470  0037  00B5               	movwf	??_vw_send
  1471  0038  0835               	movf	??_vw_send,w
  1472  0039  00BA               	movwf	vw_send@count
  1473                           
  1474                           ;virtualwire.c: 188: if (len > 24-3)
  1475  003A  3016               	movlw	22
  1476  003B  0234               	subwf	vw_send@len,w
  1477  003C  1803               	btfsc	3,0
  1478  003D  0008               	return
  1479                           
  1480                           ;virtualwire.c: 192: vw_wait_tx();
  1481                           
  1482                           ;virtualwire.c: 189: return 0;
  1483                           ;	Return value of _vw_send is never used
  1484  003E  120A  118A  267B  120A  118A  	fcall	_vw_wait_tx
  1485                           
  1486                           ;virtualwire.c: 193: vw_rx_enabled = 0;
  1487  0043  1283               	bcf	3,5	;RP0=0, select bank0
  1488  0044  1303               	bcf	3,6	;RP1=0, select bank0
  1489  0045  01DA               	clrf	_vw_rx_enabled
  1490                           
  1491                           ;virtualwire.c: 196: crc = _crc_ccitt_update(crc, count);
  1492  0046  083D               	movf	vw_send@crc+1,w
  1493  0047  00A5               	movwf	__crc_ccitt_update@crc+1
  1494  0048  083C               	movf	vw_send@crc,w
  1495  0049  00A4               	movwf	__crc_ccitt_update@crc
  1496  004A  083A               	movf	vw_send@count,w
  1497  004B  00B5               	movwf	??_vw_send
  1498  004C  0835               	movf	??_vw_send,w
  1499  004D  00A6               	movwf	__crc_ccitt_update@data
  1500  004E  120A  118A  24C8  120A  118A  	fcall	__crc_ccitt_update
  1501  0053  1283               	bcf	3,5	;RP0=0, select bank0
  1502  0054  1303               	bcf	3,6	;RP1=0, select bank0
  1503  0055  0825               	movf	?__crc_ccitt_update+1,w
  1504  0056  00BD               	movwf	vw_send@crc+1
  1505  0057  0824               	movf	?__crc_ccitt_update,w
  1506  0058  00BC               	movwf	vw_send@crc
  1507                           
  1508                           ;virtualwire.c: 197: p[index++] = symbols[count >> 4];
  1509  0059  083A               	movf	vw_send@count,w
  1510  005A  00B5               	movwf	??_vw_send
  1511  005B  3004               	movlw	4
  1512  005C                     u2445:	
  1513  005C  1003               	clrc
  1514  005D  0CB5               	rrf	??_vw_send,f
  1515  005E  3EFF               	addlw	-1
  1516  005F  1D03               	skipz
  1517  0060  285C               	goto	u2445
  1518  0061  0835               	movf	??_vw_send,w
  1519  0062  3E13               	addlw	low ((_symbols-__stringbase)| (0+32768))
  1520  0063  0084               	movwf	4
  1521  0064  120A  118A  2595  120A  118A  	fcall	stringdir
  1522  0069  00B6               	movwf	??_vw_send+1
  1523  006A  083F               	movf	vw_send@index,w
  1524  006B  073E               	addwf	vw_send@p,w
  1525  006C  00B7               	movwf	??_vw_send+2
  1526  006D  0837               	movf	??_vw_send+2,w
  1527  006E  0084               	movwf	4
  1528  006F  0836               	movf	??_vw_send+1,w
  1529  0070  1383               	bcf	3,7	;select IRP bank0
  1530  0071  0080               	movwf	0
  1531  0072  3001               	movlw	1
  1532  0073  00B5               	movwf	??_vw_send
  1533  0074  0835               	movf	??_vw_send,w
  1534  0075  07BF               	addwf	vw_send@index,f
  1535                           
  1536                           ;virtualwire.c: 198: p[index++] = symbols[count & 0xf];
  1537  0076  083A               	movf	vw_send@count,w
  1538  0077  390F               	andlw	15
  1539  0078  3E13               	addlw	low ((_symbols-__stringbase)| (0+32768))
  1540  0079  0084               	movwf	4
  1541  007A  120A  118A  2595  120A  118A  	fcall	stringdir
  1542  007F  00B5               	movwf	??_vw_send
  1543  0080  083F               	movf	vw_send@index,w
  1544  0081  073E               	addwf	vw_send@p,w
  1545  0082  00B6               	movwf	??_vw_send+1
  1546  0083  0836               	movf	??_vw_send+1,w
  1547  0084  0084               	movwf	4
  1548  0085  0835               	movf	??_vw_send,w
  1549  0086  0080               	movwf	0
  1550  0087  3001               	movlw	1
  1551  0088  00B5               	movwf	??_vw_send
  1552  0089  0835               	movf	??_vw_send,w
  1553  008A  07BF               	addwf	vw_send@index,f
  1554                           
  1555                           ;virtualwire.c: 202: for (i = 0; i < len; i++)
  1556  008B  01BB               	clrf	vw_send@i
  1557  008C                     l1973:	
  1558  008C  0834               	movf	vw_send@len,w
  1559  008D  023B               	subwf	vw_send@i,w
  1560  008E  1803               	btfsc	3,0
  1561  008F  28E9               	goto	l156
  1562                           
  1563                           ;virtualwire.c: 203: {
  1564                           ;virtualwire.c: 204: crc = _crc_ccitt_update(crc, buf[i]);
  1565  0090  083D               	movf	vw_send@crc+1,w
  1566  0091  00A5               	movwf	__crc_ccitt_update@crc+1
  1567  0092  083C               	movf	vw_send@crc,w
  1568  0093  00A4               	movwf	__crc_ccitt_update@crc
  1569  0094  083B               	movf	vw_send@i,w
  1570  0095  0739               	addwf	vw_send@buf,w
  1571  0096  00B5               	movwf	??_vw_send
  1572  0097  0835               	movf	??_vw_send,w
  1573  0098  0084               	movwf	4
  1574  0099  0800               	movf	0,w
  1575  009A  00B6               	movwf	??_vw_send+1
  1576  009B  0836               	movf	??_vw_send+1,w
  1577  009C  00A6               	movwf	__crc_ccitt_update@data
  1578  009D  120A  118A  24C8  120A  118A  	fcall	__crc_ccitt_update
  1579  00A2  1283               	bcf	3,5	;RP0=0, select bank0
  1580  00A3  1303               	bcf	3,6	;RP1=0, select bank0
  1581  00A4  0825               	movf	?__crc_ccitt_update+1,w
  1582  00A5  00BD               	movwf	vw_send@crc+1
  1583  00A6  0824               	movf	?__crc_ccitt_update,w
  1584  00A7  00BC               	movwf	vw_send@crc
  1585                           
  1586                           ;virtualwire.c: 205: p[index++] = symbols[buf[i] >> 4];
  1587  00A8  083B               	movf	vw_send@i,w
  1588  00A9  0739               	addwf	vw_send@buf,w
  1589  00AA  00B5               	movwf	??_vw_send
  1590  00AB  0835               	movf	??_vw_send,w
  1591  00AC  0084               	movwf	4
  1592  00AD  1383               	bcf	3,7	;select IRP bank0
  1593  00AE  0800               	movf	0,w
  1594  00AF  00B6               	movwf	??_vw_send+1
  1595  00B0  3004               	movlw	4
  1596  00B1                     u2455:	
  1597  00B1  1003               	clrc
  1598  00B2  0CB6               	rrf	??_vw_send+1,f
  1599  00B3  3EFF               	addlw	-1
  1600  00B4  1D03               	skipz
  1601  00B5  28B1               	goto	u2455
  1602  00B6  0836               	movf	??_vw_send+1,w
  1603  00B7  3E13               	addlw	low ((_symbols-__stringbase)| (0+32768))
  1604  00B8  0084               	movwf	4
  1605  00B9  120A  118A  2595  120A  118A  	fcall	stringdir
  1606  00BE  00B7               	movwf	??_vw_send+2
  1607  00BF  083F               	movf	vw_send@index,w
  1608  00C0  073E               	addwf	vw_send@p,w
  1609  00C1  00B8               	movwf	??_vw_send+3
  1610  00C2  0838               	movf	??_vw_send+3,w
  1611  00C3  0084               	movwf	4
  1612  00C4  0837               	movf	??_vw_send+2,w
  1613  00C5  0080               	movwf	0
  1614  00C6  3001               	movlw	1
  1615  00C7  00B5               	movwf	??_vw_send
  1616  00C8  0835               	movf	??_vw_send,w
  1617  00C9  07BF               	addwf	vw_send@index,f
  1618                           
  1619                           ;virtualwire.c: 206: p[index++] = symbols[buf[i] & 0xf];
  1620  00CA  083B               	movf	vw_send@i,w
  1621  00CB  0739               	addwf	vw_send@buf,w
  1622  00CC  00B5               	movwf	??_vw_send
  1623  00CD  0835               	movf	??_vw_send,w
  1624  00CE  0084               	movwf	4
  1625  00CF  0800               	movf	0,w
  1626  00D0  390F               	andlw	15
  1627  00D1  3E13               	addlw	low ((_symbols-__stringbase)| (0+32768))
  1628  00D2  0084               	movwf	4
  1629  00D3  120A  118A  2595  120A  118A  	fcall	stringdir
  1630  00D8  00B6               	movwf	??_vw_send+1
  1631  00D9  083F               	movf	vw_send@index,w
  1632  00DA  073E               	addwf	vw_send@p,w
  1633  00DB  00B7               	movwf	??_vw_send+2
  1634  00DC  0837               	movf	??_vw_send+2,w
  1635  00DD  0084               	movwf	4
  1636  00DE  0836               	movf	??_vw_send+1,w
  1637  00DF  0080               	movwf	0
  1638  00E0  3001               	movlw	1
  1639  00E1  00B5               	movwf	??_vw_send
  1640  00E2  0835               	movf	??_vw_send,w
  1641  00E3  07BF               	addwf	vw_send@index,f
  1642  00E4  3001               	movlw	1
  1643  00E5  00B5               	movwf	??_vw_send
  1644  00E6  0835               	movf	??_vw_send,w
  1645  00E7  07BB               	addwf	vw_send@i,f
  1646  00E8  288C               	goto	l1973
  1647  00E9                     l156:	
  1648                           
  1649                           ;virtualwire.c: 207: }
  1650                           ;virtualwire.c: 212: crc = ~crc;
  1651  00E9  09BC               	comf	vw_send@crc,f
  1652  00EA  09BD               	comf	vw_send@crc+1,f
  1653                           
  1654                           ;virtualwire.c: 213: p[index++] = symbols[(crc >> 4) & 0xf];
  1655  00EB  083D               	movf	vw_send@crc+1,w
  1656  00EC  00B6               	movwf	??_vw_send+1
  1657  00ED  083C               	movf	vw_send@crc,w
  1658  00EE  00B5               	movwf	??_vw_send
  1659  00EF  3004               	movlw	4
  1660  00F0                     u2475:	
  1661  00F0  1003               	clrc
  1662  00F1  0CB6               	rrf	??_vw_send+1,f
  1663  00F2  0CB5               	rrf	??_vw_send,f
  1664  00F3  3EFF               	addlw	-1
  1665  00F4  1D03               	skipz
  1666  00F5  28F0               	goto	u2475
  1667  00F6  0835               	movf	??_vw_send,w
  1668  00F7  390F               	andlw	15
  1669  00F8  3E13               	addlw	low ((_symbols-__stringbase)| (0+32768))
  1670  00F9  0084               	movwf	4
  1671  00FA  120A  118A  2595  120A  118A  	fcall	stringdir
  1672  00FF  00B7               	movwf	??_vw_send+2
  1673  0100  083F               	movf	vw_send@index,w
  1674  0101  073E               	addwf	vw_send@p,w
  1675  0102  00B8               	movwf	??_vw_send+3
  1676  0103  0838               	movf	??_vw_send+3,w
  1677  0104  0084               	movwf	4
  1678  0105  0837               	movf	??_vw_send+2,w
  1679  0106  0080               	movwf	0
  1680  0107  3001               	movlw	1
  1681  0108  00B5               	movwf	??_vw_send
  1682  0109  0835               	movf	??_vw_send,w
  1683  010A  07BF               	addwf	vw_send@index,f
  1684                           
  1685                           ;virtualwire.c: 214: p[index++] = symbols[crc & 0xf];
  1686  010B  083C               	movf	vw_send@crc,w
  1687  010C  390F               	andlw	15
  1688  010D  3E13               	addlw	low ((_symbols-__stringbase)| (0+32768))
  1689  010E  0084               	movwf	4
  1690  010F  120A  118A  2595  120A  118A  	fcall	stringdir
  1691  0114  00B5               	movwf	??_vw_send
  1692  0115  083F               	movf	vw_send@index,w
  1693  0116  073E               	addwf	vw_send@p,w
  1694  0117  00B6               	movwf	??_vw_send+1
  1695  0118  0836               	movf	??_vw_send+1,w
  1696  0119  0084               	movwf	4
  1697  011A  0835               	movf	??_vw_send,w
  1698  011B  0080               	movwf	0
  1699  011C  3001               	movlw	1
  1700  011D  00B5               	movwf	??_vw_send
  1701  011E  0835               	movf	??_vw_send,w
  1702  011F  07BF               	addwf	vw_send@index,f
  1703                           
  1704                           ;virtualwire.c: 215: p[index++] = symbols[(crc >> 12) & 0xf];
  1705  0120  083D               	movf	vw_send@crc+1,w
  1706  0121  00B6               	movwf	??_vw_send+1
  1707  0122  083C               	movf	vw_send@crc,w
  1708  0123  00B5               	movwf	??_vw_send
  1709  0124  0E36               	swapf	??_vw_send+1,w
  1710  0125  390F               	andlw	15
  1711  0126  00B5               	movwf	??_vw_send
  1712  0127  01B6               	clrf	??_vw_send+1
  1713  0128  0835               	movf	??_vw_send,w
  1714  0129  390F               	andlw	15
  1715  012A  3E13               	addlw	low ((_symbols-__stringbase)| (0+32768))
  1716  012B  0084               	movwf	4
  1717  012C  120A  118A  2595  120A  118A  	fcall	stringdir
  1718  0131  00B7               	movwf	??_vw_send+2
  1719  0132  083F               	movf	vw_send@index,w
  1720  0133  073E               	addwf	vw_send@p,w
  1721  0134  00B8               	movwf	??_vw_send+3
  1722  0135  0838               	movf	??_vw_send+3,w
  1723  0136  0084               	movwf	4
  1724  0137  0837               	movf	??_vw_send+2,w
  1725  0138  0080               	movwf	0
  1726  0139  3001               	movlw	1
  1727  013A  00B5               	movwf	??_vw_send
  1728  013B  0835               	movf	??_vw_send,w
  1729  013C  07BF               	addwf	vw_send@index,f
  1730                           
  1731                           ;virtualwire.c: 216: p[index++] = symbols[(crc >> 8) & 0xf];
  1732  013D  083D               	movf	vw_send@crc+1,w
  1733  013E  390F               	andlw	15
  1734  013F  3E13               	addlw	low ((_symbols-__stringbase)| (0+32768))
  1735  0140  0084               	movwf	4
  1736  0141  120A  118A  2595  120A  118A  	fcall	stringdir
  1737  0146  00B5               	movwf	??_vw_send
  1738  0147  083F               	movf	vw_send@index,w
  1739  0148  073E               	addwf	vw_send@p,w
  1740  0149  00B6               	movwf	??_vw_send+1
  1741  014A  0836               	movf	??_vw_send+1,w
  1742  014B  0084               	movwf	4
  1743  014C  0835               	movf	??_vw_send,w
  1744  014D  0080               	movwf	0
  1745  014E  3001               	movlw	1
  1746  014F  00B5               	movwf	??_vw_send
  1747  0150  0835               	movf	??_vw_send,w
  1748  0151  07BF               	addwf	vw_send@index,f
  1749                           
  1750                           ;virtualwire.c: 219: vw_tx_len = index + 8;
  1751  0152  083F               	movf	vw_send@index,w
  1752  0153  3E08               	addlw	8
  1753  0154  00B5               	movwf	??_vw_send
  1754  0155  0835               	movf	??_vw_send,w
  1755  0156  00E4               	movwf	_vw_tx_len
  1756                           
  1757                           ;virtualwire.c: 222: vw_tx_start();
  1758  0157  120A  118A  2669   	fcall	_vw_tx_start
  1759  015A  0008               	return
  1760  015B                     __end_of_vw_send:	
  1761                           ;virtualwire.c: 224: return 1;
  1762                           ;	Return value of _vw_send is never used
  1763                           
  1764                           
  1765                           	psect	text6
  1766  067B                     __ptext6:	
  1767 ;; *************** function _vw_wait_tx *****************
  1768 ;; Defined at:
  1769 ;;		line 157 in file "virtualwire.c"
  1770 ;; Parameters:    Size  Location     Type
  1771 ;;		None
  1772 ;; Auto vars:     Size  Location     Type
  1773 ;;		None
  1774 ;; Return value:  Size  Location     Type
  1775 ;;                  1    wreg      void 
  1776 ;; Registers used:
  1777 ;;		wreg, status,2, status,0
  1778 ;; Tracked objects:
  1779 ;;		On entry : 0/0
  1780 ;;		On exit  : 0/0
  1781 ;;		Unchanged: 0/0
  1782 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1783 ;;      Params:         0       0       0       0       0
  1784 ;;      Locals:         0       0       0       0       0
  1785 ;;      Temps:          0       0       0       0       0
  1786 ;;      Totals:         0       0       0       0       0
  1787 ;;Total ram usage:        0 bytes
  1788 ;; Hardware stack levels used:    1
  1789 ;; Hardware stack levels required when called:    5
  1790 ;; This function calls:
  1791 ;;		Nothing
  1792 ;; This function is called by:
  1793 ;;		_vw_send
  1794 ;; This function uses a non-reentrant model
  1795 ;;
  1796                           
  1797                           
  1798                           ;psect for function _vw_wait_tx
  1799  067B                     _vw_wait_tx:	
  1800  067B                     l1799:	
  1801                           ;virtualwire.c: 159: while (vw_tx_enabled);
  1802                           
  1803                           ;incstack = 0
  1804                           ; Regs used in _vw_wait_tx: [wreg+status,2+status,0]
  1805                           
  1806  067B  1283               	bcf	3,5	;RP0=0, select bank0
  1807  067C  1303               	bcf	3,6	;RP1=0, select bank0
  1808  067D  0861               	movf	_vw_tx_enabled,w
  1809  067E  1903               	btfsc	3,2
  1810  067F  0008               	return
  1811  0680  2E7B               	goto	l1799
  1812  0681                     __end_of_vw_wait_tx:	
  1813                           
  1814                           	psect	text7
  1815  0669                     __ptext7:	
  1816 ;; *************** function _vw_tx_start *****************
  1817 ;; Defined at:
  1818 ;;		line 168 in file "virtualwire.c"
  1819 ;; Parameters:    Size  Location     Type
  1820 ;;		None
  1821 ;; Auto vars:     Size  Location     Type
  1822 ;;		None
  1823 ;; Return value:  Size  Location     Type
  1824 ;;                  1    wreg      void 
  1825 ;; Registers used:
  1826 ;;		status,2
  1827 ;; Tracked objects:
  1828 ;;		On entry : 0/0
  1829 ;;		On exit  : 0/0
  1830 ;;		Unchanged: 0/0
  1831 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1832 ;;      Params:         0       0       0       0       0
  1833 ;;      Locals:         0       0       0       0       0
  1834 ;;      Temps:          0       0       0       0       0
  1835 ;;      Totals:         0       0       0       0       0
  1836 ;;Total ram usage:        0 bytes
  1837 ;; Hardware stack levels used:    1
  1838 ;; Hardware stack levels required when called:    5
  1839 ;; This function calls:
  1840 ;;		Nothing
  1841 ;; This function is called by:
  1842 ;;		_vw_send
  1843 ;; This function uses a non-reentrant model
  1844 ;;
  1845                           
  1846                           
  1847                           ;psect for function _vw_tx_start
  1848  0669                     _vw_tx_start:	
  1849                           
  1850                           ;virtualwire.c: 170: vw_tx_index = 0;
  1851                           
  1852                           ;incstack = 0
  1853                           ; Regs used in _vw_tx_start: [status,2]
  1854  0669  1283               	bcf	3,5	;RP0=0, select bank0
  1855  066A  1303               	bcf	3,6	;RP1=0, select bank0
  1856  066B  01E3               	clrf	_vw_tx_index
  1857                           
  1858                           ;virtualwire.c: 171: vw_tx_bit = 0;
  1859  066C  01E0               	clrf	_vw_tx_bit
  1860                           
  1861                           ;virtualwire.c: 172: vw_tx_sample = 0;
  1862  066D  01E5               	clrf	_vw_tx_sample
  1863                           
  1864                           ;virtualwire.c: 174: vw_tx_header = 1;
  1865  066E  01E2               	clrf	_vw_tx_header
  1866  066F  0AE2               	incf	_vw_tx_header,f
  1867                           
  1868                           ;virtualwire.c: 177: vw_tx_enabled = 1;
  1869  0670  01E1               	clrf	_vw_tx_enabled
  1870  0671  0AE1               	incf	_vw_tx_enabled,f
  1871  0672  0008               	return
  1872  0673                     __end_of_vw_tx_start:	
  1873                           
  1874                           	psect	text8
  1875  04C8                     __ptext8:	
  1876 ;; *************** function __crc_ccitt_update *****************
  1877 ;; Defined at:
  1878 ;;		line 51 in file "../_libs/crc16.h"
  1879 ;; Parameters:    Size  Location     Type
  1880 ;;  crc             2    4[BANK0 ] unsigned int 
  1881 ;;  data            1    6[BANK0 ] unsigned char 
  1882 ;; Auto vars:     Size  Location     Type
  1883 ;;		None
  1884 ;; Return value:  Size  Location     Type
  1885 ;;                  2    4[BANK0 ] unsigned int 
  1886 ;; Registers used:
  1887 ;;		wreg, status,2, status,0, btemp+1
  1888 ;; Tracked objects:
  1889 ;;		On entry : 0/0
  1890 ;;		On exit  : 0/0
  1891 ;;		Unchanged: 0/0
  1892 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1893 ;;      Params:         0       3       0       0       0
  1894 ;;      Locals:         0       0       0       0       0
  1895 ;;      Temps:          0      13       0       0       0
  1896 ;;      Totals:         0      16       0       0       0
  1897 ;;Total ram usage:       16 bytes
  1898 ;; Hardware stack levels used:    1
  1899 ;; Hardware stack levels required when called:    5
  1900 ;; This function calls:
  1901 ;;		Nothing
  1902 ;; This function is called by:
  1903 ;;		_vw_send
  1904 ;;		_vw_crc
  1905 ;; This function uses a non-reentrant model
  1906 ;;
  1907                           
  1908                           
  1909                           ;psect for function __crc_ccitt_update
  1910  04C8                     __crc_ccitt_update:	
  1911                           
  1912                           ;crc16.h: 53: data ^= ((crc)&0xff);
  1913                           
  1914                           ;incstack = 0
  1915                           ; Regs used in __crc_ccitt_update: [wreg+status,2+status,0+btemp+1]
  1916  04C8  1283               	bcf	3,5	;RP0=0, select bank0
  1917  04C9  1303               	bcf	3,6	;RP1=0, select bank0
  1918  04CA  0824               	movf	__crc_ccitt_update@crc,w
  1919  04CB  00A7               	movwf	??__crc_ccitt_update
  1920  04CC  0827               	movf	??__crc_ccitt_update,w
  1921  04CD  06A6               	xorwf	__crc_ccitt_update@data,f
  1922                           
  1923                           ;crc16.h: 54: data ^= data << 4;
  1924  04CE  0826               	movf	__crc_ccitt_update@data,w
  1925  04CF  00A7               	movwf	??__crc_ccitt_update
  1926  04D0  3003               	movlw	3
  1927  04D1                     u2115:	
  1928  04D1  1003               	clrc
  1929  04D2  0DA7               	rlf	??__crc_ccitt_update,f
  1930  04D3  3EFF               	addlw	-1
  1931  04D4  1D03               	skipz
  1932  04D5  2CD1               	goto	u2115
  1933  04D6  1003               	clrc
  1934  04D7  0D27               	rlf	??__crc_ccitt_update,w
  1935  04D8  00A8               	movwf	??__crc_ccitt_update+1
  1936  04D9  0828               	movf	??__crc_ccitt_update+1,w
  1937  04DA  06A6               	xorwf	__crc_ccitt_update@data,f
  1938                           
  1939                           ;crc16.h: 56: return ((((uint16_t) data << 8) | ((crc)>>8)) ^ (uint8_t) (data >> 4)
  1940                           ;crc16.h: 57: ^ ((uint16_t) data << 3));
  1941  04DB  0826               	movf	__crc_ccitt_update@data,w
  1942  04DC  00A7               	movwf	??__crc_ccitt_update
  1943  04DD  01A8               	clrf	??__crc_ccitt_update+1
  1944  04DE  1003               	clrc
  1945  04DF  0DA7               	rlf	??__crc_ccitt_update,f
  1946  04E0  0DA8               	rlf	??__crc_ccitt_update+1,f
  1947  04E1  1003               	clrc
  1948  04E2  0DA7               	rlf	??__crc_ccitt_update,f
  1949  04E3  0DA8               	rlf	??__crc_ccitt_update+1,f
  1950  04E4  1003               	clrc
  1951  04E5  0DA7               	rlf	??__crc_ccitt_update,f
  1952  04E6  0DA8               	rlf	??__crc_ccitt_update+1,f
  1953  04E7  0826               	movf	__crc_ccitt_update@data,w
  1954  04E8  00A9               	movwf	??__crc_ccitt_update+2
  1955  04E9  3004               	movlw	4
  1956  04EA                     u2125:	
  1957  04EA  1003               	clrc
  1958  04EB  0CA9               	rrf	??__crc_ccitt_update+2,f
  1959  04EC  3EFF               	addlw	-1
  1960  04ED  1D03               	skipz
  1961  04EE  2CEA               	goto	u2125
  1962  04EF  0829               	movf	??__crc_ccitt_update+2,w
  1963  04F0  00AA               	movwf	??__crc_ccitt_update+3
  1964  04F1  01AB               	clrf	??__crc_ccitt_update+4
  1965  04F2  0825               	movf	__crc_ccitt_update@crc+1,w
  1966  04F3  00AD               	movwf	??__crc_ccitt_update+6
  1967  04F4  0824               	movf	__crc_ccitt_update@crc,w
  1968  04F5  00AC               	movwf	??__crc_ccitt_update+5
  1969  04F6  082D               	movf	??__crc_ccitt_update+6,w
  1970  04F7  00AC               	movwf	??__crc_ccitt_update+5
  1971  04F8  01AD               	clrf	??__crc_ccitt_update+6
  1972  04F9  0826               	movf	__crc_ccitt_update@data,w
  1973  04FA  00AE               	movwf	??__crc_ccitt_update+7
  1974  04FB  01AF               	clrf	??__crc_ccitt_update+8
  1975  04FC  082E               	movf	??__crc_ccitt_update+7,w
  1976  04FD  00AF               	movwf	??__crc_ccitt_update+8
  1977  04FE  01AE               	clrf	??__crc_ccitt_update+7
  1978  04FF  082C               	movf	??__crc_ccitt_update+5,w
  1979  0500  042E               	iorwf	??__crc_ccitt_update+7,w
  1980  0501  00B0               	movwf	??__crc_ccitt_update+9
  1981  0502  082D               	movf	??__crc_ccitt_update+6,w
  1982  0503  042F               	iorwf	??__crc_ccitt_update+8,w
  1983  0504  00B1               	movwf	??__crc_ccitt_update+10
  1984  0505  082A               	movf	??__crc_ccitt_update+3,w
  1985  0506  0630               	xorwf	??__crc_ccitt_update+9,w
  1986  0507  00B2               	movwf	??__crc_ccitt_update+11
  1987  0508  082B               	movf	??__crc_ccitt_update+4,w
  1988  0509  0631               	xorwf	??__crc_ccitt_update+10,w
  1989  050A  00B3               	movwf	??__crc_ccitt_update+12
  1990  050B  0827               	movf	??__crc_ccitt_update,w
  1991  050C  0632               	xorwf	??__crc_ccitt_update+11,w
  1992  050D  00A4               	movwf	?__crc_ccitt_update
  1993  050E  0828               	movf	??__crc_ccitt_update+1,w
  1994  050F  0633               	xorwf	??__crc_ccitt_update+12,w
  1995  0510  00A5               	movwf	?__crc_ccitt_update+1
  1996  0511  0008               	return
  1997  0512                     __end_of__crc_ccitt_update:	
  1998                           
  1999                           	psect	text9
  2000  015B                     __ptext9:	
  2001 ;; *************** function _sprintf *****************
  2002 ;; Defined at:
  2003 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  2004 ;; Parameters:    Size  Location     Type
  2005 ;;  sp              1    wreg     PTR unsigned char 
  2006 ;;		 -> main@buffer(5), 
  2007 ;;  f               1   18[BANK0 ] PTR const unsigned char 
  2008 ;;		 -> STR_1(3), 
  2009 ;; Auto vars:     Size  Location     Type
  2010 ;;  sp              1   29[BANK0 ] PTR unsigned char 
  2011 ;;		 -> main@buffer(5), 
  2012 ;;  tmpval          4    0        struct .
  2013 ;;  val             2   27[BANK0 ] unsigned int 
  2014 ;;  cp              2    0        PTR const unsigned char 
  2015 ;;  len             2    0        unsigned int 
  2016 ;;  c               1   30[BANK0 ] char 
  2017 ;;  prec            1   26[BANK0 ] char 
  2018 ;;  flag            1   25[BANK0 ] unsigned char 
  2019 ;;  ap              1   24[BANK0 ] PTR void [1]
  2020 ;;		 -> ?_sprintf(2), 
  2021 ;; Return value:  Size  Location     Type
  2022 ;;                  2   18[BANK0 ] int 
  2023 ;; Registers used:
  2024 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2025 ;; Tracked objects:
  2026 ;;		On entry : 0/0
  2027 ;;		On exit  : 0/0
  2028 ;;		Unchanged: 0/0
  2029 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2030 ;;      Params:         0       3       0       0       0
  2031 ;;      Locals:         0       7       0       0       0
  2032 ;;      Temps:          0       3       0       0       0
  2033 ;;      Totals:         0      13       0       0       0
  2034 ;;Total ram usage:       13 bytes
  2035 ;; Hardware stack levels used:    1
  2036 ;; Hardware stack levels required when called:    6
  2037 ;; This function calls:
  2038 ;;		___lwdiv
  2039 ;;		___lwmod
  2040 ;; This function is called by:
  2041 ;;		_main
  2042 ;; This function uses a non-reentrant model
  2043 ;;
  2044                           
  2045                           
  2046                           ;psect for function _sprintf
  2047  015B                     _sprintf:	
  2048                           
  2049                           ;incstack = 0
  2050                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2051                           ;sprintf@sp stored from wreg
  2052  015B  1283               	bcf	3,5	;RP0=0, select bank0
  2053  015C  1303               	bcf	3,6	;RP1=0, select bank0
  2054  015D  00BD               	movwf	sprintf@sp
  2055                           
  2056                           ;doprnt.c: 494: va_list ap;
  2057                           ;doprnt.c: 499: signed char c;
  2058                           ;doprnt.c: 506: signed char prec;
  2059                           ;doprnt.c: 508: unsigned char flag;
  2060                           ;doprnt.c: 523: union {
  2061                           ;doprnt.c: 524: unsigned long vd;
  2062                           ;doprnt.c: 525: double integ;
  2063                           ;doprnt.c: 526: } tmpval;
  2064                           ;doprnt.c: 528: unsigned int val;
  2065                           ;doprnt.c: 529: unsigned len;
  2066                           ;doprnt.c: 530: const char * cp;
  2067                           ;doprnt.c: 533: *ap = __va_start();
  2068  015E  3033               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
  2069  015F  00B5               	movwf	??_sprintf
  2070  0160  0835               	movf	??_sprintf,w
  2071  0161  00B8               	movwf	sprintf@ap
  2072  0162                     l1927:	
  2073                           ;doprnt.c: 536: while(c = *f++) {
  2074                           
  2075  0162  3001               	movlw	1
  2076  0163  07B2               	addwf	sprintf@f,f
  2077  0164  30FF               	movlw	-1
  2078  0165  0732               	addwf	sprintf@f,w
  2079  0166  0084               	movwf	4
  2080  0167  120A  118A  2595  120A  118A  	fcall	stringdir
  2081  016C  00B5               	movwf	??_sprintf
  2082  016D  0835               	movf	??_sprintf,w
  2083  016E  00BE               	movwf	sprintf@c
  2084  016F  083E               	movf	sprintf@c,w
  2085  0170  1903               	btfsc	3,2
  2086  0171  2A2C               	goto	l1929
  2087                           
  2088                           ;doprnt.c: 538: if(c != '%')
  2089  0172  3025               	movlw	37
  2090  0173  063E               	xorwf	sprintf@c,w
  2091  0174  1903               	btfsc	3,2
  2092  0175  2982               	goto	l1883
  2093                           
  2094                           ;doprnt.c: 540: {
  2095                           ;doprnt.c: 541: ((*sp++ = (c)));
  2096  0176  083E               	movf	sprintf@c,w
  2097  0177  00B5               	movwf	??_sprintf
  2098  0178  083D               	movf	sprintf@sp,w
  2099  0179  0084               	movwf	4
  2100  017A  0835               	movf	??_sprintf,w
  2101  017B  1383               	bcf	3,7	;select IRP bank0
  2102  017C  0080               	movwf	0
  2103  017D  3001               	movlw	1
  2104  017E  00B5               	movwf	??_sprintf
  2105  017F  0835               	movf	??_sprintf,w
  2106  0180  07BD               	addwf	sprintf@sp,f
  2107                           
  2108                           ;doprnt.c: 542: continue;
  2109  0181  2962               	goto	l1927
  2110  0182                     l1883:	
  2111                           
  2112                           ;doprnt.c: 543: }
  2113                           ;doprnt.c: 548: flag = 0;
  2114  0182  01B9               	clrf	sprintf@flag
  2115                           
  2116                           ;doprnt.c: 822: }
  2117                           
  2118                           ;doprnt.c: 813: continue;
  2119                           
  2120                           ;doprnt.c: 802: default:
  2121                           
  2122                           ;doprnt.c: 698: case 'i':
  2123                           ;doprnt.c: 699: break;
  2124                           
  2125                           ;doprnt.c: 697: case 'd':
  2126                           
  2127                           ;doprnt.c: 638: goto alldone;
  2128                           
  2129                           ;doprnt.c: 637: case 0:
  2130                           
  2131                           ;doprnt.c: 635: switch(c = *f++) {
  2132  0183  3001               	movlw	1
  2133  0184  07B2               	addwf	sprintf@f,f
  2134  0185  30FF               	movlw	-1
  2135  0186  0732               	addwf	sprintf@f,w
  2136  0187  0084               	movwf	4
  2137  0188  120A  118A  2595  120A  118A  	fcall	stringdir
  2138  018D  00BE               	movwf	sprintf@c
  2139                           
  2140                           ; Switch size 1, requested type "space"
  2141                           ; Number of cases is 3, Range of values is 0 to 105
  2142                           ; switch strategies available:
  2143                           ; Name         Instructions Cycles
  2144                           ; simple_byte           10     6 (average)
  2145                           ; jumptable            260     6 (fixed)
  2146                           ;	Chosen strategy is simple_byte
  2147  018E  3A00               	xorlw	0	; case 0
  2148  018F  1903               	skipnz
  2149  0190  2A2C               	goto	l1929
  2150  0191  3A64               	xorlw	100	; case 100
  2151  0192  1903               	skipnz
  2152  0193  2998               	goto	l1889
  2153  0194  3A0D               	xorlw	13	; case 105
  2154  0195  1903               	skipnz
  2155  0196  2998               	goto	l1889
  2156  0197  2962               	goto	l1927
  2157  0198                     l1889:	
  2158                           
  2159                           ;doprnt.c: 1253: {
  2160                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  2161  0198  0838               	movf	sprintf@ap,w
  2162  0199  0084               	movwf	4
  2163  019A  1383               	bcf	3,7	;select IRP bank0
  2164  019B  0800               	movf	0,w
  2165  019C  00BB               	movwf	sprintf@val
  2166  019D  0A84               	incf	4,f
  2167  019E  0800               	movf	0,w
  2168  019F  00BC               	movwf	sprintf@val+1
  2169  01A0  3002               	movlw	2
  2170  01A1  00B5               	movwf	??_sprintf
  2171  01A2  0835               	movf	??_sprintf,w
  2172  01A3  07B8               	addwf	sprintf@ap,f
  2173                           
  2174                           ;doprnt.c: 1261: if((int)val < 0) {
  2175  01A4  1FBC               	btfss	sprintf@val+1,7
  2176  01A5  29AF               	goto	l1899
  2177                           
  2178                           ;doprnt.c: 1262: flag |= 0x03;
  2179  01A6  3003               	movlw	3
  2180  01A7  00B5               	movwf	??_sprintf
  2181  01A8  0835               	movf	??_sprintf,w
  2182  01A9  04B9               	iorwf	sprintf@flag,f
  2183                           
  2184                           ;doprnt.c: 1263: val = -val;
  2185  01AA  09BB               	comf	sprintf@val,f
  2186  01AB  09BC               	comf	sprintf@val+1,f
  2187  01AC  0ABB               	incf	sprintf@val,f
  2188  01AD  1903               	skipnz
  2189  01AE  0ABC               	incf	sprintf@val+1,f
  2190  01AF                     l1899:	
  2191                           
  2192                           ;doprnt.c: 1264: }
  2193                           ;doprnt.c: 1266: }
  2194                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2195  01AF  01BE               	clrf	sprintf@c
  2196  01B0  0ABE               	incf	sprintf@c,f
  2197  01B1  3005               	movlw	5
  2198  01B2  063E               	xorwf	sprintf@c,w
  2199  01B3  1903               	btfsc	3,2
  2200  01B4  29D6               	goto	l1911
  2201  01B5                     l1905:	
  2202                           
  2203                           ;doprnt.c: 1306: if(val < dpowers[c])
  2204  01B5  083E               	movf	sprintf@c,w
  2205  01B6  00B5               	movwf	??_sprintf
  2206  01B7  0735               	addwf	??_sprintf,w
  2207  01B8  3E23               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  2208  01B9  0084               	movwf	4
  2209  01BA  120A  118A  2595  120A  118A  	fcall	stringdir
  2210  01BF  00B6               	movwf	??_sprintf+1
  2211  01C0  120A  118A  2595  120A  118A  	fcall	stringdir
  2212  01C5  00B7               	movwf	??_sprintf+2
  2213  01C6  0837               	movf	??_sprintf+2,w
  2214  01C7  023C               	subwf	sprintf@val+1,w
  2215  01C8  1D03               	skipz
  2216  01C9  29CC               	goto	u2385
  2217  01CA  0836               	movf	??_sprintf+1,w
  2218  01CB  023B               	subwf	sprintf@val,w
  2219  01CC                     u2385:	
  2220  01CC  1C03               	btfss	3,0
  2221  01CD  29D6               	goto	l1911
  2222                           
  2223                           ;doprnt.c: 1307: break;
  2224  01CE  3001               	movlw	1
  2225  01CF  00B5               	movwf	??_sprintf
  2226  01D0  0835               	movf	??_sprintf,w
  2227  01D1  07BE               	addwf	sprintf@c,f
  2228  01D2  3005               	movlw	5
  2229  01D3  063E               	xorwf	sprintf@c,w
  2230  01D4  1D03               	btfss	3,2
  2231  01D5  29B5               	goto	l1905
  2232  01D6                     l1911:	
  2233                           
  2234                           ;doprnt.c: 1422: {
  2235                           ;doprnt.c: 1438: if(flag & 0x03)
  2236  01D6  0839               	movf	sprintf@flag,w
  2237  01D7  3903               	andlw	3
  2238  01D8  1903               	btfsc	3,2
  2239  01D9  29E5               	goto	l1917
  2240                           
  2241                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  2242  01DA  302D               	movlw	45
  2243  01DB  00B5               	movwf	??_sprintf
  2244  01DC  083D               	movf	sprintf@sp,w
  2245  01DD  0084               	movwf	4
  2246  01DE  0835               	movf	??_sprintf,w
  2247  01DF  1383               	bcf	3,7	;select IRP bank0
  2248  01E0  0080               	movwf	0
  2249  01E1  3001               	movlw	1
  2250  01E2  00B5               	movwf	??_sprintf
  2251  01E3  0835               	movf	??_sprintf,w
  2252  01E4  07BD               	addwf	sprintf@sp,f
  2253  01E5                     l1917:	
  2254                           
  2255                           ;doprnt.c: 1469: }
  2256                           ;doprnt.c: 1472: prec = c;
  2257  01E5  083E               	movf	sprintf@c,w
  2258  01E6  00B5               	movwf	??_sprintf
  2259  01E7  0835               	movf	??_sprintf,w
  2260  01E8  00BA               	movwf	sprintf@prec
  2261  01E9                     l1925:	
  2262                           ;doprnt.c: 1474: while(prec--) {
  2263                           
  2264  01E9  30FF               	movlw	255
  2265  01EA  00B5               	movwf	??_sprintf
  2266  01EB  0835               	movf	??_sprintf,w
  2267  01EC  07BA               	addwf	sprintf@prec,f
  2268  01ED  0A3A               	incf	sprintf@prec,w
  2269  01EE  1903               	btfsc	3,2
  2270  01EF  2962               	goto	l1927
  2271                           
  2272                           ;doprnt.c: 1478: {
  2273                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2274  01F0  300A               	movlw	10
  2275  01F1  00AC               	movwf	___lwmod@divisor
  2276  01F2  3000               	movlw	0
  2277  01F3  00AD               	movwf	___lwmod@divisor+1
  2278  01F4  083A               	movf	sprintf@prec,w
  2279  01F5  00B5               	movwf	??_sprintf
  2280  01F6  0735               	addwf	??_sprintf,w
  2281  01F7  3E23               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  2282  01F8  0084               	movwf	4
  2283  01F9  120A  118A  2595  120A  118A  	fcall	stringdir
  2284  01FE  00A4               	movwf	___lwdiv@divisor
  2285  01FF  120A  118A  2595  120A  118A  	fcall	stringdir
  2286  0204  00A5               	movwf	___lwdiv@divisor+1
  2287  0205  083C               	movf	sprintf@val+1,w
  2288  0206  00A7               	movwf	___lwdiv@dividend+1
  2289  0207  083B               	movf	sprintf@val,w
  2290  0208  00A6               	movwf	___lwdiv@dividend
  2291  0209  120A  118A  2557  120A  118A  	fcall	___lwdiv
  2292  020E  1283               	bcf	3,5	;RP0=0, select bank0
  2293  020F  1303               	bcf	3,6	;RP1=0, select bank0
  2294  0210  0825               	movf	?___lwdiv+1,w
  2295  0211  00AF               	movwf	___lwmod@dividend+1
  2296  0212  0824               	movf	?___lwdiv,w
  2297  0213  00AE               	movwf	___lwmod@dividend
  2298  0214  120A  118A  25D2  120A  118A  	fcall	___lwmod
  2299  0219  1283               	bcf	3,5	;RP0=0, select bank0
  2300  021A  1303               	bcf	3,6	;RP1=0, select bank0
  2301  021B  082C               	movf	?___lwmod,w
  2302  021C  3E30               	addlw	48
  2303  021D  00B6               	movwf	??_sprintf+1
  2304  021E  0836               	movf	??_sprintf+1,w
  2305  021F  00BE               	movwf	sprintf@c
  2306                           
  2307                           ;doprnt.c: 1523: }
  2308                           ;doprnt.c: 1524: ((*sp++ = (c)));
  2309  0220  083E               	movf	sprintf@c,w
  2310  0221  00B5               	movwf	??_sprintf
  2311  0222  083D               	movf	sprintf@sp,w
  2312  0223  0084               	movwf	4
  2313  0224  0835               	movf	??_sprintf,w
  2314  0225  1383               	bcf	3,7	;select IRP bank0
  2315  0226  0080               	movwf	0
  2316  0227  3001               	movlw	1
  2317  0228  00B5               	movwf	??_sprintf
  2318  0229  0835               	movf	??_sprintf,w
  2319  022A  07BD               	addwf	sprintf@sp,f
  2320  022B  29E9               	goto	l1925
  2321  022C                     l1929:	
  2322                           ;doprnt.c: 1525: }
  2323                           ;doprnt.c: 1533: }
  2324                           ;doprnt.c: 1535: alldone:
  2325                           
  2326                           
  2327                           ;doprnt.c: 1538: *sp = 0;
  2328  022C  083D               	movf	sprintf@sp,w
  2329  022D  0084               	movwf	4
  2330  022E  1383               	bcf	3,7	;select IRP bank0
  2331  022F  0180               	clrf	0
  2332  0230  0008               	return
  2333  0231                     __end_of_sprintf:	
  2334                           ;doprnt.c: 1540: return 0;
  2335                           ;	Return value of _sprintf is never used
  2336                           
  2337                           
  2338                           	psect	text10
  2339  05D2                     __ptext10:	
  2340 ;; *************** function ___lwmod *****************
  2341 ;; Defined at:
  2342 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
  2343 ;; Parameters:    Size  Location     Type
  2344 ;;  divisor         2   12[BANK0 ] unsigned int 
  2345 ;;  dividend        2   14[BANK0 ] unsigned int 
  2346 ;; Auto vars:     Size  Location     Type
  2347 ;;  counter         1   17[BANK0 ] unsigned char 
  2348 ;; Return value:  Size  Location     Type
  2349 ;;                  2   12[BANK0 ] unsigned int 
  2350 ;; Registers used:
  2351 ;;		wreg, status,2, status,0
  2352 ;; Tracked objects:
  2353 ;;		On entry : 0/0
  2354 ;;		On exit  : 0/0
  2355 ;;		Unchanged: 0/0
  2356 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2357 ;;      Params:         0       4       0       0       0
  2358 ;;      Locals:         0       1       0       0       0
  2359 ;;      Temps:          0       1       0       0       0
  2360 ;;      Totals:         0       6       0       0       0
  2361 ;;Total ram usage:        6 bytes
  2362 ;; Hardware stack levels used:    1
  2363 ;; Hardware stack levels required when called:    5
  2364 ;; This function calls:
  2365 ;;		Nothing
  2366 ;; This function is called by:
  2367 ;;		_sprintf
  2368 ;; This function uses a non-reentrant model
  2369 ;;
  2370                           
  2371                           
  2372                           ;psect for function ___lwmod
  2373  05D2                     ___lwmod:	
  2374                           
  2375                           ;incstack = 0
  2376                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  2377  05D2  1283               	bcf	3,5	;RP0=0, select bank0
  2378  05D3  1303               	bcf	3,6	;RP1=0, select bank0
  2379  05D4  082C               	movf	___lwmod@divisor,w
  2380  05D5  042D               	iorwf	___lwmod@divisor+1,w
  2381  05D6  1903               	btfsc	3,2
  2382  05D7  2E01               	goto	l1851
  2383  05D8  01B1               	clrf	___lwmod@counter
  2384  05D9  0AB1               	incf	___lwmod@counter,f
  2385  05DA                     l1841:	
  2386  05DA  1BAD               	btfsc	___lwmod@divisor+1,7
  2387  05DB  2DE8               	goto	l1843
  2388  05DC  3001               	movlw	1
  2389  05DD                     u2265:	
  2390  05DD  1003               	clrc
  2391  05DE  0DAC               	rlf	___lwmod@divisor,f
  2392  05DF  0DAD               	rlf	___lwmod@divisor+1,f
  2393  05E0  3EFF               	addlw	-1
  2394  05E1  1D03               	skipz
  2395  05E2  2DDD               	goto	u2265
  2396  05E3  3001               	movlw	1
  2397  05E4  00B0               	movwf	??___lwmod
  2398  05E5  0830               	movf	??___lwmod,w
  2399  05E6  07B1               	addwf	___lwmod@counter,f
  2400  05E7  2DDA               	goto	l1841
  2401  05E8                     l1843:	
  2402  05E8  082D               	movf	___lwmod@divisor+1,w
  2403  05E9  022F               	subwf	___lwmod@dividend+1,w
  2404  05EA  1D03               	skipz
  2405  05EB  2DEE               	goto	u2285
  2406  05EC  082C               	movf	___lwmod@divisor,w
  2407  05ED  022E               	subwf	___lwmod@dividend,w
  2408  05EE                     u2285:	
  2409  05EE  1C03               	skipc
  2410  05EF  2DF6               	goto	l1847
  2411  05F0  082C               	movf	___lwmod@divisor,w
  2412  05F1  02AE               	subwf	___lwmod@dividend,f
  2413  05F2  082D               	movf	___lwmod@divisor+1,w
  2414  05F3  1C03               	skipc
  2415  05F4  03AF               	decf	___lwmod@dividend+1,f
  2416  05F5  02AF               	subwf	___lwmod@dividend+1,f
  2417  05F6                     l1847:	
  2418  05F6  3001               	movlw	1
  2419  05F7                     u2295:	
  2420  05F7  1003               	clrc
  2421  05F8  0CAD               	rrf	___lwmod@divisor+1,f
  2422  05F9  0CAC               	rrf	___lwmod@divisor,f
  2423  05FA  3EFF               	addlw	-1
  2424  05FB  1D03               	skipz
  2425  05FC  2DF7               	goto	u2295
  2426  05FD  3001               	movlw	1
  2427  05FE  02B1               	subwf	___lwmod@counter,f
  2428  05FF  1D03               	btfss	3,2
  2429  0600  2DE8               	goto	l1843
  2430  0601                     l1851:	
  2431  0601  082F               	movf	___lwmod@dividend+1,w
  2432  0602  00AD               	movwf	?___lwmod+1
  2433  0603  082E               	movf	___lwmod@dividend,w
  2434  0604  00AC               	movwf	?___lwmod
  2435  0605  0008               	return
  2436  0606                     __end_of___lwmod:	
  2437                           
  2438                           	psect	text11
  2439  0557                     __ptext11:	
  2440 ;; *************** function ___lwdiv *****************
  2441 ;; Defined at:
  2442 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
  2443 ;; Parameters:    Size  Location     Type
  2444 ;;  divisor         2    4[BANK0 ] unsigned int 
  2445 ;;  dividend        2    6[BANK0 ] unsigned int 
  2446 ;; Auto vars:     Size  Location     Type
  2447 ;;  quotient        2   10[BANK0 ] unsigned int 
  2448 ;;  counter         1    9[BANK0 ] unsigned char 
  2449 ;; Return value:  Size  Location     Type
  2450 ;;                  2    4[BANK0 ] unsigned int 
  2451 ;; Registers used:
  2452 ;;		wreg, status,2, status,0
  2453 ;; Tracked objects:
  2454 ;;		On entry : 0/0
  2455 ;;		On exit  : 0/0
  2456 ;;		Unchanged: 0/0
  2457 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2458 ;;      Params:         0       4       0       0       0
  2459 ;;      Locals:         0       3       0       0       0
  2460 ;;      Temps:          0       1       0       0       0
  2461 ;;      Totals:         0       8       0       0       0
  2462 ;;Total ram usage:        8 bytes
  2463 ;; Hardware stack levels used:    1
  2464 ;; Hardware stack levels required when called:    5
  2465 ;; This function calls:
  2466 ;;		Nothing
  2467 ;; This function is called by:
  2468 ;;		_sprintf
  2469 ;; This function uses a non-reentrant model
  2470 ;;
  2471                           
  2472                           
  2473                           ;psect for function ___lwdiv
  2474  0557                     ___lwdiv:	
  2475                           
  2476                           ;incstack = 0
  2477                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  2478  0557  1283               	bcf	3,5	;RP0=0, select bank0
  2479  0558  1303               	bcf	3,6	;RP1=0, select bank0
  2480  0559  01AA               	clrf	___lwdiv@quotient
  2481  055A  01AB               	clrf	___lwdiv@quotient+1
  2482  055B  0824               	movf	___lwdiv@divisor,w
  2483  055C  0425               	iorwf	___lwdiv@divisor+1,w
  2484  055D  1903               	btfsc	3,2
  2485  055E  2D90               	goto	l1829
  2486  055F  01A9               	clrf	___lwdiv@counter
  2487  0560  0AA9               	incf	___lwdiv@counter,f
  2488  0561                     l1817:	
  2489  0561  1BA5               	btfsc	___lwdiv@divisor+1,7
  2490  0562  2D6F               	goto	l1819
  2491  0563  3001               	movlw	1
  2492  0564                     u2195:	
  2493  0564  1003               	clrc
  2494  0565  0DA4               	rlf	___lwdiv@divisor,f
  2495  0566  0DA5               	rlf	___lwdiv@divisor+1,f
  2496  0567  3EFF               	addlw	-1
  2497  0568  1D03               	skipz
  2498  0569  2D64               	goto	u2195
  2499  056A  3001               	movlw	1
  2500  056B  00A8               	movwf	??___lwdiv
  2501  056C  0828               	movf	??___lwdiv,w
  2502  056D  07A9               	addwf	___lwdiv@counter,f
  2503  056E  2D61               	goto	l1817
  2504  056F                     l1819:	
  2505  056F  3001               	movlw	1
  2506  0570                     u2215:	
  2507  0570  1003               	clrc
  2508  0571  0DAA               	rlf	___lwdiv@quotient,f
  2509  0572  0DAB               	rlf	___lwdiv@quotient+1,f
  2510  0573  3EFF               	addlw	-1
  2511  0574  1D03               	skipz
  2512  0575  2D70               	goto	u2215
  2513  0576  0825               	movf	___lwdiv@divisor+1,w
  2514  0577  0227               	subwf	___lwdiv@dividend+1,w
  2515  0578  1D03               	skipz
  2516  0579  2D7C               	goto	u2225
  2517  057A  0824               	movf	___lwdiv@divisor,w
  2518  057B  0226               	subwf	___lwdiv@dividend,w
  2519  057C                     u2225:	
  2520  057C  1C03               	skipc
  2521  057D  2D85               	goto	l1825
  2522  057E  0824               	movf	___lwdiv@divisor,w
  2523  057F  02A6               	subwf	___lwdiv@dividend,f
  2524  0580  0825               	movf	___lwdiv@divisor+1,w
  2525  0581  1C03               	skipc
  2526  0582  03A7               	decf	___lwdiv@dividend+1,f
  2527  0583  02A7               	subwf	___lwdiv@dividend+1,f
  2528  0584  142A               	bsf	___lwdiv@quotient,0
  2529  0585                     l1825:	
  2530  0585  3001               	movlw	1
  2531  0586                     u2235:	
  2532  0586  1003               	clrc
  2533  0587  0CA5               	rrf	___lwdiv@divisor+1,f
  2534  0588  0CA4               	rrf	___lwdiv@divisor,f
  2535  0589  3EFF               	addlw	-1
  2536  058A  1D03               	skipz
  2537  058B  2D86               	goto	u2235
  2538  058C  3001               	movlw	1
  2539  058D  02A9               	subwf	___lwdiv@counter,f
  2540  058E  1D03               	btfss	3,2
  2541  058F  2D6F               	goto	l1819
  2542  0590                     l1829:	
  2543  0590  082B               	movf	___lwdiv@quotient+1,w
  2544  0591  00A5               	movwf	?___lwdiv+1
  2545  0592  082A               	movf	___lwdiv@quotient,w
  2546  0593  00A4               	movwf	?___lwdiv
  2547  0594  0008               	return
  2548  0595                     __end_of___lwdiv:	
  2549                           
  2550                           	psect	text12
  2551  065A                     __ptext12:	
  2552 ;; *************** function _delay *****************
  2553 ;; Defined at:
  2554 ;;		line 19 in file "main.c"
  2555 ;; Parameters:    Size  Location     Type
  2556 ;;  delay           2    4[BANK0 ] unsigned int 
  2557 ;; Auto vars:     Size  Location     Type
  2558 ;;		None
  2559 ;; Return value:  Size  Location     Type
  2560 ;;                  1    wreg      void 
  2561 ;; Registers used:
  2562 ;;		wreg, status,2, status,0
  2563 ;; Tracked objects:
  2564 ;;		On entry : 0/0
  2565 ;;		On exit  : 0/0
  2566 ;;		Unchanged: 0/0
  2567 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2568 ;;      Params:         0       2       0       0       0
  2569 ;;      Locals:         0       0       0       0       0
  2570 ;;      Temps:          0       0       0       0       0
  2571 ;;      Totals:         0       2       0       0       0
  2572 ;;Total ram usage:        2 bytes
  2573 ;; Hardware stack levels used:    1
  2574 ;; Hardware stack levels required when called:    5
  2575 ;; This function calls:
  2576 ;;		Nothing
  2577 ;; This function is called by:
  2578 ;;		_main
  2579 ;; This function uses a non-reentrant model
  2580 ;;
  2581                           
  2582                           
  2583                           ;psect for function _delay
  2584  065A                     _delay:	
  2585  065A                     l1857:	
  2586                           ;main.c: 20: while(delay--);
  2587                           
  2588                           ;incstack = 0
  2589                           ; Regs used in _delay: [wreg+status,2+status,0]
  2590                           
  2591  065A  3001               	movlw	1
  2592  065B  1283               	bcf	3,5	;RP0=0, select bank0
  2593  065C  1303               	bcf	3,6	;RP1=0, select bank0
  2594  065D  02A4               	subwf	delay@delay,f
  2595  065E  3000               	movlw	0
  2596  065F  1C03               	skipc
  2597  0660  03A5               	decf	delay@delay+1,f
  2598  0661  02A5               	subwf	delay@delay+1,f
  2599  0662  0A24               	incf	delay@delay,w
  2600  0663  1D03               	skipz
  2601  0664  2E5A               	goto	l1857
  2602  0665  0A25               	incf	delay@delay+1,w
  2603  0666  1903               	btfsc	3,2
  2604  0667  0008               	return
  2605  0668  2E5A               	goto	l1857
  2606  0669                     __end_of_delay:	
  2607                           
  2608                           	psect	text13
  2609  0646                     __ptext13:	
  2610 ;; *************** function _global_isr *****************
  2611 ;; Defined at:
  2612 ;;		line 14 in file "main.c"
  2613 ;; Parameters:    Size  Location     Type
  2614 ;;		None
  2615 ;; Auto vars:     Size  Location     Type
  2616 ;;		None
  2617 ;; Return value:  Size  Location     Type
  2618 ;;                  1    wreg      void 
  2619 ;; Registers used:
  2620 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2621 ;; Tracked objects:
  2622 ;;		On entry : 0/0
  2623 ;;		On exit  : 0/0
  2624 ;;		Unchanged: 0/0
  2625 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2626 ;;      Params:         0       0       0       0       0
  2627 ;;      Locals:         0       0       0       0       0
  2628 ;;      Temps:          0       4       0       0       0
  2629 ;;      Totals:         0       4       0       0       0
  2630 ;;Total ram usage:        4 bytes
  2631 ;; Hardware stack levels used:    1
  2632 ;; Hardware stack levels required when called:    4
  2633 ;; This function calls:
  2634 ;;		_vw_isr_tmr0
  2635 ;; This function is called by:
  2636 ;;		Interrupt level 1
  2637 ;; This function uses a non-reentrant model
  2638 ;;
  2639                           
  2640                           
  2641                           ;psect for function _global_isr
  2642  0646                     _global_isr:	
  2643                           
  2644                           ;main.c: 15: if(TMR0IF)
  2645  0646  1D0B               	btfss	11,2	;volatile
  2646  0647  2E4D               	goto	i1l14
  2647                           
  2648                           ;main.c: 16: vw_isr_tmr0();
  2649  0648  120A  118A  22D3  120A  118A  	fcall	_vw_isr_tmr0
  2650  064D                     i1l14:	
  2651  064D  1283               	bcf	3,5	;RP0=0, select bank0
  2652  064E  1303               	bcf	3,6	;RP1=0, select bank0
  2653  064F  0823               	movf	??_global_isr+3,w
  2654  0650  00FF               	movwf	127
  2655  0651  0822               	movf	??_global_isr+2,w
  2656  0652  008A               	movwf	10
  2657  0653  0821               	movf	??_global_isr+1,w
  2658  0654  0084               	movwf	4
  2659  0655  0E20               	swapf	??_global_isr^0,w
  2660  0656  0083               	movwf	3
  2661  0657  0EFE               	swapf	126,f
  2662  0658  0E7E               	swapf	126,w
  2663  0659  0009               	retfie
  2664  065A                     __end_of_global_isr:	
  2665                           
  2666                           	psect	intentry
  2667  0004                     __pintentry:	
  2668                           ;incstack = 0
  2669                           ; Regs used in _global_isr: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2670                           
  2671  0004                     interrupt_function:	
  2672  007E                     saved_w	set	btemp
  2673  0004  00FE               	movwf	btemp
  2674  0005  0E03               	swapf	3,w
  2675  0006  1283               	bcf	3,5	;RP0=0, select bank0
  2676  0007  1303               	bcf	3,6	;RP1=0, select bank0
  2677  0008  00A0               	movwf	??_global_isr
  2678  0009  0804               	movf	4,w
  2679  000A  00A1               	movwf	??_global_isr+1
  2680  000B  080A               	movf	10,w
  2681  000C  00A2               	movwf	??_global_isr+2
  2682  000D  087F               	movf	btemp+1,w
  2683  000E  00A3               	movwf	??_global_isr+3
  2684  000F  120A  118A  2E46   	ljmp	_global_isr
  2685                           
  2686                           	psect	text14
  2687  02D3                     __ptext14:	
  2688 ;; *************** function _vw_isr_tmr0 *****************
  2689 ;; Defined at:
  2690 ;;		line 388 in file "virtualwire.c"
  2691 ;; Parameters:    Size  Location     Type
  2692 ;;		None
  2693 ;; Auto vars:     Size  Location     Type
  2694 ;;		None
  2695 ;; Return value:  Size  Location     Type
  2696 ;;                  1    wreg      void 
  2697 ;; Registers used:
  2698 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2699 ;; Tracked objects:
  2700 ;;		On entry : 0/0
  2701 ;;		On exit  : 0/0
  2702 ;;		Unchanged: 0/0
  2703 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2704 ;;      Params:         0       0       0       0       0
  2705 ;;      Locals:         0       0       0       0       0
  2706 ;;      Temps:          2       0       0       0       0
  2707 ;;      Totals:         2       0       0       0       0
  2708 ;;Total ram usage:        2 bytes
  2709 ;; Hardware stack levels used:    1
  2710 ;; Hardware stack levels required when called:    3
  2711 ;; This function calls:
  2712 ;;		_vw_pll
  2713 ;;		_vw_tx_stop
  2714 ;; This function is called by:
  2715 ;;		_global_isr
  2716 ;; This function uses a non-reentrant model
  2717 ;;
  2718                           
  2719                           
  2720                           ;psect for function _vw_isr_tmr0
  2721  02D3                     _vw_isr_tmr0:	
  2722                           
  2723                           ;virtualwire.c: 390: TMR0 += -vw_tmr0_value + 4;
  2724                           
  2725                           ;incstack = 0
  2726 ;; using string table level
  2727                           ; Regs used in _vw_isr_tmr0: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2728  02D3  1283               	bcf	3,5	;RP0=0, select bank0
  2729  02D4  1303               	bcf	3,6	;RP1=0, select bank0
  2730  02D5  0366               	decf	_vw_tmr0_value,w
  2731  02D6  3AFF               	xorlw	255
  2732  02D7  3E04               	addlw	4
  2733  02D8  00FB               	movwf	??_vw_isr_tmr0
  2734  02D9  087B               	movf	??_vw_isr_tmr0,w
  2735  02DA  0781               	addwf	1,f	;volatile
  2736                           
  2737                           ;virtualwire.c: 391: TMR0IF = 0;
  2738  02DB  110B               	bcf	11,2	;volatile
  2739                           
  2740                           ;virtualwire.c: 393: if (vw_rx_enabled && !vw_tx_enabled)
  2741  02DC  085A               	movf	_vw_rx_enabled,w
  2742  02DD  1903               	btfsc	3,2
  2743  02DE  2AE6               	goto	i1l1471
  2744  02DF  0861               	movf	_vw_tx_enabled,w
  2745  02E0  1D03               	btfss	3,2
  2746  02E1  2AE6               	goto	i1l1471
  2747                           
  2748                           ;virtualwire.c: 394: vw_rx_sample = RB3;
  2749  02E2  3000               	movlw	0
  2750  02E3  1986               	btfsc	6,3	;volatile
  2751  02E4  3001               	movlw	1
  2752  02E5  00DF               	movwf	_vw_rx_sample
  2753  02E6                     i1l1471:	
  2754                           
  2755                           ;virtualwire.c: 398: if (vw_tx_enabled && vw_tx_sample++ == 0)
  2756  02E6  0861               	movf	_vw_tx_enabled,w
  2757  02E7  1903               	btfsc	3,2
  2758  02E8  2B59               	goto	i1l1507
  2759  02E9  3001               	movlw	1
  2760  02EA  00FB               	movwf	??_vw_isr_tmr0
  2761  02EB  087B               	movf	??_vw_isr_tmr0,w
  2762  02EC  07E5               	addwf	_vw_tx_sample,f
  2763  02ED  0365               	decf	_vw_tx_sample,w
  2764  02EE  1D03               	btfss	3,2
  2765  02EF  2B59               	goto	i1l1507
  2766                           
  2767                           ;virtualwire.c: 399: {
  2768                           ;virtualwire.c: 400: if (vw_tx_header)
  2769  02F0  0862               	movf	_vw_tx_header,w
  2770  02F1  1903               	btfsc	3,2
  2771  02F2  2B24               	goto	i1l1491
  2772                           
  2773                           ;virtualwire.c: 401: {
  2774                           ;virtualwire.c: 402: RB4 = (vw_tx_buf_header[vw_tx_index] & (1 << vw_tx_bit++)) ? 1 : 0;
  2775  02F3  0863               	movf	_vw_tx_index,w
  2776  02F4  3E2D               	addlw	low ((_vw_tx_buf_header-__stringbase)| (0+32768))
  2777  02F5  0084               	movwf	4
  2778  02F6  120A  118A  2595  120A  118A  	fcall	stringdir
  2779  02FB  00FB               	movwf	??_vw_isr_tmr0
  2780  02FC  3001               	movlw	1
  2781  02FD  00FC               	movwf	??_vw_isr_tmr0+1
  2782  02FE  0A60               	incf	_vw_tx_bit,w
  2783  02FF  2B02               	goto	u161_24
  2784  0300                     u161_25:	
  2785  0300  1003               	clrc
  2786  0301  0DFC               	rlf	??_vw_isr_tmr0+1,f
  2787  0302                     u161_24:	
  2788  0302  3EFF               	addlw	-1
  2789  0303  1D03               	skipz
  2790  0304  2B00               	goto	u161_25
  2791  0305  087C               	movf	??_vw_isr_tmr0+1,w
  2792  0306  057B               	andwf	??_vw_isr_tmr0,w
  2793  0307  1903               	btfsc	3,2
  2794  0308  2B0D               	goto	u162_20
  2795  0309  1283               	bcf	3,5	;RP0=0, select bank0
  2796  030A  1303               	bcf	3,6	;RP1=0, select bank0
  2797  030B  1606               	bsf	6,4	;volatile
  2798  030C  2B10               	goto	i1l1479
  2799  030D                     u162_20:	
  2800  030D  1283               	bcf	3,5	;RP0=0, select bank0
  2801  030E  1303               	bcf	3,6	;RP1=0, select bank0
  2802  030F  1206               	bcf	6,4	;volatile
  2803  0310                     i1l1479:	
  2804  0310  3001               	movlw	1
  2805  0311  00FB               	movwf	??_vw_isr_tmr0
  2806  0312  087B               	movf	??_vw_isr_tmr0,w
  2807  0313  07E0               	addwf	_vw_tx_bit,f
  2808                           
  2809                           ;virtualwire.c: 403: if (vw_tx_bit >= 6)
  2810  0314  3006               	movlw	6
  2811  0315  0260               	subwf	_vw_tx_bit,w
  2812  0316  1C03               	skipc
  2813  0317  2B1D               	goto	i1l1487
  2814                           
  2815                           ;virtualwire.c: 404: {
  2816                           ;virtualwire.c: 405: vw_tx_bit = 0;
  2817  0318  01E0               	clrf	_vw_tx_bit
  2818                           
  2819                           ;virtualwire.c: 406: vw_tx_index++;
  2820  0319  3001               	movlw	1
  2821  031A  00FB               	movwf	??_vw_isr_tmr0
  2822  031B  087B               	movf	??_vw_isr_tmr0,w
  2823  031C  07E3               	addwf	_vw_tx_index,f
  2824  031D                     i1l1487:	
  2825                           
  2826                           ;virtualwire.c: 407: }
  2827                           ;virtualwire.c: 409: if (vw_tx_index >= 8)
  2828  031D  3008               	movlw	8
  2829  031E  0263               	subwf	_vw_tx_index,w
  2830  031F  1C03               	skipc
  2831  0320  2B59               	goto	i1l1507
  2832                           
  2833                           ;virtualwire.c: 410: {
  2834                           ;virtualwire.c: 412: vw_tx_header = 0;
  2835  0321  01E2               	clrf	_vw_tx_header
  2836                           
  2837                           ;virtualwire.c: 413: vw_tx_index = 0;
  2838  0322  01E3               	clrf	_vw_tx_index
  2839                           
  2840                           ;virtualwire.c: 414: }
  2841                           ;virtualwire.c: 415: }
  2842  0323  2B59               	goto	i1l1507
  2843  0324                     i1l1491:	
  2844                           
  2845                           ;virtualwire.c: 416: else
  2846                           ;virtualwire.c: 417: {
  2847                           ;virtualwire.c: 422: if (vw_tx_index >= vw_tx_len)
  2848  0324  0864               	movf	_vw_tx_len,w
  2849  0325  0263               	subwf	_vw_tx_index,w
  2850  0326  1C03               	skipc
  2851  0327  2B34               	goto	i1l1497
  2852                           
  2853                           ;virtualwire.c: 423: {
  2854                           ;virtualwire.c: 424: vw_tx_stop();
  2855  0328  120A  118A  2681  120A  118A  	fcall	_vw_tx_stop
  2856                           
  2857                           ;virtualwire.c: 425: vw_rx_enabled = vw_rx_enabled_last;
  2858  032D  1283               	bcf	3,5	;RP0=0, select bank0
  2859  032E  1303               	bcf	3,6	;RP1=0, select bank0
  2860  032F  085B               	movf	_vw_rx_enabled_last,w
  2861  0330  00FB               	movwf	??_vw_isr_tmr0
  2862  0331  087B               	movf	??_vw_isr_tmr0,w
  2863  0332  00DA               	movwf	_vw_rx_enabled
  2864                           
  2865                           ;virtualwire.c: 426: }
  2866  0333  2B59               	goto	i1l1507
  2867  0334                     i1l1497:	
  2868                           
  2869                           ;virtualwire.c: 427: else
  2870                           ;virtualwire.c: 428: {
  2871                           ;virtualwire.c: 429: RB4 = (vw_tx_buf[vw_tx_index] & (1 << vw_tx_bit++)) ? 1 : 0;
  2872  0334  0863               	movf	_vw_tx_index,w
  2873  0335  3EA0               	addlw	(low (_vw_tx_buf| 0))& (0+255)
  2874  0336  0084               	movwf	4
  2875  0337  3001               	movlw	1
  2876  0338  00FB               	movwf	??_vw_isr_tmr0
  2877  0339  0A60               	incf	_vw_tx_bit,w
  2878  033A  2B3D               	goto	u167_24
  2879  033B                     u167_25:	
  2880  033B  1003               	clrc
  2881  033C  0DFB               	rlf	??_vw_isr_tmr0,f
  2882  033D                     u167_24:	
  2883  033D  3EFF               	addlw	-1
  2884  033E  1D03               	skipz
  2885  033F  2B3B               	goto	u167_25
  2886  0340  087B               	movf	??_vw_isr_tmr0,w
  2887  0341  1383               	bcf	3,7	;select IRP bank1
  2888  0342  0500               	andwf	0,w
  2889  0343  1903               	btfsc	3,2
  2890  0344  2B49               	goto	u168_20
  2891  0345  1283               	bcf	3,5	;RP0=0, select bank0
  2892  0346  1303               	bcf	3,6	;RP1=0, select bank0
  2893  0347  1606               	bsf	6,4	;volatile
  2894  0348  2B4C               	goto	i1l1499
  2895  0349                     u168_20:	
  2896  0349  1283               	bcf	3,5	;RP0=0, select bank0
  2897  034A  1303               	bcf	3,6	;RP1=0, select bank0
  2898  034B  1206               	bcf	6,4	;volatile
  2899  034C                     i1l1499:	
  2900  034C  3001               	movlw	1
  2901  034D  00FB               	movwf	??_vw_isr_tmr0
  2902  034E  087B               	movf	??_vw_isr_tmr0,w
  2903  034F  07E0               	addwf	_vw_tx_bit,f
  2904                           
  2905                           ;virtualwire.c: 430: if (vw_tx_bit >= 6)
  2906  0350  3006               	movlw	6
  2907  0351  0260               	subwf	_vw_tx_bit,w
  2908  0352  1C03               	skipc
  2909  0353  2B59               	goto	i1l1507
  2910                           
  2911                           ;virtualwire.c: 431: {
  2912                           ;virtualwire.c: 432: vw_tx_bit = 0;
  2913  0354  01E0               	clrf	_vw_tx_bit
  2914                           
  2915                           ;virtualwire.c: 433: vw_tx_index++;
  2916  0355  3001               	movlw	1
  2917  0356  00FB               	movwf	??_vw_isr_tmr0
  2918  0357  087B               	movf	??_vw_isr_tmr0,w
  2919  0358  07E3               	addwf	_vw_tx_index,f
  2920  0359                     i1l1507:	
  2921                           
  2922                           ;virtualwire.c: 434: }
  2923                           ;virtualwire.c: 435: }
  2924                           ;virtualwire.c: 436: }
  2925                           ;virtualwire.c: 438: }
  2926                           ;virtualwire.c: 440: if (vw_tx_sample > 7)
  2927  0359  3008               	movlw	8
  2928  035A  0265               	subwf	_vw_tx_sample,w
  2929  035B  1803               	btfsc	3,0
  2930                           
  2931                           ;virtualwire.c: 441: vw_tx_sample = 0;
  2932  035C  01E5               	clrf	_vw_tx_sample
  2933                           
  2934                           ;virtualwire.c: 445: if (vw_rx_enabled && !vw_tx_enabled)
  2935  035D  085A               	movf	_vw_rx_enabled,w
  2936  035E  1903               	btfsc	3,2
  2937  035F  0008               	return
  2938  0360  0861               	movf	_vw_tx_enabled,w
  2939  0361  1D03               	btfss	3,2
  2940  0362  0008               	return
  2941                           
  2942                           ;virtualwire.c: 446: vw_pll();
  2943  0363  120A  118A  2231   	fcall	_vw_pll
  2944  0366  0008               	return
  2945  0367                     __end_of_vw_isr_tmr0:	
  2946                           
  2947                           	psect	text15
  2948  0681                     __ptext15:	
  2949 ;; *************** function _vw_tx_stop *****************
  2950 ;; Defined at:
  2951 ;;		line 162 in file "virtualwire.c"
  2952 ;; Parameters:    Size  Location     Type
  2953 ;;		None
  2954 ;; Auto vars:     Size  Location     Type
  2955 ;;		None
  2956 ;; Return value:  Size  Location     Type
  2957 ;;                  1    wreg      void 
  2958 ;; Registers used:
  2959 ;;		status,2
  2960 ;; Tracked objects:
  2961 ;;		On entry : 0/0
  2962 ;;		On exit  : 0/0
  2963 ;;		Unchanged: 0/0
  2964 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2965 ;;      Params:         0       0       0       0       0
  2966 ;;      Locals:         0       0       0       0       0
  2967 ;;      Temps:          0       0       0       0       0
  2968 ;;      Totals:         0       0       0       0       0
  2969 ;;Total ram usage:        0 bytes
  2970 ;; Hardware stack levels used:    1
  2971 ;; This function calls:
  2972 ;;		Nothing
  2973 ;; This function is called by:
  2974 ;;		_vw_isr_tmr0
  2975 ;; This function uses a non-reentrant model
  2976 ;;
  2977                           
  2978                           
  2979                           ;psect for function _vw_tx_stop
  2980  0681                     _vw_tx_stop:	
  2981                           
  2982                           ;virtualwire.c: 164: RB4 = 0;
  2983                           
  2984                           ;incstack = 0
  2985                           ; Regs used in _vw_tx_stop: [status,2]
  2986  0681  1283               	bcf	3,5	;RP0=0, select bank0
  2987  0682  1303               	bcf	3,6	;RP1=0, select bank0
  2988  0683  1206               	bcf	6,4	;volatile
  2989                           
  2990                           ;virtualwire.c: 165: vw_tx_enabled = 0;
  2991  0684  01E1               	clrf	_vw_tx_enabled
  2992  0685  0008               	return
  2993  0686                     __end_of_vw_tx_stop:	
  2994                           
  2995                           	psect	text16
  2996  0231                     __ptext16:	
  2997 ;; *************** function _vw_pll *****************
  2998 ;; Defined at:
  2999 ;;		line 262 in file "virtualwire.c"
  3000 ;; Parameters:    Size  Location     Type
  3001 ;;		None
  3002 ;; Auto vars:     Size  Location     Type
  3003 ;;  this_byte       1   10[COMMON] unsigned char 
  3004 ;; Return value:  Size  Location     Type
  3005 ;;                  1    wreg      void 
  3006 ;; Registers used:
  3007 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3008 ;; Tracked objects:
  3009 ;;		On entry : 0/0
  3010 ;;		On exit  : 0/0
  3011 ;;		Unchanged: 0/0
  3012 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3013 ;;      Params:         0       0       0       0       0
  3014 ;;      Locals:         3       0       0       0       0
  3015 ;;      Temps:          5       0       0       0       0
  3016 ;;      Totals:         8       0       0       0       0
  3017 ;;Total ram usage:        8 bytes
  3018 ;; Hardware stack levels used:    1
  3019 ;; Hardware stack levels required when called:    2
  3020 ;; This function calls:
  3021 ;;		_vw_symbol_6to4
  3022 ;; This function is called by:
  3023 ;;		_vw_isr_tmr0
  3024 ;; This function uses a non-reentrant model
  3025 ;;
  3026                           
  3027                           
  3028                           ;psect for function _vw_pll
  3029  0231                     _vw_pll:	
  3030                           
  3031                           ;virtualwire.c: 265: if (vw_rx_sample)
  3032                           
  3033                           ;incstack = 0
  3034                           ; Regs used in _vw_pll: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3035  0231  1283               	bcf	3,5	;RP0=0, select bank0
  3036  0232  1303               	bcf	3,6	;RP1=0, select bank0
  3037  0233  085F               	movf	_vw_rx_sample,w
  3038  0234  1903               	btfsc	3,2
  3039  0235  2A3A               	goto	i1l1355
  3040                           
  3041                           ;virtualwire.c: 266: vw_rx_integrator++;
  3042  0236  3001               	movlw	1
  3043  0237  00F3               	movwf	??_vw_pll
  3044  0238  0873               	movf	??_vw_pll,w
  3045  0239  07DC               	addwf	_vw_rx_integrator,f
  3046  023A                     i1l1355:	
  3047                           
  3048                           ;virtualwire.c: 268: if (vw_rx_sample != vw_rx_last_sample)
  3049  023A  085F               	movf	_vw_rx_sample,w
  3050  023B  065D               	xorwf	_vw_rx_last_sample,w
  3051  023C  1903               	skipnz
  3052  023D  2A51               	goto	i1l1367
  3053                           
  3054                           ;virtualwire.c: 269: {
  3055                           ;virtualwire.c: 271: vw_rx_pll_ramp += ((vw_rx_pll_ramp < 160/2)
  3056                           ;virtualwire.c: 272: ? ((160/8)-9)
  3057                           ;virtualwire.c: 273: : ((160/8)+9));
  3058  023E  3050               	movlw	80
  3059  023F  025E               	subwf	_vw_rx_pll_ramp,w
  3060  0240  1C03               	skipc
  3061  0241  2A44               	goto	i1l1361
  3062  0242  301D               	movlw	29
  3063  0243  2A45               	goto	L3
  3064  0244                     i1l1361:	
  3065  0244  300B               	movlw	11
  3066  0245                     L3:	
  3067  0245  00F8               	movwf	_vw_pll$138
  3068  0246  3000               	movlw	0
  3069  0247  00F9               	movwf	_vw_pll$138+1
  3070  0248  0878               	movf	_vw_pll$138,w
  3071  0249  00F3               	movwf	??_vw_pll
  3072  024A  0873               	movf	??_vw_pll,w
  3073  024B  07DE               	addwf	_vw_rx_pll_ramp,f
  3074                           
  3075                           ;virtualwire.c: 274: vw_rx_last_sample = vw_rx_sample;
  3076  024C  085F               	movf	_vw_rx_sample,w
  3077  024D  00F3               	movwf	??_vw_pll
  3078  024E  0873               	movf	??_vw_pll,w
  3079  024F  00DD               	movwf	_vw_rx_last_sample
  3080                           
  3081                           ;virtualwire.c: 275: }
  3082  0250  2A55               	goto	i1l1369
  3083  0251                     i1l1367:	
  3084                           
  3085                           ;virtualwire.c: 276: else
  3086                           ;virtualwire.c: 277: {
  3087                           ;virtualwire.c: 280: vw_rx_pll_ramp += (160/8);
  3088  0251  3014               	movlw	20
  3089  0252  00F3               	movwf	??_vw_pll
  3090  0253  0873               	movf	??_vw_pll,w
  3091  0254  07DE               	addwf	_vw_rx_pll_ramp,f
  3092  0255                     i1l1369:	
  3093                           
  3094                           ;virtualwire.c: 281: }
  3095                           ;virtualwire.c: 282: if (vw_rx_pll_ramp >= 160)
  3096  0255  30A0               	movlw	160
  3097  0256  025E               	subwf	_vw_rx_pll_ramp,w
  3098  0257  1C03               	skipc
  3099  0258  0008               	return
  3100                           
  3101                           ;virtualwire.c: 283: {
  3102                           ;virtualwire.c: 286: vw_rx_bits >>= 1;
  3103  0259  3001               	movlw	1
  3104  025A                     u132_25:	
  3105  025A  1003               	clrc
  3106  025B  0CD5               	rrf	_vw_rx_bits+1,f
  3107  025C  0CD4               	rrf	_vw_rx_bits,f
  3108  025D  3EFF               	addlw	-1
  3109  025E  1D03               	skipz
  3110  025F  2A5A               	goto	u132_25
  3111                           
  3112                           ;virtualwire.c: 290: if (vw_rx_integrator >= 5)
  3113  0260  3005               	movlw	5
  3114  0261  025C               	subwf	_vw_rx_integrator,w
  3115  0262  1803               	btfsc	3,0
  3116                           
  3117                           ;virtualwire.c: 291: vw_rx_bits |= 0x800;
  3118  0263  15D5               	bsf	_vw_rx_bits+1,3
  3119                           
  3120                           ;virtualwire.c: 293: vw_rx_pll_ramp -= 160;
  3121  0264  30A0               	movlw	160
  3122  0265  02DE               	subwf	_vw_rx_pll_ramp,f
  3123                           
  3124                           ;virtualwire.c: 294: vw_rx_integrator = 0;
  3125  0266  01DC               	clrf	_vw_rx_integrator
  3126                           
  3127                           ;virtualwire.c: 296: if (vw_rx_active)
  3128  0267  0856               	movf	_vw_rx_active,w
  3129  0268  1903               	btfsc	3,2
  3130  0269  2AC6               	goto	i1l1409
  3131                           
  3132                           ;virtualwire.c: 297: {
  3133                           ;virtualwire.c: 300: if (++vw_rx_bit_count >= 12)
  3134  026A  3001               	movlw	1
  3135  026B  00F3               	movwf	??_vw_pll
  3136  026C  0873               	movf	??_vw_pll,w
  3137  026D  07D7               	addwf	_vw_rx_bit_count,f
  3138  026E  300C               	movlw	12
  3139  026F  0257               	subwf	_vw_rx_bit_count,w
  3140  0270  1C03               	skipc
  3141  0271  0008               	return
  3142                           
  3143                           ;virtualwire.c: 301: {
  3144                           ;virtualwire.c: 305: uint8_t this_byte =
  3145                           ;virtualwire.c: 306: (vw_symbol_6to4(vw_rx_bits & 0x3f)) << 4
  3146                           ;virtualwire.c: 307: | vw_symbol_6to4(vw_rx_bits >> 6);
  3147  0272  0855               	movf	_vw_rx_bits+1,w
  3148  0273  00F4               	movwf	??_vw_pll+1
  3149  0274  0854               	movf	_vw_rx_bits,w
  3150  0275  00F3               	movwf	??_vw_pll
  3151  0276  3006               	movlw	6
  3152  0277                     u136_25:	
  3153  0277  1003               	clrc
  3154  0278  0CF4               	rrf	??_vw_pll+1,f
  3155  0279  0CF3               	rrf	??_vw_pll,f
  3156  027A  3EFF               	addlw	-1
  3157  027B  1D03               	skipz
  3158  027C  2A77               	goto	u136_25
  3159  027D  0873               	movf	??_vw_pll,w
  3160  027E  120A  118A  2629  120A  118A  	fcall	_vw_symbol_6to4
  3161  0283  00F5               	movwf	??_vw_pll+2
  3162  0284  1283               	bcf	3,5	;RP0=0, select bank0
  3163  0285  1303               	bcf	3,6	;RP1=0, select bank0
  3164  0286  0854               	movf	_vw_rx_bits,w
  3165  0287  393F               	andlw	63
  3166  0288  120A  118A  2629  120A  118A  	fcall	_vw_symbol_6to4
  3167  028D  00F6               	movwf	??_vw_pll+3
  3168  028E  3003               	movlw	3
  3169  028F                     u137_25:	
  3170  028F  1003               	clrc
  3171  0290  0DF6               	rlf	??_vw_pll+3,f
  3172  0291  3EFF               	addlw	-1
  3173  0292  1D03               	skipz
  3174  0293  2A8F               	goto	u137_25
  3175  0294  1003               	clrc
  3176  0295  0D76               	rlf	??_vw_pll+3,w
  3177  0296  0475               	iorwf	??_vw_pll+2,w
  3178  0297  00F7               	movwf	??_vw_pll+4
  3179  0298  0877               	movf	??_vw_pll+4,w
  3180  0299  00FA               	movwf	vw_pll@this_byte
  3181                           
  3182                           ;virtualwire.c: 312: if (vw_rx_len == 0)
  3183  029A  087D               	movf	_vw_rx_len,w
  3184  029B  1D03               	btfss	3,2
  3185  029C  2AAD               	goto	i1l1397
  3186                           
  3187                           ;virtualwire.c: 313: {
  3188                           ;virtualwire.c: 317: vw_rx_count = this_byte;
  3189  029D  087A               	movf	vw_pll@this_byte,w
  3190  029E  00F3               	movwf	??_vw_pll
  3191  029F  0873               	movf	??_vw_pll,w
  3192  02A0  1283               	bcf	3,5	;RP0=0, select bank0
  3193  02A1  1303               	bcf	3,6	;RP1=0, select bank0
  3194  02A2  00D8               	movwf	_vw_rx_count
  3195                           
  3196                           ;virtualwire.c: 318: if (vw_rx_count < 4 || vw_rx_count > 24)
  3197  02A3  3004               	movlw	4
  3198  02A4  0258               	subwf	_vw_rx_count,w
  3199  02A5  1C03               	skipc
  3200  02A6  2AAB               	goto	i1l1393
  3201  02A7  3019               	movlw	25
  3202  02A8  0258               	subwf	_vw_rx_count,w
  3203  02A9  1C03               	skipc
  3204  02AA  2AAD               	goto	i1l1397
  3205  02AB                     i1l1393:	
  3206                           
  3207                           ;virtualwire.c: 319: {
  3208                           ;virtualwire.c: 321: vw_rx_active = 0;
  3209  02AB  01D6               	clrf	_vw_rx_active
  3210                           
  3211                           ;virtualwire.c: 322: return;
  3212  02AC  0008               	return
  3213  02AD                     i1l1397:	
  3214                           
  3215                           ;virtualwire.c: 323: }
  3216                           ;virtualwire.c: 324: }
  3217                           ;virtualwire.c: 325: vw_tx_buf[vw_rx_len++] = this_byte;
  3218  02AD  087A               	movf	vw_pll@this_byte,w
  3219  02AE  00F3               	movwf	??_vw_pll
  3220  02AF  087D               	movf	_vw_rx_len,w
  3221  02B0  3EA0               	addlw	(low (_vw_tx_buf| 0))& (0+255)
  3222  02B1  0084               	movwf	4
  3223  02B2  0873               	movf	??_vw_pll,w
  3224  02B3  1383               	bcf	3,7	;select IRP bank1
  3225  02B4  0080               	movwf	0
  3226  02B5  3001               	movlw	1
  3227  02B6  00F3               	movwf	??_vw_pll
  3228  02B7  0873               	movf	??_vw_pll,w
  3229  02B8  07FD               	addwf	_vw_rx_len,f
  3230                           
  3231                           ;virtualwire.c: 327: if (vw_rx_len >= vw_rx_count)
  3232  02B9  1283               	bcf	3,5	;RP0=0, select bank0
  3233  02BA  1303               	bcf	3,6	;RP1=0, select bank0
  3234  02BB  0858               	movf	_vw_rx_count,w
  3235  02BC  027D               	subwf	_vw_rx_len,w
  3236  02BD  1C03               	skipc
  3237  02BE  2AC4               	goto	i1l1407
  3238                           
  3239                           ;virtualwire.c: 328: {
  3240                           ;virtualwire.c: 330: vw_rx_active = 0;
  3241  02BF  01D6               	clrf	_vw_rx_active
  3242                           
  3243                           ;virtualwire.c: 331: vw_rx_done = 1;
  3244  02C0  3001               	movlw	1
  3245  02C1  00F3               	movwf	??_vw_pll
  3246  02C2  0873               	movf	??_vw_pll,w
  3247  02C3  00D9               	movwf	_vw_rx_done	;volatile
  3248  02C4                     i1l1407:	
  3249                           
  3250                           ;virtualwire.c: 332: }
  3251                           ;virtualwire.c: 333: vw_rx_bit_count = 0;
  3252  02C4  01D7               	clrf	_vw_rx_bit_count
  3253                           
  3254                           ;virtualwire.c: 334: }
  3255                           ;virtualwire.c: 335: }
  3256  02C5  0008               	return
  3257  02C6                     i1l1409:	
  3258                           
  3259                           ;virtualwire.c: 337: else if (vw_rx_bits == 0xb38)
  3260  02C6  3038               	movlw	56
  3261  02C7  0654               	xorwf	_vw_rx_bits,w
  3262  02C8  300B               	movlw	11
  3263  02C9  1903               	skipnz
  3264  02CA  0655               	xorwf	_vw_rx_bits+1,w
  3265  02CB  1D03               	btfss	3,2
  3266  02CC  0008               	return
  3267                           
  3268                           ;virtualwire.c: 338: {
  3269                           ;virtualwire.c: 340: vw_rx_active = 1;
  3270  02CD  01D6               	clrf	_vw_rx_active
  3271  02CE  0AD6               	incf	_vw_rx_active,f
  3272                           
  3273                           ;virtualwire.c: 341: vw_rx_bit_count = 0;
  3274  02CF  01D7               	clrf	_vw_rx_bit_count
  3275                           
  3276                           ;virtualwire.c: 342: vw_rx_len = 0;
  3277  02D0  01FD               	clrf	_vw_rx_len
  3278                           
  3279                           ;virtualwire.c: 343: vw_rx_done = 0;
  3280  02D1  01D9               	clrf	_vw_rx_done	;volatile
  3281  02D2  0008               	return
  3282  02D3                     __end_of_vw_pll:	
  3283                           
  3284                           	psect	text17
  3285  0629                     __ptext17:	
  3286 ;; *************** function _vw_symbol_6to4 *****************
  3287 ;; Defined at:
  3288 ;;		line 245 in file "virtualwire.c"
  3289 ;; Parameters:    Size  Location     Type
  3290 ;;  symbol          1    wreg     unsigned char 
  3291 ;; Auto vars:     Size  Location     Type
  3292 ;;  symbol          1    1[COMMON] unsigned char 
  3293 ;;  i               1    2[COMMON] unsigned char 
  3294 ;; Return value:  Size  Location     Type
  3295 ;;                  1    wreg      unsigned char 
  3296 ;; Registers used:
  3297 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  3298 ;; Tracked objects:
  3299 ;;		On entry : 0/0
  3300 ;;		On exit  : 0/0
  3301 ;;		Unchanged: 0/0
  3302 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3303 ;;      Params:         0       0       0       0       0
  3304 ;;      Locals:         2       0       0       0       0
  3305 ;;      Temps:          1       0       0       0       0
  3306 ;;      Totals:         3       0       0       0       0
  3307 ;;Total ram usage:        3 bytes
  3308 ;; Hardware stack levels used:    2
  3309 ;; This function calls:
  3310 ;;		Nothing
  3311 ;; This function is called by:
  3312 ;;		_vw_pll
  3313 ;; This function uses a non-reentrant model
  3314 ;;
  3315                           
  3316                           
  3317                           ;psect for function _vw_symbol_6to4
  3318  0629                     _vw_symbol_6to4:	
  3319                           
  3320                           ;incstack = 0
  3321 ;; using string table level
  3322                           ; Regs used in _vw_symbol_6to4: [wreg-fsr0h+status,2+status,0+pclath]
  3323                           ;vw_symbol_6to4@symbol stored from wreg
  3324  0629  00F1               	movwf	vw_symbol_6to4@symbol
  3325                           
  3326                           ;virtualwire.c: 247: uint8_t i;
  3327                           ;virtualwire.c: 250: for (i = 0; i < 16; i++)
  3328  062A  01F2               	clrf	vw_symbol_6to4@i
  3329  062B  3010               	movlw	16
  3330  062C  0272               	subwf	vw_symbol_6to4@i,w
  3331  062D  1803               	btfsc	3,0
  3332  062E  2E44               	goto	i1l1249
  3333  062F                     i1l1239:	
  3334                           
  3335                           ;virtualwire.c: 251: if (symbol == symbols[i])
  3336  062F  0872               	movf	vw_symbol_6to4@i,w
  3337  0630  3E13               	addlw	low ((_symbols-__stringbase)| (0+32768))
  3338  0631  0084               	movwf	4
  3339  0632  120A  118A  2595  120A  118A  	fcall	stringdir
  3340  0637  0671               	xorwf	vw_symbol_6to4@symbol,w
  3341  0638  1D03               	skipz
  3342  0639  2E3C               	goto	i1l1245
  3343                           
  3344                           ;virtualwire.c: 252: return i;
  3345  063A  0872               	movf	vw_symbol_6to4@i,w
  3346  063B  0008               	return
  3347  063C                     i1l1245:	
  3348  063C  3001               	movlw	1
  3349  063D  00F0               	movwf	??_vw_symbol_6to4
  3350  063E  0870               	movf	??_vw_symbol_6to4,w
  3351  063F  07F2               	addwf	vw_symbol_6to4@i,f
  3352  0640  3010               	movlw	16
  3353  0641  0272               	subwf	vw_symbol_6to4@i,w
  3354  0642  1C03               	skipc
  3355  0643  2E2F               	goto	i1l1239
  3356  0644                     i1l1249:	
  3357                           
  3358                           ;virtualwire.c: 254: return 0;
  3359  0644  3000               	movlw	0
  3360  0645  0008               	return
  3361  0646                     __end_of_vw_symbol_6to4:	
  3362  007E                     btemp	set	126	;btemp
  3363  007E                     wtemp0	set	126


Data Sizes:
    Strings     3
    Constant    52
    Data        0
    BSS         68
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      14
    BANK0            80     52      71
    BANK1            80      6      54
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 3
		 -> STR_1(CODE[3]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 5
		 -> main@buffer(BANK1[5]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    vw_send@buf	PTR const unsigned char  size(1) Largest target is 5
		 -> main@buffer(BANK1[5]), 

    vw_send@p	PTR unsigned char  size(1) Largest target is 48
		 -> vw_tx_buf(BANK1[48]), 

    _calc_timer0_prescaler@prescaler_bits	PTR unsigned char  size(1) Largest target is 1
		 -> vw_setup@prescaler_bits(BANK0[1]), 

    _calc_timer0_prescaler@k_tmr0	PTR unsigned char  size(1) Largest target is 1
		 -> vw_tmr0_value(BANK0[1]), 

    _calc_timer0_prescaler@prescaler_value	PTR unsigned int  size(1) Largest target is 2
		 -> vw_setup@prescaler_value(BANK0[2]), 

    sp__memcpy	PTR unsigned char  size(1) Largest target is 0


Critical Paths under _main in COMMON

    None.

Critical Paths under _global_isr in COMMON

    _global_isr->_vw_isr_tmr0
    _vw_isr_tmr0->_vw_pll
    _vw_pll->_vw_symbol_6to4

Critical Paths under _main in BANK0

    _main->_vw_setup
    _vw_setup->__calc_timer0_prescaler
    __calc_timer0_prescaler->___aldiv
    ___aldiv->___wmul
    _vw_send->__crc_ccitt_update
    _sprintf->___lwmod
    ___lwmod->___lwdiv

Critical Paths under _global_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _global_isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _global_isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _global_isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 9     9      0    5409
                                             49 BANK0      3     3      0
                                              0 BANK1      6     6      0
                              _delay
                            _sprintf
                            _vw_send
                           _vw_setup
 ---------------------------------------------------------------------------------
 (1) _vw_setup                                             8     6      2    1717
                                             41 BANK0      8     6      2
             __calc_timer0_prescaler
 ---------------------------------------------------------------------------------
 (2) __calc_timer0_prescaler                              16    11      5    1482
                                             25 BANK0     16    11      5
                            ___aldiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     266
                                              4 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___aldiv                                             15     7      8     575
                                             10 BANK0     15     7      8
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _vw_send                                             12    11      1    1875
                                             20 BANK0     12    11      1
                  __crc_ccitt_update
                        _vw_tx_start
                         _vw_wait_tx
 ---------------------------------------------------------------------------------
 (2) _vw_wait_tx                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _vw_tx_start                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) __crc_ccitt_update                                   16    13      3     582
                                              4 BANK0     16    13      3
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             21    18      3    1524
                                             18 BANK0     13    10      3
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     362
                                             12 BANK0      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     371
                                              4 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _delay                                                2     0      2      96
                                              4 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _global_isr                                           4     4      0     181
                                              0 BANK0      4     4      0
                        _vw_isr_tmr0
 ---------------------------------------------------------------------------------
 (5) _vw_isr_tmr0                                          2     2      0     181
                                             11 COMMON     2     2      0
                             _vw_pll
                         _vw_tx_stop
 ---------------------------------------------------------------------------------
 (6) _vw_tx_stop                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _vw_pll                                               8     8      0     181
                                              3 COMMON     8     8      0
                     _vw_symbol_6to4
 ---------------------------------------------------------------------------------
 (8) _vw_symbol_6to4                                       3     3      0     112
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _delay
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
   _vw_send
     __crc_ccitt_update
     _vw_tx_start
     _vw_wait_tx
   _vw_setup
     __calc_timer0_prescaler
       ___aldiv
         ___wmul (ARG)
       ___wmul

 _global_isr (ROOT)
   _vw_isr_tmr0
     _vw_pll
       _vw_symbol_6to4
     _vw_tx_stop

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      D       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      8B       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     34      47       5       88.8%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      6      36       7       67.5%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      8B      12        0.0%


Microchip Technology PIC Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Fri Apr 20 08:24:05 2018

                                              pc 0002                                      __CFG_CP$OFF 0000  
                        ?__calc_timer0_prescaler 0039                                               fsr 0004  
                            ___wmul@multiplicand 0026                                              l156 00E9  
                                            l329 0612                                              l384 0379  
                                            _GIE 005F                                              _RB3 0033  
                                            _RB4 0034                                     __CFG_CPD$OFF 0000  
                                            fsr0 0004                                              indf 0000  
                      __end_of__crc_ccitt_update 0512                                     __CFG_FOSC$HS 0000  
                                   __CFG_LVP$OFF 0000                                             l2009 048C  
                                           l1715 060A                                             l1911 01D6  
                                           l1825 0585                                             l1817 0561  
                                           l1841 05DA                                             l1905 01B5  
                                           l1745 039A                                             l1737 038A  
                                           l1819 056F                                             l1843 05E8  
                                           l1851 0601                                             l1763 03ED  
                                           l1755 03D2                                             l1747 03AA  
                                           l1829 0590                                             l1925 01E9  
                                           l1917 01E5                                             l1847 05F6  
                                           l1927 0162                                             l1759 03DF  
                                           l1857 065A                                             l1929 022C  
                                           l1793 0479                                             l1883 0182  
                                           l1867 0545                                             l1973 008C  
                                           l1799 067B                                             l1889 0198  
                                           l1899 01AF                                             STR_1 05CF  
                                           _T0CS 040D                                             u2115 04D1  
                                           u2125 04EA                                             u2045 039E  
                                           u2215 0570                                             u2225 057C  
                                           u2065 03AC                                             u2330 0555  
                                           u2235 0586                                             u2075 03C1  
                                           u2085 03D3                                             u2265 05DD  
                                           u2195 0564                                             u2285 05EE  
                                           u2445 005C                                             u2295 05F7  
                                           u2455 00B1                                             u2385 01CC  
                                           u2475 00F0                                             _PEIE 005E  
                                           i1l14 064D                                             u1985 0613  
                                           u1995 061A                                             _TMR0 0001  
                                   __CFG_WRT$OFF 0000                                             _main 047E  
                                           btemp 007E                                    __CFG_BOREN$ON 0000  
                                           start 0012                   __end_of__calc_timer0_prescaler 047E  
                                    _vw_isr_tmr0 02D3                                  __end_of___aldiv 03F6  
                                          ?_main 0070                                    __CFG_WDTE$OFF 0000  
                                __end_of___lwdiv 0595                                  __end_of___lwmod 0606  
                         __crc_ccitt_update@data 0026                                      _vw_rx_count 0058  
                                    _vw_tx_index 0063                                            _delay 065A  
                                    _vw_tx_start 0669                                  __end_of_dpowers 05C7  
                                          main@j 00D5                                            pclath 000A  
                                          status 0003                                            wtemp0 007E  
                                __end_of_sprintf 0231                                  __end_of_vw_send 015B  
                                __end_of_symbols 05BD                                  __initialization 0015  
                                   __end_of_main 04C8                                 _vw_rx_integrator 005C  
                __calc_timer0_prescaler@aux_tmr0 0046                                           ??_main 0051  
                         vw_setup@prescaler_bits 004E                       __size_of__crc_ccitt_update 004A  
                                         ?_delay 0024                                           i1l1245 063C  
                                         i1l1239 062F                                           i1l1407 02C4  
                                         i1l1249 0644                                           i1l1409 02C6  
                                         i1l1361 0244                                           i1l1355 023A  
                                         i1l1507 0359                                           i1l1367 0251  
                                         i1l1471 02E6                                           i1l1393 02AB  
                                         i1l1369 0255                                           i1l1491 0324  
                                         i1l1397 02AD                                           i1l1487 031D  
                                         i1l1479 0310                                           i1l1497 0334  
                                         i1l1499 034C                                           u132_25 025A  
                                         u136_25 0277                                           u161_24 0302  
                                         u137_25 028F                                           u161_25 0300  
                                         u162_20 030D                                           u167_24 033D  
                                         u167_25 033B                                           u168_20 0349  
                                         _TMR0IE 005D                                           _TMR0IF 005A  
                                         _TRISB3 0433                                           _TRISB4 0434  
                                   _vw_rx_active 0056                                   __CFG_PWRTE$OFF 0000  
                                   _vw_rx_sample 005F                                     _vw_tx_header 0062  
                                      ??___aldiv 0032                                           ___wmul 0606  
                                   _vw_tx_sample 0065                                 _vw_tx_buf_header 05C7  
                                      ??___lwdiv 0028                                        ??___lwmod 0030  
                                         _vw_pll 0231                                 ??_vw_symbol_6to4 0070  
                                         saved_w 007E                                        ??_sprintf 0035  
                                      ??_vw_send 0035                                _vw_rx_last_sample 005D  
                               __end_of_vw_setup 0557                               _vw_rx_enabled_last 005B  
                        __end_of__initialization 0025                                   __pcstackCOMMON 0070  
                                  __end_of_delay 0669                                          ??_delay 0026  
                                     __pbssBANK0 0054                                       __pbssBANK1 00A0  
                        vw_setup@prescaler_value 004F                                       __pmaintext 047E  
                                  _vw_tmr0_value 0066                                          ?___wmul 0024  
                                     __pintentry 0004                                     ?_vw_isr_tmr0 0070  
                                        ?_vw_pll 0070                                     ?_vw_tx_start 0070  
                                     __stringtab 0595                                       _global_isr 0646  
                                  _vw_rx_enabled 005A                     __calc_timer0_prescaler@brate 0039  
                                  _vw_tx_enabled 0061                                          ___aldiv 0367  
                                __size_of___wmul 0023                                          ___lwdiv 0557  
                                        ___lwmod 05D2                                          __ptext1 0512  
                                        __ptext2 03F6                                          __ptext3 0606  
                                        __ptext4 0367                                          __ptext5 0029  
                                        __ptext6 067B                                          __ptext7 0669  
                                        __ptext8 04C8                                          __ptext9 015B  
                                      ?_vw_setup 0049                                  __size_of_vw_pll 00A2  
                                        _dpowers 05BD                                       delay@delay 0024  
                               ___aldiv@dividend 002E                                          _sprintf 015B  
                                        clrloop0 0674                         __end_of_vw_tx_buf_header 05CF  
                                        _vw_send 0029                                          _symbols 05AD  
                           end_of_initialization 0025                                  vw_symbol_6to4@i 0072  
                                   vw_send@count 003A                                     vw_send@index 003F  
                               ___aldiv@quotient 0035                                       ??_vw_setup 004B  
                           vw_symbol_6to4@symbol 0071                                      ?_global_isr 0070  
                                     main@buffer 00D0                         ??__calc_timer0_prescaler 003E  
                                _vw_rx_bit_count 0057                                       _vw_pll$138 0078  
                                     _vw_wait_tx 067B                                   __end_of___wmul 0629  
                          __crc_ccitt_update@crc 0024                                       _vw_rx_bits 0054  
                                     _vw_rx_done 0059                                       _vw_tx_stop 0681  
                           __size_of_vw_isr_tmr0 0094                                  vw_pll@this_byte 007A  
                                 __end_of_vw_pll 02D3  __end_of__calc_timer0_prescaler@prescaler_factor 05AD  
        __calc_timer0_prescaler@prescaler_factor 059B                              start_initialization 0015  
                           __size_of_vw_tx_start 000A            __calc_timer0_prescaler@prescaler_bits 003C  
                                       ??___wmul 0028                              __size_of_global_isr 0014  
                                       ??_vw_pll 0073                                      __pbssCOMMON 007D  
                                      ___latbits 0002                                    __pcstackBANK0 0020  
                                  __pcstackBANK1 00D0                          __size_of_vw_symbol_6to4 001D  
                                    sprintf@flag 0039                                      sprintf@prec 003A  
                __size_of__calc_timer0_prescaler 0088                                 ___lwdiv@dividend 0026  
                                       ?___aldiv 002A                                         ?___lwdiv 0024  
                                       ?___lwmod 002C                                      ?_vw_wait_tx 0070  
                                      __pstrings 0595                                      ?_vw_tx_stop 0070  
                              __size_of_vw_setup 0045                                 ___lwdiv@quotient 002A  
                                 __size_of_delay 000F                                         ?_sprintf 0032  
                                       ?_vw_send 0034                                  ___aldiv@divisor 002A  
                              interrupt_function 0004                                  ___aldiv@counter 0033  
                                 ___wmul@product 0028                                        clear_ram0 0673  
                                    __stringbase 059A                                ___wmul@multiplier 0024  
                         __calc_timer0_prescaler 03F6                                        _vw_rx_len 007D  
                                      _vw_tx_bit 0060                                        _vw_tx_buf 00A0  
                                      _vw_tx_len 0064                                     ??_global_isr 0020  
                            __size_of_vw_wait_tx 0006           __calc_timer0_prescaler@prescaler_value 003B  
                  __calc_timer0_prescaler@k_tmr0 003D                              __size_of_vw_tx_stop 0005  
                  __calc_timer0_prescaler@pindex 0048                                   _vw_rx_pll_ramp 005E  
                               __size_of___aldiv 008F                                 __size_of___lwdiv 003E  
                               __size_of___lwmod 0034                               __end_of__stringtab 059B  
                             __end_of_global_isr 065A                                       sprintf@val 003B  
                                ___lwdiv@divisor 0024                                  ___lwdiv@counter 0029  
                                       __ptext10 05D2                                         __ptext11 0557  
                                       __ptext12 065A                                         __ptext13 0646  
                                       __ptext14 02D3                                         __ptext15 0681  
                                       __ptext16 0231                                         __ptext17 0629  
                                 _vw_symbol_6to4 0629                                 __size_of_sprintf 00D6  
                               __size_of_vw_send 0132                                    __size_of_main 004A  
                                     vw_send@crc 003C                                       vw_send@buf 0039  
                                     vw_send@len 0034                                    ??_vw_isr_tmr0 007B  
                                       _vw_setup 0512                           __end_of_vw_symbol_6to4 0646  
                                  ??_vw_tx_start 0024                                         intlevel1 0000  
                                      sprintf@ap 0038                                        sprintf@sp 003D  
                               ___lwmod@dividend 002E                                        stringcode 0595  
                                   ??_vw_wait_tx 0024                                     ??_vw_tx_stop 0070  
                                     _OPTION_REG 0081                                         sprintf@c 003E  
                                       sprintf@f 0032                                  ___lwmod@divisor 002C  
                                ___lwmod@counter 0031                              __end_of_vw_isr_tmr0 0367  
                                       stringdir 0595                                         stringtab 0595  
                                       vw_send@i 003B                                     ___aldiv@sign 0034  
                                       vw_send@p 003E                                  ?_vw_symbol_6to4 0070  
                              __crc_ccitt_update 04C8                               ?__crc_ccitt_update 0024  
                             __end_of_vw_wait_tx 0681                              __end_of_vw_tx_start 0673  
                             __end_of_vw_tx_stop 0686                              ??__crc_ccitt_update 0027  
                                  vw_setup@brate 0049  
