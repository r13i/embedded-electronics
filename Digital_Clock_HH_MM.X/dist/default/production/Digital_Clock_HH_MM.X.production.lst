

Microchip Technology PIC LITE Macro Assembler V1.40 build -251452761 
                                                                                               Sat Jan 28 10:42:12 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	16F88
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	inittext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	intentry,global,class=CODE,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2
    18                           	dabs	1,0x7E,2
    19  0000                     
    20                           ; Version 1.40
    21                           ; Generated 01/12/2016 GMT
    22                           ; 
    23                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    24                           ; All rights reserved.
    25                           ; 
    26                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    27                           ; 
    28                           ; Redistribution and use in source and binary forms, with or without modification, are
    29                           ; permitted provided that the following conditions are met:
    30                           ; 
    31                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    32                           ;        conditions and the following disclaimer.
    33                           ; 
    34                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    35                           ;        of conditions and the following disclaimer in the documentation and/or other
    36                           ;        materials provided with the distribution.
    37                           ; 
    38                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    39                           ;        software without specific prior written permission.
    40                           ; 
    41                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    42                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    43                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    44                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    45                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    46                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    47                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    48                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    49                           ; 
    50                           ; 
    51                           ; Code-generator required, PIC16F88 Definitions
    52                           ; 
    53                           ; SFR Addresses
    54  0000                     	;# 
    55  0001                     	;# 
    56  0002                     	;# 
    57  0003                     	;# 
    58  0004                     	;# 
    59  0005                     	;# 
    60  0006                     	;# 
    61  000A                     	;# 
    62  000B                     	;# 
    63  000C                     	;# 
    64  000D                     	;# 
    65  000E                     	;# 
    66  000E                     	;# 
    67  000F                     	;# 
    68  0010                     	;# 
    69  0011                     	;# 
    70  0012                     	;# 
    71  0013                     	;# 
    72  0014                     	;# 
    73  0015                     	;# 
    74  0015                     	;# 
    75  0016                     	;# 
    76  0017                     	;# 
    77  0018                     	;# 
    78  0019                     	;# 
    79  001A                     	;# 
    80  001E                     	;# 
    81  001F                     	;# 
    82  0081                     	;# 
    83  0085                     	;# 
    84  0086                     	;# 
    85  008C                     	;# 
    86  008D                     	;# 
    87  008E                     	;# 
    88  008F                     	;# 
    89  0090                     	;# 
    90  0092                     	;# 
    91  0093                     	;# 
    92  0094                     	;# 
    93  0098                     	;# 
    94  0099                     	;# 
    95  009B                     	;# 
    96  009C                     	;# 
    97  009D                     	;# 
    98  009E                     	;# 
    99  009F                     	;# 
   100  0105                     	;# 
   101  010C                     	;# 
   102  010D                     	;# 
   103  010E                     	;# 
   104  010F                     	;# 
   105  018C                     	;# 
   106  018D                     	;# 
   107                           
   108                           	psect	idataBANK0
   109  01B4                     __pidataBANK0:	
   110                           
   111                           ;initializer for seg_disp@F985
   112  01B4  343F               	retlw	63
   113  01B5  3406               	retlw	6
   114  01B6  345B               	retlw	91
   115  01B7  344F               	retlw	79
   116  01B8  3466               	retlw	102
   117  01B9  346D               	retlw	109
   118  01BA  347C               	retlw	124
   119  01BB  3407               	retlw	7
   120  01BC  347F               	retlw	127
   121  01BD  3467               	retlw	103
   122  01BE  3400               	retlw	0
   123  01BF  3400               	retlw	0
   124  01C0  3400               	retlw	0
   125  01C1  3400               	retlw	0
   126  01C2  3400               	retlw	0
   127  01C3  3400               	retlw	0
   128  000B                     _INTCON	set	11
   129  0005                     _PORTA	set	5
   130  0006                     _PORTB	set	6
   131  0028                     _RA0	set	40
   132  0029                     _RA1	set	41
   133  002A                     _RA2	set	42
   134  002B                     _RA3	set	43
   135  002C                     _RA4	set	44
   136  005D                     _TMR0IE	set	93
   137  005A                     _TMR0IF	set	90
   138  009B                     _ANSEL	set	155
   139  0081                     _OPTION_REG	set	129
   140  0085                     _TRISA	set	133
   141  0086                     _TRISB	set	134
   142                           
   143                           ; #config settings
   144  0000                     
   145                           	psect	cinit
   146  0013                     start_initialization:	
   147  0013                     __initialization:	
   148                           
   149                           ; Initialize objects allocated to BANK0
   150  0013  1383               	bcf	3,7	;select IRP bank0
   151  0014  3046               	movlw	low (__pdataBANK0+16)
   152  0015  00FD               	movwf	btemp+-1
   153  0016  3001               	movlw	high __pidataBANK0
   154  0017  00FE               	movwf	btemp
   155  0018  30B4               	movlw	low __pidataBANK0
   156  0019  00FF               	movwf	btemp+1
   157  001A  3036               	movlw	low __pdataBANK0
   158  001B  0084               	movwf	4
   159  001C  118A  21C8         	fcall	init_ram0
   160                           
   161                           ; Clear objects allocated to BANK0
   162  001E  01C6               	clrf	__pbssBANK0& (0+127)
   163  001F  01C7               	clrf	(__pbssBANK0+1)& (0+127)
   164  0020  01C8               	clrf	(__pbssBANK0+2)& (0+127)
   165  0021  01C9               	clrf	(__pbssBANK0+3)& (0+127)
   166  0022  01CA               	clrf	(__pbssBANK0+4)& (0+127)
   167  0023                     end_of_initialization:	
   168                           ;End of C runtime variable initialization code
   169                           
   170  0023                     __end_of__initialization:	
   171  0023  0183               	clrf	3
   172  0024  118A  29A2         	ljmp	_main	;jump to C main() function
   173                           
   174                           	psect	bssBANK0
   175  0046                     __pbssBANK0:	
   176  0046                     _count:	
   177  0046                     	ds	1
   178  0047                     digit_disp@HH:	
   179  0047                     	ds	1
   180  0048                     digit_disp@MM:	
   181  0048                     	ds	1
   182  0049                     digit_disp@SS:	
   183  0049                     	ds	1
   184  004A                     digit_disp@i:	
   185  004A                     	ds	1
   186                           
   187                           	psect	dataBANK0
   188  0036                     __pdataBANK0:	
   189  0036                     seg_disp@F985:	
   190  0036                     	ds	16
   191                           
   192                           	psect	inittext
   193  01C4                     init_fetch0:	
   194                           ;	Called with low address in FSR and high address in W
   195                           
   196  01C4  087E               	movf	126,w
   197  01C5  008A               	movwf	10
   198  01C6  087F               	movf	127,w
   199  01C7  0082               	movwf	2
   200  01C8                     init_ram0:	
   201                           ;Called with:
   202                           ;	high address of idata address in btemp 
   203                           ;	low address of idata address in btemp+1 
   204                           ;	low address of data in FSR
   205                           ;	high address + 1 of data in btemp-1
   206                           
   207  01C8  21C4  118A         	fcall	init_fetch0
   208  01CA  0080               	movwf	0
   209  01CB  0A84               	incf	4,f
   210  01CC  0804               	movf	4,w
   211  01CD  067D               	xorwf	125,w
   212  01CE  1903               	btfsc	3,2
   213  01CF  3400               	retlw	0
   214  01D0  0AFF               	incf	127,f
   215  01D1  1903               	btfsc	3,2
   216  01D2  0AFE               	incf	126,f
   217  01D3  29C8               	goto	init_ram0
   218                           
   219                           	psect	cstackCOMMON
   220  0070                     __pcstackCOMMON:	
   221  0070                     ?_seg_disp:	
   222  0070                     ??_seg_disp:	
   223                           ; 1 bytes @ 0x0
   224                           
   225  0070                     ?_digit_disp:	
   226                           ; 1 bytes @ 0x0
   227                           
   228  0070                     ?_my_ISR:	
   229                           ; 1 bytes @ 0x0
   230                           
   231  0070                     ?_main:	
   232                           ; 1 bytes @ 0x0
   233                           
   234  0070                     ?___awdiv:	
   235                           ; 1 bytes @ 0x0
   236                           
   237  0070                     ?___awmod:	
   238                           ; 2 bytes @ 0x0
   239                           
   240  0070                     ___awdiv@divisor:	
   241                           ; 2 bytes @ 0x0
   242                           
   243  0070                     ___awmod@divisor:	
   244                           ; 2 bytes @ 0x0
   245                           
   246                           
   247                           ; 2 bytes @ 0x0
   248  0070                     	ds	2
   249  0072                     ___awdiv@dividend:	
   250  0072                     ___awmod@dividend:	
   251                           ; 2 bytes @ 0x2
   252                           
   253                           
   254                           ; 2 bytes @ 0x2
   255  0072                     	ds	2
   256  0074                     ??___awdiv:	
   257  0074                     ??___awmod:	
   258                           ; 1 bytes @ 0x4
   259                           
   260                           
   261                           ; 1 bytes @ 0x4
   262  0074                     	ds	1
   263  0075                     ___awdiv@counter:	
   264  0075                     ___awmod@counter:	
   265                           ; 1 bytes @ 0x5
   266                           
   267                           
   268                           ; 1 bytes @ 0x5
   269  0075                     	ds	1
   270  0076                     ___awdiv@sign:	
   271  0076                     ___awmod@sign:	
   272                           ; 1 bytes @ 0x6
   273                           
   274                           
   275                           ; 1 bytes @ 0x6
   276  0076                     	ds	1
   277  0077                     ___awdiv@quotient:	
   278                           
   279                           ; 2 bytes @ 0x7
   280  0077                     	ds	2
   281  0079                     ??_digit_disp:	
   282                           
   283                           ; 1 bytes @ 0x9
   284  0079                     	ds	2
   285                           
   286                           	psect	cstackBANK0
   287  0020                     __pcstackBANK0:	
   288  0020                     seg_disp@seg:	
   289                           
   290                           ; 16 bytes @ 0x0
   291  0020                     	ds	16
   292  0030                     seg_disp@N:	
   293                           
   294                           ; 1 bytes @ 0x10
   295  0030                     	ds	1
   296  0031                     ??_my_ISR:	
   297                           
   298                           ; 1 bytes @ 0x11
   299  0031                     	ds	5
   300  0036                     ??_main:	
   301                           
   302                           	psect	maintext
   303  01A2                     __pmaintext:	
   304                           ; 1 bytes @ 0x16
   305 ;;
   306 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   307 ;;
   308 ;; *************** function _main *****************
   309 ;; Defined at:
   310 ;;		line 105 in file "main.c"
   311 ;; Parameters:    Size  Location     Type
   312 ;;		None
   313 ;; Auto vars:     Size  Location     Type
   314 ;;		None
   315 ;; Return value:  Size  Location     Type
   316 ;;                  1    wreg      void 
   317 ;; Registers used:
   318 ;;		wreg, status,2
   319 ;; Tracked objects:
   320 ;;		On entry : B00/0
   321 ;;		On exit  : 0/0
   322 ;;		Unchanged: 0/0
   323 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   324 ;;      Params:         0       0       0       0       0
   325 ;;      Locals:         0       0       0       0       0
   326 ;;      Temps:          0       0       0       0       0
   327 ;;      Totals:         0       0       0       0       0
   328 ;;Total ram usage:        0 bytes
   329 ;; Hardware stack levels required when called:    3
   330 ;; This function calls:
   331 ;;		Nothing
   332 ;; This function is called by:
   333 ;;		Startup code after reset
   334 ;; This function uses a non-reentrant model
   335 ;;
   336                           
   337                           
   338                           ;psect for function _main
   339  01A2                     _main:	
   340                           
   341                           ;main.c: 106: ANSEL = 0;
   342                           
   343                           ;incstack = 0
   344                           ; Regs used in _main: [wreg+status,2]
   345  01A2  1683               	bsf	3,5	;RP0=1, select bank1
   346  01A3  1303               	bcf	3,6	;RP1=0, select bank1
   347  01A4  019B               	clrf	27	;volatile
   348                           
   349                           ;main.c: 107: TRISA = TRISB = 0;
   350  01A5  0186               	clrf	6	;volatile
   351  01A6  0185               	clrf	5	;volatile
   352                           
   353                           ;main.c: 108: PORTA = 0x01;
   354  01A7  3001               	movlw	1
   355  01A8  1283               	bcf	3,5	;RP0=0, select bank0
   356  01A9  1303               	bcf	3,6	;RP1=0, select bank0
   357  01AA  0085               	movwf	5	;volatile
   358                           
   359                           ;main.c: 109: PORTB = 0xBF;
   360  01AB  30BF               	movlw	191
   361  01AC  0086               	movwf	6	;volatile
   362                           
   363                           ;main.c: 111: OPTION_REG = 0b11010100;
   364  01AD  30D4               	movlw	212
   365  01AE  1683               	bsf	3,5	;RP0=1, select bank1
   366  01AF  1303               	bcf	3,6	;RP1=0, select bank1
   367  01B0  0081               	movwf	1	;volatile
   368                           
   369                           ;main.c: 112: INTCON = 0b11100000;
   370  01B1  30E0               	movlw	224
   371  01B2  008B               	movwf	11	;volatile
   372  01B3                     l63:	
   373                           ;main.c: 114: while(1){
   374                           
   375  01B3  29B3               	goto	l63
   376  01B4                     __end_of_main:	
   377                           ;main.c: 115: }
   378                           ;main.c: 117: return;
   379                           
   380                           
   381                           	psect	text1
   382  018A                     __ptext1:	
   383 ;; *************** function _my_ISR *****************
   384 ;; Defined at:
   385 ;;		line 94 in file "main.c"
   386 ;; Parameters:    Size  Location     Type
   387 ;;		None
   388 ;; Auto vars:     Size  Location     Type
   389 ;;		None
   390 ;; Return value:  Size  Location     Type
   391 ;;                  1    wreg      void 
   392 ;; Registers used:
   393 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   394 ;; Tracked objects:
   395 ;;		On entry : 0/0
   396 ;;		On exit  : 0/0
   397 ;;		Unchanged: 0/0
   398 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   399 ;;      Params:         0       0       0       0       0
   400 ;;      Locals:         0       0       0       0       0
   401 ;;      Temps:          0       5       0       0       0
   402 ;;      Totals:         0       5       0       0       0
   403 ;;Total ram usage:        5 bytes
   404 ;; Hardware stack levels used:    1
   405 ;; Hardware stack levels required when called:    2
   406 ;; This function calls:
   407 ;;		_digit_disp
   408 ;; This function is called by:
   409 ;;		Interrupt level 1
   410 ;; This function uses a non-reentrant model
   411 ;;
   412                           
   413                           
   414                           ;psect for function _my_ISR
   415  018A                     _my_ISR:	
   416                           
   417                           ;main.c: 96: if( TMR0IE && TMR0IF )
   418  018A  1A8B               	btfsc	11,5	;volatile
   419  018B  1D0B               	btfss	11,2	;volatile
   420  018C  2995               	goto	i1l60
   421                           
   422                           ;main.c: 97: {
   423                           ;main.c: 98: ++count;
   424  018D  3001               	movlw	1
   425  018E  00B1               	movwf	??_my_ISR
   426  018F  0831               	movf	??_my_ISR,w
   427  0190  07C6               	addwf	_count,f
   428                           
   429                           ;main.c: 99: digit_disp();
   430  0191  118A  2026  118A   	fcall	_digit_disp
   431                           
   432                           ;main.c: 101: TMR0IF = 0;
   433  0194  110B               	bcf	11,2	;volatile
   434  0195                     i1l60:	
   435  0195  1283               	bcf	3,5	;RP0=0, select bank0
   436  0196  1303               	bcf	3,6	;RP1=0, select bank0
   437  0197  0835               	movf	??_my_ISR+4,w
   438  0198  00FF               	movwf	127
   439  0199  0834               	movf	??_my_ISR+3,w
   440  019A  008A               	movwf	10
   441  019B  0833               	movf	??_my_ISR+2,w
   442  019C  0084               	movwf	4
   443  019D  0E32               	swapf	(??_my_ISR+1)^0,w
   444  019E  0083               	movwf	3
   445  019F  0EFE               	swapf	126,f
   446  01A0  0E7E               	swapf	126,w
   447  01A1  0009               	retfie
   448  01A2                     __end_of_my_ISR:	
   449                           
   450                           	psect	intentry
   451  0004                     __pintentry:	
   452                           ;incstack = 0
   453                           ; Regs used in _my_ISR: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   454                           
   455  0004                     interrupt_function:	
   456  007E                     saved_w	set	btemp
   457  0004  00FE               	movwf	btemp
   458  0005  0E03               	swapf	3,w
   459  0006  1283               	bcf	3,5	;RP0=0, select bank0
   460  0007  1303               	bcf	3,6	;RP1=0, select bank0
   461  0008  00B2               	movwf	??_my_ISR+1
   462  0009  0804               	movf	4,w
   463  000A  00B3               	movwf	??_my_ISR+2
   464  000B  080A               	movf	10,w
   465  000C  00B4               	movwf	??_my_ISR+3
   466  000D  087F               	movf	btemp+1,w
   467  000E  00B5               	movwf	??_my_ISR+4
   468  000F  118A  298A         	ljmp	_my_ISR
   469                           
   470                           	psect	text2
   471  0026                     __ptext2:	
   472 ;; *************** function _digit_disp *****************
   473 ;; Defined at:
   474 ;;		line 44 in file "main.c"
   475 ;; Parameters:    Size  Location     Type
   476 ;;		None
   477 ;; Auto vars:     Size  Location     Type
   478 ;;		None
   479 ;; Return value:  Size  Location     Type
   480 ;;                  1    wreg      void 
   481 ;; Registers used:
   482 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   483 ;; Tracked objects:
   484 ;;		On entry : 0/0
   485 ;;		On exit  : 0/0
   486 ;;		Unchanged: 0/0
   487 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   488 ;;      Params:         0       0       0       0       0
   489 ;;      Locals:         0       0       0       0       0
   490 ;;      Temps:          2       0       0       0       0
   491 ;;      Totals:         2       0       0       0       0
   492 ;;Total ram usage:        2 bytes
   493 ;; Hardware stack levels used:    1
   494 ;; Hardware stack levels required when called:    1
   495 ;; This function calls:
   496 ;;		___awdiv
   497 ;;		___awmod
   498 ;;		_seg_disp
   499 ;; This function is called by:
   500 ;;		_my_ISR
   501 ;; This function uses a non-reentrant model
   502 ;;
   503                           
   504                           
   505                           ;psect for function _digit_disp
   506  0026                     _digit_disp:	
   507                           
   508                           ;main.c: 46: static unsigned char i=0;
   509                           ;main.c: 47: static unsigned char SS=0;
   510                           ;main.c: 48: static unsigned char MM=0;
   511                           ;main.c: 49: static unsigned char HH=0;
   512                           ;main.c: 51: if( count==244 )
   513                           
   514                           ;incstack = 0
   515                           ; Regs used in _digit_disp: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   516  0026  30F4               	movlw	244
   517  0027  1283               	bcf	3,5	;RP0=0, select bank0
   518  0028  1303               	bcf	3,6	;RP1=0, select bank0
   519  0029  0646               	xorwf	_count,w
   520  002A  1D03               	btfss	3,2
   521  002B  2847               	goto	i1l792
   522                           
   523                           ;main.c: 52: {
   524                           ;main.c: 53: ++SS;
   525  002C  3001               	movlw	1
   526  002D  00F9               	movwf	??_digit_disp
   527  002E  0879               	movf	??_digit_disp,w
   528  002F  07C9               	addwf	digit_disp@SS,f
   529                           
   530                           ;main.c: 54: count=0;
   531  0030  01C6               	clrf	_count
   532                           
   533                           ;main.c: 56: if( SS==60 ){ ++MM; SS=0; }
   534  0031  303C               	movlw	60
   535  0032  0649               	xorwf	digit_disp@SS,w
   536  0033  1D03               	btfss	3,2
   537  0034  283A               	goto	i1l782
   538  0035  3001               	movlw	1
   539  0036  00F9               	movwf	??_digit_disp
   540  0037  0879               	movf	??_digit_disp,w
   541  0038  07C8               	addwf	digit_disp@MM,f
   542  0039  01C9               	clrf	digit_disp@SS
   543  003A                     i1l782:	
   544                           
   545                           ;main.c: 57: if( MM==60 ){ ++HH; MM=0; }
   546  003A  303C               	movlw	60
   547  003B  0648               	xorwf	digit_disp@MM,w
   548  003C  1D03               	btfss	3,2
   549  003D  2843               	goto	i1l788
   550  003E  3001               	movlw	1
   551  003F  00F9               	movwf	??_digit_disp
   552  0040  0879               	movf	??_digit_disp,w
   553  0041  07C7               	addwf	digit_disp@HH,f
   554  0042  01C8               	clrf	digit_disp@MM
   555  0043                     i1l788:	
   556                           
   557                           ;main.c: 58: if( HH==24 ){ HH=0; }
   558  0043  3018               	movlw	24
   559  0044  0647               	xorwf	digit_disp@HH,w
   560  0045  1903               	btfsc	3,2
   561  0046  01C7               	clrf	digit_disp@HH
   562  0047                     i1l792:	
   563                           
   564                           ;main.c: 59: }
   565                           ;main.c: 61: if( i==0 )
   566  0047  084A               	movf	digit_disp@i,w
   567  0048  1D03               	btfss	3,2
   568  0049  2864               	goto	i1l800
   569                           
   570                           ;main.c: 62: {
   571                           ;main.c: 63: RA0 = 1;
   572  004A  1405               	bsf	5,0	;volatile
   573                           
   574                           ;main.c: 64: RA1 = RA2 = RA3 = 0;
   575  004B  1185               	bcf	5,3	;volatile
   576  004C  1105               	bcf	5,2	;volatile
   577  004D  1085               	bcf	5,1	;volatile
   578                           
   579                           ;main.c: 65: seg_disp( MM % 10 );
   580  004E  300A               	movlw	10
   581  004F  00F0               	movwf	___awmod@divisor
   582  0050  3000               	movlw	0
   583  0051  00F1               	movwf	___awmod@divisor+1
   584  0052  0848               	movf	digit_disp@MM,w
   585  0053  00F9               	movwf	??_digit_disp
   586  0054  01FA               	clrf	??_digit_disp+1
   587  0055  0879               	movf	??_digit_disp,w
   588  0056  00F2               	movwf	___awmod@dividend
   589  0057  087A               	movf	??_digit_disp+1,w
   590  0058  00F3               	movwf	___awmod@dividend+1
   591  0059  118A  2121  118A   	fcall	___awmod
   592  005C  0870               	movf	?___awmod,w
   593  005D  118A  216C         	fcall	_seg_disp
   594                           
   595                           ;main.c: 66: i = 1;
   596  005F  1283               	bcf	3,5	;RP0=0, select bank0
   597  0060  1303               	bcf	3,6	;RP1=0, select bank0
   598  0061  01CA               	clrf	digit_disp@i
   599  0062  0ACA               	incf	digit_disp@i,f
   600                           
   601                           ;main.c: 67: }
   602  0063  0008               	return
   603  0064                     i1l800:	
   604                           
   605                           ;main.c: 68: else if( i==1 )
   606  0064  034A               	decf	digit_disp@i,w
   607  0065  1D03               	btfss	3,2
   608  0066  2883               	goto	i1l808
   609                           
   610                           ;main.c: 69: {
   611                           ;main.c: 70: RA1 = 1;
   612  0067  1485               	bsf	5,1	;volatile
   613                           
   614                           ;main.c: 71: RA0 = RA2 = RA3 = 0;
   615  0068  1185               	bcf	5,3	;volatile
   616  0069  1105               	bcf	5,2	;volatile
   617  006A  1005               	bcf	5,0	;volatile
   618                           
   619                           ;main.c: 72: seg_disp( (char)MM / 10 );
   620  006B  300A               	movlw	10
   621  006C  00F0               	movwf	___awdiv@divisor
   622  006D  3000               	movlw	0
   623  006E  00F1               	movwf	___awdiv@divisor+1
   624  006F  0848               	movf	digit_disp@MM,w
   625  0070  00F9               	movwf	??_digit_disp
   626  0071  01FA               	clrf	??_digit_disp+1
   627  0072  0879               	movf	??_digit_disp,w
   628  0073  00F2               	movwf	___awdiv@dividend
   629  0074  087A               	movf	??_digit_disp+1,w
   630  0075  00F3               	movwf	___awdiv@dividend+1
   631  0076  118A  20C8  118A   	fcall	___awdiv
   632  0079  0870               	movf	?___awdiv,w
   633  007A  118A  216C         	fcall	_seg_disp
   634                           
   635                           ;main.c: 73: i = 2;
   636  007C  3002               	movlw	2
   637  007D  00F9               	movwf	??_digit_disp
   638  007E  0879               	movf	??_digit_disp,w
   639  007F  1283               	bcf	3,5	;RP0=0, select bank0
   640  0080  1303               	bcf	3,6	;RP1=0, select bank0
   641  0081  00CA               	movwf	digit_disp@i
   642                           
   643                           ;main.c: 74: }
   644  0082  0008               	return
   645  0083                     i1l808:	
   646                           
   647                           ;main.c: 75: else if( i==2 )
   648  0083  3002               	movlw	2
   649  0084  064A               	xorwf	digit_disp@i,w
   650  0085  1D03               	btfss	3,2
   651  0086  28AF               	goto	i1l54
   652                           
   653                           ;main.c: 76: {
   654                           ;main.c: 77: RA2 = 1;
   655  0087  1505               	bsf	5,2	;volatile
   656                           
   657                           ;main.c: 78: RA0 = RA1 = RA3 = 0;
   658  0088  1185               	bcf	5,3	;volatile
   659  0089  1085               	bcf	5,1	;volatile
   660  008A  1005               	bcf	5,0	;volatile
   661                           
   662                           ;main.c: 79: seg_disp( HH % 10 );
   663  008B  300A               	movlw	10
   664  008C  00F0               	movwf	___awmod@divisor
   665  008D  3000               	movlw	0
   666  008E  00F1               	movwf	___awmod@divisor+1
   667  008F  0847               	movf	digit_disp@HH,w
   668  0090  00F9               	movwf	??_digit_disp
   669  0091  01FA               	clrf	??_digit_disp+1
   670  0092  0879               	movf	??_digit_disp,w
   671  0093  00F2               	movwf	___awmod@dividend
   672  0094  087A               	movf	??_digit_disp+1,w
   673  0095  00F3               	movwf	___awmod@dividend+1
   674  0096  118A  2121  118A   	fcall	___awmod
   675  0099  0870               	movf	?___awmod,w
   676  009A  118A  216C  118A   	fcall	_seg_disp
   677                           
   678                           ;main.c: 81: RA4 = ( count<122 )? 0 : 1;
   679  009D  307A               	movlw	122
   680  009E  1283               	bcf	3,5	;RP0=0, select bank0
   681  009F  1303               	bcf	3,6	;RP1=0, select bank0
   682  00A0  0246               	subwf	_count,w
   683  00A1  1C03               	btfss	3,0
   684  00A2  28A7               	goto	u59_20
   685  00A3  1283               	bcf	3,5	;RP0=0, select bank0
   686  00A4  1303               	bcf	3,6	;RP1=0, select bank0
   687  00A5  1605               	bsf	5,4	;volatile
   688  00A6  28AA               	goto	i1l816
   689  00A7                     u59_20:	
   690  00A7  1283               	bcf	3,5	;RP0=0, select bank0
   691  00A8  1303               	bcf	3,6	;RP1=0, select bank0
   692  00A9  1205               	bcf	5,4	;volatile
   693  00AA                     i1l816:	
   694                           
   695                           ;main.c: 83: i = 3;
   696  00AA  3003               	movlw	3
   697  00AB  00F9               	movwf	??_digit_disp
   698  00AC  0879               	movf	??_digit_disp,w
   699  00AD  00CA               	movwf	digit_disp@i
   700                           
   701                           ;main.c: 84: }
   702  00AE  0008               	return
   703  00AF                     i1l54:	
   704                           
   705                           ;main.c: 85: else
   706                           ;main.c: 86: {
   707                           ;main.c: 87: RA3 = 1;
   708  00AF  1585               	bsf	5,3	;volatile
   709                           
   710                           ;main.c: 88: RA0 = RA1 = RA2 = 0;
   711  00B0  1105               	bcf	5,2	;volatile
   712  00B1  1085               	bcf	5,1	;volatile
   713  00B2  1005               	bcf	5,0	;volatile
   714                           
   715                           ;main.c: 89: seg_disp( (char)HH / 10 );
   716  00B3  300A               	movlw	10
   717  00B4  00F0               	movwf	___awdiv@divisor
   718  00B5  3000               	movlw	0
   719  00B6  00F1               	movwf	___awdiv@divisor+1
   720  00B7  0847               	movf	digit_disp@HH,w
   721  00B8  00F9               	movwf	??_digit_disp
   722  00B9  01FA               	clrf	??_digit_disp+1
   723  00BA  0879               	movf	??_digit_disp,w
   724  00BB  00F2               	movwf	___awdiv@dividend
   725  00BC  087A               	movf	??_digit_disp+1,w
   726  00BD  00F3               	movwf	___awdiv@dividend+1
   727  00BE  118A  20C8  118A   	fcall	___awdiv
   728  00C1  0870               	movf	?___awdiv,w
   729  00C2  118A  216C         	fcall	_seg_disp
   730                           
   731                           ;main.c: 90: i = 0;
   732  00C4  1283               	bcf	3,5	;RP0=0, select bank0
   733  00C5  1303               	bcf	3,6	;RP1=0, select bank0
   734  00C6  01CA               	clrf	digit_disp@i
   735  00C7  0008               	return
   736  00C8                     __end_of_digit_disp:	
   737                           
   738                           	psect	text3
   739  016C                     __ptext3:	
   740 ;; *************** function _seg_disp *****************
   741 ;; Defined at:
   742 ;;		line 32 in file "main.c"
   743 ;; Parameters:    Size  Location     Type
   744 ;;  N               1    wreg     unsigned char 
   745 ;; Auto vars:     Size  Location     Type
   746 ;;  N               1   16[BANK0 ] unsigned char 
   747 ;;  seg            16    0[BANK0 ] unsigned char [16]
   748 ;; Return value:  Size  Location     Type
   749 ;;                  1    wreg      void 
   750 ;; Registers used:
   751 ;;		wreg, fsr0l, fsr0h, status,2, status,0
   752 ;; Tracked objects:
   753 ;;		On entry : 0/0
   754 ;;		On exit  : 0/0
   755 ;;		Unchanged: 0/0
   756 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   757 ;;      Params:         0       0       0       0       0
   758 ;;      Locals:         0      17       0       0       0
   759 ;;      Temps:          4       0       0       0       0
   760 ;;      Totals:         4      17       0       0       0
   761 ;;Total ram usage:       21 bytes
   762 ;; Hardware stack levels used:    1
   763 ;; This function calls:
   764 ;;		Nothing
   765 ;; This function is called by:
   766 ;;		_digit_disp
   767 ;; This function uses a non-reentrant model
   768 ;;
   769                           
   770                           
   771                           ;psect for function _seg_disp
   772  016C                     _seg_disp:	
   773                           
   774                           ;incstack = 0
   775                           ; Regs used in _seg_disp: [wreg-fsr0h+status,2+status,0]
   776                           ;seg_disp@N stored from wreg
   777  016C  1283               	bcf	3,5	;RP0=0, select bank0
   778  016D  1303               	bcf	3,6	;RP1=0, select bank0
   779  016E  00B0               	movwf	seg_disp@N
   780                           
   781                           ;main.c: 36: char seg[16] = { 0b00111111, 0b00000110, 0b01011011,
   782                           ;main.c: 37: 0b01001111, 0b01100110, 0b01101101, 0b01111100, 0b00000111, 0b01111111,
   783                           ;main.c: 38: 0b01100111 };
   784  016F  3020               	movlw	seg_disp@seg& (0+255)
   785  0170  0084               	movwf	4
   786  0171  3036               	movlw	low seg_disp@F985
   787  0172  00F0               	movwf	??_seg_disp
   788  0173  0804               	movf	4,w
   789  0174  00F1               	movwf	??_seg_disp+1
   790  0175  3010               	movlw	16
   791  0176  00F2               	movwf	??_seg_disp+2
   792  0177                     u32_20:	
   793  0177  0870               	movf	??_seg_disp,w
   794  0178  0084               	movwf	4
   795  0179  1383               	bcf	3,7	;select IRP bank0
   796  017A  0800               	movf	0,w
   797  017B  00F3               	movwf	??_seg_disp+3
   798  017C  0AF0               	incf	??_seg_disp,f
   799  017D  0871               	movf	??_seg_disp+1,w
   800  017E  0084               	movwf	4
   801  017F  0873               	movf	??_seg_disp+3,w
   802  0180  0080               	movwf	0
   803  0181  0AF1               	incf	??_seg_disp+1,f
   804  0182  0BF2               	decfsz	??_seg_disp+2,f
   805  0183  2977               	goto	u32_20
   806                           
   807                           ;main.c: 41: PORTB = ~seg[N];
   808  0184  0830               	movf	seg_disp@N,w
   809  0185  3E20               	addlw	(low (seg_disp@seg| 0))& (0+255)
   810  0186  0084               	movwf	4
   811  0187  0900               	comf	0,w
   812  0188  0086               	movwf	6	;volatile
   813  0189  0008               	return
   814  018A                     __end_of_seg_disp:	
   815                           
   816                           	psect	text4
   817  0121                     __ptext4:	
   818 ;; *************** function ___awmod *****************
   819 ;; Defined at:
   820 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
   821 ;; Parameters:    Size  Location     Type
   822 ;;  divisor         2    0[COMMON] int 
   823 ;;  dividend        2    2[COMMON] int 
   824 ;; Auto vars:     Size  Location     Type
   825 ;;  sign            1    6[COMMON] unsigned char 
   826 ;;  counter         1    5[COMMON] unsigned char 
   827 ;; Return value:  Size  Location     Type
   828 ;;                  2    0[COMMON] int 
   829 ;; Registers used:
   830 ;;		wreg, status,2, status,0
   831 ;; Tracked objects:
   832 ;;		On entry : 0/0
   833 ;;		On exit  : 0/0
   834 ;;		Unchanged: 0/0
   835 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   836 ;;      Params:         4       0       0       0       0
   837 ;;      Locals:         2       0       0       0       0
   838 ;;      Temps:          1       0       0       0       0
   839 ;;      Totals:         7       0       0       0       0
   840 ;;Total ram usage:        7 bytes
   841 ;; Hardware stack levels used:    1
   842 ;; This function calls:
   843 ;;		Nothing
   844 ;; This function is called by:
   845 ;;		_digit_disp
   846 ;; This function uses a non-reentrant model
   847 ;;
   848                           
   849                           
   850                           ;psect for function ___awmod
   851  0121                     ___awmod:	
   852                           
   853                           ;incstack = 0
   854                           ; Regs used in ___awmod: [wreg+status,2+status,0]
   855  0121  01F6               	clrf	___awmod@sign
   856  0122  1FF3               	btfss	___awmod@dividend+1,7
   857  0123  292B               	goto	i1l740
   858  0124  09F2               	comf	___awmod@dividend,f
   859  0125  09F3               	comf	___awmod@dividend+1,f
   860  0126  0AF2               	incf	___awmod@dividend,f
   861  0127  1903               	skipnz
   862  0128  0AF3               	incf	___awmod@dividend+1,f
   863  0129  01F6               	clrf	___awmod@sign
   864  012A  0AF6               	incf	___awmod@sign,f
   865  012B                     i1l740:	
   866  012B  1FF1               	btfss	___awmod@divisor+1,7
   867  012C  2932               	goto	i1l744
   868  012D  09F0               	comf	___awmod@divisor,f
   869  012E  09F1               	comf	___awmod@divisor+1,f
   870  012F  0AF0               	incf	___awmod@divisor,f
   871  0130  1903               	skipnz
   872  0131  0AF1               	incf	___awmod@divisor+1,f
   873  0132                     i1l744:	
   874  0132  0870               	movf	___awmod@divisor,w
   875  0133  0471               	iorwf	___awmod@divisor+1,w
   876  0134  1903               	btfsc	3,2
   877  0135  295F               	goto	i1l762
   878  0136  01F5               	clrf	___awmod@counter
   879  0137  0AF5               	incf	___awmod@counter,f
   880  0138                     i1l752:	
   881  0138  1BF1               	btfsc	___awmod@divisor+1,7
   882  0139  2946               	goto	i1l754
   883  013A  3001               	movlw	1
   884  013B                     u46_25:	
   885  013B  1003               	clrc
   886  013C  0DF0               	rlf	___awmod@divisor,f
   887  013D  0DF1               	rlf	___awmod@divisor+1,f
   888  013E  3EFF               	addlw	-1
   889  013F  1D03               	skipz
   890  0140  293B               	goto	u46_25
   891  0141  3001               	movlw	1
   892  0142  00F4               	movwf	??___awmod
   893  0143  0874               	movf	??___awmod,w
   894  0144  07F5               	addwf	___awmod@counter,f
   895  0145  2938               	goto	i1l752
   896  0146                     i1l754:	
   897  0146  0871               	movf	___awmod@divisor+1,w
   898  0147  0273               	subwf	___awmod@dividend+1,w
   899  0148  1D03               	skipz
   900  0149  294C               	goto	u48_25
   901  014A  0870               	movf	___awmod@divisor,w
   902  014B  0272               	subwf	___awmod@dividend,w
   903  014C                     u48_25:	
   904  014C  1C03               	skipc
   905  014D  2954               	goto	i1l758
   906  014E  0870               	movf	___awmod@divisor,w
   907  014F  02F2               	subwf	___awmod@dividend,f
   908  0150  0871               	movf	___awmod@divisor+1,w
   909  0151  1C03               	skipc
   910  0152  03F3               	decf	___awmod@dividend+1,f
   911  0153  02F3               	subwf	___awmod@dividend+1,f
   912  0154                     i1l758:	
   913  0154  3001               	movlw	1
   914  0155                     u49_25:	
   915  0155  1003               	clrc
   916  0156  0CF1               	rrf	___awmod@divisor+1,f
   917  0157  0CF0               	rrf	___awmod@divisor,f
   918  0158  3EFF               	addlw	-1
   919  0159  1D03               	skipz
   920  015A  2955               	goto	u49_25
   921  015B  3001               	movlw	1
   922  015C  02F5               	subwf	___awmod@counter,f
   923  015D  1D03               	btfss	3,2
   924  015E  2946               	goto	i1l754
   925  015F                     i1l762:	
   926  015F  0876               	movf	___awmod@sign,w
   927  0160  1903               	btfsc	3,2
   928  0161  2967               	goto	i1l766
   929  0162  09F2               	comf	___awmod@dividend,f
   930  0163  09F3               	comf	___awmod@dividend+1,f
   931  0164  0AF2               	incf	___awmod@dividend,f
   932  0165  1903               	skipnz
   933  0166  0AF3               	incf	___awmod@dividend+1,f
   934  0167                     i1l766:	
   935  0167  0873               	movf	___awmod@dividend+1,w
   936  0168  00F1               	movwf	?___awmod+1
   937  0169  0872               	movf	___awmod@dividend,w
   938  016A  00F0               	movwf	?___awmod
   939  016B  0008               	return
   940  016C                     __end_of___awmod:	
   941                           
   942                           	psect	text5
   943  00C8                     __ptext5:	
   944 ;; *************** function ___awdiv *****************
   945 ;; Defined at:
   946 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
   947 ;; Parameters:    Size  Location     Type
   948 ;;  divisor         2    0[COMMON] int 
   949 ;;  dividend        2    2[COMMON] int 
   950 ;; Auto vars:     Size  Location     Type
   951 ;;  quotient        2    7[COMMON] int 
   952 ;;  sign            1    6[COMMON] unsigned char 
   953 ;;  counter         1    5[COMMON] unsigned char 
   954 ;; Return value:  Size  Location     Type
   955 ;;                  2    0[COMMON] int 
   956 ;; Registers used:
   957 ;;		wreg, status,2, status,0
   958 ;; Tracked objects:
   959 ;;		On entry : 0/0
   960 ;;		On exit  : 0/0
   961 ;;		Unchanged: 0/0
   962 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   963 ;;      Params:         4       0       0       0       0
   964 ;;      Locals:         4       0       0       0       0
   965 ;;      Temps:          1       0       0       0       0
   966 ;;      Totals:         9       0       0       0       0
   967 ;;Total ram usage:        9 bytes
   968 ;; Hardware stack levels used:    1
   969 ;; This function calls:
   970 ;;		Nothing
   971 ;; This function is called by:
   972 ;;		_digit_disp
   973 ;; This function uses a non-reentrant model
   974 ;;
   975                           
   976                           
   977                           ;psect for function ___awdiv
   978  00C8                     ___awdiv:	
   979                           
   980                           ;incstack = 0
   981                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
   982  00C8  01F6               	clrf	___awdiv@sign
   983  00C9  1FF1               	btfss	___awdiv@divisor+1,7
   984  00CA  28D2               	goto	i1l696
   985  00CB  09F0               	comf	___awdiv@divisor,f
   986  00CC  09F1               	comf	___awdiv@divisor+1,f
   987  00CD  0AF0               	incf	___awdiv@divisor,f
   988  00CE  1903               	skipnz
   989  00CF  0AF1               	incf	___awdiv@divisor+1,f
   990  00D0  01F6               	clrf	___awdiv@sign
   991  00D1  0AF6               	incf	___awdiv@sign,f
   992  00D2                     i1l696:	
   993  00D2  1FF3               	btfss	___awdiv@dividend+1,7
   994  00D3  28DD               	goto	i1l702
   995  00D4  09F2               	comf	___awdiv@dividend,f
   996  00D5  09F3               	comf	___awdiv@dividend+1,f
   997  00D6  0AF2               	incf	___awdiv@dividend,f
   998  00D7  1903               	skipnz
   999  00D8  0AF3               	incf	___awdiv@dividend+1,f
  1000  00D9  3001               	movlw	1
  1001  00DA  00F4               	movwf	??___awdiv
  1002  00DB  0874               	movf	??___awdiv,w
  1003  00DC  06F6               	xorwf	___awdiv@sign,f
  1004  00DD                     i1l702:	
  1005  00DD  01F7               	clrf	___awdiv@quotient
  1006  00DE  01F8               	clrf	___awdiv@quotient+1
  1007  00DF  0870               	movf	___awdiv@divisor,w
  1008  00E0  0471               	iorwf	___awdiv@divisor+1,w
  1009  00E1  1903               	btfsc	3,2
  1010  00E2  2914               	goto	i1l724
  1011  00E3  01F5               	clrf	___awdiv@counter
  1012  00E4  0AF5               	incf	___awdiv@counter,f
  1013  00E5                     i1l712:	
  1014  00E5  1BF1               	btfsc	___awdiv@divisor+1,7
  1015  00E6  28F3               	goto	i1l714
  1016  00E7  3001               	movlw	1
  1017  00E8                     u36_25:	
  1018  00E8  1003               	clrc
  1019  00E9  0DF0               	rlf	___awdiv@divisor,f
  1020  00EA  0DF1               	rlf	___awdiv@divisor+1,f
  1021  00EB  3EFF               	addlw	-1
  1022  00EC  1D03               	skipz
  1023  00ED  28E8               	goto	u36_25
  1024  00EE  3001               	movlw	1
  1025  00EF  00F4               	movwf	??___awdiv
  1026  00F0  0874               	movf	??___awdiv,w
  1027  00F1  07F5               	addwf	___awdiv@counter,f
  1028  00F2  28E5               	goto	i1l712
  1029  00F3                     i1l714:	
  1030  00F3  3001               	movlw	1
  1031  00F4                     u38_25:	
  1032  00F4  1003               	clrc
  1033  00F5  0DF7               	rlf	___awdiv@quotient,f
  1034  00F6  0DF8               	rlf	___awdiv@quotient+1,f
  1035  00F7  3EFF               	addlw	-1
  1036  00F8  1D03               	skipz
  1037  00F9  28F4               	goto	u38_25
  1038  00FA  0871               	movf	___awdiv@divisor+1,w
  1039  00FB  0273               	subwf	___awdiv@dividend+1,w
  1040  00FC  1D03               	skipz
  1041  00FD  2900               	goto	u39_25
  1042  00FE  0870               	movf	___awdiv@divisor,w
  1043  00FF  0272               	subwf	___awdiv@dividend,w
  1044  0100                     u39_25:	
  1045  0100  1C03               	skipc
  1046  0101  2909               	goto	i1l720
  1047  0102  0870               	movf	___awdiv@divisor,w
  1048  0103  02F2               	subwf	___awdiv@dividend,f
  1049  0104  0871               	movf	___awdiv@divisor+1,w
  1050  0105  1C03               	skipc
  1051  0106  03F3               	decf	___awdiv@dividend+1,f
  1052  0107  02F3               	subwf	___awdiv@dividend+1,f
  1053  0108  1477               	bsf	___awdiv@quotient,0
  1054  0109                     i1l720:	
  1055  0109  3001               	movlw	1
  1056  010A                     u40_25:	
  1057  010A  1003               	clrc
  1058  010B  0CF1               	rrf	___awdiv@divisor+1,f
  1059  010C  0CF0               	rrf	___awdiv@divisor,f
  1060  010D  3EFF               	addlw	-1
  1061  010E  1D03               	skipz
  1062  010F  290A               	goto	u40_25
  1063  0110  3001               	movlw	1
  1064  0111  02F5               	subwf	___awdiv@counter,f
  1065  0112  1D03               	btfss	3,2
  1066  0113  28F3               	goto	i1l714
  1067  0114                     i1l724:	
  1068  0114  0876               	movf	___awdiv@sign,w
  1069  0115  1903               	btfsc	3,2
  1070  0116  291C               	goto	i1l728
  1071  0117  09F7               	comf	___awdiv@quotient,f
  1072  0118  09F8               	comf	___awdiv@quotient+1,f
  1073  0119  0AF7               	incf	___awdiv@quotient,f
  1074  011A  1903               	skipnz
  1075  011B  0AF8               	incf	___awdiv@quotient+1,f
  1076  011C                     i1l728:	
  1077  011C  0878               	movf	___awdiv@quotient+1,w
  1078  011D  00F1               	movwf	?___awdiv+1
  1079  011E  0877               	movf	___awdiv@quotient,w
  1080  011F  00F0               	movwf	?___awdiv
  1081  0120  0008               	return
  1082  0121                     __end_of___awdiv:	
  1083  007E                     btemp	set	126	;btemp
  1084  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        16
    BSS         5
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     11      11
    BANK0            80     22      43
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _my_ISR in COMMON

    _my_ISR->_digit_disp
    _digit_disp->___awdiv

Critical Paths under _main in BANK0

    None.

Critical Paths under _my_ISR in BANK0

    _digit_disp->_seg_disp

Critical Paths under _main in BANK1

    None.

Critical Paths under _my_ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _my_ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _my_ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 0
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (1) _my_ISR                                               5     5      0    1066
                                             17 BANK0      5     5      0
                         _digit_disp
 ---------------------------------------------------------------------------------
 (2) _digit_disp                                           2     2      0    1066
                                              9 COMMON     2     2      0
                            ___awdiv
                            ___awmod
                           _seg_disp
 ---------------------------------------------------------------------------------
 (3) _seg_disp                                            21    21      0      46
                                              0 COMMON     4     4      0
                                              0 BANK0     17    17      0
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              7     3      4     508
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     512
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)

 _my_ISR (ROOT)
   _digit_disp
     ___awdiv
     ___awmod
     _seg_disp

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     16      2B       5       53.8%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      B       B       1       78.6%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      36      12        0.0%
ABS                  0      0      36       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Sat Jan 28 10:42:12 2017

                      pc 0002              __CFG_CP$OFF 0000                       l63 01B3  
           ___awdiv@sign 0076                       fsr 0004                      _RA0 0028  
                    _RA1 0029                      _RA2 002A                      _RA3 002B  
                    _RA4 002C             __CFG_CPD$OFF 0000                      fsr0 0004  
                    indf 0000             ___awmod@sign 0076             __CFG_FOSC$HS 0000  
           __CFG_LVP$OFF 0000                     i1l60 0195                     i1l54 00AF  
           __CFG_WRT$OFF 0000            __CFG_FCMEN$ON 0000                     _main 01A2  
                   btemp 007E            __CFG_BOREN$ON 0000                     start 0011  
          __CFG_IESO$OFF 0000            __CFG_MCLRE$ON 0000                    ?_main 0070  
        __end_of___awdiv 0121            __CFG_WDTE$OFF 0000          __end_of___awmod 016C  
                  _ANSEL 009B          ___awdiv@divisor 0070                    i1l702 00DD  
                  i1l720 0109                    i1l712 00E5                    i1l800 0064  
                  i1l714 00F3                    i1l724 0114                    i1l740 012B  
                  i1l728 011C                    i1l752 0138                    i1l744 0132  
                  i1l816 00AA                    i1l808 0083                    i1l754 0146  
                  i1l762 015F                    i1l766 0167                    i1l758 0154  
                  i1l782 003A                    i1l696 00D2                    i1l792 0047  
                  i1l788 0043          ___awdiv@counter 0075                    u32_20 0177  
                  u40_25 010A                    _PORTA 0005                    _PORTB 0006  
                  u36_25 00E8                    u38_25 00F4                    u46_25 013B  
                  u39_25 0100                    u48_25 014C                    _TRISA 0085  
                  _TRISB 0086                    u49_25 0155                    u59_20 00A7  
         __CFG_CCPMX$RB0 0000                    _count 0046                    pclath 000A  
                  status 0003                    wtemp0 007E          __initialization 0013  
           __end_of_main 01B4                   ??_main 0036         ___awdiv@dividend 0072  
                 _INTCON 000B                   _TMR0IE 005D                   _TMR0IF 005A  
         __CFG_PWRTE$OFF 0000                ??___awdiv 0074                ??___awmod 0074  
                 _my_ISR 018A         ___awdiv@quotient 0077          ___awmod@divisor 0070  
        ___awmod@counter 0075         __end_of_seg_disp 018A                   saved_w 007E  
__end_of__initialization 0023           __pcstackCOMMON 0070             __pidataBANK0 01B4  
             __pbssBANK0 0046              seg_disp@seg 0020               __pmaintext 01A2  
             _digit_disp 0026               __pintentry 0004                  ?_my_ISR 0070  
              ?_seg_disp 0070                  ___awdiv 00C8                  ___awmod 0121  
        __size_of_my_ISR 0018                  __ptext1 018A                  __ptext2 0026  
                __ptext3 016C                  __ptext4 0121                  __ptext5 00C8  
       ___awmod@dividend 0072     end_of_initialization 0023               ??_seg_disp 0070  
            ?_digit_disp 0070           __end_of_my_ISR 01A2      start_initialization 0013  
    __size_of_digit_disp 00A2               init_fetch0 01C4              __pdataBANK0 0036  
               ??_my_ISR 0031             seg_disp@F985 0036                ___latbits 0001  
          __pcstackBANK0 0020        __size_of_seg_disp 001E                 ?___awdiv 0070  
               ?___awmod 0070        interrupt_function 0004             ??_digit_disp 0079  
     __end_of_digit_disp 00C8         __size_of___awdiv 0059         __size_of___awmod 004B  
              seg_disp@N 0030            __size_of_main 0012                 _seg_disp 016C  
           digit_disp@HH 0047             digit_disp@MM 0048             digit_disp@SS 0049  
               init_ram0 01C8                 intlevel1 0000              digit_disp@i 004A  
             _OPTION_REG 0081  
